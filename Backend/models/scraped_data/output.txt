Endpoint: get/v1/mappers
HTTP Method: Get mapper
Method Description: Get the mapped keys between your data source and our recommender system.
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/mappers");
var request = new RestRequest(Method.GET);
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Get,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/mappers"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/mappers"

	req, _ := http.NewRequest("GET", url, nil)

	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/mappers")
  .get()
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.get("https://api.recommender.gigalogy.com/v1/mappers")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/mappers",
  "method": "GET",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = null;

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("GET", "https://api.recommender.gigalogy.com/v1/mappers");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "GET",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/mappers",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'GET',
  url: 'https://api.recommender.gigalogy.com/v1/mappers',
  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("GET", "https://api.recommender.gigalogy.com/v1/mappers");

req.headers({
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/mappers"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"GET"];
[request setAllHTTPHeaderFields:headers];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/mappers",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "GET",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/mappers');
$request-&gt;setMethod(HTTP_METH_GET);

$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/mappers');
$request-&gt;setRequestMethod('GET');
$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

headers = {
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("GET", "/v1/mappers", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/mappers"

headers = {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("GET", url, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/mappers")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request GET \
  --url https://api.recommender.gigalogy.com/v1/mappers \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'project-key: SOME_STRING_VALUE'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/mappers")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "GET"
request.allHTTPHeaderFields = headers

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: put/v1/mappers
HTTP Method: Update a mapper
Method Description: This endpoint updates the mapped keys. Please checkout the schema from the
request body section for details about the key type and supported values.

### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| item_id | str | str | item_id is the unit of recommended items and typically should be the Unique ID of your products. choose the parameter from your data source that you want to be the unit of recommendation. |
| title | str | str | Represents your product / item title. |
| second_title | Optional[str] | str | If your item has a catch copy / headline field you can assign it here. |
| third_title | Optional[str] | str | If you have another field you want to use as a title level assign it here. |
| fourth_title | Optional[str] | str | If you have another field you want to use as a title level assign it here. |
| availability | str | bool | Represents whether your item is available or not. Data type for this key is `boolean`. Make sure to adjust your data accordingly. |
| description | Optional[str] | str | Represents your product details information. |
| image_url | Optional[str] | Depends on your data source | Represents image url of your data source. *This is required if you want to use image recommend end point* |
| image_url_type | Optional[Enum] | Selected enum value | Based on this our recommended will choose how to process your image url data. Available values are `STR`, `LIST_STR`, `LIST_DICT`, `DICT` *This is required if you want to use image recommend end point* |
| item_url | str | str | Represents your product / item details page url |
| price | str | int | Represents your product / item price. |
| category | List[str] | str | Represents your category list. You can add multiple category here. |
| flag | List[str] | bool | Represents list of flags available in your dataset. Flag value data type is `boolean`. Please do not use keys which contains other types of data as flag. |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/mappers");
var request = new RestRequest(Method.PUT);
request.AddHeader("content-type", "application/json");
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
request.AddParameter("application/json", "{\"key_map\":{\"item_id\":\"item_id\",\"title\":\"title\",\"second_title\":\"string\",\"third_title\":\"string\",\"fourth_title\":\"string\",\"availability\":\"availability\",\"description\":\"string\",\"image_url\":\"string\",\"image_url_type\":\"STR or LIST_STR or LIST_DICT or DICT\",\"item_url\":\"string\",\"price\":\"price\",\"categories\":[{\"name\":\"category_1\",\"separator\":\"_\"},{\"name\":\"category_2\",\"separator\":\"\"}],\"flag\":[\"condition\"],\"average_rating\":\"string\",\"user_ratings_total\":\"string\",\"custom\":[{\"name\":\"colum3\",\"data_type\":\"FLOAT\"},{\"name\":\"column4\",\"data_type\":\"INT\"}],\"item_nearby_calculation\":false,\"keywords_group_by\":\"string\",\"gpt_enabled\":false}}", ParameterType.RequestBody);
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Put,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/mappers"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
    Content = new StringContent("{\"key_map\":{\"item_id\":\"item_id\",\"title\":\"title\",\"second_title\":\"string\",\"third_title\":\"string\",\"fourth_title\":\"string\",\"availability\":\"availability\",\"description\":\"string\",\"image_url\":\"string\",\"image_url_type\":\"STR or LIST_STR or LIST_DICT or DICT\",\"item_url\":\"string\",\"price\":\"price\",\"categories\":[{\"name\":\"category_1\",\"separator\":\"_\"},{\"name\":\"category_2\",\"separator\":\"\"}],\"flag\":[\"condition\"],\"average_rating\":\"string\",\"user_ratings_total\":\"string\",\"custom\":[{\"name\":\"colum3\",\"data_type\":\"FLOAT\"},{\"name\":\"column4\",\"data_type\":\"INT\"}],\"item_nearby_calculation\":false,\"keywords_group_by\":\"string\",\"gpt_enabled\":false}}")
    {
        Headers =
        {
            ContentType = new MediaTypeHeaderValue("application/json")
        }
    }
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"strings"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/mappers"

	payload := strings.NewReader("{\"key_map\":{\"item_id\":\"item_id\",\"title\":\"title\",\"second_title\":\"string\",\"third_title\":\"string\",\"fourth_title\":\"string\",\"availability\":\"availability\",\"description\":\"string\",\"image_url\":\"string\",\"image_url_type\":\"STR or LIST_STR or LIST_DICT or DICT\",\"item_url\":\"string\",\"price\":\"price\",\"categories\":[{\"name\":\"category_1\",\"separator\":\"_\"},{\"name\":\"category_2\",\"separator\":\"\"}],\"flag\":[\"condition\"],\"average_rating\":\"string\",\"user_ratings_total\":\"string\",\"custom\":[{\"name\":\"colum3\",\"data_type\":\"FLOAT\"},{\"name\":\"column4\",\"data_type\":\"INT\"}],\"item_nearby_calculation\":false,\"keywords_group_by\":\"string\",\"gpt_enabled\":false}}")

	req, _ := http.NewRequest("PUT", url, payload)

	req.Header.Add("content-type", "application/json")
	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

MediaType mediaType = MediaType.parse("application/json");
RequestBody body = RequestBody.create(mediaType, "{\"key_map\":{\"item_id\":\"item_id\",\"title\":\"title\",\"second_title\":\"string\",\"third_title\":\"string\",\"fourth_title\":\"string\",\"availability\":\"availability\",\"description\":\"string\",\"image_url\":\"string\",\"image_url_type\":\"STR or LIST_STR or LIST_DICT or DICT\",\"item_url\":\"string\",\"price\":\"price\",\"categories\":[{\"name\":\"category_1\",\"separator\":\"_\"},{\"name\":\"category_2\",\"separator\":\"\"}],\"flag\":[\"condition\"],\"average_rating\":\"string\",\"user_ratings_total\":\"string\",\"custom\":[{\"name\":\"colum3\",\"data_type\":\"FLOAT\"},{\"name\":\"column4\",\"data_type\":\"INT\"}],\"item_nearby_calculation\":false,\"keywords_group_by\":\"string\",\"gpt_enabled\":false}}");
Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/mappers")
  .put(body)
  .addHeader("content-type", "application/json")
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.put("https://api.recommender.gigalogy.com/v1/mappers")
  .header("content-type", "application/json")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .body("{\"key_map\":{\"item_id\":\"item_id\",\"title\":\"title\",\"second_title\":\"string\",\"third_title\":\"string\",\"fourth_title\":\"string\",\"availability\":\"availability\",\"description\":\"string\",\"image_url\":\"string\",\"image_url_type\":\"STR or LIST_STR or LIST_DICT or DICT\",\"item_url\":\"string\",\"price\":\"price\",\"categories\":[{\"name\":\"category_1\",\"separator\":\"_\"},{\"name\":\"category_2\",\"separator\":\"\"}],\"flag\":[\"condition\"],\"average_rating\":\"string\",\"user_ratings_total\":\"string\",\"custom\":[{\"name\":\"colum3\",\"data_type\":\"FLOAT\"},{\"name\":\"column4\",\"data_type\":\"INT\"}],\"item_nearby_calculation\":false,\"keywords_group_by\":\"string\",\"gpt_enabled\":false}}")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/mappers",
  "method": "PUT",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  },
  "processData": false,
  "data": "{\"key_map\":{\"item_id\":\"item_id\",\"title\":\"title\",\"second_title\":\"string\",\"third_title\":\"string\",\"fourth_title\":\"string\",\"availability\":\"availability\",\"description\":\"string\",\"image_url\":\"string\",\"image_url_type\":\"STR or LIST_STR or LIST_DICT or DICT\",\"item_url\":\"string\",\"price\":\"price\",\"categories\":[{\"name\":\"category_1\",\"separator\":\"_\"},{\"name\":\"category_2\",\"separator\":\"\"}],\"flag\":[\"condition\"],\"average_rating\":\"string\",\"user_ratings_total\":\"string\",\"custom\":[{\"name\":\"colum3\",\"data_type\":\"FLOAT\"},{\"name\":\"column4\",\"data_type\":\"INT\"}],\"item_nearby_calculation\":false,\"keywords_group_by\":\"string\",\"gpt_enabled\":false}}"
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = JSON.stringify({
  "key_map": {
    "item_id": "item_id",
    "title": "title",
    "second_title": "string",
    "third_title": "string",
    "fourth_title": "string",
    "availability": "availability",
    "description": "string",
    "image_url": "string",
    "image_url_type": "STR or LIST_STR or LIST_DICT or DICT",
    "item_url": "string",
    "price": "price",
    "categories": [
      {
        "name": "category_1",
        "separator": "_"
      },
      {
        "name": "category_2",
        "separator": ""
      }
    ],
    "flag": [
      "condition"
    ],
    "average_rating": "string",
    "user_ratings_total": "string",
    "custom": [
      {
        "name": "colum3",
        "data_type": "FLOAT"
      },
      {
        "name": "column4",
        "data_type": "INT"
      }
    ],
    "item_nearby_calculation": false,
    "keywords_group_by": "string",
    "gpt_enabled": false
  }
});

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("PUT", "https://api.recommender.gigalogy.com/v1/mappers");
xhr.setRequestHeader("content-type", "application/json");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "PUT",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/mappers",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.write(JSON.stringify({
  key_map: {
    item_id: 'item_id',
    title: 'title',
    second_title: 'string',
    third_title: 'string',
    fourth_title: 'string',
    availability: 'availability',
    description: 'string',
    image_url: 'string',
    image_url_type: 'STR or LIST_STR or LIST_DICT or DICT',
    item_url: 'string',
    price: 'price',
    categories: [{name: 'category_1', separator: '_'}, {name: 'category_2', separator: ''}],
    flag: ['condition'],
    average_rating: 'string',
    user_ratings_total: 'string',
    custom: [{name: 'colum3', data_type: 'FLOAT'}, {name: 'column4', data_type: 'INT'}],
    item_nearby_calculation: false,
    keywords_group_by: 'string',
    gpt_enabled: false
  }
}));
req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'PUT',
  url: 'https://api.recommender.gigalogy.com/v1/mappers',
  headers: {
    'content-type': 'application/json',
    'project-key': 'SOME_STRING_VALUE',
    'api-key': 'SOME_STRING_VALUE'
  },
  body: {
    key_map: {
      item_id: 'item_id',
      title: 'title',
      second_title: 'string',
      third_title: 'string',
      fourth_title: 'string',
      availability: 'availability',
      description: 'string',
      image_url: 'string',
      image_url_type: 'STR or LIST_STR or LIST_DICT or DICT',
      item_url: 'string',
      price: 'price',
      categories: [{name: 'category_1', separator: '_'}, {name: 'category_2', separator: ''}],
      flag: ['condition'],
      average_rating: 'string',
      user_ratings_total: 'string',
      custom: [{name: 'colum3', data_type: 'FLOAT'}, {name: 'column4', data_type: 'INT'}],
      item_nearby_calculation: false,
      keywords_group_by: 'string',
      gpt_enabled: false
    }
  },
  json: true
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("PUT", "https://api.recommender.gigalogy.com/v1/mappers");

req.headers({
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.type("json");
req.send({
  "key_map": {
    "item_id": "item_id",
    "title": "title",
    "second_title": "string",
    "third_title": "string",
    "fourth_title": "string",
    "availability": "availability",
    "description": "string",
    "image_url": "string",
    "image_url_type": "STR or LIST_STR or LIST_DICT or DICT",
    "item_url": "string",
    "price": "price",
    "categories": [
      {
        "name": "category_1",
        "separator": "_"
      },
      {
        "name": "category_2",
        "separator": ""
      }
    ],
    "flag": [
      "condition"
    ],
    "average_rating": "string",
    "user_ratings_total": "string",
    "custom": [
      {
        "name": "colum3",
        "data_type": "FLOAT"
      },
      {
        "name": "column4",
        "data_type": "INT"
      }
    ],
    "item_nearby_calculation": false,
    "keywords_group_by": "string",
    "gpt_enabled": false
  }
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"application/json",
                           @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };
NSDictionary *parameters = @{ @"key_map": @{ @"item_id": @"item_id", @"title": @"title", @"second_title": @"string", @"third_title": @"string", @"fourth_title": @"string", @"availability": @"availability", @"description": @"string", @"image_url": @"string", @"image_url_type": @"STR or LIST_STR or LIST_DICT or DICT", @"item_url": @"string", @"price": @"price", @"categories": @[ @{ @"name": @"category_1", @"separator": @"_" }, @{ @"name": @"category_2", @"separator": @"" } ], @"flag": @[ @"condition" ], @"average_rating": @"string", @"user_ratings_total": @"string", @"custom": @[ @{ @"name": @"colum3", @"data_type": @"FLOAT" }, @{ @"name": @"column4", @"data_type": @"INT" } ], @"item_nearby_calculation": @NO, @"keywords_group_by": @"string", @"gpt_enabled": @NO } };

NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/mappers"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"PUT"];
[request setAllHTTPHeaderFields:headers];
[request setHTTPBody:postData];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/mappers",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "PUT",
  CURLOPT_POSTFIELDS =&gt; "{\"key_map\":{\"item_id\":\"item_id\",\"title\":\"title\",\"second_title\":\"string\",\"third_title\":\"string\",\"fourth_title\":\"string\",\"availability\":\"availability\",\"description\":\"string\",\"image_url\":\"string\",\"image_url_type\":\"STR or LIST_STR or LIST_DICT or DICT\",\"item_url\":\"string\",\"price\":\"price\",\"categories\":[{\"name\":\"category_1\",\"separator\":\"_\"},{\"name\":\"category_2\",\"separator\":\"\"}],\"flag\":[\"condition\"],\"average_rating\":\"string\",\"user_ratings_total\":\"string\",\"custom\":[{\"name\":\"colum3\",\"data_type\":\"FLOAT\"},{\"name\":\"column4\",\"data_type\":\"INT\"}],\"item_nearby_calculation\":false,\"keywords_group_by\":\"string\",\"gpt_enabled\":false}}",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "content-type: application/json",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/mappers');
$request-&gt;setMethod(HTTP_METH_PUT);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$request-&gt;setBody('{"key_map":{"item_id":"item_id","title":"title","second_title":"string","third_title":"string","fourth_title":"string","availability":"availability","description":"string","image_url":"string","image_url_type":"STR or LIST_STR or LIST_DICT or DICT","item_url":"string","price":"price","categories":[{"name":"category_1","separator":"_"},{"name":"category_2","separator":""}],"flag":["condition"],"average_rating":"string","user_ratings_total":"string","custom":[{"name":"colum3","data_type":"FLOAT"},{"name":"column4","data_type":"INT"}],"item_nearby_calculation":false,"keywords_group_by":"string","gpt_enabled":false}}');

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$body = new http\Message\Body;
$body-&gt;append('{"key_map":{"item_id":"item_id","title":"title","second_title":"string","third_title":"string","fourth_title":"string","availability":"availability","description":"string","image_url":"string","image_url_type":"STR or LIST_STR or LIST_DICT or DICT","item_url":"string","price":"price","categories":[{"name":"category_1","separator":"_"},{"name":"category_2","separator":""}],"flag":["condition"],"average_rating":"string","user_ratings_total":"string","custom":[{"name":"colum3","data_type":"FLOAT"},{"name":"column4","data_type":"INT"}],"item_nearby_calculation":false,"keywords_group_by":"string","gpt_enabled":false}}');

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/mappers');
$request-&gt;setRequestMethod('PUT');
$request-&gt;setBody($body);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

payload = "{\"key_map\":{\"item_id\":\"item_id\",\"title\":\"title\",\"second_title\":\"string\",\"third_title\":\"string\",\"fourth_title\":\"string\",\"availability\":\"availability\",\"description\":\"string\",\"image_url\":\"string\",\"image_url_type\":\"STR or LIST_STR or LIST_DICT or DICT\",\"item_url\":\"string\",\"price\":\"price\",\"categories\":[{\"name\":\"category_1\",\"separator\":\"_\"},{\"name\":\"category_2\",\"separator\":\"\"}],\"flag\":[\"condition\"],\"average_rating\":\"string\",\"user_ratings_total\":\"string\",\"custom\":[{\"name\":\"colum3\",\"data_type\":\"FLOAT\"},{\"name\":\"column4\",\"data_type\":\"INT\"}],\"item_nearby_calculation\":false,\"keywords_group_by\":\"string\",\"gpt_enabled\":false}}"

headers = {
    'content-type': "application/json",
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("PUT", "/v1/mappers", payload, headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/mappers"

payload = {"key_map": {
        "item_id": "item_id",
        "title": "title",
        "second_title": "string",
        "third_title": "string",
        "fourth_title": "string",
        "availability": "availability",
        "description": "string",
        "image_url": "string",
        "image_url_type": "STR or LIST_STR or LIST_DICT or DICT",
        "item_url": "string",
        "price": "price",
        "categories": [
            {
                "name": "category_1",
                "separator": "_"
            },
            {
                "name": "category_2",
                "separator": ""
            }
        ],
        "flag": ["condition"],
        "average_rating": "string",
        "user_ratings_total": "string",
        "custom": [
            {
                "name": "colum3",
                "data_type": "FLOAT"
            },
            {
                "name": "column4",
                "data_type": "INT"
            }
        ],
        "item_nearby_calculation": False,
        "keywords_group_by": "string",
        "gpt_enabled": False
    }}
headers = {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("PUT", url, json=payload, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/mappers")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Put.new(url)
request["content-type"] = 'application/json'
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'
request.body = "{\"key_map\":{\"item_id\":\"item_id\",\"title\":\"title\",\"second_title\":\"string\",\"third_title\":\"string\",\"fourth_title\":\"string\",\"availability\":\"availability\",\"description\":\"string\",\"image_url\":\"string\",\"image_url_type\":\"STR or LIST_STR or LIST_DICT or DICT\",\"item_url\":\"string\",\"price\":\"price\",\"categories\":[{\"name\":\"category_1\",\"separator\":\"_\"},{\"name\":\"category_2\",\"separator\":\"\"}],\"flag\":[\"condition\"],\"average_rating\":\"string\",\"user_ratings_total\":\"string\",\"custom\":[{\"name\":\"colum3\",\"data_type\":\"FLOAT\"},{\"name\":\"column4\",\"data_type\":\"INT\"}],\"item_nearby_calculation\":false,\"keywords_group_by\":\"string\",\"gpt_enabled\":false}}"

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request PUT \
  --url https://api.recommender.gigalogy.com/v1/mappers \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'content-type: application/json' \
  --header 'project-key: SOME_STRING_VALUE' \
  --data '{"key_map":{"item_id":"item_id","title":"title","second_title":"string","third_title":"string","fourth_title":"string","availability":"availability","description":"string","image_url":"string","image_url_type":"STR or LIST_STR or LIST_DICT or DICT","item_url":"string","price":"price","categories":[{"name":"category_1","separator":"_"},{"name":"category_2","separator":""}],"flag":["condition"],"average_rating":"string","user_ratings_total":"string","custom":[{"name":"colum3","data_type":"FLOAT"},{"name":"column4","data_type":"INT"}],"item_nearby_calculation":false,"keywords_group_by":"string","gpt_enabled":false}}'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]
let parameters = ["key_map": [
    "item_id": "item_id",
    "title": "title",
    "second_title": "string",
    "third_title": "string",
    "fourth_title": "string",
    "availability": "availability",
    "description": "string",
    "image_url": "string",
    "image_url_type": "STR or LIST_STR or LIST_DICT or DICT",
    "item_url": "string",
    "price": "price",
    "categories": [
      [
        "name": "category_1",
        "separator": "_"
      ],
      [
        "name": "category_2",
        "separator": ""
      ]
    ],
    "flag": ["condition"],
    "average_rating": "string",
    "user_ratings_total": "string",
    "custom": [
      [
        "name": "colum3",
        "data_type": "FLOAT"
      ],
      [
        "name": "column4",
        "data_type": "INT"
      ]
    ],
    "item_nearby_calculation": false,
    "keywords_group_by": "string",
    "gpt_enabled": false
  ]] as [String : Any]

let postData = JSONSerialization.data(withJSONObject: parameters, options: [])

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/mappers")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "PUT"
request.allHTTPHeaderFields = headers
request.httpBody = postData as Data

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: post/v1/mappers
HTTP Method: Map data source keys with recommender keys
Method Description: This endpoint map data source keys with our recommender keys. Our recommender
system can understand your data by mapping keys. This is the core part of the
recommender system so the schema should be followed properly to successfully map
your data. Please checkout the schema from the request body section for details
about the key type and supported values.

### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| item_id | str | str | item_id is the unit of recommended items and typically should be the Unique ID of your products. choose the parameter from your data source that you want to be the unit of recommendation. |
| title | str | str | Represents your product or item title. |
| second_title | Optional[str] | str | If your item has a catch copy or headline field you can assign it here. |
| third_title | Optional[str] | str | If you have another field you want to use as a title level assign it here. |
| fourth_title | Optional[str] | str | If you have another field you want to use as a title level assign it here. |
| availability | str | bool | Represents whether your item is available or not. Data type for this key is `boolean`. Make sure to adjust your data accordingly. |
| description | Optional[str] | str | Represents your product details information. |
| image_url | Optional[str] | Depends on your data source | Represents image url of your data source. *This is required if you want to use image recommend end point* |
| image_url_type | Optional[Enum] | Selected enum value | Based on this our recommended will choose how to process your image url data. Available values are `STR`, `LIST_STR`, `LIST_DICT`, `DICT` *This is required if you want to use image recommend end point* |
| item_url | str | str | Represents your product or tem details page url |
| price | str | int | Represents your product or item price. |
| categories | List[Dict[str,str]] | str | Represents your category list. You can add multiple category here. |
| flag | List[str] | bool | Represents list of flags available in your dataset. Flag value data type is `boolean`. Please do not use keys which contains other types of data as flag. |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/mappers");
var request = new RestRequest(Method.POST);
request.AddHeader("content-type", "application/json");
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
request.AddParameter("application/json", "{\"key_map\":{\"item_id\":\"item_id\",\"title\":\"title\",\"second_title\":\"string\",\"third_title\":\"string\",\"fourth_title\":\"string\",\"availability\":\"availability\",\"description\":\"string\",\"image_url\":\"string\",\"image_url_type\":\"STR or LIST_STR or LIST_DICT or DICT\",\"item_url\":\"string\",\"price\":\"price\",\"categories\":[{\"name\":\"category_1\",\"separator\":\"_\"},{\"name\":\"category_2\",\"separator\":\"\"}],\"flag\":[\"condition\"],\"average_rating\":\"string\",\"user_ratings_total\":\"string\",\"custom\":[{\"name\":\"colum3\",\"data_type\":\"FLOAT\"},{\"name\":\"column4\",\"data_type\":\"INT\"}],\"item_nearby_calculation\":false,\"keywords_group_by\":\"string\",\"gpt_enabled\":false}}", ParameterType.RequestBody);
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Post,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/mappers"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
    Content = new StringContent("{\"key_map\":{\"item_id\":\"item_id\",\"title\":\"title\",\"second_title\":\"string\",\"third_title\":\"string\",\"fourth_title\":\"string\",\"availability\":\"availability\",\"description\":\"string\",\"image_url\":\"string\",\"image_url_type\":\"STR or LIST_STR or LIST_DICT or DICT\",\"item_url\":\"string\",\"price\":\"price\",\"categories\":[{\"name\":\"category_1\",\"separator\":\"_\"},{\"name\":\"category_2\",\"separator\":\"\"}],\"flag\":[\"condition\"],\"average_rating\":\"string\",\"user_ratings_total\":\"string\",\"custom\":[{\"name\":\"colum3\",\"data_type\":\"FLOAT\"},{\"name\":\"column4\",\"data_type\":\"INT\"}],\"item_nearby_calculation\":false,\"keywords_group_by\":\"string\",\"gpt_enabled\":false}}")
    {
        Headers =
        {
            ContentType = new MediaTypeHeaderValue("application/json")
        }
    }
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"strings"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/mappers"

	payload := strings.NewReader("{\"key_map\":{\"item_id\":\"item_id\",\"title\":\"title\",\"second_title\":\"string\",\"third_title\":\"string\",\"fourth_title\":\"string\",\"availability\":\"availability\",\"description\":\"string\",\"image_url\":\"string\",\"image_url_type\":\"STR or LIST_STR or LIST_DICT or DICT\",\"item_url\":\"string\",\"price\":\"price\",\"categories\":[{\"name\":\"category_1\",\"separator\":\"_\"},{\"name\":\"category_2\",\"separator\":\"\"}],\"flag\":[\"condition\"],\"average_rating\":\"string\",\"user_ratings_total\":\"string\",\"custom\":[{\"name\":\"colum3\",\"data_type\":\"FLOAT\"},{\"name\":\"column4\",\"data_type\":\"INT\"}],\"item_nearby_calculation\":false,\"keywords_group_by\":\"string\",\"gpt_enabled\":false}}")

	req, _ := http.NewRequest("POST", url, payload)

	req.Header.Add("content-type", "application/json")
	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

MediaType mediaType = MediaType.parse("application/json");
RequestBody body = RequestBody.create(mediaType, "{\"key_map\":{\"item_id\":\"item_id\",\"title\":\"title\",\"second_title\":\"string\",\"third_title\":\"string\",\"fourth_title\":\"string\",\"availability\":\"availability\",\"description\":\"string\",\"image_url\":\"string\",\"image_url_type\":\"STR or LIST_STR or LIST_DICT or DICT\",\"item_url\":\"string\",\"price\":\"price\",\"categories\":[{\"name\":\"category_1\",\"separator\":\"_\"},{\"name\":\"category_2\",\"separator\":\"\"}],\"flag\":[\"condition\"],\"average_rating\":\"string\",\"user_ratings_total\":\"string\",\"custom\":[{\"name\":\"colum3\",\"data_type\":\"FLOAT\"},{\"name\":\"column4\",\"data_type\":\"INT\"}],\"item_nearby_calculation\":false,\"keywords_group_by\":\"string\",\"gpt_enabled\":false}}");
Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/mappers")
  .post(body)
  .addHeader("content-type", "application/json")
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.post("https://api.recommender.gigalogy.com/v1/mappers")
  .header("content-type", "application/json")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .body("{\"key_map\":{\"item_id\":\"item_id\",\"title\":\"title\",\"second_title\":\"string\",\"third_title\":\"string\",\"fourth_title\":\"string\",\"availability\":\"availability\",\"description\":\"string\",\"image_url\":\"string\",\"image_url_type\":\"STR or LIST_STR or LIST_DICT or DICT\",\"item_url\":\"string\",\"price\":\"price\",\"categories\":[{\"name\":\"category_1\",\"separator\":\"_\"},{\"name\":\"category_2\",\"separator\":\"\"}],\"flag\":[\"condition\"],\"average_rating\":\"string\",\"user_ratings_total\":\"string\",\"custom\":[{\"name\":\"colum3\",\"data_type\":\"FLOAT\"},{\"name\":\"column4\",\"data_type\":\"INT\"}],\"item_nearby_calculation\":false,\"keywords_group_by\":\"string\",\"gpt_enabled\":false}}")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/mappers",
  "method": "POST",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  },
  "processData": false,
  "data": "{\"key_map\":{\"item_id\":\"item_id\",\"title\":\"title\",\"second_title\":\"string\",\"third_title\":\"string\",\"fourth_title\":\"string\",\"availability\":\"availability\",\"description\":\"string\",\"image_url\":\"string\",\"image_url_type\":\"STR or LIST_STR or LIST_DICT or DICT\",\"item_url\":\"string\",\"price\":\"price\",\"categories\":[{\"name\":\"category_1\",\"separator\":\"_\"},{\"name\":\"category_2\",\"separator\":\"\"}],\"flag\":[\"condition\"],\"average_rating\":\"string\",\"user_ratings_total\":\"string\",\"custom\":[{\"name\":\"colum3\",\"data_type\":\"FLOAT\"},{\"name\":\"column4\",\"data_type\":\"INT\"}],\"item_nearby_calculation\":false,\"keywords_group_by\":\"string\",\"gpt_enabled\":false}}"
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = JSON.stringify({
  "key_map": {
    "item_id": "item_id",
    "title": "title",
    "second_title": "string",
    "third_title": "string",
    "fourth_title": "string",
    "availability": "availability",
    "description": "string",
    "image_url": "string",
    "image_url_type": "STR or LIST_STR or LIST_DICT or DICT",
    "item_url": "string",
    "price": "price",
    "categories": [
      {
        "name": "category_1",
        "separator": "_"
      },
      {
        "name": "category_2",
        "separator": ""
      }
    ],
    "flag": [
      "condition"
    ],
    "average_rating": "string",
    "user_ratings_total": "string",
    "custom": [
      {
        "name": "colum3",
        "data_type": "FLOAT"
      },
      {
        "name": "column4",
        "data_type": "INT"
      }
    ],
    "item_nearby_calculation": false,
    "keywords_group_by": "string",
    "gpt_enabled": false
  }
});

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("POST", "https://api.recommender.gigalogy.com/v1/mappers");
xhr.setRequestHeader("content-type", "application/json");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "POST",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/mappers",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.write(JSON.stringify({
  key_map: {
    item_id: 'item_id',
    title: 'title',
    second_title: 'string',
    third_title: 'string',
    fourth_title: 'string',
    availability: 'availability',
    description: 'string',
    image_url: 'string',
    image_url_type: 'STR or LIST_STR or LIST_DICT or DICT',
    item_url: 'string',
    price: 'price',
    categories: [{name: 'category_1', separator: '_'}, {name: 'category_2', separator: ''}],
    flag: ['condition'],
    average_rating: 'string',
    user_ratings_total: 'string',
    custom: [{name: 'colum3', data_type: 'FLOAT'}, {name: 'column4', data_type: 'INT'}],
    item_nearby_calculation: false,
    keywords_group_by: 'string',
    gpt_enabled: false
  }
}));
req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'POST',
  url: 'https://api.recommender.gigalogy.com/v1/mappers',
  headers: {
    'content-type': 'application/json',
    'project-key': 'SOME_STRING_VALUE',
    'api-key': 'SOME_STRING_VALUE'
  },
  body: {
    key_map: {
      item_id: 'item_id',
      title: 'title',
      second_title: 'string',
      third_title: 'string',
      fourth_title: 'string',
      availability: 'availability',
      description: 'string',
      image_url: 'string',
      image_url_type: 'STR or LIST_STR or LIST_DICT or DICT',
      item_url: 'string',
      price: 'price',
      categories: [{name: 'category_1', separator: '_'}, {name: 'category_2', separator: ''}],
      flag: ['condition'],
      average_rating: 'string',
      user_ratings_total: 'string',
      custom: [{name: 'colum3', data_type: 'FLOAT'}, {name: 'column4', data_type: 'INT'}],
      item_nearby_calculation: false,
      keywords_group_by: 'string',
      gpt_enabled: false
    }
  },
  json: true
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("POST", "https://api.recommender.gigalogy.com/v1/mappers");

req.headers({
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.type("json");
req.send({
  "key_map": {
    "item_id": "item_id",
    "title": "title",
    "second_title": "string",
    "third_title": "string",
    "fourth_title": "string",
    "availability": "availability",
    "description": "string",
    "image_url": "string",
    "image_url_type": "STR or LIST_STR or LIST_DICT or DICT",
    "item_url": "string",
    "price": "price",
    "categories": [
      {
        "name": "category_1",
        "separator": "_"
      },
      {
        "name": "category_2",
        "separator": ""
      }
    ],
    "flag": [
      "condition"
    ],
    "average_rating": "string",
    "user_ratings_total": "string",
    "custom": [
      {
        "name": "colum3",
        "data_type": "FLOAT"
      },
      {
        "name": "column4",
        "data_type": "INT"
      }
    ],
    "item_nearby_calculation": false,
    "keywords_group_by": "string",
    "gpt_enabled": false
  }
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"application/json",
                           @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };
NSDictionary *parameters = @{ @"key_map": @{ @"item_id": @"item_id", @"title": @"title", @"second_title": @"string", @"third_title": @"string", @"fourth_title": @"string", @"availability": @"availability", @"description": @"string", @"image_url": @"string", @"image_url_type": @"STR or LIST_STR or LIST_DICT or DICT", @"item_url": @"string", @"price": @"price", @"categories": @[ @{ @"name": @"category_1", @"separator": @"_" }, @{ @"name": @"category_2", @"separator": @"" } ], @"flag": @[ @"condition" ], @"average_rating": @"string", @"user_ratings_total": @"string", @"custom": @[ @{ @"name": @"colum3", @"data_type": @"FLOAT" }, @{ @"name": @"column4", @"data_type": @"INT" } ], @"item_nearby_calculation": @NO, @"keywords_group_by": @"string", @"gpt_enabled": @NO } };

NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/mappers"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"POST"];
[request setAllHTTPHeaderFields:headers];
[request setHTTPBody:postData];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/mappers",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "POST",
  CURLOPT_POSTFIELDS =&gt; "{\"key_map\":{\"item_id\":\"item_id\",\"title\":\"title\",\"second_title\":\"string\",\"third_title\":\"string\",\"fourth_title\":\"string\",\"availability\":\"availability\",\"description\":\"string\",\"image_url\":\"string\",\"image_url_type\":\"STR or LIST_STR or LIST_DICT or DICT\",\"item_url\":\"string\",\"price\":\"price\",\"categories\":[{\"name\":\"category_1\",\"separator\":\"_\"},{\"name\":\"category_2\",\"separator\":\"\"}],\"flag\":[\"condition\"],\"average_rating\":\"string\",\"user_ratings_total\":\"string\",\"custom\":[{\"name\":\"colum3\",\"data_type\":\"FLOAT\"},{\"name\":\"column4\",\"data_type\":\"INT\"}],\"item_nearby_calculation\":false,\"keywords_group_by\":\"string\",\"gpt_enabled\":false}}",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "content-type: application/json",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/mappers');
$request-&gt;setMethod(HTTP_METH_POST);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$request-&gt;setBody('{"key_map":{"item_id":"item_id","title":"title","second_title":"string","third_title":"string","fourth_title":"string","availability":"availability","description":"string","image_url":"string","image_url_type":"STR or LIST_STR or LIST_DICT or DICT","item_url":"string","price":"price","categories":[{"name":"category_1","separator":"_"},{"name":"category_2","separator":""}],"flag":["condition"],"average_rating":"string","user_ratings_total":"string","custom":[{"name":"colum3","data_type":"FLOAT"},{"name":"column4","data_type":"INT"}],"item_nearby_calculation":false,"keywords_group_by":"string","gpt_enabled":false}}');

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$body = new http\Message\Body;
$body-&gt;append('{"key_map":{"item_id":"item_id","title":"title","second_title":"string","third_title":"string","fourth_title":"string","availability":"availability","description":"string","image_url":"string","image_url_type":"STR or LIST_STR or LIST_DICT or DICT","item_url":"string","price":"price","categories":[{"name":"category_1","separator":"_"},{"name":"category_2","separator":""}],"flag":["condition"],"average_rating":"string","user_ratings_total":"string","custom":[{"name":"colum3","data_type":"FLOAT"},{"name":"column4","data_type":"INT"}],"item_nearby_calculation":false,"keywords_group_by":"string","gpt_enabled":false}}');

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/mappers');
$request-&gt;setRequestMethod('POST');
$request-&gt;setBody($body);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

payload = "{\"key_map\":{\"item_id\":\"item_id\",\"title\":\"title\",\"second_title\":\"string\",\"third_title\":\"string\",\"fourth_title\":\"string\",\"availability\":\"availability\",\"description\":\"string\",\"image_url\":\"string\",\"image_url_type\":\"STR or LIST_STR or LIST_DICT or DICT\",\"item_url\":\"string\",\"price\":\"price\",\"categories\":[{\"name\":\"category_1\",\"separator\":\"_\"},{\"name\":\"category_2\",\"separator\":\"\"}],\"flag\":[\"condition\"],\"average_rating\":\"string\",\"user_ratings_total\":\"string\",\"custom\":[{\"name\":\"colum3\",\"data_type\":\"FLOAT\"},{\"name\":\"column4\",\"data_type\":\"INT\"}],\"item_nearby_calculation\":false,\"keywords_group_by\":\"string\",\"gpt_enabled\":false}}"

headers = {
    'content-type': "application/json",
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("POST", "/v1/mappers", payload, headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/mappers"

payload = {"key_map": {
        "item_id": "item_id",
        "title": "title",
        "second_title": "string",
        "third_title": "string",
        "fourth_title": "string",
        "availability": "availability",
        "description": "string",
        "image_url": "string",
        "image_url_type": "STR or LIST_STR or LIST_DICT or DICT",
        "item_url": "string",
        "price": "price",
        "categories": [
            {
                "name": "category_1",
                "separator": "_"
            },
            {
                "name": "category_2",
                "separator": ""
            }
        ],
        "flag": ["condition"],
        "average_rating": "string",
        "user_ratings_total": "string",
        "custom": [
            {
                "name": "colum3",
                "data_type": "FLOAT"
            },
            {
                "name": "column4",
                "data_type": "INT"
            }
        ],
        "item_nearby_calculation": False,
        "keywords_group_by": "string",
        "gpt_enabled": False
    }}
headers = {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("POST", url, json=payload, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/mappers")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Post.new(url)
request["content-type"] = 'application/json'
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'
request.body = "{\"key_map\":{\"item_id\":\"item_id\",\"title\":\"title\",\"second_title\":\"string\",\"third_title\":\"string\",\"fourth_title\":\"string\",\"availability\":\"availability\",\"description\":\"string\",\"image_url\":\"string\",\"image_url_type\":\"STR or LIST_STR or LIST_DICT or DICT\",\"item_url\":\"string\",\"price\":\"price\",\"categories\":[{\"name\":\"category_1\",\"separator\":\"_\"},{\"name\":\"category_2\",\"separator\":\"\"}],\"flag\":[\"condition\"],\"average_rating\":\"string\",\"user_ratings_total\":\"string\",\"custom\":[{\"name\":\"colum3\",\"data_type\":\"FLOAT\"},{\"name\":\"column4\",\"data_type\":\"INT\"}],\"item_nearby_calculation\":false,\"keywords_group_by\":\"string\",\"gpt_enabled\":false}}"

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request POST \
  --url https://api.recommender.gigalogy.com/v1/mappers \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'content-type: application/json' \
  --header 'project-key: SOME_STRING_VALUE' \
  --data '{"key_map":{"item_id":"item_id","title":"title","second_title":"string","third_title":"string","fourth_title":"string","availability":"availability","description":"string","image_url":"string","image_url_type":"STR or LIST_STR or LIST_DICT or DICT","item_url":"string","price":"price","categories":[{"name":"category_1","separator":"_"},{"name":"category_2","separator":""}],"flag":["condition"],"average_rating":"string","user_ratings_total":"string","custom":[{"name":"colum3","data_type":"FLOAT"},{"name":"column4","data_type":"INT"}],"item_nearby_calculation":false,"keywords_group_by":"string","gpt_enabled":false}}'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]
let parameters = ["key_map": [
    "item_id": "item_id",
    "title": "title",
    "second_title": "string",
    "third_title": "string",
    "fourth_title": "string",
    "availability": "availability",
    "description": "string",
    "image_url": "string",
    "image_url_type": "STR or LIST_STR or LIST_DICT or DICT",
    "item_url": "string",
    "price": "price",
    "categories": [
      [
        "name": "category_1",
        "separator": "_"
      ],
      [
        "name": "category_2",
        "separator": ""
      ]
    ],
    "flag": ["condition"],
    "average_rating": "string",
    "user_ratings_total": "string",
    "custom": [
      [
        "name": "colum3",
        "data_type": "FLOAT"
      ],
      [
        "name": "column4",
        "data_type": "INT"
      ]
    ],
    "item_nearby_calculation": false,
    "keywords_group_by": "string",
    "gpt_enabled": false
  ]] as [String : Any]

let postData = JSONSerialization.data(withJSONObject: parameters, options: [])

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/mappers")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "POST"
request.allHTTPHeaderFields = headers
request.httpBody = postData as Data

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: get/v1/keys
HTTP Method: Get keys
Method Description: Get your data source keys.
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/keys");
var request = new RestRequest(Method.GET);
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Get,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/keys"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/keys"

	req, _ := http.NewRequest("GET", url, nil)

	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/keys")
  .get()
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.get("https://api.recommender.gigalogy.com/v1/keys")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/keys",
  "method": "GET",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = null;

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("GET", "https://api.recommender.gigalogy.com/v1/keys");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "GET",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/keys",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'GET',
  url: 'https://api.recommender.gigalogy.com/v1/keys',
  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("GET", "https://api.recommender.gigalogy.com/v1/keys");

req.headers({
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/keys"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"GET"];
[request setAllHTTPHeaderFields:headers];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/keys",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "GET",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/keys');
$request-&gt;setMethod(HTTP_METH_GET);

$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/keys');
$request-&gt;setRequestMethod('GET');
$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

headers = {
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("GET", "/v1/keys", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/keys"

headers = {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("GET", url, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/keys")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request GET \
  --url https://api.recommender.gigalogy.com/v1/keys \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'project-key: SOME_STRING_VALUE'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/keys")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "GET"
request.allHTTPHeaderFields = headers

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: put/v1/keys
HTTP Method: Update keys
Method Description: This endpoint updates(add / remove / re-order) your data source keys. It takes
list of key as required parameter.

### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| keys | List[str] | str | List of column names with the same order as your data in CSV file. |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/keys");
var request = new RestRequest(Method.PUT);
request.AddHeader("content-type", "application/json");
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
request.AddParameter("application/json", "{\"keys\":[\"string\"]}", ParameterType.RequestBody);
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Put,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/keys"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
    Content = new StringContent("{\"keys\":[\"string\"]}")
    {
        Headers =
        {
            ContentType = new MediaTypeHeaderValue("application/json")
        }
    }
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"strings"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/keys"

	payload := strings.NewReader("{\"keys\":[\"string\"]}")

	req, _ := http.NewRequest("PUT", url, payload)

	req.Header.Add("content-type", "application/json")
	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

MediaType mediaType = MediaType.parse("application/json");
RequestBody body = RequestBody.create(mediaType, "{\"keys\":[\"string\"]}");
Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/keys")
  .put(body)
  .addHeader("content-type", "application/json")
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.put("https://api.recommender.gigalogy.com/v1/keys")
  .header("content-type", "application/json")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .body("{\"keys\":[\"string\"]}")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/keys",
  "method": "PUT",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  },
  "processData": false,
  "data": "{\"keys\":[\"string\"]}"
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = JSON.stringify({
  "keys": [
    "string"
  ]
});

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("PUT", "https://api.recommender.gigalogy.com/v1/keys");
xhr.setRequestHeader("content-type", "application/json");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "PUT",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/keys",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.write(JSON.stringify({keys: ['string']}));
req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'PUT',
  url: 'https://api.recommender.gigalogy.com/v1/keys',
  headers: {
    'content-type': 'application/json',
    'project-key': 'SOME_STRING_VALUE',
    'api-key': 'SOME_STRING_VALUE'
  },
  body: {keys: ['string']},
  json: true
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("PUT", "https://api.recommender.gigalogy.com/v1/keys");

req.headers({
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.type("json");
req.send({
  "keys": [
    "string"
  ]
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"application/json",
                           @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };
NSDictionary *parameters = @{ @"keys": @[ @"string" ] };

NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/keys"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"PUT"];
[request setAllHTTPHeaderFields:headers];
[request setHTTPBody:postData];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/keys",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "PUT",
  CURLOPT_POSTFIELDS =&gt; "{\"keys\":[\"string\"]}",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "content-type: application/json",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/keys');
$request-&gt;setMethod(HTTP_METH_PUT);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$request-&gt;setBody('{"keys":["string"]}');

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$body = new http\Message\Body;
$body-&gt;append('{"keys":["string"]}');

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/keys');
$request-&gt;setRequestMethod('PUT');
$request-&gt;setBody($body);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

payload = "{\"keys\":[\"string\"]}"

headers = {
    'content-type': "application/json",
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("PUT", "/v1/keys", payload, headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/keys"

payload = {"keys": ["string"]}
headers = {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("PUT", url, json=payload, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/keys")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Put.new(url)
request["content-type"] = 'application/json'
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'
request.body = "{\"keys\":[\"string\"]}"

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request PUT \
  --url https://api.recommender.gigalogy.com/v1/keys \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'content-type: application/json' \
  --header 'project-key: SOME_STRING_VALUE' \
  --data '{"keys":["string"]}'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]
let parameters = ["keys": ["string"]] as [String : Any]

let postData = JSONSerialization.data(withJSONObject: parameters, options: [])

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/keys")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "PUT"
request.allHTTPHeaderFields = headers
request.httpBody = postData as Data

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: post/v1/keys
HTTP Method: Save column / key name with the same order as your data in the source file
Method Description: This endpoint saves column / key name with the same order as your data in the
source file. It takes list of keys as required parameter.
This endpoint is mandatory when you use CSV file as your data source and your CSV file
does not contain headers. Make sure to enter the column names with the same
order as your data in CSV file.

### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| keys | List[str] | str | List of column names with the same order as your data in CSV file. |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/keys");
var request = new RestRequest(Method.POST);
request.AddHeader("content-type", "application/json");
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
request.AddParameter("application/json", "{\"keys\":[\"string\"]}", ParameterType.RequestBody);
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Post,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/keys"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
    Content = new StringContent("{\"keys\":[\"string\"]}")
    {
        Headers =
        {
            ContentType = new MediaTypeHeaderValue("application/json")
        }
    }
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"strings"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/keys"

	payload := strings.NewReader("{\"keys\":[\"string\"]}")

	req, _ := http.NewRequest("POST", url, payload)

	req.Header.Add("content-type", "application/json")
	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

MediaType mediaType = MediaType.parse("application/json");
RequestBody body = RequestBody.create(mediaType, "{\"keys\":[\"string\"]}");
Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/keys")
  .post(body)
  .addHeader("content-type", "application/json")
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.post("https://api.recommender.gigalogy.com/v1/keys")
  .header("content-type", "application/json")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .body("{\"keys\":[\"string\"]}")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/keys",
  "method": "POST",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  },
  "processData": false,
  "data": "{\"keys\":[\"string\"]}"
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = JSON.stringify({
  "keys": [
    "string"
  ]
});

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("POST", "https://api.recommender.gigalogy.com/v1/keys");
xhr.setRequestHeader("content-type", "application/json");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "POST",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/keys",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.write(JSON.stringify({keys: ['string']}));
req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'POST',
  url: 'https://api.recommender.gigalogy.com/v1/keys',
  headers: {
    'content-type': 'application/json',
    'project-key': 'SOME_STRING_VALUE',
    'api-key': 'SOME_STRING_VALUE'
  },
  body: {keys: ['string']},
  json: true
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("POST", "https://api.recommender.gigalogy.com/v1/keys");

req.headers({
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.type("json");
req.send({
  "keys": [
    "string"
  ]
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"application/json",
                           @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };
NSDictionary *parameters = @{ @"keys": @[ @"string" ] };

NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/keys"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"POST"];
[request setAllHTTPHeaderFields:headers];
[request setHTTPBody:postData];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/keys",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "POST",
  CURLOPT_POSTFIELDS =&gt; "{\"keys\":[\"string\"]}",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "content-type: application/json",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/keys');
$request-&gt;setMethod(HTTP_METH_POST);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$request-&gt;setBody('{"keys":["string"]}');

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$body = new http\Message\Body;
$body-&gt;append('{"keys":["string"]}');

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/keys');
$request-&gt;setRequestMethod('POST');
$request-&gt;setBody($body);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

payload = "{\"keys\":[\"string\"]}"

headers = {
    'content-type': "application/json",
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("POST", "/v1/keys", payload, headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/keys"

payload = {"keys": ["string"]}
headers = {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("POST", url, json=payload, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/keys")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Post.new(url)
request["content-type"] = 'application/json'
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'
request.body = "{\"keys\":[\"string\"]}"

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request POST \
  --url https://api.recommender.gigalogy.com/v1/keys \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'content-type: application/json' \
  --header 'project-key: SOME_STRING_VALUE' \
  --data '{"keys":["string"]}'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]
let parameters = ["keys": ["string"]] as [String : Any]

let postData = JSONSerialization.data(withJSONObject: parameters, options: [])

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/keys")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "POST"
request.allHTTPHeaderFields = headers
request.httpBody = postData as Data

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: get/v1/items/browse/mapper
HTTP Method: Get browse mapper
Method Description: Get the mapped keys for browsed items between your data source and our recommender system.
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/items/browse/mapper");
var request = new RestRequest(Method.GET);
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Get,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/items/browse/mapper"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/items/browse/mapper"

	req, _ := http.NewRequest("GET", url, nil)

	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/items/browse/mapper")
  .get()
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.get("https://api.recommender.gigalogy.com/v1/items/browse/mapper")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/items/browse/mapper",
  "method": "GET",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = null;

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("GET", "https://api.recommender.gigalogy.com/v1/items/browse/mapper");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "GET",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/items/browse/mapper",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'GET',
  url: 'https://api.recommender.gigalogy.com/v1/items/browse/mapper',
  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("GET", "https://api.recommender.gigalogy.com/v1/items/browse/mapper");

req.headers({
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/items/browse/mapper"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"GET"];
[request setAllHTTPHeaderFields:headers];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/items/browse/mapper",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "GET",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/items/browse/mapper');
$request-&gt;setMethod(HTTP_METH_GET);

$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/items/browse/mapper');
$request-&gt;setRequestMethod('GET');
$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

headers = {
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("GET", "/v1/items/browse/mapper", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/items/browse/mapper"

headers = {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("GET", url, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/items/browse/mapper")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request GET \
  --url https://api.recommender.gigalogy.com/v1/items/browse/mapper \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'project-key: SOME_STRING_VALUE'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/items/browse/mapper")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "GET"
request.allHTTPHeaderFields = headers

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: put/v1/items/browse/mapper
HTTP Method: Update browse mapper
Method Description: This endpoint updates the browse mapped keys. Please checkout the schema from the
request body section for details about the key type and supported values.

### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| user_id | str | str | user_id is the id of unique user. choose the parameter from your data source that you want to be the id of user. |
| member_id | Optional[str] | str | member_id is the id of logged-in user. choose the parameter from your data source that you want to be the id of logged-in user. |
| item_id | str | str | item_id is the unit of recommended items. choose the parameter from your data source that you want to be the unit of recommendation. |
| date | str | date | Represents product / item browsing session. |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/items/browse/mapper");
var request = new RestRequest(Method.PUT);
request.AddHeader("content-type", "application/json");
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
request.AddParameter("application/json", "{\"browse_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"date\":\"browsed_at\"}}", ParameterType.RequestBody);
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Put,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/items/browse/mapper"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
    Content = new StringContent("{\"browse_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"date\":\"browsed_at\"}}")
    {
        Headers =
        {
            ContentType = new MediaTypeHeaderValue("application/json")
        }
    }
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"strings"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/items/browse/mapper"

	payload := strings.NewReader("{\"browse_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"date\":\"browsed_at\"}}")

	req, _ := http.NewRequest("PUT", url, payload)

	req.Header.Add("content-type", "application/json")
	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

MediaType mediaType = MediaType.parse("application/json");
RequestBody body = RequestBody.create(mediaType, "{\"browse_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"date\":\"browsed_at\"}}");
Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/items/browse/mapper")
  .put(body)
  .addHeader("content-type", "application/json")
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.put("https://api.recommender.gigalogy.com/v1/items/browse/mapper")
  .header("content-type", "application/json")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .body("{\"browse_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"date\":\"browsed_at\"}}")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/items/browse/mapper",
  "method": "PUT",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  },
  "processData": false,
  "data": "{\"browse_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"date\":\"browsed_at\"}}"
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = JSON.stringify({
  "browse_key_map": {
    "user_id": "user_id",
    "member_id": "member_id",
    "item_id": "item_id",
    "date": "browsed_at"
  }
});

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("PUT", "https://api.recommender.gigalogy.com/v1/items/browse/mapper");
xhr.setRequestHeader("content-type", "application/json");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "PUT",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/items/browse/mapper",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.write(JSON.stringify({
  browse_key_map: {
    user_id: 'user_id',
    member_id: 'member_id',
    item_id: 'item_id',
    date: 'browsed_at'
  }
}));
req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'PUT',
  url: 'https://api.recommender.gigalogy.com/v1/items/browse/mapper',
  headers: {
    'content-type': 'application/json',
    'project-key': 'SOME_STRING_VALUE',
    'api-key': 'SOME_STRING_VALUE'
  },
  body: {
    browse_key_map: {
      user_id: 'user_id',
      member_id: 'member_id',
      item_id: 'item_id',
      date: 'browsed_at'
    }
  },
  json: true
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("PUT", "https://api.recommender.gigalogy.com/v1/items/browse/mapper");

req.headers({
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.type("json");
req.send({
  "browse_key_map": {
    "user_id": "user_id",
    "member_id": "member_id",
    "item_id": "item_id",
    "date": "browsed_at"
  }
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"application/json",
                           @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };
NSDictionary *parameters = @{ @"browse_key_map": @{ @"user_id": @"user_id", @"member_id": @"member_id", @"item_id": @"item_id", @"date": @"browsed_at" } };

NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/items/browse/mapper"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"PUT"];
[request setAllHTTPHeaderFields:headers];
[request setHTTPBody:postData];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/items/browse/mapper",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "PUT",
  CURLOPT_POSTFIELDS =&gt; "{\"browse_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"date\":\"browsed_at\"}}",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "content-type: application/json",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/items/browse/mapper');
$request-&gt;setMethod(HTTP_METH_PUT);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$request-&gt;setBody('{"browse_key_map":{"user_id":"user_id","member_id":"member_id","item_id":"item_id","date":"browsed_at"}}');

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$body = new http\Message\Body;
$body-&gt;append('{"browse_key_map":{"user_id":"user_id","member_id":"member_id","item_id":"item_id","date":"browsed_at"}}');

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/items/browse/mapper');
$request-&gt;setRequestMethod('PUT');
$request-&gt;setBody($body);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

payload = "{\"browse_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"date\":\"browsed_at\"}}"

headers = {
    'content-type': "application/json",
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("PUT", "/v1/items/browse/mapper", payload, headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/items/browse/mapper"

payload = {"browse_key_map": {
        "user_id": "user_id",
        "member_id": "member_id",
        "item_id": "item_id",
        "date": "browsed_at"
    }}
headers = {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("PUT", url, json=payload, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/items/browse/mapper")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Put.new(url)
request["content-type"] = 'application/json'
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'
request.body = "{\"browse_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"date\":\"browsed_at\"}}"

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request PUT \
  --url https://api.recommender.gigalogy.com/v1/items/browse/mapper \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'content-type: application/json' \
  --header 'project-key: SOME_STRING_VALUE' \
  --data '{"browse_key_map":{"user_id":"user_id","member_id":"member_id","item_id":"item_id","date":"browsed_at"}}'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]
let parameters = ["browse_key_map": [
    "user_id": "user_id",
    "member_id": "member_id",
    "item_id": "item_id",
    "date": "browsed_at"
  ]] as [String : Any]

let postData = JSONSerialization.data(withJSONObject: parameters, options: [])

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/items/browse/mapper")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "PUT"
request.allHTTPHeaderFields = headers
request.httpBody = postData as Data

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: post/v1/items/browse/mapper
HTTP Method: Map data source keys with recommender browse keys
Method Description: This endpoint map data source keys with our recommender browse keys. This step is
compulsory if you want to upload browse data from CSV file. Please checkout the
schema from the request body section for details about the key type and supported values.

### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| user_id | str | str | user_id is the id of logged out unique user. choose the parameter from your data source that you want to be the id of logged-out user. |
| member_id | Optional[str] | str | member_id is the id of logged-in user. choose the parameter from your data source that you want to be the id of logged-in user. |
| item_id | str | str | item_id is the unit of recommended items. choose the parameter from your data source that you want to be the unit of recommendation. |
| date | str | date | Represents product / item browsing session. |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/items/browse/mapper");
var request = new RestRequest(Method.POST);
request.AddHeader("content-type", "application/json");
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
request.AddParameter("application/json", "{\"browse_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"date\":\"browsed_at\"}}", ParameterType.RequestBody);
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Post,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/items/browse/mapper"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
    Content = new StringContent("{\"browse_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"date\":\"browsed_at\"}}")
    {
        Headers =
        {
            ContentType = new MediaTypeHeaderValue("application/json")
        }
    }
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"strings"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/items/browse/mapper"

	payload := strings.NewReader("{\"browse_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"date\":\"browsed_at\"}}")

	req, _ := http.NewRequest("POST", url, payload)

	req.Header.Add("content-type", "application/json")
	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

MediaType mediaType = MediaType.parse("application/json");
RequestBody body = RequestBody.create(mediaType, "{\"browse_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"date\":\"browsed_at\"}}");
Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/items/browse/mapper")
  .post(body)
  .addHeader("content-type", "application/json")
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.post("https://api.recommender.gigalogy.com/v1/items/browse/mapper")
  .header("content-type", "application/json")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .body("{\"browse_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"date\":\"browsed_at\"}}")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/items/browse/mapper",
  "method": "POST",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  },
  "processData": false,
  "data": "{\"browse_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"date\":\"browsed_at\"}}"
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = JSON.stringify({
  "browse_key_map": {
    "user_id": "user_id",
    "member_id": "member_id",
    "item_id": "item_id",
    "date": "browsed_at"
  }
});

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("POST", "https://api.recommender.gigalogy.com/v1/items/browse/mapper");
xhr.setRequestHeader("content-type", "application/json");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "POST",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/items/browse/mapper",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.write(JSON.stringify({
  browse_key_map: {
    user_id: 'user_id',
    member_id: 'member_id',
    item_id: 'item_id',
    date: 'browsed_at'
  }
}));
req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'POST',
  url: 'https://api.recommender.gigalogy.com/v1/items/browse/mapper',
  headers: {
    'content-type': 'application/json',
    'project-key': 'SOME_STRING_VALUE',
    'api-key': 'SOME_STRING_VALUE'
  },
  body: {
    browse_key_map: {
      user_id: 'user_id',
      member_id: 'member_id',
      item_id: 'item_id',
      date: 'browsed_at'
    }
  },
  json: true
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("POST", "https://api.recommender.gigalogy.com/v1/items/browse/mapper");

req.headers({
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.type("json");
req.send({
  "browse_key_map": {
    "user_id": "user_id",
    "member_id": "member_id",
    "item_id": "item_id",
    "date": "browsed_at"
  }
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"application/json",
                           @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };
NSDictionary *parameters = @{ @"browse_key_map": @{ @"user_id": @"user_id", @"member_id": @"member_id", @"item_id": @"item_id", @"date": @"browsed_at" } };

NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/items/browse/mapper"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"POST"];
[request setAllHTTPHeaderFields:headers];
[request setHTTPBody:postData];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/items/browse/mapper",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "POST",
  CURLOPT_POSTFIELDS =&gt; "{\"browse_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"date\":\"browsed_at\"}}",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "content-type: application/json",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/items/browse/mapper');
$request-&gt;setMethod(HTTP_METH_POST);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$request-&gt;setBody('{"browse_key_map":{"user_id":"user_id","member_id":"member_id","item_id":"item_id","date":"browsed_at"}}');

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$body = new http\Message\Body;
$body-&gt;append('{"browse_key_map":{"user_id":"user_id","member_id":"member_id","item_id":"item_id","date":"browsed_at"}}');

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/items/browse/mapper');
$request-&gt;setRequestMethod('POST');
$request-&gt;setBody($body);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

payload = "{\"browse_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"date\":\"browsed_at\"}}"

headers = {
    'content-type': "application/json",
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("POST", "/v1/items/browse/mapper", payload, headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/items/browse/mapper"

payload = {"browse_key_map": {
        "user_id": "user_id",
        "member_id": "member_id",
        "item_id": "item_id",
        "date": "browsed_at"
    }}
headers = {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("POST", url, json=payload, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/items/browse/mapper")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Post.new(url)
request["content-type"] = 'application/json'
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'
request.body = "{\"browse_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"date\":\"browsed_at\"}}"

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request POST \
  --url https://api.recommender.gigalogy.com/v1/items/browse/mapper \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'content-type: application/json' \
  --header 'project-key: SOME_STRING_VALUE' \
  --data '{"browse_key_map":{"user_id":"user_id","member_id":"member_id","item_id":"item_id","date":"browsed_at"}}'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]
let parameters = ["browse_key_map": [
    "user_id": "user_id",
    "member_id": "member_id",
    "item_id": "item_id",
    "date": "browsed_at"
  ]] as [String : Any]

let postData = JSONSerialization.data(withJSONObject: parameters, options: [])

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/items/browse/mapper")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "POST"
request.allHTTPHeaderFields = headers
request.httpBody = postData as Data

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: get/v1/items/purchase/mapper
HTTP Method: Get purchase mapper
Method Description: Get the mapped keys for purchased items between your data source and our recommender system.
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/items/purchase/mapper");
var request = new RestRequest(Method.GET);
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Get,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/items/purchase/mapper"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/items/purchase/mapper"

	req, _ := http.NewRequest("GET", url, nil)

	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/items/purchase/mapper")
  .get()
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.get("https://api.recommender.gigalogy.com/v1/items/purchase/mapper")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/items/purchase/mapper",
  "method": "GET",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = null;

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("GET", "https://api.recommender.gigalogy.com/v1/items/purchase/mapper");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "GET",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/items/purchase/mapper",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'GET',
  url: 'https://api.recommender.gigalogy.com/v1/items/purchase/mapper',
  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("GET", "https://api.recommender.gigalogy.com/v1/items/purchase/mapper");

req.headers({
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/items/purchase/mapper"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"GET"];
[request setAllHTTPHeaderFields:headers];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/items/purchase/mapper",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "GET",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/items/purchase/mapper');
$request-&gt;setMethod(HTTP_METH_GET);

$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/items/purchase/mapper');
$request-&gt;setRequestMethod('GET');
$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

headers = {
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("GET", "/v1/items/purchase/mapper", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/items/purchase/mapper"

headers = {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("GET", url, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/items/purchase/mapper")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request GET \
  --url https://api.recommender.gigalogy.com/v1/items/purchase/mapper \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'project-key: SOME_STRING_VALUE'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/items/purchase/mapper")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "GET"
request.allHTTPHeaderFields = headers

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: put/v1/items/purchase/mapper
HTTP Method: Update purchase mapper
Method Description: This endpoint updates the purchase mapped keys. Please checkout the schema from the
request body section for details about the key type and supported values.

### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| user_id | str | str | user_id is the id of unique user. choose the parameter from your data source that you want to be the id of user. |
| member_id | Optional[str] | str | member_id is the id of logged-in user. choose the parameter from your data source that you want to be the id of logged-in user. |
| item_id | str | str | item_id is the unit of recommended items. choose the parameter from your data source that you want to be the unit of recommendation. |
| price | str | float | Represents your product / item price. |
| quantity | str | int | Represents number of purchased product / item. |
| date | str | date | Represents product / item purchased time. |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/items/purchase/mapper");
var request = new RestRequest(Method.PUT);
request.AddHeader("content-type", "application/json");
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
request.AddParameter("application/json", "{\"purchase_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"price\":\"price\",\"quantity\":\"quantity\",\"date\":\"purchased_at\"}}", ParameterType.RequestBody);
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Put,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/items/purchase/mapper"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
    Content = new StringContent("{\"purchase_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"price\":\"price\",\"quantity\":\"quantity\",\"date\":\"purchased_at\"}}")
    {
        Headers =
        {
            ContentType = new MediaTypeHeaderValue("application/json")
        }
    }
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"strings"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/items/purchase/mapper"

	payload := strings.NewReader("{\"purchase_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"price\":\"price\",\"quantity\":\"quantity\",\"date\":\"purchased_at\"}}")

	req, _ := http.NewRequest("PUT", url, payload)

	req.Header.Add("content-type", "application/json")
	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

MediaType mediaType = MediaType.parse("application/json");
RequestBody body = RequestBody.create(mediaType, "{\"purchase_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"price\":\"price\",\"quantity\":\"quantity\",\"date\":\"purchased_at\"}}");
Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/items/purchase/mapper")
  .put(body)
  .addHeader("content-type", "application/json")
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.put("https://api.recommender.gigalogy.com/v1/items/purchase/mapper")
  .header("content-type", "application/json")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .body("{\"purchase_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"price\":\"price\",\"quantity\":\"quantity\",\"date\":\"purchased_at\"}}")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/items/purchase/mapper",
  "method": "PUT",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  },
  "processData": false,
  "data": "{\"purchase_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"price\":\"price\",\"quantity\":\"quantity\",\"date\":\"purchased_at\"}}"
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = JSON.stringify({
  "purchase_key_map": {
    "user_id": "user_id",
    "member_id": "member_id",
    "item_id": "item_id",
    "price": "price",
    "quantity": "quantity",
    "date": "purchased_at"
  }
});

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("PUT", "https://api.recommender.gigalogy.com/v1/items/purchase/mapper");
xhr.setRequestHeader("content-type", "application/json");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "PUT",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/items/purchase/mapper",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.write(JSON.stringify({
  purchase_key_map: {
    user_id: 'user_id',
    member_id: 'member_id',
    item_id: 'item_id',
    price: 'price',
    quantity: 'quantity',
    date: 'purchased_at'
  }
}));
req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'PUT',
  url: 'https://api.recommender.gigalogy.com/v1/items/purchase/mapper',
  headers: {
    'content-type': 'application/json',
    'project-key': 'SOME_STRING_VALUE',
    'api-key': 'SOME_STRING_VALUE'
  },
  body: {
    purchase_key_map: {
      user_id: 'user_id',
      member_id: 'member_id',
      item_id: 'item_id',
      price: 'price',
      quantity: 'quantity',
      date: 'purchased_at'
    }
  },
  json: true
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("PUT", "https://api.recommender.gigalogy.com/v1/items/purchase/mapper");

req.headers({
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.type("json");
req.send({
  "purchase_key_map": {
    "user_id": "user_id",
    "member_id": "member_id",
    "item_id": "item_id",
    "price": "price",
    "quantity": "quantity",
    "date": "purchased_at"
  }
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"application/json",
                           @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };
NSDictionary *parameters = @{ @"purchase_key_map": @{ @"user_id": @"user_id", @"member_id": @"member_id", @"item_id": @"item_id", @"price": @"price", @"quantity": @"quantity", @"date": @"purchased_at" } };

NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/items/purchase/mapper"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"PUT"];
[request setAllHTTPHeaderFields:headers];
[request setHTTPBody:postData];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/items/purchase/mapper",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "PUT",
  CURLOPT_POSTFIELDS =&gt; "{\"purchase_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"price\":\"price\",\"quantity\":\"quantity\",\"date\":\"purchased_at\"}}",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "content-type: application/json",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/items/purchase/mapper');
$request-&gt;setMethod(HTTP_METH_PUT);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$request-&gt;setBody('{"purchase_key_map":{"user_id":"user_id","member_id":"member_id","item_id":"item_id","price":"price","quantity":"quantity","date":"purchased_at"}}');

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$body = new http\Message\Body;
$body-&gt;append('{"purchase_key_map":{"user_id":"user_id","member_id":"member_id","item_id":"item_id","price":"price","quantity":"quantity","date":"purchased_at"}}');

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/items/purchase/mapper');
$request-&gt;setRequestMethod('PUT');
$request-&gt;setBody($body);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

payload = "{\"purchase_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"price\":\"price\",\"quantity\":\"quantity\",\"date\":\"purchased_at\"}}"

headers = {
    'content-type': "application/json",
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("PUT", "/v1/items/purchase/mapper", payload, headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/items/purchase/mapper"

payload = {"purchase_key_map": {
        "user_id": "user_id",
        "member_id": "member_id",
        "item_id": "item_id",
        "price": "price",
        "quantity": "quantity",
        "date": "purchased_at"
    }}
headers = {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("PUT", url, json=payload, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/items/purchase/mapper")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Put.new(url)
request["content-type"] = 'application/json'
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'
request.body = "{\"purchase_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"price\":\"price\",\"quantity\":\"quantity\",\"date\":\"purchased_at\"}}"

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request PUT \
  --url https://api.recommender.gigalogy.com/v1/items/purchase/mapper \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'content-type: application/json' \
  --header 'project-key: SOME_STRING_VALUE' \
  --data '{"purchase_key_map":{"user_id":"user_id","member_id":"member_id","item_id":"item_id","price":"price","quantity":"quantity","date":"purchased_at"}}'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]
let parameters = ["purchase_key_map": [
    "user_id": "user_id",
    "member_id": "member_id",
    "item_id": "item_id",
    "price": "price",
    "quantity": "quantity",
    "date": "purchased_at"
  ]] as [String : Any]

let postData = JSONSerialization.data(withJSONObject: parameters, options: [])

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/items/purchase/mapper")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "PUT"
request.allHTTPHeaderFields = headers
request.httpBody = postData as Data

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: post/v1/items/purchase/mapper
HTTP Method: Map data source keys with recommender purchase keys
Method Description: This endpoint map data source keys with our recommender browse keys. This step is
compulsory if you want to upload purchase data from CSV file. Please checkout the
schema from the request body section for details about the key type and supported values.

### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| user_id | str | str | user_id is the id of unique user. choose the parameter from your data source that you want to be the id of user. |
| member_id | Optional[str] | str | member_id is the id of logged-in user. choose the parameter from your data source that you want to be the id of logged-in user. |
| item_id | str | str | item_id is the unit of recommended items. choose the parameter from your data source that you want to be the unit of recommendation. |
| price | str | float | Represents your product / item price. |
| quantity | str | int | Represents number of purchased product / item. |
| date | str | date | Represents product / item purchased time. |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/items/purchase/mapper");
var request = new RestRequest(Method.POST);
request.AddHeader("content-type", "application/json");
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
request.AddParameter("application/json", "{\"purchase_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"price\":\"price\",\"quantity\":\"quantity\",\"date\":\"purchased_at\"}}", ParameterType.RequestBody);
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Post,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/items/purchase/mapper"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
    Content = new StringContent("{\"purchase_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"price\":\"price\",\"quantity\":\"quantity\",\"date\":\"purchased_at\"}}")
    {
        Headers =
        {
            ContentType = new MediaTypeHeaderValue("application/json")
        }
    }
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"strings"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/items/purchase/mapper"

	payload := strings.NewReader("{\"purchase_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"price\":\"price\",\"quantity\":\"quantity\",\"date\":\"purchased_at\"}}")

	req, _ := http.NewRequest("POST", url, payload)

	req.Header.Add("content-type", "application/json")
	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

MediaType mediaType = MediaType.parse("application/json");
RequestBody body = RequestBody.create(mediaType, "{\"purchase_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"price\":\"price\",\"quantity\":\"quantity\",\"date\":\"purchased_at\"}}");
Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/items/purchase/mapper")
  .post(body)
  .addHeader("content-type", "application/json")
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.post("https://api.recommender.gigalogy.com/v1/items/purchase/mapper")
  .header("content-type", "application/json")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .body("{\"purchase_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"price\":\"price\",\"quantity\":\"quantity\",\"date\":\"purchased_at\"}}")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/items/purchase/mapper",
  "method": "POST",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  },
  "processData": false,
  "data": "{\"purchase_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"price\":\"price\",\"quantity\":\"quantity\",\"date\":\"purchased_at\"}}"
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = JSON.stringify({
  "purchase_key_map": {
    "user_id": "user_id",
    "member_id": "member_id",
    "item_id": "item_id",
    "price": "price",
    "quantity": "quantity",
    "date": "purchased_at"
  }
});

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("POST", "https://api.recommender.gigalogy.com/v1/items/purchase/mapper");
xhr.setRequestHeader("content-type", "application/json");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "POST",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/items/purchase/mapper",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.write(JSON.stringify({
  purchase_key_map: {
    user_id: 'user_id',
    member_id: 'member_id',
    item_id: 'item_id',
    price: 'price',
    quantity: 'quantity',
    date: 'purchased_at'
  }
}));
req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'POST',
  url: 'https://api.recommender.gigalogy.com/v1/items/purchase/mapper',
  headers: {
    'content-type': 'application/json',
    'project-key': 'SOME_STRING_VALUE',
    'api-key': 'SOME_STRING_VALUE'
  },
  body: {
    purchase_key_map: {
      user_id: 'user_id',
      member_id: 'member_id',
      item_id: 'item_id',
      price: 'price',
      quantity: 'quantity',
      date: 'purchased_at'
    }
  },
  json: true
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("POST", "https://api.recommender.gigalogy.com/v1/items/purchase/mapper");

req.headers({
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.type("json");
req.send({
  "purchase_key_map": {
    "user_id": "user_id",
    "member_id": "member_id",
    "item_id": "item_id",
    "price": "price",
    "quantity": "quantity",
    "date": "purchased_at"
  }
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"application/json",
                           @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };
NSDictionary *parameters = @{ @"purchase_key_map": @{ @"user_id": @"user_id", @"member_id": @"member_id", @"item_id": @"item_id", @"price": @"price", @"quantity": @"quantity", @"date": @"purchased_at" } };

NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/items/purchase/mapper"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"POST"];
[request setAllHTTPHeaderFields:headers];
[request setHTTPBody:postData];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/items/purchase/mapper",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "POST",
  CURLOPT_POSTFIELDS =&gt; "{\"purchase_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"price\":\"price\",\"quantity\":\"quantity\",\"date\":\"purchased_at\"}}",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "content-type: application/json",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/items/purchase/mapper');
$request-&gt;setMethod(HTTP_METH_POST);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$request-&gt;setBody('{"purchase_key_map":{"user_id":"user_id","member_id":"member_id","item_id":"item_id","price":"price","quantity":"quantity","date":"purchased_at"}}');

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$body = new http\Message\Body;
$body-&gt;append('{"purchase_key_map":{"user_id":"user_id","member_id":"member_id","item_id":"item_id","price":"price","quantity":"quantity","date":"purchased_at"}}');

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/items/purchase/mapper');
$request-&gt;setRequestMethod('POST');
$request-&gt;setBody($body);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

payload = "{\"purchase_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"price\":\"price\",\"quantity\":\"quantity\",\"date\":\"purchased_at\"}}"

headers = {
    'content-type': "application/json",
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("POST", "/v1/items/purchase/mapper", payload, headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/items/purchase/mapper"

payload = {"purchase_key_map": {
        "user_id": "user_id",
        "member_id": "member_id",
        "item_id": "item_id",
        "price": "price",
        "quantity": "quantity",
        "date": "purchased_at"
    }}
headers = {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("POST", url, json=payload, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/items/purchase/mapper")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Post.new(url)
request["content-type"] = 'application/json'
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'
request.body = "{\"purchase_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"price\":\"price\",\"quantity\":\"quantity\",\"date\":\"purchased_at\"}}"

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request POST \
  --url https://api.recommender.gigalogy.com/v1/items/purchase/mapper \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'content-type: application/json' \
  --header 'project-key: SOME_STRING_VALUE' \
  --data '{"purchase_key_map":{"user_id":"user_id","member_id":"member_id","item_id":"item_id","price":"price","quantity":"quantity","date":"purchased_at"}}'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]
let parameters = ["purchase_key_map": [
    "user_id": "user_id",
    "member_id": "member_id",
    "item_id": "item_id",
    "price": "price",
    "quantity": "quantity",
    "date": "purchased_at"
  ]] as [String : Any]

let postData = JSONSerialization.data(withJSONObject: parameters, options: [])

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/items/purchase/mapper")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "POST"
request.allHTTPHeaderFields = headers
request.httpBody = postData as Data

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: get/v1/items/rating/mapper
HTTP Method: Get rating mapper
Method Description: Get the mapped keys for rated items between your data source and our recommender system.
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/items/rating/mapper");
var request = new RestRequest(Method.GET);
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Get,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/items/rating/mapper"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/items/rating/mapper"

	req, _ := http.NewRequest("GET", url, nil)

	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/items/rating/mapper")
  .get()
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.get("https://api.recommender.gigalogy.com/v1/items/rating/mapper")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/items/rating/mapper",
  "method": "GET",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = null;

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("GET", "https://api.recommender.gigalogy.com/v1/items/rating/mapper");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "GET",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/items/rating/mapper",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'GET',
  url: 'https://api.recommender.gigalogy.com/v1/items/rating/mapper',
  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("GET", "https://api.recommender.gigalogy.com/v1/items/rating/mapper");

req.headers({
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/items/rating/mapper"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"GET"];
[request setAllHTTPHeaderFields:headers];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/items/rating/mapper",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "GET",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/items/rating/mapper');
$request-&gt;setMethod(HTTP_METH_GET);

$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/items/rating/mapper');
$request-&gt;setRequestMethod('GET');
$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

headers = {
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("GET", "/v1/items/rating/mapper", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/items/rating/mapper"

headers = {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("GET", url, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/items/rating/mapper")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request GET \
  --url https://api.recommender.gigalogy.com/v1/items/rating/mapper \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'project-key: SOME_STRING_VALUE'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/items/rating/mapper")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "GET"
request.allHTTPHeaderFields = headers

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: put/v1/items/rating/mapper
HTTP Method: Update rating mapper
Method Description: This endpoint updates the rating mapped keys. Please checkout the schema from the
request body section for details about the key type and supported values.

### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| user_id | str | str | user_id is the id of unique user. choose the parameter from your data source that you want to be the id of user. |
| member_id | Optional[str] | str | member_id is the id of logged-in user. choose the parameter from your data source that you want to be the id of logged-in user. |
| item_id | str | str | item_id is the unit of recommended items. choose the parameter from your data source that you want to be the unit of recommendation. |
| rating | str | str | Represents rating given by user for specific product / item. choose the parameter from your data source that you want to be the rating key. |
| date | str | date | Represents the time when a rating is given for specific product / item. |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/items/rating/mapper");
var request = new RestRequest(Method.PUT);
request.AddHeader("content-type", "application/json");
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
request.AddParameter("application/json", "{\"rating_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"rating\":\"rating\",\"date\":\"rated_at\"}}", ParameterType.RequestBody);
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Put,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/items/rating/mapper"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
    Content = new StringContent("{\"rating_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"rating\":\"rating\",\"date\":\"rated_at\"}}")
    {
        Headers =
        {
            ContentType = new MediaTypeHeaderValue("application/json")
        }
    }
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"strings"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/items/rating/mapper"

	payload := strings.NewReader("{\"rating_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"rating\":\"rating\",\"date\":\"rated_at\"}}")

	req, _ := http.NewRequest("PUT", url, payload)

	req.Header.Add("content-type", "application/json")
	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

MediaType mediaType = MediaType.parse("application/json");
RequestBody body = RequestBody.create(mediaType, "{\"rating_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"rating\":\"rating\",\"date\":\"rated_at\"}}");
Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/items/rating/mapper")
  .put(body)
  .addHeader("content-type", "application/json")
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.put("https://api.recommender.gigalogy.com/v1/items/rating/mapper")
  .header("content-type", "application/json")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .body("{\"rating_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"rating\":\"rating\",\"date\":\"rated_at\"}}")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/items/rating/mapper",
  "method": "PUT",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  },
  "processData": false,
  "data": "{\"rating_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"rating\":\"rating\",\"date\":\"rated_at\"}}"
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = JSON.stringify({
  "rating_key_map": {
    "user_id": "user_id",
    "member_id": "member_id",
    "item_id": "item_id",
    "rating": "rating",
    "date": "rated_at"
  }
});

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("PUT", "https://api.recommender.gigalogy.com/v1/items/rating/mapper");
xhr.setRequestHeader("content-type", "application/json");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "PUT",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/items/rating/mapper",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.write(JSON.stringify({
  rating_key_map: {
    user_id: 'user_id',
    member_id: 'member_id',
    item_id: 'item_id',
    rating: 'rating',
    date: 'rated_at'
  }
}));
req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'PUT',
  url: 'https://api.recommender.gigalogy.com/v1/items/rating/mapper',
  headers: {
    'content-type': 'application/json',
    'project-key': 'SOME_STRING_VALUE',
    'api-key': 'SOME_STRING_VALUE'
  },
  body: {
    rating_key_map: {
      user_id: 'user_id',
      member_id: 'member_id',
      item_id: 'item_id',
      rating: 'rating',
      date: 'rated_at'
    }
  },
  json: true
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("PUT", "https://api.recommender.gigalogy.com/v1/items/rating/mapper");

req.headers({
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.type("json");
req.send({
  "rating_key_map": {
    "user_id": "user_id",
    "member_id": "member_id",
    "item_id": "item_id",
    "rating": "rating",
    "date": "rated_at"
  }
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"application/json",
                           @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };
NSDictionary *parameters = @{ @"rating_key_map": @{ @"user_id": @"user_id", @"member_id": @"member_id", @"item_id": @"item_id", @"rating": @"rating", @"date": @"rated_at" } };

NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/items/rating/mapper"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"PUT"];
[request setAllHTTPHeaderFields:headers];
[request setHTTPBody:postData];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/items/rating/mapper",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "PUT",
  CURLOPT_POSTFIELDS =&gt; "{\"rating_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"rating\":\"rating\",\"date\":\"rated_at\"}}",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "content-type: application/json",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/items/rating/mapper');
$request-&gt;setMethod(HTTP_METH_PUT);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$request-&gt;setBody('{"rating_key_map":{"user_id":"user_id","member_id":"member_id","item_id":"item_id","rating":"rating","date":"rated_at"}}');

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$body = new http\Message\Body;
$body-&gt;append('{"rating_key_map":{"user_id":"user_id","member_id":"member_id","item_id":"item_id","rating":"rating","date":"rated_at"}}');

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/items/rating/mapper');
$request-&gt;setRequestMethod('PUT');
$request-&gt;setBody($body);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

payload = "{\"rating_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"rating\":\"rating\",\"date\":\"rated_at\"}}"

headers = {
    'content-type': "application/json",
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("PUT", "/v1/items/rating/mapper", payload, headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/items/rating/mapper"

payload = {"rating_key_map": {
        "user_id": "user_id",
        "member_id": "member_id",
        "item_id": "item_id",
        "rating": "rating",
        "date": "rated_at"
    }}
headers = {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("PUT", url, json=payload, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/items/rating/mapper")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Put.new(url)
request["content-type"] = 'application/json'
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'
request.body = "{\"rating_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"rating\":\"rating\",\"date\":\"rated_at\"}}"

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request PUT \
  --url https://api.recommender.gigalogy.com/v1/items/rating/mapper \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'content-type: application/json' \
  --header 'project-key: SOME_STRING_VALUE' \
  --data '{"rating_key_map":{"user_id":"user_id","member_id":"member_id","item_id":"item_id","rating":"rating","date":"rated_at"}}'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]
let parameters = ["rating_key_map": [
    "user_id": "user_id",
    "member_id": "member_id",
    "item_id": "item_id",
    "rating": "rating",
    "date": "rated_at"
  ]] as [String : Any]

let postData = JSONSerialization.data(withJSONObject: parameters, options: [])

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/items/rating/mapper")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "PUT"
request.allHTTPHeaderFields = headers
request.httpBody = postData as Data

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: post/v1/items/rating/mapper
HTTP Method: Map data source keys with recommender rating keys
Method Description: This endpoint map data source keys with our recommender rating keys. This step is
compulsory if you want to upload rating data from CSV file. Please checkout the
schema from the request body section for details about the key type and supported values.

### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| user_id | str | str | user_id is the id of unique user. choose the parameter from your data source that you want to be the id of user. |
| member_id | Optional[str] | str | member_id is the id of logged-in user. choose the parameter from your data source that you want to be the id of logged-in user. |
| item_id | str | str | item_id is the unit of recommended items. choose the parameter from your data source that you want to be the unit of recommendation. |
| rating | str | str | Represents rating given by user for specific product / item. choose the parameter from your data source that you want to be the rating key. |
| date | str | date | Represents the time when a rating is given for specific product / item. |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/items/rating/mapper");
var request = new RestRequest(Method.POST);
request.AddHeader("content-type", "application/json");
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
request.AddParameter("application/json", "{\"rating_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"rating\":\"rating\",\"date\":\"rated_at\"}}", ParameterType.RequestBody);
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Post,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/items/rating/mapper"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
    Content = new StringContent("{\"rating_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"rating\":\"rating\",\"date\":\"rated_at\"}}")
    {
        Headers =
        {
            ContentType = new MediaTypeHeaderValue("application/json")
        }
    }
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"strings"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/items/rating/mapper"

	payload := strings.NewReader("{\"rating_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"rating\":\"rating\",\"date\":\"rated_at\"}}")

	req, _ := http.NewRequest("POST", url, payload)

	req.Header.Add("content-type", "application/json")
	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

MediaType mediaType = MediaType.parse("application/json");
RequestBody body = RequestBody.create(mediaType, "{\"rating_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"rating\":\"rating\",\"date\":\"rated_at\"}}");
Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/items/rating/mapper")
  .post(body)
  .addHeader("content-type", "application/json")
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.post("https://api.recommender.gigalogy.com/v1/items/rating/mapper")
  .header("content-type", "application/json")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .body("{\"rating_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"rating\":\"rating\",\"date\":\"rated_at\"}}")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/items/rating/mapper",
  "method": "POST",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  },
  "processData": false,
  "data": "{\"rating_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"rating\":\"rating\",\"date\":\"rated_at\"}}"
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = JSON.stringify({
  "rating_key_map": {
    "user_id": "user_id",
    "member_id": "member_id",
    "item_id": "item_id",
    "rating": "rating",
    "date": "rated_at"
  }
});

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("POST", "https://api.recommender.gigalogy.com/v1/items/rating/mapper");
xhr.setRequestHeader("content-type", "application/json");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "POST",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/items/rating/mapper",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.write(JSON.stringify({
  rating_key_map: {
    user_id: 'user_id',
    member_id: 'member_id',
    item_id: 'item_id',
    rating: 'rating',
    date: 'rated_at'
  }
}));
req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'POST',
  url: 'https://api.recommender.gigalogy.com/v1/items/rating/mapper',
  headers: {
    'content-type': 'application/json',
    'project-key': 'SOME_STRING_VALUE',
    'api-key': 'SOME_STRING_VALUE'
  },
  body: {
    rating_key_map: {
      user_id: 'user_id',
      member_id: 'member_id',
      item_id: 'item_id',
      rating: 'rating',
      date: 'rated_at'
    }
  },
  json: true
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("POST", "https://api.recommender.gigalogy.com/v1/items/rating/mapper");

req.headers({
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.type("json");
req.send({
  "rating_key_map": {
    "user_id": "user_id",
    "member_id": "member_id",
    "item_id": "item_id",
    "rating": "rating",
    "date": "rated_at"
  }
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"application/json",
                           @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };
NSDictionary *parameters = @{ @"rating_key_map": @{ @"user_id": @"user_id", @"member_id": @"member_id", @"item_id": @"item_id", @"rating": @"rating", @"date": @"rated_at" } };

NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/items/rating/mapper"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"POST"];
[request setAllHTTPHeaderFields:headers];
[request setHTTPBody:postData];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/items/rating/mapper",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "POST",
  CURLOPT_POSTFIELDS =&gt; "{\"rating_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"rating\":\"rating\",\"date\":\"rated_at\"}}",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "content-type: application/json",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/items/rating/mapper');
$request-&gt;setMethod(HTTP_METH_POST);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$request-&gt;setBody('{"rating_key_map":{"user_id":"user_id","member_id":"member_id","item_id":"item_id","rating":"rating","date":"rated_at"}}');

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$body = new http\Message\Body;
$body-&gt;append('{"rating_key_map":{"user_id":"user_id","member_id":"member_id","item_id":"item_id","rating":"rating","date":"rated_at"}}');

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/items/rating/mapper');
$request-&gt;setRequestMethod('POST');
$request-&gt;setBody($body);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

payload = "{\"rating_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"rating\":\"rating\",\"date\":\"rated_at\"}}"

headers = {
    'content-type': "application/json",
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("POST", "/v1/items/rating/mapper", payload, headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/items/rating/mapper"

payload = {"rating_key_map": {
        "user_id": "user_id",
        "member_id": "member_id",
        "item_id": "item_id",
        "rating": "rating",
        "date": "rated_at"
    }}
headers = {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("POST", url, json=payload, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/items/rating/mapper")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Post.new(url)
request["content-type"] = 'application/json'
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'
request.body = "{\"rating_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"rating\":\"rating\",\"date\":\"rated_at\"}}"

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request POST \
  --url https://api.recommender.gigalogy.com/v1/items/rating/mapper \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'content-type: application/json' \
  --header 'project-key: SOME_STRING_VALUE' \
  --data '{"rating_key_map":{"user_id":"user_id","member_id":"member_id","item_id":"item_id","rating":"rating","date":"rated_at"}}'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]
let parameters = ["rating_key_map": [
    "user_id": "user_id",
    "member_id": "member_id",
    "item_id": "item_id",
    "rating": "rating",
    "date": "rated_at"
  ]] as [String : Any]

let postData = JSONSerialization.data(withJSONObject: parameters, options: [])

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/items/rating/mapper")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "POST"
request.allHTTPHeaderFields = headers
request.httpBody = postData as Data

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: get/v1/users/mapper
HTTP Method: Get user mapper
Method Description: Get the mapped keys for user information between your data source and our recommender system.
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/users/mapper");
var request = new RestRequest(Method.GET);
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Get,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/users/mapper"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/users/mapper"

	req, _ := http.NewRequest("GET", url, nil)

	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/users/mapper")
  .get()
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.get("https://api.recommender.gigalogy.com/v1/users/mapper")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/users/mapper",
  "method": "GET",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = null;

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("GET", "https://api.recommender.gigalogy.com/v1/users/mapper");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "GET",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/users/mapper",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'GET',
  url: 'https://api.recommender.gigalogy.com/v1/users/mapper',
  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("GET", "https://api.recommender.gigalogy.com/v1/users/mapper");

req.headers({
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/users/mapper"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"GET"];
[request setAllHTTPHeaderFields:headers];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/users/mapper",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "GET",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/users/mapper');
$request-&gt;setMethod(HTTP_METH_GET);

$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/users/mapper');
$request-&gt;setRequestMethod('GET');
$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

headers = {
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("GET", "/v1/users/mapper", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/users/mapper"

headers = {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("GET", url, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/users/mapper")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request GET \
  --url https://api.recommender.gigalogy.com/v1/users/mapper \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'project-key: SOME_STRING_VALUE'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/users/mapper")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "GET"
request.allHTTPHeaderFields = headers

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: put/v1/users/mapper
HTTP Method: Update user mapper
Method Description: This endpoint updates the user mapped keys. Please checkout the schema from the
request body section for details about the key type and supported values.
### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| user_id | str | str | user_id is the id of unique user. choose the parameter from your data source that you want to be the id of user. |
| member_id | Optional[str] | str | member_id is the id of logged-in user. choose the parameter from your data source that you want to be the id of logged-in user. |
| address | Optional[str] | str | Represents address of the unique user. |
| gender | Optional[str] | str | Represents gender of the unique user. |
| age | Optional[str] | str | Represents age of the unique user. |
| type_name | str | str | Represents the type or preference of the user. If you have multiple columns for user preference you can assign them. |
| separator | Optional[str] | str | If one key contains multiple parameter with separator in your data source please assign the separator here. If there is no separator in column value you can pass `null` or remove the key from the request body. |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/users/mapper");
var request = new RestRequest(Method.PUT);
request.AddHeader("content-type", "application/json");
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
request.AddParameter("application/json", "{\"user_key_map\":{\"user_id\":\"customer_id\",\"member_id\":\"member_id\",\"address\":\"residence\",\"gender\":\"gender\",\"age\":\"age\",\"user_type\":[{\"type_name\":\"column_name1\",\"separator\":\"_\"},{\"type_name\":\"column_name2\"}]}}", ParameterType.RequestBody);
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Put,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/users/mapper"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
    Content = new StringContent("{\"user_key_map\":{\"user_id\":\"customer_id\",\"member_id\":\"member_id\",\"address\":\"residence\",\"gender\":\"gender\",\"age\":\"age\",\"user_type\":[{\"type_name\":\"column_name1\",\"separator\":\"_\"},{\"type_name\":\"column_name2\"}]}}")
    {
        Headers =
        {
            ContentType = new MediaTypeHeaderValue("application/json")
        }
    }
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"strings"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/users/mapper"

	payload := strings.NewReader("{\"user_key_map\":{\"user_id\":\"customer_id\",\"member_id\":\"member_id\",\"address\":\"residence\",\"gender\":\"gender\",\"age\":\"age\",\"user_type\":[{\"type_name\":\"column_name1\",\"separator\":\"_\"},{\"type_name\":\"column_name2\"}]}}")

	req, _ := http.NewRequest("PUT", url, payload)

	req.Header.Add("content-type", "application/json")
	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

MediaType mediaType = MediaType.parse("application/json");
RequestBody body = RequestBody.create(mediaType, "{\"user_key_map\":{\"user_id\":\"customer_id\",\"member_id\":\"member_id\",\"address\":\"residence\",\"gender\":\"gender\",\"age\":\"age\",\"user_type\":[{\"type_name\":\"column_name1\",\"separator\":\"_\"},{\"type_name\":\"column_name2\"}]}}");
Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/users/mapper")
  .put(body)
  .addHeader("content-type", "application/json")
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.put("https://api.recommender.gigalogy.com/v1/users/mapper")
  .header("content-type", "application/json")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .body("{\"user_key_map\":{\"user_id\":\"customer_id\",\"member_id\":\"member_id\",\"address\":\"residence\",\"gender\":\"gender\",\"age\":\"age\",\"user_type\":[{\"type_name\":\"column_name1\",\"separator\":\"_\"},{\"type_name\":\"column_name2\"}]}}")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/users/mapper",
  "method": "PUT",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  },
  "processData": false,
  "data": "{\"user_key_map\":{\"user_id\":\"customer_id\",\"member_id\":\"member_id\",\"address\":\"residence\",\"gender\":\"gender\",\"age\":\"age\",\"user_type\":[{\"type_name\":\"column_name1\",\"separator\":\"_\"},{\"type_name\":\"column_name2\"}]}}"
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = JSON.stringify({
  "user_key_map": {
    "user_id": "customer_id",
    "member_id": "member_id",
    "address": "residence",
    "gender": "gender",
    "age": "age",
    "user_type": [
      {
        "type_name": "column_name1",
        "separator": "_"
      },
      {
        "type_name": "column_name2"
      }
    ]
  }
});

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("PUT", "https://api.recommender.gigalogy.com/v1/users/mapper");
xhr.setRequestHeader("content-type", "application/json");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "PUT",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/users/mapper",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.write(JSON.stringify({
  user_key_map: {
    user_id: 'customer_id',
    member_id: 'member_id',
    address: 'residence',
    gender: 'gender',
    age: 'age',
    user_type: [{type_name: 'column_name1', separator: '_'}, {type_name: 'column_name2'}]
  }
}));
req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'PUT',
  url: 'https://api.recommender.gigalogy.com/v1/users/mapper',
  headers: {
    'content-type': 'application/json',
    'project-key': 'SOME_STRING_VALUE',
    'api-key': 'SOME_STRING_VALUE'
  },
  body: {
    user_key_map: {
      user_id: 'customer_id',
      member_id: 'member_id',
      address: 'residence',
      gender: 'gender',
      age: 'age',
      user_type: [{type_name: 'column_name1', separator: '_'}, {type_name: 'column_name2'}]
    }
  },
  json: true
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("PUT", "https://api.recommender.gigalogy.com/v1/users/mapper");

req.headers({
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.type("json");
req.send({
  "user_key_map": {
    "user_id": "customer_id",
    "member_id": "member_id",
    "address": "residence",
    "gender": "gender",
    "age": "age",
    "user_type": [
      {
        "type_name": "column_name1",
        "separator": "_"
      },
      {
        "type_name": "column_name2"
      }
    ]
  }
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"application/json",
                           @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };
NSDictionary *parameters = @{ @"user_key_map": @{ @"user_id": @"customer_id", @"member_id": @"member_id", @"address": @"residence", @"gender": @"gender", @"age": @"age", @"user_type": @[ @{ @"type_name": @"column_name1", @"separator": @"_" }, @{ @"type_name": @"column_name2" } ] } };

NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/users/mapper"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"PUT"];
[request setAllHTTPHeaderFields:headers];
[request setHTTPBody:postData];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/users/mapper",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "PUT",
  CURLOPT_POSTFIELDS =&gt; "{\"user_key_map\":{\"user_id\":\"customer_id\",\"member_id\":\"member_id\",\"address\":\"residence\",\"gender\":\"gender\",\"age\":\"age\",\"user_type\":[{\"type_name\":\"column_name1\",\"separator\":\"_\"},{\"type_name\":\"column_name2\"}]}}",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "content-type: application/json",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/users/mapper');
$request-&gt;setMethod(HTTP_METH_PUT);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$request-&gt;setBody('{"user_key_map":{"user_id":"customer_id","member_id":"member_id","address":"residence","gender":"gender","age":"age","user_type":[{"type_name":"column_name1","separator":"_"},{"type_name":"column_name2"}]}}');

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$body = new http\Message\Body;
$body-&gt;append('{"user_key_map":{"user_id":"customer_id","member_id":"member_id","address":"residence","gender":"gender","age":"age","user_type":[{"type_name":"column_name1","separator":"_"},{"type_name":"column_name2"}]}}');

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/users/mapper');
$request-&gt;setRequestMethod('PUT');
$request-&gt;setBody($body);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

payload = "{\"user_key_map\":{\"user_id\":\"customer_id\",\"member_id\":\"member_id\",\"address\":\"residence\",\"gender\":\"gender\",\"age\":\"age\",\"user_type\":[{\"type_name\":\"column_name1\",\"separator\":\"_\"},{\"type_name\":\"column_name2\"}]}}"

headers = {
    'content-type': "application/json",
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("PUT", "/v1/users/mapper", payload, headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/users/mapper"

payload = {"user_key_map": {
        "user_id": "customer_id",
        "member_id": "member_id",
        "address": "residence",
        "gender": "gender",
        "age": "age",
        "user_type": [{
                "type_name": "column_name1",
                "separator": "_"
            }, {"type_name": "column_name2"}]
    }}
headers = {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("PUT", url, json=payload, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/users/mapper")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Put.new(url)
request["content-type"] = 'application/json'
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'
request.body = "{\"user_key_map\":{\"user_id\":\"customer_id\",\"member_id\":\"member_id\",\"address\":\"residence\",\"gender\":\"gender\",\"age\":\"age\",\"user_type\":[{\"type_name\":\"column_name1\",\"separator\":\"_\"},{\"type_name\":\"column_name2\"}]}}"

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request PUT \
  --url https://api.recommender.gigalogy.com/v1/users/mapper \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'content-type: application/json' \
  --header 'project-key: SOME_STRING_VALUE' \
  --data '{"user_key_map":{"user_id":"customer_id","member_id":"member_id","address":"residence","gender":"gender","age":"age","user_type":[{"type_name":"column_name1","separator":"_"},{"type_name":"column_name2"}]}}'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]
let parameters = ["user_key_map": [
    "user_id": "customer_id",
    "member_id": "member_id",
    "address": "residence",
    "gender": "gender",
    "age": "age",
    "user_type": [[
        "type_name": "column_name1",
        "separator": "_"
      ], ["type_name": "column_name2"]]
  ]] as [String : Any]

let postData = JSONSerialization.data(withJSONObject: parameters, options: [])

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/users/mapper")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "PUT"
request.allHTTPHeaderFields = headers
request.httpBody = postData as Data

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: post/v1/users/mapper
HTTP Method: Map data source keys with recommender user keys
Method Description: This endpoint map data source keys with our recommender user keys. This step is
compulsory if you want to upload user data from CSV file. Please checkout the
schema from the request body section for details about the key type and supported values.
### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| user_id | str | str | user_id is the id of unique user. choose the parameter from your data source that you want to be the id of user. |
| member_id | Optional[str] | str | member_id is the id of logged-in user. choose the parameter from your data source that you want to be the id of logged-in user. |
| address | Optional[str] | str | Represents address of the unique user. |
| gender | Optional[str] | str | Represents gender of the unique user. |
| age | Optional[str] | str | Represents age of the unique user. |
| type_name | str | str | Represents the type or preference of the user. If you have multiple columns for user preference you can assign them. |
| separator | Optional[str] | str | If one key contains multiple parameter with separator in your data source please assign the separator here. If there is no separator in column value you can pass `null` or remove the key from the request body. |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/users/mapper");
var request = new RestRequest(Method.POST);
request.AddHeader("content-type", "application/json");
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
request.AddParameter("application/json", "{\"user_key_map\":{\"user_id\":\"customer_id\",\"member_id\":\"member_id\",\"address\":\"residence\",\"gender\":\"gender\",\"age\":\"age\",\"user_type\":[{\"type_name\":\"column_name1\",\"separator\":\"_\"},{\"type_name\":\"column_name2\"}]}}", ParameterType.RequestBody);
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Post,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/users/mapper"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
    Content = new StringContent("{\"user_key_map\":{\"user_id\":\"customer_id\",\"member_id\":\"member_id\",\"address\":\"residence\",\"gender\":\"gender\",\"age\":\"age\",\"user_type\":[{\"type_name\":\"column_name1\",\"separator\":\"_\"},{\"type_name\":\"column_name2\"}]}}")
    {
        Headers =
        {
            ContentType = new MediaTypeHeaderValue("application/json")
        }
    }
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"strings"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/users/mapper"

	payload := strings.NewReader("{\"user_key_map\":{\"user_id\":\"customer_id\",\"member_id\":\"member_id\",\"address\":\"residence\",\"gender\":\"gender\",\"age\":\"age\",\"user_type\":[{\"type_name\":\"column_name1\",\"separator\":\"_\"},{\"type_name\":\"column_name2\"}]}}")

	req, _ := http.NewRequest("POST", url, payload)

	req.Header.Add("content-type", "application/json")
	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

MediaType mediaType = MediaType.parse("application/json");
RequestBody body = RequestBody.create(mediaType, "{\"user_key_map\":{\"user_id\":\"customer_id\",\"member_id\":\"member_id\",\"address\":\"residence\",\"gender\":\"gender\",\"age\":\"age\",\"user_type\":[{\"type_name\":\"column_name1\",\"separator\":\"_\"},{\"type_name\":\"column_name2\"}]}}");
Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/users/mapper")
  .post(body)
  .addHeader("content-type", "application/json")
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.post("https://api.recommender.gigalogy.com/v1/users/mapper")
  .header("content-type", "application/json")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .body("{\"user_key_map\":{\"user_id\":\"customer_id\",\"member_id\":\"member_id\",\"address\":\"residence\",\"gender\":\"gender\",\"age\":\"age\",\"user_type\":[{\"type_name\":\"column_name1\",\"separator\":\"_\"},{\"type_name\":\"column_name2\"}]}}")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/users/mapper",
  "method": "POST",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  },
  "processData": false,
  "data": "{\"user_key_map\":{\"user_id\":\"customer_id\",\"member_id\":\"member_id\",\"address\":\"residence\",\"gender\":\"gender\",\"age\":\"age\",\"user_type\":[{\"type_name\":\"column_name1\",\"separator\":\"_\"},{\"type_name\":\"column_name2\"}]}}"
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = JSON.stringify({
  "user_key_map": {
    "user_id": "customer_id",
    "member_id": "member_id",
    "address": "residence",
    "gender": "gender",
    "age": "age",
    "user_type": [
      {
        "type_name": "column_name1",
        "separator": "_"
      },
      {
        "type_name": "column_name2"
      }
    ]
  }
});

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("POST", "https://api.recommender.gigalogy.com/v1/users/mapper");
xhr.setRequestHeader("content-type", "application/json");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "POST",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/users/mapper",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.write(JSON.stringify({
  user_key_map: {
    user_id: 'customer_id',
    member_id: 'member_id',
    address: 'residence',
    gender: 'gender',
    age: 'age',
    user_type: [{type_name: 'column_name1', separator: '_'}, {type_name: 'column_name2'}]
  }
}));
req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'POST',
  url: 'https://api.recommender.gigalogy.com/v1/users/mapper',
  headers: {
    'content-type': 'application/json',
    'project-key': 'SOME_STRING_VALUE',
    'api-key': 'SOME_STRING_VALUE'
  },
  body: {
    user_key_map: {
      user_id: 'customer_id',
      member_id: 'member_id',
      address: 'residence',
      gender: 'gender',
      age: 'age',
      user_type: [{type_name: 'column_name1', separator: '_'}, {type_name: 'column_name2'}]
    }
  },
  json: true
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("POST", "https://api.recommender.gigalogy.com/v1/users/mapper");

req.headers({
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.type("json");
req.send({
  "user_key_map": {
    "user_id": "customer_id",
    "member_id": "member_id",
    "address": "residence",
    "gender": "gender",
    "age": "age",
    "user_type": [
      {
        "type_name": "column_name1",
        "separator": "_"
      },
      {
        "type_name": "column_name2"
      }
    ]
  }
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"application/json",
                           @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };
NSDictionary *parameters = @{ @"user_key_map": @{ @"user_id": @"customer_id", @"member_id": @"member_id", @"address": @"residence", @"gender": @"gender", @"age": @"age", @"user_type": @[ @{ @"type_name": @"column_name1", @"separator": @"_" }, @{ @"type_name": @"column_name2" } ] } };

NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/users/mapper"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"POST"];
[request setAllHTTPHeaderFields:headers];
[request setHTTPBody:postData];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/users/mapper",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "POST",
  CURLOPT_POSTFIELDS =&gt; "{\"user_key_map\":{\"user_id\":\"customer_id\",\"member_id\":\"member_id\",\"address\":\"residence\",\"gender\":\"gender\",\"age\":\"age\",\"user_type\":[{\"type_name\":\"column_name1\",\"separator\":\"_\"},{\"type_name\":\"column_name2\"}]}}",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "content-type: application/json",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/users/mapper');
$request-&gt;setMethod(HTTP_METH_POST);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$request-&gt;setBody('{"user_key_map":{"user_id":"customer_id","member_id":"member_id","address":"residence","gender":"gender","age":"age","user_type":[{"type_name":"column_name1","separator":"_"},{"type_name":"column_name2"}]}}');

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$body = new http\Message\Body;
$body-&gt;append('{"user_key_map":{"user_id":"customer_id","member_id":"member_id","address":"residence","gender":"gender","age":"age","user_type":[{"type_name":"column_name1","separator":"_"},{"type_name":"column_name2"}]}}');

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/users/mapper');
$request-&gt;setRequestMethod('POST');
$request-&gt;setBody($body);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

payload = "{\"user_key_map\":{\"user_id\":\"customer_id\",\"member_id\":\"member_id\",\"address\":\"residence\",\"gender\":\"gender\",\"age\":\"age\",\"user_type\":[{\"type_name\":\"column_name1\",\"separator\":\"_\"},{\"type_name\":\"column_name2\"}]}}"

headers = {
    'content-type': "application/json",
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("POST", "/v1/users/mapper", payload, headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/users/mapper"

payload = {"user_key_map": {
        "user_id": "customer_id",
        "member_id": "member_id",
        "address": "residence",
        "gender": "gender",
        "age": "age",
        "user_type": [{
                "type_name": "column_name1",
                "separator": "_"
            }, {"type_name": "column_name2"}]
    }}
headers = {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("POST", url, json=payload, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/users/mapper")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Post.new(url)
request["content-type"] = 'application/json'
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'
request.body = "{\"user_key_map\":{\"user_id\":\"customer_id\",\"member_id\":\"member_id\",\"address\":\"residence\",\"gender\":\"gender\",\"age\":\"age\",\"user_type\":[{\"type_name\":\"column_name1\",\"separator\":\"_\"},{\"type_name\":\"column_name2\"}]}}"

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request POST \
  --url https://api.recommender.gigalogy.com/v1/users/mapper \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'content-type: application/json' \
  --header 'project-key: SOME_STRING_VALUE' \
  --data '{"user_key_map":{"user_id":"customer_id","member_id":"member_id","address":"residence","gender":"gender","age":"age","user_type":[{"type_name":"column_name1","separator":"_"},{"type_name":"column_name2"}]}}'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]
let parameters = ["user_key_map": [
    "user_id": "customer_id",
    "member_id": "member_id",
    "address": "residence",
    "gender": "gender",
    "age": "age",
    "user_type": [[
        "type_name": "column_name1",
        "separator": "_"
      ], ["type_name": "column_name2"]]
  ]] as [String : Any]

let postData = JSONSerialization.data(withJSONObject: parameters, options: [])

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/users/mapper")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "POST"
request.allHTTPHeaderFields = headers
request.httpBody = postData as Data

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: post/v1/indices
HTTP Method: Create indices to hold your data
Method Description: Now you need to create indexes. These indexes will create the necessary schemas
to hold your data.
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/indices");
var request = new RestRequest(Method.POST);
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Post,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/indices"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/indices"

	req, _ := http.NewRequest("POST", url, nil)

	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/indices")
  .post(null)
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.post("https://api.recommender.gigalogy.com/v1/indices")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/indices",
  "method": "POST",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = null;

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("POST", "https://api.recommender.gigalogy.com/v1/indices");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "POST",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/indices",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'POST',
  url: 'https://api.recommender.gigalogy.com/v1/indices',
  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("POST", "https://api.recommender.gigalogy.com/v1/indices");

req.headers({
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/indices"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"POST"];
[request setAllHTTPHeaderFields:headers];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/indices",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "POST",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/indices');
$request-&gt;setMethod(HTTP_METH_POST);

$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/indices');
$request-&gt;setRequestMethod('POST');
$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

headers = {
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("POST", "/v1/indices", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/indices"

headers = {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("POST", url, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/indices")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Post.new(url)
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request POST \
  --url https://api.recommender.gigalogy.com/v1/indices \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'project-key: SOME_STRING_VALUE'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/indices")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "POST"
request.allHTTPHeaderFields = headers

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: delete/v1/indices
HTTP Method: Delete indices
Method Description: You can delete an index with this endpoint. It takes index_type as required parameter.

### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| index_type | Enum | Selected enum value | Represents the type of index. Available value `items`, `image_features`, `browse`, `purchase`, `ratings`, `search`, `stats`, `user`, `settings`, `gpt_dataset`,` gpt_dataset_meta`, `questionnaire`, `questionnaire_mapper`. |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/indices");
var request = new RestRequest(Method.DELETE);
request.AddHeader("content-type", "application/json");
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
request.AddParameter("application/json", "{\"index_type\":\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper\"}", ParameterType.RequestBody);
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Delete,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/indices"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
    Content = new StringContent("{\"index_type\":\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper\"}")
    {
        Headers =
        {
            ContentType = new MediaTypeHeaderValue("application/json")
        }
    }
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"strings"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/indices"

	payload := strings.NewReader("{\"index_type\":\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper\"}")

	req, _ := http.NewRequest("DELETE", url, payload)

	req.Header.Add("content-type", "application/json")
	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

MediaType mediaType = MediaType.parse("application/json");
RequestBody body = RequestBody.create(mediaType, "{\"index_type\":\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper\"}");
Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/indices")
  .delete(body)
  .addHeader("content-type", "application/json")
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.delete("https://api.recommender.gigalogy.com/v1/indices")
  .header("content-type", "application/json")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .body("{\"index_type\":\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper\"}")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/indices",
  "method": "DELETE",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  },
  "processData": false,
  "data": "{\"index_type\":\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper\"}"
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = JSON.stringify({
  "index_type": "Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper"
});

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("DELETE", "https://api.recommender.gigalogy.com/v1/indices");
xhr.setRequestHeader("content-type", "application/json");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "DELETE",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/indices",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.write(JSON.stringify({
  index_type: 'Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper'
}));
req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'DELETE',
  url: 'https://api.recommender.gigalogy.com/v1/indices',
  headers: {
    'content-type': 'application/json',
    'project-key': 'SOME_STRING_VALUE',
    'api-key': 'SOME_STRING_VALUE'
  },
  body: {
    index_type: 'Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper'
  },
  json: true
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("DELETE", "https://api.recommender.gigalogy.com/v1/indices");

req.headers({
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.type("json");
req.send({
  "index_type": "Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"application/json",
                           @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };
NSDictionary *parameters = @{ @"index_type": @"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper" };

NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/indices"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"DELETE"];
[request setAllHTTPHeaderFields:headers];
[request setHTTPBody:postData];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/indices",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "DELETE",
  CURLOPT_POSTFIELDS =&gt; "{\"index_type\":\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper\"}",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "content-type: application/json",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/indices');
$request-&gt;setMethod(HTTP_METH_DELETE);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$request-&gt;setBody('{"index_type":"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper"}');

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$body = new http\Message\Body;
$body-&gt;append('{"index_type":"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper"}');

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/indices');
$request-&gt;setRequestMethod('DELETE');
$request-&gt;setBody($body);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

payload = "{\"index_type\":\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper\"}"

headers = {
    'content-type': "application/json",
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("DELETE", "/v1/indices", payload, headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/indices"

payload = {"index_type": "Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper"}
headers = {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("DELETE", url, json=payload, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/indices")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Delete.new(url)
request["content-type"] = 'application/json'
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'
request.body = "{\"index_type\":\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper\"}"

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request DELETE \
  --url https://api.recommender.gigalogy.com/v1/indices \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'content-type: application/json' \
  --header 'project-key: SOME_STRING_VALUE' \
  --data '{"index_type":"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper"}'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]
let parameters = ["index_type": "Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper"] as [String : Any]

let postData = JSONSerialization.data(withJSONObject: parameters, options: [])

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/indices")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "DELETE"
request.allHTTPHeaderFields = headers
request.httpBody = postData as Data

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: post/v1/reindex
HTTP Method: Creates index with new mappings and settings and create alias for new index
Method Description: This endpoint create new index with new mappings and settings as well as copy all
the documents from previous index to new index. It takes index_type and mapping as
required parameters.

### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| index_type | Enum | Selected enum value | Represents the type of index. Available value `items`, `image_features`, `browse`, `purchase`, `ratings`, `search`, `settings`. |
| mapping | Dict | Dict | Represents required mappings and settings to create index. |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/reindex");
var request = new RestRequest(Method.POST);
request.AddHeader("content-type", "application/json");
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
request.AddParameter("application/json", "{\"index_type\":\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire\",\"mappings\":{\"settings\":{\"analysis\":{}},\"mappings\":{\"properties\":{\"item\":{\"properties\":{}}}}}}", ParameterType.RequestBody);
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Post,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/reindex"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
    Content = new StringContent("{\"index_type\":\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire\",\"mappings\":{\"settings\":{\"analysis\":{}},\"mappings\":{\"properties\":{\"item\":{\"properties\":{}}}}}}")
    {
        Headers =
        {
            ContentType = new MediaTypeHeaderValue("application/json")
        }
    }
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"strings"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/reindex"

	payload := strings.NewReader("{\"index_type\":\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire\",\"mappings\":{\"settings\":{\"analysis\":{}},\"mappings\":{\"properties\":{\"item\":{\"properties\":{}}}}}}")

	req, _ := http.NewRequest("POST", url, payload)

	req.Header.Add("content-type", "application/json")
	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

MediaType mediaType = MediaType.parse("application/json");
RequestBody body = RequestBody.create(mediaType, "{\"index_type\":\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire\",\"mappings\":{\"settings\":{\"analysis\":{}},\"mappings\":{\"properties\":{\"item\":{\"properties\":{}}}}}}");
Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/reindex")
  .post(body)
  .addHeader("content-type", "application/json")
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.post("https://api.recommender.gigalogy.com/v1/reindex")
  .header("content-type", "application/json")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .body("{\"index_type\":\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire\",\"mappings\":{\"settings\":{\"analysis\":{}},\"mappings\":{\"properties\":{\"item\":{\"properties\":{}}}}}}")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/reindex",
  "method": "POST",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  },
  "processData": false,
  "data": "{\"index_type\":\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire\",\"mappings\":{\"settings\":{\"analysis\":{}},\"mappings\":{\"properties\":{\"item\":{\"properties\":{}}}}}}"
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = JSON.stringify({
  "index_type": "Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire",
  "mappings": {
    "settings": {
      "analysis": {}
    },
    "mappings": {
      "properties": {
        "item": {
          "properties": {}
        }
      }
    }
  }
});

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("POST", "https://api.recommender.gigalogy.com/v1/reindex");
xhr.setRequestHeader("content-type", "application/json");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "POST",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/reindex",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.write(JSON.stringify({
  index_type: 'Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire',
  mappings: {settings: {analysis: {}}, mappings: {properties: {item: {properties: {}}}}}
}));
req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'POST',
  url: 'https://api.recommender.gigalogy.com/v1/reindex',
  headers: {
    'content-type': 'application/json',
    'project-key': 'SOME_STRING_VALUE',
    'api-key': 'SOME_STRING_VALUE'
  },
  body: {
    index_type: 'Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire',
    mappings: {settings: {analysis: {}}, mappings: {properties: {item: {properties: {}}}}}
  },
  json: true
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("POST", "https://api.recommender.gigalogy.com/v1/reindex");

req.headers({
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.type("json");
req.send({
  "index_type": "Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire",
  "mappings": {
    "settings": {
      "analysis": {}
    },
    "mappings": {
      "properties": {
        "item": {
          "properties": {}
        }
      }
    }
  }
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"application/json",
                           @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };
NSDictionary *parameters = @{ @"index_type": @"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire",
                              @"mappings": @{ @"settings": @{ @"analysis": @{  } }, @"mappings": @{ @"properties": @{ @"item": @{ @"properties": @{  } } } } } };

NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/reindex"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"POST"];
[request setAllHTTPHeaderFields:headers];
[request setHTTPBody:postData];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/reindex",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "POST",
  CURLOPT_POSTFIELDS =&gt; "{\"index_type\":\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire\",\"mappings\":{\"settings\":{\"analysis\":{}},\"mappings\":{\"properties\":{\"item\":{\"properties\":{}}}}}}",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "content-type: application/json",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/reindex');
$request-&gt;setMethod(HTTP_METH_POST);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$request-&gt;setBody('{"index_type":"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire","mappings":{"settings":{"analysis":{}},"mappings":{"properties":{"item":{"properties":{}}}}}}');

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$body = new http\Message\Body;
$body-&gt;append('{"index_type":"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire","mappings":{"settings":{"analysis":{}},"mappings":{"properties":{"item":{"properties":{}}}}}}');

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/reindex');
$request-&gt;setRequestMethod('POST');
$request-&gt;setBody($body);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

payload = "{\"index_type\":\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire\",\"mappings\":{\"settings\":{\"analysis\":{}},\"mappings\":{\"properties\":{\"item\":{\"properties\":{}}}}}}"

headers = {
    'content-type': "application/json",
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("POST", "/v1/reindex", payload, headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/reindex"

payload = {
    "index_type": "Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire",
    "mappings": {
        "settings": {"analysis": {}},
        "mappings": {"properties": {"item": {"properties": {}}}}
    }
}
headers = {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("POST", url, json=payload, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/reindex")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Post.new(url)
request["content-type"] = 'application/json'
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'
request.body = "{\"index_type\":\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire\",\"mappings\":{\"settings\":{\"analysis\":{}},\"mappings\":{\"properties\":{\"item\":{\"properties\":{}}}}}}"

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request POST \
  --url https://api.recommender.gigalogy.com/v1/reindex \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'content-type: application/json' \
  --header 'project-key: SOME_STRING_VALUE' \
  --data '{"index_type":"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire","mappings":{"settings":{"analysis":{}},"mappings":{"properties":{"item":{"properties":{}}}}}}'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]
let parameters = [
  "index_type": "Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire",
  "mappings": [
    "settings": ["analysis": []],
    "mappings": ["properties": ["item": ["properties": []]]]
  ]
] as [String : Any]

let postData = JSONSerialization.data(withJSONObject: parameters, options: [])

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/reindex")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "POST"
request.allHTTPHeaderFields = headers
request.httpBody = postData as Data

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: get/v1/ranks/settings
HTTP Method: Get rank settings
Method Description: Get your saved rank settings.
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/ranks/settings");
var request = new RestRequest(Method.GET);
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Get,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/ranks/settings"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/ranks/settings"

	req, _ := http.NewRequest("GET", url, nil)

	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/ranks/settings")
  .get()
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.get("https://api.recommender.gigalogy.com/v1/ranks/settings")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/ranks/settings",
  "method": "GET",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = null;

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("GET", "https://api.recommender.gigalogy.com/v1/ranks/settings");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "GET",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/ranks/settings",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'GET',
  url: 'https://api.recommender.gigalogy.com/v1/ranks/settings',
  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("GET", "https://api.recommender.gigalogy.com/v1/ranks/settings");

req.headers({
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/ranks/settings"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"GET"];
[request setAllHTTPHeaderFields:headers];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/ranks/settings",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "GET",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/ranks/settings');
$request-&gt;setMethod(HTTP_METH_GET);

$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/ranks/settings');
$request-&gt;setRequestMethod('GET');
$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

headers = {
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("GET", "/v1/ranks/settings", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/ranks/settings"

headers = {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("GET", url, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/ranks/settings")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request GET \
  --url https://api.recommender.gigalogy.com/v1/ranks/settings \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'project-key: SOME_STRING_VALUE'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/ranks/settings")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "GET"
request.allHTTPHeaderFields = headers

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: put/v1/ranks/settings
HTTP Method: Updates rank settings
Method Description: This endpoint updates the parameter in rank settings. It takes several technical
parameters. Please checkout the schema from the request body section for details
about the key type and supported values.

### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| interval | List[Enum] | Selected enum value | Represents the time interval to train ranking model. Available values are `weekly`, `bi-weekly`, `monthly`, `quarterly`, `yearly`. |
| split_size | float | float | Represents split_size to split data. Splitted data would be distributed as X_train, X_test, y_train, y_test and prepare the data for ranking model. IIf you are not sure about this parameter please use the default value. |
| epoch | int | int | Represents the number of epoch for training the ranking model. If you are not sure about this parameter please use the default value. |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/ranks/settings");
var request = new RestRequest(Method.PUT);
request.AddHeader("content-type", "application/json");
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
request.AddParameter("application/json", "{\"rank_settings\":{\"interval\":[\"weekly\",\"bi-weekly\",\"monthly\",\"quarterly\",\"yearly\"],\"split_size\":0.1,\"epoch\":200}}", ParameterType.RequestBody);
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Put,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/ranks/settings"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
    Content = new StringContent("{\"rank_settings\":{\"interval\":[\"weekly\",\"bi-weekly\",\"monthly\",\"quarterly\",\"yearly\"],\"split_size\":0.1,\"epoch\":200}}")
    {
        Headers =
        {
            ContentType = new MediaTypeHeaderValue("application/json")
        }
    }
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"strings"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/ranks/settings"

	payload := strings.NewReader("{\"rank_settings\":{\"interval\":[\"weekly\",\"bi-weekly\",\"monthly\",\"quarterly\",\"yearly\"],\"split_size\":0.1,\"epoch\":200}}")

	req, _ := http.NewRequest("PUT", url, payload)

	req.Header.Add("content-type", "application/json")
	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

MediaType mediaType = MediaType.parse("application/json");
RequestBody body = RequestBody.create(mediaType, "{\"rank_settings\":{\"interval\":[\"weekly\",\"bi-weekly\",\"monthly\",\"quarterly\",\"yearly\"],\"split_size\":0.1,\"epoch\":200}}");
Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/ranks/settings")
  .put(body)
  .addHeader("content-type", "application/json")
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.put("https://api.recommender.gigalogy.com/v1/ranks/settings")
  .header("content-type", "application/json")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .body("{\"rank_settings\":{\"interval\":[\"weekly\",\"bi-weekly\",\"monthly\",\"quarterly\",\"yearly\"],\"split_size\":0.1,\"epoch\":200}}")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/ranks/settings",
  "method": "PUT",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  },
  "processData": false,
  "data": "{\"rank_settings\":{\"interval\":[\"weekly\",\"bi-weekly\",\"monthly\",\"quarterly\",\"yearly\"],\"split_size\":0.1,\"epoch\":200}}"
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = JSON.stringify({
  "rank_settings": {
    "interval": [
      "weekly",
      "bi-weekly",
      "monthly",
      "quarterly",
      "yearly"
    ],
    "split_size": 0.1,
    "epoch": 200
  }
});

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("PUT", "https://api.recommender.gigalogy.com/v1/ranks/settings");
xhr.setRequestHeader("content-type", "application/json");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "PUT",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/ranks/settings",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.write(JSON.stringify({
  rank_settings: {
    interval: ['weekly', 'bi-weekly', 'monthly', 'quarterly', 'yearly'],
    split_size: 0.1,
    epoch: 200
  }
}));
req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'PUT',
  url: 'https://api.recommender.gigalogy.com/v1/ranks/settings',
  headers: {
    'content-type': 'application/json',
    'project-key': 'SOME_STRING_VALUE',
    'api-key': 'SOME_STRING_VALUE'
  },
  body: {
    rank_settings: {
      interval: ['weekly', 'bi-weekly', 'monthly', 'quarterly', 'yearly'],
      split_size: 0.1,
      epoch: 200
    }
  },
  json: true
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("PUT", "https://api.recommender.gigalogy.com/v1/ranks/settings");

req.headers({
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.type("json");
req.send({
  "rank_settings": {
    "interval": [
      "weekly",
      "bi-weekly",
      "monthly",
      "quarterly",
      "yearly"
    ],
    "split_size": 0.1,
    "epoch": 200
  }
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"application/json",
                           @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };
NSDictionary *parameters = @{ @"rank_settings": @{ @"interval": @[ @"weekly", @"bi-weekly", @"monthly", @"quarterly", @"yearly" ], @"split_size": @0.1, @"epoch": @200 } };

NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/ranks/settings"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"PUT"];
[request setAllHTTPHeaderFields:headers];
[request setHTTPBody:postData];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/ranks/settings",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "PUT",
  CURLOPT_POSTFIELDS =&gt; "{\"rank_settings\":{\"interval\":[\"weekly\",\"bi-weekly\",\"monthly\",\"quarterly\",\"yearly\"],\"split_size\":0.1,\"epoch\":200}}",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "content-type: application/json",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/ranks/settings');
$request-&gt;setMethod(HTTP_METH_PUT);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$request-&gt;setBody('{"rank_settings":{"interval":["weekly","bi-weekly","monthly","quarterly","yearly"],"split_size":0.1,"epoch":200}}');

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$body = new http\Message\Body;
$body-&gt;append('{"rank_settings":{"interval":["weekly","bi-weekly","monthly","quarterly","yearly"],"split_size":0.1,"epoch":200}}');

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/ranks/settings');
$request-&gt;setRequestMethod('PUT');
$request-&gt;setBody($body);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

payload = "{\"rank_settings\":{\"interval\":[\"weekly\",\"bi-weekly\",\"monthly\",\"quarterly\",\"yearly\"],\"split_size\":0.1,\"epoch\":200}}"

headers = {
    'content-type': "application/json",
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("PUT", "/v1/ranks/settings", payload, headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/ranks/settings"

payload = {"rank_settings": {
        "interval": ["weekly", "bi-weekly", "monthly", "quarterly", "yearly"],
        "split_size": 0.1,
        "epoch": 200
    }}
headers = {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("PUT", url, json=payload, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/ranks/settings")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Put.new(url)
request["content-type"] = 'application/json'
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'
request.body = "{\"rank_settings\":{\"interval\":[\"weekly\",\"bi-weekly\",\"monthly\",\"quarterly\",\"yearly\"],\"split_size\":0.1,\"epoch\":200}}"

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request PUT \
  --url https://api.recommender.gigalogy.com/v1/ranks/settings \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'content-type: application/json' \
  --header 'project-key: SOME_STRING_VALUE' \
  --data '{"rank_settings":{"interval":["weekly","bi-weekly","monthly","quarterly","yearly"],"split_size":0.1,"epoch":200}}'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]
let parameters = ["rank_settings": [
    "interval": ["weekly", "bi-weekly", "monthly", "quarterly", "yearly"],
    "split_size": 0.1,
    "epoch": 200
  ]] as [String : Any]

let postData = JSONSerialization.data(withJSONObject: parameters, options: [])

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/ranks/settings")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "PUT"
request.allHTTPHeaderFields = headers
request.httpBody = postData as Data

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: post/v1/ranks/settings
HTTP Method: Creates rank settings
Method Description: This endpoint determines the key parameters for our ranking model. It takes
several technical parameters. Please checkout the schema from the request body
section for details about the key type and supported values.

### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| interval | List[Enum] | Selected enum value | Represents the time interval to train ranking model. Available values are `weekly`, `bi-weekly`, `monthly`, `quarterly`, `yearly`. |
| split_size | float | float | Represents split_size to split data. Splitted data would be distributed as X_train, X_test, y_train, y_test and prepare the data for ranking model. IIf you are not sure about this parameter please use the default value. |
| epoch | int | int | Represents the number of epoch for training the ranking model. If you are not sure about this parameter please use the default value. |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/ranks/settings");
var request = new RestRequest(Method.POST);
request.AddHeader("content-type", "application/json");
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
request.AddParameter("application/json", "{\"rank_settings\":{\"interval\":[\"weekly\",\"bi-weekly\",\"monthly\",\"quarterly\",\"yearly\"],\"split_size\":0.1,\"epoch\":200}}", ParameterType.RequestBody);
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Post,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/ranks/settings"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
    Content = new StringContent("{\"rank_settings\":{\"interval\":[\"weekly\",\"bi-weekly\",\"monthly\",\"quarterly\",\"yearly\"],\"split_size\":0.1,\"epoch\":200}}")
    {
        Headers =
        {
            ContentType = new MediaTypeHeaderValue("application/json")
        }
    }
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"strings"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/ranks/settings"

	payload := strings.NewReader("{\"rank_settings\":{\"interval\":[\"weekly\",\"bi-weekly\",\"monthly\",\"quarterly\",\"yearly\"],\"split_size\":0.1,\"epoch\":200}}")

	req, _ := http.NewRequest("POST", url, payload)

	req.Header.Add("content-type", "application/json")
	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

MediaType mediaType = MediaType.parse("application/json");
RequestBody body = RequestBody.create(mediaType, "{\"rank_settings\":{\"interval\":[\"weekly\",\"bi-weekly\",\"monthly\",\"quarterly\",\"yearly\"],\"split_size\":0.1,\"epoch\":200}}");
Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/ranks/settings")
  .post(body)
  .addHeader("content-type", "application/json")
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.post("https://api.recommender.gigalogy.com/v1/ranks/settings")
  .header("content-type", "application/json")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .body("{\"rank_settings\":{\"interval\":[\"weekly\",\"bi-weekly\",\"monthly\",\"quarterly\",\"yearly\"],\"split_size\":0.1,\"epoch\":200}}")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/ranks/settings",
  "method": "POST",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  },
  "processData": false,
  "data": "{\"rank_settings\":{\"interval\":[\"weekly\",\"bi-weekly\",\"monthly\",\"quarterly\",\"yearly\"],\"split_size\":0.1,\"epoch\":200}}"
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = JSON.stringify({
  "rank_settings": {
    "interval": [
      "weekly",
      "bi-weekly",
      "monthly",
      "quarterly",
      "yearly"
    ],
    "split_size": 0.1,
    "epoch": 200
  }
});

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("POST", "https://api.recommender.gigalogy.com/v1/ranks/settings");
xhr.setRequestHeader("content-type", "application/json");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "POST",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/ranks/settings",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.write(JSON.stringify({
  rank_settings: {
    interval: ['weekly', 'bi-weekly', 'monthly', 'quarterly', 'yearly'],
    split_size: 0.1,
    epoch: 200
  }
}));
req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'POST',
  url: 'https://api.recommender.gigalogy.com/v1/ranks/settings',
  headers: {
    'content-type': 'application/json',
    'project-key': 'SOME_STRING_VALUE',
    'api-key': 'SOME_STRING_VALUE'
  },
  body: {
    rank_settings: {
      interval: ['weekly', 'bi-weekly', 'monthly', 'quarterly', 'yearly'],
      split_size: 0.1,
      epoch: 200
    }
  },
  json: true
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("POST", "https://api.recommender.gigalogy.com/v1/ranks/settings");

req.headers({
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.type("json");
req.send({
  "rank_settings": {
    "interval": [
      "weekly",
      "bi-weekly",
      "monthly",
      "quarterly",
      "yearly"
    ],
    "split_size": 0.1,
    "epoch": 200
  }
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"application/json",
                           @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };
NSDictionary *parameters = @{ @"rank_settings": @{ @"interval": @[ @"weekly", @"bi-weekly", @"monthly", @"quarterly", @"yearly" ], @"split_size": @0.1, @"epoch": @200 } };

NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/ranks/settings"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"POST"];
[request setAllHTTPHeaderFields:headers];
[request setHTTPBody:postData];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/ranks/settings",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "POST",
  CURLOPT_POSTFIELDS =&gt; "{\"rank_settings\":{\"interval\":[\"weekly\",\"bi-weekly\",\"monthly\",\"quarterly\",\"yearly\"],\"split_size\":0.1,\"epoch\":200}}",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "content-type: application/json",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/ranks/settings');
$request-&gt;setMethod(HTTP_METH_POST);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$request-&gt;setBody('{"rank_settings":{"interval":["weekly","bi-weekly","monthly","quarterly","yearly"],"split_size":0.1,"epoch":200}}');

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$body = new http\Message\Body;
$body-&gt;append('{"rank_settings":{"interval":["weekly","bi-weekly","monthly","quarterly","yearly"],"split_size":0.1,"epoch":200}}');

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/ranks/settings');
$request-&gt;setRequestMethod('POST');
$request-&gt;setBody($body);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

payload = "{\"rank_settings\":{\"interval\":[\"weekly\",\"bi-weekly\",\"monthly\",\"quarterly\",\"yearly\"],\"split_size\":0.1,\"epoch\":200}}"

headers = {
    'content-type': "application/json",
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("POST", "/v1/ranks/settings", payload, headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/ranks/settings"

payload = {"rank_settings": {
        "interval": ["weekly", "bi-weekly", "monthly", "quarterly", "yearly"],
        "split_size": 0.1,
        "epoch": 200
    }}
headers = {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("POST", url, json=payload, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/ranks/settings")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Post.new(url)
request["content-type"] = 'application/json'
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'
request.body = "{\"rank_settings\":{\"interval\":[\"weekly\",\"bi-weekly\",\"monthly\",\"quarterly\",\"yearly\"],\"split_size\":0.1,\"epoch\":200}}"

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request POST \
  --url https://api.recommender.gigalogy.com/v1/ranks/settings \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'content-type: application/json' \
  --header 'project-key: SOME_STRING_VALUE' \
  --data '{"rank_settings":{"interval":["weekly","bi-weekly","monthly","quarterly","yearly"],"split_size":0.1,"epoch":200}}'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]
let parameters = ["rank_settings": [
    "interval": ["weekly", "bi-weekly", "monthly", "quarterly", "yearly"],
    "split_size": 0.1,
    "epoch": 200
  ]] as [String : Any]

let postData = JSONSerialization.data(withJSONObject: parameters, options: [])

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/ranks/settings")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "POST"
request.allHTTPHeaderFields = headers
request.httpBody = postData as Data

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: post/v1/items/save
HTTP Method: Upload a CSV or JSON file and save data in item index
Method Description: This endpoint uploads and saves data from the CSV file in the item index. It only
takes text or CSV files as a required parameter. If you want to integrate your
item data from a CSV file with our recommender system this endpoint will upload
the file and save them to the database.
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/items/save");
var request = new RestRequest(Method.POST);
request.AddHeader("content-type", "multipart/form-data");
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Post,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/items/save"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/items/save"

	req, _ := http.NewRequest("POST", url, nil)

	req.Header.Add("content-type", "multipart/form-data")
	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/items/save")
  .post(null)
  .addHeader("content-type", "multipart/form-data")
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.post("https://api.recommender.gigalogy.com/v1/items/save")
  .header("content-type", "multipart/form-data")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/items/save",
  "method": "POST",
  "headers": {
    "content-type": "multipart/form-data",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = null;

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("POST", "https://api.recommender.gigalogy.com/v1/items/save");
xhr.setRequestHeader("content-type", "multipart/form-data");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "POST",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/items/save",
  "headers": {
    "content-type": "multipart/form-data",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'POST',
  url: 'https://api.recommender.gigalogy.com/v1/items/save',
  headers: {
    'content-type': 'multipart/form-data',
    'project-key': 'SOME_STRING_VALUE',
    'api-key': 'SOME_STRING_VALUE'
  }
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("POST", "https://api.recommender.gigalogy.com/v1/items/save");

req.headers({
  "content-type": "multipart/form-data",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"multipart/form-data",
                           @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/items/save"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"POST"];
[request setAllHTTPHeaderFields:headers];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/items/save",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "POST",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "content-type: multipart/form-data",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/items/save');
$request-&gt;setMethod(HTTP_METH_POST);

$request-&gt;setHeaders([
  'content-type' =&gt; 'multipart/form-data',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/items/save');
$request-&gt;setRequestMethod('POST');
$request-&gt;setHeaders([
  'content-type' =&gt; 'multipart/form-data',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

headers = {
    'content-type': "multipart/form-data",
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("POST", "/v1/items/save", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/items/save"

headers = {
    "content-type": "multipart/form-data",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("POST", url, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/items/save")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Post.new(url)
request["content-type"] = 'multipart/form-data'
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request POST \
  --url https://api.recommender.gigalogy.com/v1/items/save \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'content-type: multipart/form-data' \
  --header 'project-key: SOME_STRING_VALUE'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "multipart/form-data",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/items/save")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "POST"
request.allHTTPHeaderFields = headers

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: post/v1/items/save/remote
HTTP Method: Save items to database from a given endpoint
Method Description: This endpoint fetches item data from external API and saves them in the item index.
It takes URL, method, response_items_key as required parameters as well as headers,
query_parameters, body_parameters, response_item_key as optional parameters.
Please check out the schema from the request body section for details about the
key type and supported values.
This endpoint can be used to fetch items into our recommender system if you
have product details API.

### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| url | str | str | Represents URL of the product details api from where you want to fetch items into recommender |
| method | str | str | Represents api method of the endpoint from which you want to fetch data into recommender. |
| headers | Optional[Dict[str, str]] | str | Represents the meta data associated with api request and response. |
| query_parameters | Optional[Dict[str, str]] | str | Represents the query parameter of api endpoint. It could be required to fetch data from external api otherwise you can keep it empty. |
| body_parameters | Optional[Dict[str, str]] | str | Represents the body parameter of api endpoint. It could be required to fetch data from external api otherwise you can keep it empty. |
| response_items_key | str | str | Represents the key of response items which you want to fetch into recommender . |
| response_item_key | Optional[str] | str | If you have multiple keys in response you can use the key from where you want to fetch items. It could be empty as well. |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/items/save/remote");
var request = new RestRequest(Method.POST);
request.AddHeader("content-type", "application/json");
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
request.AddParameter("application/json", "{\"url\":\"https://api.doozie.ai/v1/api/items/search\",\"method\":\"GET\",\"headers\":{\"parameter_one\":\"value_one\",\"parameter_two\":\"value_two\",\"...\":\"...\"},\"query_parameters\":{\"parameter_one\":\"value_one\",\"parameter_two\":\"value_two\",\"...\":\"...\"},\"body_parameters\":{\"parameter_one\":\"value_one\",\"parameter_two\":\"value_two\",\"...\":\"...\"},\"response_items_key\":\"Items\",\"response_item_key\":\"Item\"}", ParameterType.RequestBody);
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Post,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/items/save/remote"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
    Content = new StringContent("{\"url\":\"https://api.doozie.ai/v1/api/items/search\",\"method\":\"GET\",\"headers\":{\"parameter_one\":\"value_one\",\"parameter_two\":\"value_two\",\"...\":\"...\"},\"query_parameters\":{\"parameter_one\":\"value_one\",\"parameter_two\":\"value_two\",\"...\":\"...\"},\"body_parameters\":{\"parameter_one\":\"value_one\",\"parameter_two\":\"value_two\",\"...\":\"...\"},\"response_items_key\":\"Items\",\"response_item_key\":\"Item\"}")
    {
        Headers =
        {
            ContentType = new MediaTypeHeaderValue("application/json")
        }
    }
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"strings"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/items/save/remote"

	payload := strings.NewReader("{\"url\":\"https://api.doozie.ai/v1/api/items/search\",\"method\":\"GET\",\"headers\":{\"parameter_one\":\"value_one\",\"parameter_two\":\"value_two\",\"...\":\"...\"},\"query_parameters\":{\"parameter_one\":\"value_one\",\"parameter_two\":\"value_two\",\"...\":\"...\"},\"body_parameters\":{\"parameter_one\":\"value_one\",\"parameter_two\":\"value_two\",\"...\":\"...\"},\"response_items_key\":\"Items\",\"response_item_key\":\"Item\"}")

	req, _ := http.NewRequest("POST", url, payload)

	req.Header.Add("content-type", "application/json")
	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

MediaType mediaType = MediaType.parse("application/json");
RequestBody body = RequestBody.create(mediaType, "{\"url\":\"https://api.doozie.ai/v1/api/items/search\",\"method\":\"GET\",\"headers\":{\"parameter_one\":\"value_one\",\"parameter_two\":\"value_two\",\"...\":\"...\"},\"query_parameters\":{\"parameter_one\":\"value_one\",\"parameter_two\":\"value_two\",\"...\":\"...\"},\"body_parameters\":{\"parameter_one\":\"value_one\",\"parameter_two\":\"value_two\",\"...\":\"...\"},\"response_items_key\":\"Items\",\"response_item_key\":\"Item\"}");
Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/items/save/remote")
  .post(body)
  .addHeader("content-type", "application/json")
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.post("https://api.recommender.gigalogy.com/v1/items/save/remote")
  .header("content-type", "application/json")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .body("{\"url\":\"https://api.doozie.ai/v1/api/items/search\",\"method\":\"GET\",\"headers\":{\"parameter_one\":\"value_one\",\"parameter_two\":\"value_two\",\"...\":\"...\"},\"query_parameters\":{\"parameter_one\":\"value_one\",\"parameter_two\":\"value_two\",\"...\":\"...\"},\"body_parameters\":{\"parameter_one\":\"value_one\",\"parameter_two\":\"value_two\",\"...\":\"...\"},\"response_items_key\":\"Items\",\"response_item_key\":\"Item\"}")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/items/save/remote",
  "method": "POST",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  },
  "processData": false,
  "data": "{\"url\":\"https://api.doozie.ai/v1/api/items/search\",\"method\":\"GET\",\"headers\":{\"parameter_one\":\"value_one\",\"parameter_two\":\"value_two\",\"...\":\"...\"},\"query_parameters\":{\"parameter_one\":\"value_one\",\"parameter_two\":\"value_two\",\"...\":\"...\"},\"body_parameters\":{\"parameter_one\":\"value_one\",\"parameter_two\":\"value_two\",\"...\":\"...\"},\"response_items_key\":\"Items\",\"response_item_key\":\"Item\"}"
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = JSON.stringify({
  "url": "https://api.doozie.ai/v1/api/items/search",
  "method": "GET",
  "headers": {
    "parameter_one": "value_one",
    "parameter_two": "value_two",
    "...": "..."
  },
  "query_parameters": {
    "parameter_one": "value_one",
    "parameter_two": "value_two",
    "...": "..."
  },
  "body_parameters": {
    "parameter_one": "value_one",
    "parameter_two": "value_two",
    "...": "..."
  },
  "response_items_key": "Items",
  "response_item_key": "Item"
});

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("POST", "https://api.recommender.gigalogy.com/v1/items/save/remote");
xhr.setRequestHeader("content-type", "application/json");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "POST",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/items/save/remote",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.write(JSON.stringify({
  url: 'https://api.doozie.ai/v1/api/items/search',
  method: 'GET',
  headers: {parameter_one: 'value_one', parameter_two: 'value_two', '...': '...'},
  query_parameters: {parameter_one: 'value_one', parameter_two: 'value_two', '...': '...'},
  body_parameters: {parameter_one: 'value_one', parameter_two: 'value_two', '...': '...'},
  response_items_key: 'Items',
  response_item_key: 'Item'
}));
req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'POST',
  url: 'https://api.recommender.gigalogy.com/v1/items/save/remote',
  headers: {
    'content-type': 'application/json',
    'project-key': 'SOME_STRING_VALUE',
    'api-key': 'SOME_STRING_VALUE'
  },
  body: {
    url: 'https://api.doozie.ai/v1/api/items/search',
    method: 'GET',
    headers: {parameter_one: 'value_one', parameter_two: 'value_two', '...': '...'},
    query_parameters: {parameter_one: 'value_one', parameter_two: 'value_two', '...': '...'},
    body_parameters: {parameter_one: 'value_one', parameter_two: 'value_two', '...': '...'},
    response_items_key: 'Items',
    response_item_key: 'Item'
  },
  json: true
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("POST", "https://api.recommender.gigalogy.com/v1/items/save/remote");

req.headers({
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.type("json");
req.send({
  "url": "https://api.doozie.ai/v1/api/items/search",
  "method": "GET",
  "headers": {
    "parameter_one": "value_one",
    "parameter_two": "value_two",
    "...": "..."
  },
  "query_parameters": {
    "parameter_one": "value_one",
    "parameter_two": "value_two",
    "...": "..."
  },
  "body_parameters": {
    "parameter_one": "value_one",
    "parameter_two": "value_two",
    "...": "..."
  },
  "response_items_key": "Items",
  "response_item_key": "Item"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"application/json",
                           @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };
NSDictionary *parameters = @{ @"url": @"https://api.doozie.ai/v1/api/items/search",
                              @"method": @"GET",
                              @"headers": @{ @"parameter_one": @"value_one", @"parameter_two": @"value_two", @"...": @"..." },
                              @"query_parameters": @{ @"parameter_one": @"value_one", @"parameter_two": @"value_two", @"...": @"..." },
                              @"body_parameters": @{ @"parameter_one": @"value_one", @"parameter_two": @"value_two", @"...": @"..." },
                              @"response_items_key": @"Items",
                              @"response_item_key": @"Item" };

NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/items/save/remote"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"POST"];
[request setAllHTTPHeaderFields:headers];
[request setHTTPBody:postData];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/items/save/remote",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "POST",
  CURLOPT_POSTFIELDS =&gt; "{\"url\":\"https://api.doozie.ai/v1/api/items/search\",\"method\":\"GET\",\"headers\":{\"parameter_one\":\"value_one\",\"parameter_two\":\"value_two\",\"...\":\"...\"},\"query_parameters\":{\"parameter_one\":\"value_one\",\"parameter_two\":\"value_two\",\"...\":\"...\"},\"body_parameters\":{\"parameter_one\":\"value_one\",\"parameter_two\":\"value_two\",\"...\":\"...\"},\"response_items_key\":\"Items\",\"response_item_key\":\"Item\"}",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "content-type: application/json",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/items/save/remote');
$request-&gt;setMethod(HTTP_METH_POST);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$request-&gt;setBody('{"url":"https://api.doozie.ai/v1/api/items/search","method":"GET","headers":{"parameter_one":"value_one","parameter_two":"value_two","...":"..."},"query_parameters":{"parameter_one":"value_one","parameter_two":"value_two","...":"..."},"body_parameters":{"parameter_one":"value_one","parameter_two":"value_two","...":"..."},"response_items_key":"Items","response_item_key":"Item"}');

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$body = new http\Message\Body;
$body-&gt;append('{"url":"https://api.doozie.ai/v1/api/items/search","method":"GET","headers":{"parameter_one":"value_one","parameter_two":"value_two","...":"..."},"query_parameters":{"parameter_one":"value_one","parameter_two":"value_two","...":"..."},"body_parameters":{"parameter_one":"value_one","parameter_two":"value_two","...":"..."},"response_items_key":"Items","response_item_key":"Item"}');

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/items/save/remote');
$request-&gt;setRequestMethod('POST');
$request-&gt;setBody($body);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

payload = "{\"url\":\"https://api.doozie.ai/v1/api/items/search\",\"method\":\"GET\",\"headers\":{\"parameter_one\":\"value_one\",\"parameter_two\":\"value_two\",\"...\":\"...\"},\"query_parameters\":{\"parameter_one\":\"value_one\",\"parameter_two\":\"value_two\",\"...\":\"...\"},\"body_parameters\":{\"parameter_one\":\"value_one\",\"parameter_two\":\"value_two\",\"...\":\"...\"},\"response_items_key\":\"Items\",\"response_item_key\":\"Item\"}"

headers = {
    'content-type': "application/json",
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("POST", "/v1/items/save/remote", payload, headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/items/save/remote"

payload = {
    "url": "https://api.doozie.ai/v1/api/items/search",
    "method": "GET",
    "headers": {
        "parameter_one": "value_one",
        "parameter_two": "value_two",
        "...": "..."
    },
    "query_parameters": {
        "parameter_one": "value_one",
        "parameter_two": "value_two",
        "...": "..."
    },
    "body_parameters": {
        "parameter_one": "value_one",
        "parameter_two": "value_two",
        "...": "..."
    },
    "response_items_key": "Items",
    "response_item_key": "Item"
}
headers = {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("POST", url, json=payload, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/items/save/remote")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Post.new(url)
request["content-type"] = 'application/json'
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'
request.body = "{\"url\":\"https://api.doozie.ai/v1/api/items/search\",\"method\":\"GET\",\"headers\":{\"parameter_one\":\"value_one\",\"parameter_two\":\"value_two\",\"...\":\"...\"},\"query_parameters\":{\"parameter_one\":\"value_one\",\"parameter_two\":\"value_two\",\"...\":\"...\"},\"body_parameters\":{\"parameter_one\":\"value_one\",\"parameter_two\":\"value_two\",\"...\":\"...\"},\"response_items_key\":\"Items\",\"response_item_key\":\"Item\"}"

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request POST \
  --url https://api.recommender.gigalogy.com/v1/items/save/remote \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'content-type: application/json' \
  --header 'project-key: SOME_STRING_VALUE' \
  --data '{"url":"https://api.doozie.ai/v1/api/items/search","method":"GET","headers":{"parameter_one":"value_one","parameter_two":"value_two","...":"..."},"query_parameters":{"parameter_one":"value_one","parameter_two":"value_two","...":"..."},"body_parameters":{"parameter_one":"value_one","parameter_two":"value_two","...":"..."},"response_items_key":"Items","response_item_key":"Item"}'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]
let parameters = [
  "url": "https://api.doozie.ai/v1/api/items/search",
  "method": "GET",
  "headers": [
    "parameter_one": "value_one",
    "parameter_two": "value_two",
    "...": "..."
  ],
  "query_parameters": [
    "parameter_one": "value_one",
    "parameter_two": "value_two",
    "...": "..."
  ],
  "body_parameters": [
    "parameter_one": "value_one",
    "parameter_two": "value_two",
    "...": "..."
  ],
  "response_items_key": "Items",
  "response_item_key": "Item"
] as [String : Any]

let postData = JSONSerialization.data(withJSONObject: parameters, options: [])

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/items/save/remote")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "POST"
request.allHTTPHeaderFields = headers
request.httpBody = postData as Data

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: get/v1/items/train
HTTP Method: Trains item data and generates a graph of relations
Method Description: This endpoint trains item data and generates intelligence from it.
Item data are trained automatically on a regular time interval. This endpoint
can be used to train item data manually.
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/items/train?train_all=SOME_BOOLEAN_VALUE&amp;train_from=SOME_STRING_VALUE&amp;train_to=SOME_STRING_VALUE");
var request = new RestRequest(Method.GET);
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Get,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/items/train?train_all=SOME_BOOLEAN_VALUE&amp;train_from=SOME_STRING_VALUE&amp;train_to=SOME_STRING_VALUE"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/items/train?train_all=SOME_BOOLEAN_VALUE&amp;train_from=SOME_STRING_VALUE&amp;train_to=SOME_STRING_VALUE"

	req, _ := http.NewRequest("GET", url, nil)

	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/items/train?train_all=SOME_BOOLEAN_VALUE&amp;train_from=SOME_STRING_VALUE&amp;train_to=SOME_STRING_VALUE")
  .get()
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.get("https://api.recommender.gigalogy.com/v1/items/train?train_all=SOME_BOOLEAN_VALUE&amp;train_from=SOME_STRING_VALUE&amp;train_to=SOME_STRING_VALUE")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/items/train?train_all=SOME_BOOLEAN_VALUE&amp;train_from=SOME_STRING_VALUE&amp;train_to=SOME_STRING_VALUE",
  "method": "GET",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = null;

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("GET", "https://api.recommender.gigalogy.com/v1/items/train?train_all=SOME_BOOLEAN_VALUE&amp;train_from=SOME_STRING_VALUE&amp;train_to=SOME_STRING_VALUE");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "GET",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/items/train?train_all=SOME_BOOLEAN_VALUE&amp;train_from=SOME_STRING_VALUE&amp;train_to=SOME_STRING_VALUE",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'GET',
  url: 'https://api.recommender.gigalogy.com/v1/items/train',
  qs: {
    train_all: 'SOME_BOOLEAN_VALUE',
    train_from: 'SOME_STRING_VALUE',
    train_to: 'SOME_STRING_VALUE'
  },
  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("GET", "https://api.recommender.gigalogy.com/v1/items/train");

req.query({
  "train_all": "SOME_BOOLEAN_VALUE",
  "train_from": "SOME_STRING_VALUE",
  "train_to": "SOME_STRING_VALUE"
});

req.headers({
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/items/train?train_all=SOME_BOOLEAN_VALUE&amp;train_from=SOME_STRING_VALUE&amp;train_to=SOME_STRING_VALUE"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"GET"];
[request setAllHTTPHeaderFields:headers];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/items/train?train_all=SOME_BOOLEAN_VALUE&amp;train_from=SOME_STRING_VALUE&amp;train_to=SOME_STRING_VALUE",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "GET",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/items/train');
$request-&gt;setMethod(HTTP_METH_GET);

$request-&gt;setQueryData([
  'train_all' =&gt; 'SOME_BOOLEAN_VALUE',
  'train_from' =&gt; 'SOME_STRING_VALUE',
  'train_to' =&gt; 'SOME_STRING_VALUE'
]);

$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/items/train');
$request-&gt;setRequestMethod('GET');
$request-&gt;setQuery(new http\QueryString([
  'train_all' =&gt; 'SOME_BOOLEAN_VALUE',
  'train_from' =&gt; 'SOME_STRING_VALUE',
  'train_to' =&gt; 'SOME_STRING_VALUE'
]));

$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

headers = {
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("GET", "/v1/items/train?train_all=SOME_BOOLEAN_VALUE&amp;train_from=SOME_STRING_VALUE&amp;train_to=SOME_STRING_VALUE", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/items/train"

querystring = {"train_all":"SOME_BOOLEAN_VALUE","train_from":"SOME_STRING_VALUE","train_to":"SOME_STRING_VALUE"}

headers = {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("GET", url, headers=headers, params=querystring)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/items/train?train_all=SOME_BOOLEAN_VALUE&amp;train_from=SOME_STRING_VALUE&amp;train_to=SOME_STRING_VALUE")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request GET \
  --url 'https://api.recommender.gigalogy.com/v1/items/train?train_all=SOME_BOOLEAN_VALUE&amp;train_from=SOME_STRING_VALUE&amp;train_to=SOME_STRING_VALUE' \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'project-key: SOME_STRING_VALUE'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/items/train?train_all=SOME_BOOLEAN_VALUE&amp;train_from=SOME_STRING_VALUE&amp;train_to=SOME_STRING_VALUE")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "GET"
request.allHTTPHeaderFields = headers

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: post/v1/items
HTTP Method: Get a list of item details by their ids
Method Description: Get searched items with item details by passing list of item ids.
Please check out the schema from the request body section for details about the
key type and supported values.

### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| ids | List[str] | str | List of item ids. |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/items");
var request = new RestRequest(Method.POST);
request.AddHeader("content-type", "application/json");
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
request.AddParameter("application/json", "{\"ids\":[\"thones:10001072\",\"menz-style:10017133\"]}", ParameterType.RequestBody);
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Post,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/items"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
    Content = new StringContent("{\"ids\":[\"thones:10001072\",\"menz-style:10017133\"]}")
    {
        Headers =
        {
            ContentType = new MediaTypeHeaderValue("application/json")
        }
    }
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"strings"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/items"

	payload := strings.NewReader("{\"ids\":[\"thones:10001072\",\"menz-style:10017133\"]}")

	req, _ := http.NewRequest("POST", url, payload)

	req.Header.Add("content-type", "application/json")
	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

MediaType mediaType = MediaType.parse("application/json");
RequestBody body = RequestBody.create(mediaType, "{\"ids\":[\"thones:10001072\",\"menz-style:10017133\"]}");
Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/items")
  .post(body)
  .addHeader("content-type", "application/json")
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.post("https://api.recommender.gigalogy.com/v1/items")
  .header("content-type", "application/json")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .body("{\"ids\":[\"thones:10001072\",\"menz-style:10017133\"]}")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/items",
  "method": "POST",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  },
  "processData": false,
  "data": "{\"ids\":[\"thones:10001072\",\"menz-style:10017133\"]}"
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = JSON.stringify({
  "ids": [
    "thones:10001072",
    "menz-style:10017133"
  ]
});

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("POST", "https://api.recommender.gigalogy.com/v1/items");
xhr.setRequestHeader("content-type", "application/json");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "POST",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/items",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.write(JSON.stringify({ids: ['thones:10001072', 'menz-style:10017133']}));
req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'POST',
  url: 'https://api.recommender.gigalogy.com/v1/items',
  headers: {
    'content-type': 'application/json',
    'project-key': 'SOME_STRING_VALUE',
    'api-key': 'SOME_STRING_VALUE'
  },
  body: {ids: ['thones:10001072', 'menz-style:10017133']},
  json: true
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("POST", "https://api.recommender.gigalogy.com/v1/items");

req.headers({
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.type("json");
req.send({
  "ids": [
    "thones:10001072",
    "menz-style:10017133"
  ]
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"application/json",
                           @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };
NSDictionary *parameters = @{ @"ids": @[ @"thones:10001072", @"menz-style:10017133" ] };

NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/items"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"POST"];
[request setAllHTTPHeaderFields:headers];
[request setHTTPBody:postData];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/items",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "POST",
  CURLOPT_POSTFIELDS =&gt; "{\"ids\":[\"thones:10001072\",\"menz-style:10017133\"]}",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "content-type: application/json",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/items');
$request-&gt;setMethod(HTTP_METH_POST);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$request-&gt;setBody('{"ids":["thones:10001072","menz-style:10017133"]}');

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$body = new http\Message\Body;
$body-&gt;append('{"ids":["thones:10001072","menz-style:10017133"]}');

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/items');
$request-&gt;setRequestMethod('POST');
$request-&gt;setBody($body);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

payload = "{\"ids\":[\"thones:10001072\",\"menz-style:10017133\"]}"

headers = {
    'content-type': "application/json",
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("POST", "/v1/items", payload, headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/items"

payload = {"ids": ["thones:10001072", "menz-style:10017133"]}
headers = {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("POST", url, json=payload, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/items")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Post.new(url)
request["content-type"] = 'application/json'
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'
request.body = "{\"ids\":[\"thones:10001072\",\"menz-style:10017133\"]}"

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request POST \
  --url https://api.recommender.gigalogy.com/v1/items \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'content-type: application/json' \
  --header 'project-key: SOME_STRING_VALUE' \
  --data '{"ids":["thones:10001072","menz-style:10017133"]}'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]
let parameters = ["ids": ["thones:10001072", "menz-style:10017133"]] as [String : Any]

let postData = JSONSerialization.data(withJSONObject: parameters, options: [])

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/items")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "POST"
request.allHTTPHeaderFields = headers
request.httpBody = postData as Data

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: post/v1/images/train
HTTP Method: Trains image model
Method Description: This endpoint takes image data from the database and generates intelligence from
it. It takes start_date and end_date as optional parameters.
Image model is trained automatically on a regular time interval. This endpoint
can be used to train image model manually.

### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| start_date | Optional[str] | str | Initial date of date range based on which you want to train image model. |
| end_date |Optional[str] | str | End date of date range based on which you want to train image model. |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/images/train");
var request = new RestRequest(Method.POST);
request.AddHeader("content-type", "application/json");
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
request.AddParameter("application/json", "{\"start_date\":\"2021-08-05\",\"end_date\":\"2021-08-06\"}", ParameterType.RequestBody);
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Post,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/images/train"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
    Content = new StringContent("{\"start_date\":\"2021-08-05\",\"end_date\":\"2021-08-06\"}")
    {
        Headers =
        {
            ContentType = new MediaTypeHeaderValue("application/json")
        }
    }
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"strings"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/images/train"

	payload := strings.NewReader("{\"start_date\":\"2021-08-05\",\"end_date\":\"2021-08-06\"}")

	req, _ := http.NewRequest("POST", url, payload)

	req.Header.Add("content-type", "application/json")
	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

MediaType mediaType = MediaType.parse("application/json");
RequestBody body = RequestBody.create(mediaType, "{\"start_date\":\"2021-08-05\",\"end_date\":\"2021-08-06\"}");
Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/images/train")
  .post(body)
  .addHeader("content-type", "application/json")
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.post("https://api.recommender.gigalogy.com/v1/images/train")
  .header("content-type", "application/json")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .body("{\"start_date\":\"2021-08-05\",\"end_date\":\"2021-08-06\"}")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/images/train",
  "method": "POST",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  },
  "processData": false,
  "data": "{\"start_date\":\"2021-08-05\",\"end_date\":\"2021-08-06\"}"
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = JSON.stringify({
  "start_date": "2021-08-05",
  "end_date": "2021-08-06"
});

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("POST", "https://api.recommender.gigalogy.com/v1/images/train");
xhr.setRequestHeader("content-type", "application/json");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "POST",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/images/train",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.write(JSON.stringify({start_date: '2021-08-05', end_date: '2021-08-06'}));
req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'POST',
  url: 'https://api.recommender.gigalogy.com/v1/images/train',
  headers: {
    'content-type': 'application/json',
    'project-key': 'SOME_STRING_VALUE',
    'api-key': 'SOME_STRING_VALUE'
  },
  body: {start_date: '2021-08-05', end_date: '2021-08-06'},
  json: true
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("POST", "https://api.recommender.gigalogy.com/v1/images/train");

req.headers({
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.type("json");
req.send({
  "start_date": "2021-08-05",
  "end_date": "2021-08-06"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"application/json",
                           @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };
NSDictionary *parameters = @{ @"start_date": @"2021-08-05",
                              @"end_date": @"2021-08-06" };

NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/images/train"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"POST"];
[request setAllHTTPHeaderFields:headers];
[request setHTTPBody:postData];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/images/train",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "POST",
  CURLOPT_POSTFIELDS =&gt; "{\"start_date\":\"2021-08-05\",\"end_date\":\"2021-08-06\"}",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "content-type: application/json",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/images/train');
$request-&gt;setMethod(HTTP_METH_POST);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$request-&gt;setBody('{"start_date":"2021-08-05","end_date":"2021-08-06"}');

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$body = new http\Message\Body;
$body-&gt;append('{"start_date":"2021-08-05","end_date":"2021-08-06"}');

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/images/train');
$request-&gt;setRequestMethod('POST');
$request-&gt;setBody($body);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

payload = "{\"start_date\":\"2021-08-05\",\"end_date\":\"2021-08-06\"}"

headers = {
    'content-type': "application/json",
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("POST", "/v1/images/train", payload, headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/images/train"

payload = {
    "start_date": "2021-08-05",
    "end_date": "2021-08-06"
}
headers = {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("POST", url, json=payload, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/images/train")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Post.new(url)
request["content-type"] = 'application/json'
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'
request.body = "{\"start_date\":\"2021-08-05\",\"end_date\":\"2021-08-06\"}"

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request POST \
  --url https://api.recommender.gigalogy.com/v1/images/train \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'content-type: application/json' \
  --header 'project-key: SOME_STRING_VALUE' \
  --data '{"start_date":"2021-08-05","end_date":"2021-08-06"}'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]
let parameters = [
  "start_date": "2021-08-05",
  "end_date": "2021-08-06"
] as [String : Any]

let postData = JSONSerialization.data(withJSONObject: parameters, options: [])

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/images/train")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "POST"
request.allHTTPHeaderFields = headers
request.httpBody = postData as Data

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: post/v1/ranks/train
HTTP Method: Trains ranking model that predicts the trending items
Method Description: This endpoint considers user behavior, item relations and train ranking model to
predict most trending items.
Ranking model is trained automatically on a regular time interval. This endpoint
can be used to train ranking model manually.
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/ranks/train");
var request = new RestRequest(Method.POST);
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Post,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/ranks/train"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/ranks/train"

	req, _ := http.NewRequest("POST", url, nil)

	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/ranks/train")
  .post(null)
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.post("https://api.recommender.gigalogy.com/v1/ranks/train")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/ranks/train",
  "method": "POST",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = null;

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("POST", "https://api.recommender.gigalogy.com/v1/ranks/train");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "POST",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/ranks/train",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'POST',
  url: 'https://api.recommender.gigalogy.com/v1/ranks/train',
  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("POST", "https://api.recommender.gigalogy.com/v1/ranks/train");

req.headers({
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/ranks/train"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"POST"];
[request setAllHTTPHeaderFields:headers];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/ranks/train",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "POST",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/ranks/train');
$request-&gt;setMethod(HTTP_METH_POST);

$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/ranks/train');
$request-&gt;setRequestMethod('POST');
$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

headers = {
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("POST", "/v1/ranks/train", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/ranks/train"

headers = {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("POST", url, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/ranks/train")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Post.new(url)
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request POST \
  --url https://api.recommender.gigalogy.com/v1/ranks/train \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'project-key: SOME_STRING_VALUE'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/ranks/train")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "POST"
request.allHTTPHeaderFields = headers

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: post/v1/items/nearby
HTTP Method: Returns nearest items in terms of distance
Method Description: This endpoint finds the nearest items in terms of distance from a specific item 
given as an input. Input parameters are item_id, radius, filters and excludes. 
Please check out the schema from the request body section for
details about the key type and supported values.

### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| item_id | str | str | Represents the id of the item. |
| radius | Dict | Dict | Radius contains d_from and d_to. Based on these values nearest items will be returned |
| filters | List | str | You can pass categories (multiple supported) here. Based on the supported values the response will be filtered |
| excludes | List | str | You can exclude categories (multiple supported) with this parameter. |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/items/nearby");
var request = new RestRequest(Method.POST);
request.AddHeader("content-type", "application/json");
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
request.AddParameter("application/json", "{\"item_id\":\"1000757666\",\"radius\":{\"d_from\":1,\"d_to\":900},\"filters\":[\"レストラン\"],\"excludes\":[\"宿泊施設\"],\"search_size\":1000,\"keywords_filter\":false,\"details\":true,\"start\":0,\"size\":10}", ParameterType.RequestBody);
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Post,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/items/nearby"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
    Content = new StringContent("{\"item_id\":\"1000757666\",\"radius\":{\"d_from\":1,\"d_to\":900},\"filters\":[\"レストラン\"],\"excludes\":[\"宿泊施設\"],\"search_size\":1000,\"keywords_filter\":false,\"details\":true,\"start\":0,\"size\":10}")
    {
        Headers =
        {
            ContentType = new MediaTypeHeaderValue("application/json")
        }
    }
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"strings"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/items/nearby"

	payload := strings.NewReader("{\"item_id\":\"1000757666\",\"radius\":{\"d_from\":1,\"d_to\":900},\"filters\":[\"レストラン\"],\"excludes\":[\"宿泊施設\"],\"search_size\":1000,\"keywords_filter\":false,\"details\":true,\"start\":0,\"size\":10}")

	req, _ := http.NewRequest("POST", url, payload)

	req.Header.Add("content-type", "application/json")
	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

MediaType mediaType = MediaType.parse("application/json");
RequestBody body = RequestBody.create(mediaType, "{\"item_id\":\"1000757666\",\"radius\":{\"d_from\":1,\"d_to\":900},\"filters\":[\"レストラン\"],\"excludes\":[\"宿泊施設\"],\"search_size\":1000,\"keywords_filter\":false,\"details\":true,\"start\":0,\"size\":10}");
Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/items/nearby")
  .post(body)
  .addHeader("content-type", "application/json")
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.post("https://api.recommender.gigalogy.com/v1/items/nearby")
  .header("content-type", "application/json")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .body("{\"item_id\":\"1000757666\",\"radius\":{\"d_from\":1,\"d_to\":900},\"filters\":[\"レストラン\"],\"excludes\":[\"宿泊施設\"],\"search_size\":1000,\"keywords_filter\":false,\"details\":true,\"start\":0,\"size\":10}")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/items/nearby",
  "method": "POST",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  },
  "processData": false,
  "data": "{\"item_id\":\"1000757666\",\"radius\":{\"d_from\":1,\"d_to\":900},\"filters\":[\"レストラン\"],\"excludes\":[\"宿泊施設\"],\"search_size\":1000,\"keywords_filter\":false,\"details\":true,\"start\":0,\"size\":10}"
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = JSON.stringify({
  "item_id": "1000757666",
  "radius": {
    "d_from": 1,
    "d_to": 900
  },
  "filters": [
    "レストラン"
  ],
  "excludes": [
    "宿泊施設"
  ],
  "search_size": 1000,
  "keywords_filter": false,
  "details": true,
  "start": 0,
  "size": 10
});

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("POST", "https://api.recommender.gigalogy.com/v1/items/nearby");
xhr.setRequestHeader("content-type", "application/json");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "POST",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/items/nearby",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.write(JSON.stringify({
  item_id: '1000757666',
  radius: {d_from: 1, d_to: 900},
  filters: ['レストラン'],
  excludes: ['宿泊施設'],
  search_size: 1000,
  keywords_filter: false,
  details: true,
  start: 0,
  size: 10
}));
req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'POST',
  url: 'https://api.recommender.gigalogy.com/v1/items/nearby',
  headers: {
    'content-type': 'application/json',
    'project-key': 'SOME_STRING_VALUE',
    'api-key': 'SOME_STRING_VALUE'
  },
  body: {
    item_id: '1000757666',
    radius: {d_from: 1, d_to: 900},
    filters: ['レストラン'],
    excludes: ['宿泊施設'],
    search_size: 1000,
    keywords_filter: false,
    details: true,
    start: 0,
    size: 10
  },
  json: true
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("POST", "https://api.recommender.gigalogy.com/v1/items/nearby");

req.headers({
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.type("json");
req.send({
  "item_id": "1000757666",
  "radius": {
    "d_from": 1,
    "d_to": 900
  },
  "filters": [
    "レストラン"
  ],
  "excludes": [
    "宿泊施設"
  ],
  "search_size": 1000,
  "keywords_filter": false,
  "details": true,
  "start": 0,
  "size": 10
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"application/json",
                           @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };
NSDictionary *parameters = @{ @"item_id": @"1000757666",
                              @"radius": @{ @"d_from": @1, @"d_to": @900 },
                              @"filters": @[ @"レストラン" ],
                              @"excludes": @[ @"宿泊施設" ],
                              @"search_size": @1000,
                              @"keywords_filter": @NO,
                              @"details": @YES,
                              @"start": @0,
                              @"size": @10 };

NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/items/nearby"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"POST"];
[request setAllHTTPHeaderFields:headers];
[request setHTTPBody:postData];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/items/nearby",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "POST",
  CURLOPT_POSTFIELDS =&gt; "{\"item_id\":\"1000757666\",\"radius\":{\"d_from\":1,\"d_to\":900},\"filters\":[\"レストラン\"],\"excludes\":[\"宿泊施設\"],\"search_size\":1000,\"keywords_filter\":false,\"details\":true,\"start\":0,\"size\":10}",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "content-type: application/json",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/items/nearby');
$request-&gt;setMethod(HTTP_METH_POST);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$request-&gt;setBody('{"item_id":"1000757666","radius":{"d_from":1,"d_to":900},"filters":["レストラン"],"excludes":["宿泊施設"],"search_size":1000,"keywords_filter":false,"details":true,"start":0,"size":10}');

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$body = new http\Message\Body;
$body-&gt;append('{"item_id":"1000757666","radius":{"d_from":1,"d_to":900},"filters":["レストラン"],"excludes":["宿泊施設"],"search_size":1000,"keywords_filter":false,"details":true,"start":0,"size":10}');

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/items/nearby');
$request-&gt;setRequestMethod('POST');
$request-&gt;setBody($body);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

payload = "{\"item_id\":\"1000757666\",\"radius\":{\"d_from\":1,\"d_to\":900},\"filters\":[\"レストラン\"],\"excludes\":[\"宿泊施設\"],\"search_size\":1000,\"keywords_filter\":false,\"details\":true,\"start\":0,\"size\":10}"

headers = {
    'content-type': "application/json",
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("POST", "/v1/items/nearby", payload, headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/items/nearby"

payload = {
    "item_id": "1000757666",
    "radius": {
        "d_from": 1,
        "d_to": 900
    },
    "filters": ["レストラン"],
    "excludes": ["宿泊施設"],
    "search_size": 1000,
    "keywords_filter": False,
    "details": True,
    "start": 0,
    "size": 10
}
headers = {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("POST", url, json=payload, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/items/nearby")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Post.new(url)
request["content-type"] = 'application/json'
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'
request.body = "{\"item_id\":\"1000757666\",\"radius\":{\"d_from\":1,\"d_to\":900},\"filters\":[\"レストラン\"],\"excludes\":[\"宿泊施設\"],\"search_size\":1000,\"keywords_filter\":false,\"details\":true,\"start\":0,\"size\":10}"

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request POST \
  --url https://api.recommender.gigalogy.com/v1/items/nearby \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'content-type: application/json' \
  --header 'project-key: SOME_STRING_VALUE' \
  --data '{"item_id":"1000757666","radius":{"d_from":1,"d_to":900},"filters":["レストラン"],"excludes":["宿泊施設"],"search_size":1000,"keywords_filter":false,"details":true,"start":0,"size":10}'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]
let parameters = [
  "item_id": "1000757666",
  "radius": [
    "d_from": 1,
    "d_to": 900
  ],
  "filters": ["レストラン"],
  "excludes": ["宿泊施設"],
  "search_size": 1000,
  "keywords_filter": false,
  "details": true,
  "start": 0,
  "size": 10
] as [String : Any]

let postData = JSONSerialization.data(withJSONObject: parameters, options: [])

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/items/nearby")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "POST"
request.allHTTPHeaderFields = headers
request.httpBody = postData as Data

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: post/v1/images/search
HTTP Method: Image search engine
Method Description: This endpoint generates search results based on image similarity. It takes an
image, user_id, start, size and details as required parameter and member_id as
optional parameter. Please check out the schema from the request body section for
details about the key type and supported values.
This endpoint can be used along with personalized search engine to provide users
options to execute their search experience.

### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| user_id | str | str | Represents the id of a logged-out unique user. |
| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |
| image | str($bin) | file | Represents the image for finding items that are similar to the one it captured. Supports webp, jpeg, jpg, and png formats. |
| start | Optional[int] | int | Represents the initial point of pagination. If you want to see first items of index in the first position of your search result it will be 0. |
| size | Optional[int] | int | Represents the size or number of items to show in search result. Size 10 means it will show first 10 items from index in your search result. |
| details | bool | bool | If you want to get recommended items with details this parameter would be `True` otherwise it would be `False`. |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/images/search");
var request = new RestRequest(Method.POST);
request.AddHeader("content-type", "multipart/form-data");
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Post,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/images/search"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/images/search"

	req, _ := http.NewRequest("POST", url, nil)

	req.Header.Add("content-type", "multipart/form-data")
	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/images/search")
  .post(null)
  .addHeader("content-type", "multipart/form-data")
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.post("https://api.recommender.gigalogy.com/v1/images/search")
  .header("content-type", "multipart/form-data")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/images/search",
  "method": "POST",
  "headers": {
    "content-type": "multipart/form-data",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = null;

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("POST", "https://api.recommender.gigalogy.com/v1/images/search");
xhr.setRequestHeader("content-type", "multipart/form-data");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "POST",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/images/search",
  "headers": {
    "content-type": "multipart/form-data",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'POST',
  url: 'https://api.recommender.gigalogy.com/v1/images/search',
  headers: {
    'content-type': 'multipart/form-data',
    'project-key': 'SOME_STRING_VALUE',
    'api-key': 'SOME_STRING_VALUE'
  }
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("POST", "https://api.recommender.gigalogy.com/v1/images/search");

req.headers({
  "content-type": "multipart/form-data",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"multipart/form-data",
                           @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/images/search"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"POST"];
[request setAllHTTPHeaderFields:headers];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/images/search",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "POST",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "content-type: multipart/form-data",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/images/search');
$request-&gt;setMethod(HTTP_METH_POST);

$request-&gt;setHeaders([
  'content-type' =&gt; 'multipart/form-data',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/images/search');
$request-&gt;setRequestMethod('POST');
$request-&gt;setHeaders([
  'content-type' =&gt; 'multipart/form-data',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

headers = {
    'content-type': "multipart/form-data",
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("POST", "/v1/images/search", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/images/search"

headers = {
    "content-type": "multipart/form-data",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("POST", url, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/images/search")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Post.new(url)
request["content-type"] = 'multipart/form-data'
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request POST \
  --url https://api.recommender.gigalogy.com/v1/images/search \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'content-type: multipart/form-data' \
  --header 'project-key: SOME_STRING_VALUE'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "multipart/form-data",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/images/search")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "POST"
request.allHTTPHeaderFields = headers

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: get/v1/users/keywords
HTTP Method: Get all searched keywords by a specific user
Method Description: Get the searched keywords by a specific user in your application.
This endpoint can be used to analyze / learn trends show infographics to users.

### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| user_id | str | str | Represents the id of a logged-out unique user. |
| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/users/keywords?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE");
var request = new RestRequest(Method.GET);
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Get,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/users/keywords?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/users/keywords?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE"

	req, _ := http.NewRequest("GET", url, nil)

	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/users/keywords?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE")
  .get()
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.get("https://api.recommender.gigalogy.com/v1/users/keywords?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/users/keywords?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE",
  "method": "GET",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = null;

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("GET", "https://api.recommender.gigalogy.com/v1/users/keywords?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "GET",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/users/keywords?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'GET',
  url: 'https://api.recommender.gigalogy.com/v1/users/keywords',
  qs: {user_id: 'SOME_STRING_VALUE', member_id: 'SOME_STRING_VALUE'},
  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("GET", "https://api.recommender.gigalogy.com/v1/users/keywords");

req.query({
  "user_id": "SOME_STRING_VALUE",
  "member_id": "SOME_STRING_VALUE"
});

req.headers({
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/users/keywords?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"GET"];
[request setAllHTTPHeaderFields:headers];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/users/keywords?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "GET",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/users/keywords');
$request-&gt;setMethod(HTTP_METH_GET);

$request-&gt;setQueryData([
  'user_id' =&gt; 'SOME_STRING_VALUE',
  'member_id' =&gt; 'SOME_STRING_VALUE'
]);

$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/users/keywords');
$request-&gt;setRequestMethod('GET');
$request-&gt;setQuery(new http\QueryString([
  'user_id' =&gt; 'SOME_STRING_VALUE',
  'member_id' =&gt; 'SOME_STRING_VALUE'
]));

$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

headers = {
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("GET", "/v1/users/keywords?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/users/keywords"

querystring = {"user_id":"SOME_STRING_VALUE","member_id":"SOME_STRING_VALUE"}

headers = {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("GET", url, headers=headers, params=querystring)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/users/keywords?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request GET \
  --url 'https://api.recommender.gigalogy.com/v1/users/keywords?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE' \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'project-key: SOME_STRING_VALUE'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/users/keywords?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "GET"
request.allHTTPHeaderFields = headers

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: get/v1/categories/keywords
HTTP Method: Get top keywords by categories
Method Description: Get the searched keywords by a specific user in your application.
This endpoint can be used to analyze / learn trends show infographics to users.

### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| user_id | str | str | Represents the id of a logged-out unique user. |
| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/categories/keywords");
var request = new RestRequest(Method.GET);
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Get,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/categories/keywords"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/categories/keywords"

	req, _ := http.NewRequest("GET", url, nil)

	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/categories/keywords")
  .get()
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.get("https://api.recommender.gigalogy.com/v1/categories/keywords")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/categories/keywords",
  "method": "GET",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = null;

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("GET", "https://api.recommender.gigalogy.com/v1/categories/keywords");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "GET",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/categories/keywords",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'GET',
  url: 'https://api.recommender.gigalogy.com/v1/categories/keywords',
  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("GET", "https://api.recommender.gigalogy.com/v1/categories/keywords");

req.headers({
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/categories/keywords"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"GET"];
[request setAllHTTPHeaderFields:headers];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/categories/keywords",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "GET",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/categories/keywords');
$request-&gt;setMethod(HTTP_METH_GET);

$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/categories/keywords');
$request-&gt;setRequestMethod('GET');
$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

headers = {
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("GET", "/v1/categories/keywords", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/categories/keywords"

headers = {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("GET", url, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/categories/keywords")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request GET \
  --url https://api.recommender.gigalogy.com/v1/categories/keywords \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'project-key: SOME_STRING_VALUE'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/categories/keywords")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "GET"
request.allHTTPHeaderFields = headers

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: post/v1/items/browse/client
HTTP Method: Captures user browsing information
Method Description: This endpoint captures user browsing information and saves them to the database.
It takes user_id and item_id as required parameters and member_id as optional parameter.

### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| user_id | str | str | Represents the id of a logged-out unique user. |
| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |
| item_id | str | str | Represents the id of the browsed item. |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/items/browse/client");
var request = new RestRequest(Method.POST);
request.AddHeader("content-type", "application/json");
request.AddHeader("client-key", "SOME_STRING_VALUE");
request.AddParameter("application/json", "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\"}", ParameterType.RequestBody);
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Post,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/items/browse/client"),
    Headers =
    {
        { "client-key", "SOME_STRING_VALUE" },
    },
    Content = new StringContent("{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\"}")
    {
        Headers =
        {
            ContentType = new MediaTypeHeaderValue("application/json")
        }
    }
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"strings"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/items/browse/client"

	payload := strings.NewReader("{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\"}")

	req, _ := http.NewRequest("POST", url, payload)

	req.Header.Add("content-type", "application/json")
	req.Header.Add("client-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

MediaType mediaType = MediaType.parse("application/json");
RequestBody body = RequestBody.create(mediaType, "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\"}");
Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/items/browse/client")
  .post(body)
  .addHeader("content-type", "application/json")
  .addHeader("client-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.post("https://api.recommender.gigalogy.com/v1/items/browse/client")
  .header("content-type", "application/json")
  .header("client-key", "SOME_STRING_VALUE")
  .body("{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\"}")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/items/browse/client",
  "method": "POST",
  "headers": {
    "content-type": "application/json",
    "client-key": "SOME_STRING_VALUE"
  },
  "processData": false,
  "data": "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\"}"
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = JSON.stringify({
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "item_id": "1000764491"
});

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("POST", "https://api.recommender.gigalogy.com/v1/items/browse/client");
xhr.setRequestHeader("content-type", "application/json");
xhr.setRequestHeader("client-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "POST",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/items/browse/client",
  "headers": {
    "content-type": "application/json",
    "client-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.write(JSON.stringify({
  user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',
  member_id: 'df3456tg-2909-459b-be55-62196afedf85',
  item_id: '1000764491'
}));
req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'POST',
  url: 'https://api.recommender.gigalogy.com/v1/items/browse/client',
  headers: {'content-type': 'application/json', 'client-key': 'SOME_STRING_VALUE'},
  body: {
    user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',
    member_id: 'df3456tg-2909-459b-be55-62196afedf85',
    item_id: '1000764491'
  },
  json: true
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("POST", "https://api.recommender.gigalogy.com/v1/items/browse/client");

req.headers({
  "content-type": "application/json",
  "client-key": "SOME_STRING_VALUE"
});

req.type("json");
req.send({
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "item_id": "1000764491"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"application/json",
                           @"client-key": @"SOME_STRING_VALUE" };
NSDictionary *parameters = @{ @"user_id": @"a0cc6beb-2909-459b-be55-62196af78ce4",
                              @"member_id": @"df3456tg-2909-459b-be55-62196afedf85",
                              @"item_id": @"1000764491" };

NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/items/browse/client"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"POST"];
[request setAllHTTPHeaderFields:headers];
[request setHTTPBody:postData];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/items/browse/client",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "POST",
  CURLOPT_POSTFIELDS =&gt; "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\"}",
  CURLOPT_HTTPHEADER =&gt; [
    "client-key: SOME_STRING_VALUE",
    "content-type: application/json"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/items/browse/client');
$request-&gt;setMethod(HTTP_METH_POST);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'client-key' =&gt; 'SOME_STRING_VALUE'
]);

$request-&gt;setBody('{"user_id":"a0cc6beb-2909-459b-be55-62196af78ce4","member_id":"df3456tg-2909-459b-be55-62196afedf85","item_id":"1000764491"}');

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$body = new http\Message\Body;
$body-&gt;append('{"user_id":"a0cc6beb-2909-459b-be55-62196af78ce4","member_id":"df3456tg-2909-459b-be55-62196afedf85","item_id":"1000764491"}');

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/items/browse/client');
$request-&gt;setRequestMethod('POST');
$request-&gt;setBody($body);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'client-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

payload = "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\"}"

headers = {
    'content-type': "application/json",
    'client-key': "SOME_STRING_VALUE"
    }

conn.request("POST", "/v1/items/browse/client", payload, headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/items/browse/client"

payload = {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "item_id": "1000764491"
}
headers = {
    "content-type": "application/json",
    "client-key": "SOME_STRING_VALUE"
}

response = requests.request("POST", url, json=payload, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/items/browse/client")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Post.new(url)
request["content-type"] = 'application/json'
request["client-key"] = 'SOME_STRING_VALUE'
request.body = "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\"}"

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request POST \
  --url https://api.recommender.gigalogy.com/v1/items/browse/client \
  --header 'client-key: SOME_STRING_VALUE' \
  --header 'content-type: application/json' \
  --data '{"user_id":"a0cc6beb-2909-459b-be55-62196af78ce4","member_id":"df3456tg-2909-459b-be55-62196afedf85","item_id":"1000764491"}'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "application/json",
  "client-key": "SOME_STRING_VALUE"
]
let parameters = [
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "item_id": "1000764491"
] as [String : Any]

let postData = JSONSerialization.data(withJSONObject: parameters, options: [])

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/items/browse/client")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "POST"
request.allHTTPHeaderFields = headers
request.httpBody = postData as Data

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: get/v1/items/browse
HTTP Method: Get browsed info by user id
Method Description: Get browsed information by id

### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| user_id | str | str | Represents the id of a logged-out unique user. |
| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/items/browse?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE&amp;start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE");
var request = new RestRequest(Method.GET);
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Get,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/items/browse?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE&amp;start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/items/browse?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE&amp;start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE"

	req, _ := http.NewRequest("GET", url, nil)

	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/items/browse?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE&amp;start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE")
  .get()
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.get("https://api.recommender.gigalogy.com/v1/items/browse?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE&amp;start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/items/browse?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE&amp;start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE",
  "method": "GET",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = null;

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("GET", "https://api.recommender.gigalogy.com/v1/items/browse?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE&amp;start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "GET",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/items/browse?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE&amp;start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'GET',
  url: 'https://api.recommender.gigalogy.com/v1/items/browse',
  qs: {
    user_id: 'SOME_STRING_VALUE',
    member_id: 'SOME_STRING_VALUE',
    start: 'SOME_INTEGER_VALUE',
    size: 'SOME_INTEGER_VALUE'
  },
  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("GET", "https://api.recommender.gigalogy.com/v1/items/browse");

req.query({
  "user_id": "SOME_STRING_VALUE",
  "member_id": "SOME_STRING_VALUE",
  "start": "SOME_INTEGER_VALUE",
  "size": "SOME_INTEGER_VALUE"
});

req.headers({
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/items/browse?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE&amp;start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"GET"];
[request setAllHTTPHeaderFields:headers];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/items/browse?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE&amp;start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "GET",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/items/browse');
$request-&gt;setMethod(HTTP_METH_GET);

$request-&gt;setQueryData([
  'user_id' =&gt; 'SOME_STRING_VALUE',
  'member_id' =&gt; 'SOME_STRING_VALUE',
  'start' =&gt; 'SOME_INTEGER_VALUE',
  'size' =&gt; 'SOME_INTEGER_VALUE'
]);

$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/items/browse');
$request-&gt;setRequestMethod('GET');
$request-&gt;setQuery(new http\QueryString([
  'user_id' =&gt; 'SOME_STRING_VALUE',
  'member_id' =&gt; 'SOME_STRING_VALUE',
  'start' =&gt; 'SOME_INTEGER_VALUE',
  'size' =&gt; 'SOME_INTEGER_VALUE'
]));

$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

headers = {
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("GET", "/v1/items/browse?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE&amp;start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/items/browse"

querystring = {"user_id":"SOME_STRING_VALUE","member_id":"SOME_STRING_VALUE","start":"SOME_INTEGER_VALUE","size":"SOME_INTEGER_VALUE"}

headers = {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("GET", url, headers=headers, params=querystring)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/items/browse?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE&amp;start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request GET \
  --url 'https://api.recommender.gigalogy.com/v1/items/browse?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE&amp;start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE' \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'project-key: SOME_STRING_VALUE'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/items/browse?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE&amp;start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "GET"
request.allHTTPHeaderFields = headers

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: post/v1/items/browse
HTTP Method: Captures user browsing information
Method Description: This endpoint captures user browsing information and saves them to the database.
It takes user_id and item_id as required parameters and member_id as optional parameter.

### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| user_id | str | str | Represents the id of a logged-out unique user. |
| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |
| item_id | str | str | Represents the id of the browsed item. |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/items/browse");
var request = new RestRequest(Method.POST);
request.AddHeader("content-type", "application/json");
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
request.AddParameter("application/json", "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\"}", ParameterType.RequestBody);
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Post,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/items/browse"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
    Content = new StringContent("{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\"}")
    {
        Headers =
        {
            ContentType = new MediaTypeHeaderValue("application/json")
        }
    }
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"strings"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/items/browse"

	payload := strings.NewReader("{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\"}")

	req, _ := http.NewRequest("POST", url, payload)

	req.Header.Add("content-type", "application/json")
	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

MediaType mediaType = MediaType.parse("application/json");
RequestBody body = RequestBody.create(mediaType, "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\"}");
Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/items/browse")
  .post(body)
  .addHeader("content-type", "application/json")
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.post("https://api.recommender.gigalogy.com/v1/items/browse")
  .header("content-type", "application/json")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .body("{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\"}")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/items/browse",
  "method": "POST",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  },
  "processData": false,
  "data": "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\"}"
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = JSON.stringify({
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "item_id": "1000764491"
});

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("POST", "https://api.recommender.gigalogy.com/v1/items/browse");
xhr.setRequestHeader("content-type", "application/json");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "POST",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/items/browse",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.write(JSON.stringify({
  user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',
  member_id: 'df3456tg-2909-459b-be55-62196afedf85',
  item_id: '1000764491'
}));
req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'POST',
  url: 'https://api.recommender.gigalogy.com/v1/items/browse',
  headers: {
    'content-type': 'application/json',
    'project-key': 'SOME_STRING_VALUE',
    'api-key': 'SOME_STRING_VALUE'
  },
  body: {
    user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',
    member_id: 'df3456tg-2909-459b-be55-62196afedf85',
    item_id: '1000764491'
  },
  json: true
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("POST", "https://api.recommender.gigalogy.com/v1/items/browse");

req.headers({
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.type("json");
req.send({
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "item_id": "1000764491"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"application/json",
                           @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };
NSDictionary *parameters = @{ @"user_id": @"a0cc6beb-2909-459b-be55-62196af78ce4",
                              @"member_id": @"df3456tg-2909-459b-be55-62196afedf85",
                              @"item_id": @"1000764491" };

NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/items/browse"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"POST"];
[request setAllHTTPHeaderFields:headers];
[request setHTTPBody:postData];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/items/browse",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "POST",
  CURLOPT_POSTFIELDS =&gt; "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\"}",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "content-type: application/json",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/items/browse');
$request-&gt;setMethod(HTTP_METH_POST);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$request-&gt;setBody('{"user_id":"a0cc6beb-2909-459b-be55-62196af78ce4","member_id":"df3456tg-2909-459b-be55-62196afedf85","item_id":"1000764491"}');

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$body = new http\Message\Body;
$body-&gt;append('{"user_id":"a0cc6beb-2909-459b-be55-62196af78ce4","member_id":"df3456tg-2909-459b-be55-62196afedf85","item_id":"1000764491"}');

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/items/browse');
$request-&gt;setRequestMethod('POST');
$request-&gt;setBody($body);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

payload = "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\"}"

headers = {
    'content-type': "application/json",
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("POST", "/v1/items/browse", payload, headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/items/browse"

payload = {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "item_id": "1000764491"
}
headers = {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("POST", url, json=payload, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/items/browse")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Post.new(url)
request["content-type"] = 'application/json'
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'
request.body = "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\"}"

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request POST \
  --url https://api.recommender.gigalogy.com/v1/items/browse \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'content-type: application/json' \
  --header 'project-key: SOME_STRING_VALUE' \
  --data '{"user_id":"a0cc6beb-2909-459b-be55-62196af78ce4","member_id":"df3456tg-2909-459b-be55-62196afedf85","item_id":"1000764491"}'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]
let parameters = [
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "item_id": "1000764491"
] as [String : Any]

let postData = JSONSerialization.data(withJSONObject: parameters, options: [])

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/items/browse")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "POST"
request.allHTTPHeaderFields = headers
request.httpBody = postData as Data

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: post/v1/items/browse/save
HTTP Method: Upload a CSV file and save data in browse index
Method Description: This endpoint uploads and saves data from the CSV file in the browse index. It only
takes text or CSV files as a required parameter. If you want to upload your
browse data from a CSV file with our recommender system this endpoint will upload
the file and save them to the database.
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/items/browse/save");
var request = new RestRequest(Method.POST);
request.AddHeader("content-type", "multipart/form-data");
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Post,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/items/browse/save"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/items/browse/save"

	req, _ := http.NewRequest("POST", url, nil)

	req.Header.Add("content-type", "multipart/form-data")
	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/items/browse/save")
  .post(null)
  .addHeader("content-type", "multipart/form-data")
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.post("https://api.recommender.gigalogy.com/v1/items/browse/save")
  .header("content-type", "multipart/form-data")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/items/browse/save",
  "method": "POST",
  "headers": {
    "content-type": "multipart/form-data",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = null;

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("POST", "https://api.recommender.gigalogy.com/v1/items/browse/save");
xhr.setRequestHeader("content-type", "multipart/form-data");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "POST",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/items/browse/save",
  "headers": {
    "content-type": "multipart/form-data",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'POST',
  url: 'https://api.recommender.gigalogy.com/v1/items/browse/save',
  headers: {
    'content-type': 'multipart/form-data',
    'project-key': 'SOME_STRING_VALUE',
    'api-key': 'SOME_STRING_VALUE'
  }
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("POST", "https://api.recommender.gigalogy.com/v1/items/browse/save");

req.headers({
  "content-type": "multipart/form-data",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"multipart/form-data",
                           @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/items/browse/save"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"POST"];
[request setAllHTTPHeaderFields:headers];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/items/browse/save",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "POST",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "content-type: multipart/form-data",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/items/browse/save');
$request-&gt;setMethod(HTTP_METH_POST);

$request-&gt;setHeaders([
  'content-type' =&gt; 'multipart/form-data',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/items/browse/save');
$request-&gt;setRequestMethod('POST');
$request-&gt;setHeaders([
  'content-type' =&gt; 'multipart/form-data',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

headers = {
    'content-type': "multipart/form-data",
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("POST", "/v1/items/browse/save", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/items/browse/save"

headers = {
    "content-type": "multipart/form-data",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("POST", url, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/items/browse/save")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Post.new(url)
request["content-type"] = 'multipart/form-data'
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request POST \
  --url https://api.recommender.gigalogy.com/v1/items/browse/save \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'content-type: multipart/form-data' \
  --header 'project-key: SOME_STRING_VALUE'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "multipart/form-data",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/items/browse/save")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "POST"
request.allHTTPHeaderFields = headers

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: post/v1/items/purchase/client
HTTP Method: Captures user purchase information and save them
Method Description: This endpoints captures user purchase info and save it to the database. It takes
user_id, item_list which includes item_id, price, quantity for a specific item as
required parameters and member_id as an optional parameter.

### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| user_id | str | str | Represents the id of a logged-out unique user. |
| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |
| item_list | List[Dict[str,str]] | str | Represents item list of purchased items including item_id, price, quantity. |
| item_id | str | str | Represents the id of the purchased item. |
| price | str | str | Price of that purchased item. |
| quantity | str | str | Number of items that are purchased for specific item id. |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/items/purchase/client");
var request = new RestRequest(Method.POST);
request.AddHeader("content-type", "application/json");
request.AddHeader("client-key", "SOME_STRING_VALUE");
request.AddParameter("application/json", "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_list\":[{\"item_id\":\"1000757666\",\"price\":5000,\"quantity\":1},{\"item_id\":\"1000764491\",\"price\":400,\"quantity\":7}]}", ParameterType.RequestBody);
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Post,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/items/purchase/client"),
    Headers =
    {
        { "client-key", "SOME_STRING_VALUE" },
    },
    Content = new StringContent("{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_list\":[{\"item_id\":\"1000757666\",\"price\":5000,\"quantity\":1},{\"item_id\":\"1000764491\",\"price\":400,\"quantity\":7}]}")
    {
        Headers =
        {
            ContentType = new MediaTypeHeaderValue("application/json")
        }
    }
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"strings"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/items/purchase/client"

	payload := strings.NewReader("{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_list\":[{\"item_id\":\"1000757666\",\"price\":5000,\"quantity\":1},{\"item_id\":\"1000764491\",\"price\":400,\"quantity\":7}]}")

	req, _ := http.NewRequest("POST", url, payload)

	req.Header.Add("content-type", "application/json")
	req.Header.Add("client-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

MediaType mediaType = MediaType.parse("application/json");
RequestBody body = RequestBody.create(mediaType, "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_list\":[{\"item_id\":\"1000757666\",\"price\":5000,\"quantity\":1},{\"item_id\":\"1000764491\",\"price\":400,\"quantity\":7}]}");
Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/items/purchase/client")
  .post(body)
  .addHeader("content-type", "application/json")
  .addHeader("client-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.post("https://api.recommender.gigalogy.com/v1/items/purchase/client")
  .header("content-type", "application/json")
  .header("client-key", "SOME_STRING_VALUE")
  .body("{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_list\":[{\"item_id\":\"1000757666\",\"price\":5000,\"quantity\":1},{\"item_id\":\"1000764491\",\"price\":400,\"quantity\":7}]}")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/items/purchase/client",
  "method": "POST",
  "headers": {
    "content-type": "application/json",
    "client-key": "SOME_STRING_VALUE"
  },
  "processData": false,
  "data": "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_list\":[{\"item_id\":\"1000757666\",\"price\":5000,\"quantity\":1},{\"item_id\":\"1000764491\",\"price\":400,\"quantity\":7}]}"
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = JSON.stringify({
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "item_list": [
    {
      "item_id": "1000757666",
      "price": 5000,
      "quantity": 1
    },
    {
      "item_id": "1000764491",
      "price": 400,
      "quantity": 7
    }
  ]
});

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("POST", "https://api.recommender.gigalogy.com/v1/items/purchase/client");
xhr.setRequestHeader("content-type", "application/json");
xhr.setRequestHeader("client-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "POST",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/items/purchase/client",
  "headers": {
    "content-type": "application/json",
    "client-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.write(JSON.stringify({
  user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',
  member_id: 'df3456tg-2909-459b-be55-62196afedf85',
  item_list: [
    {item_id: '1000757666', price: 5000, quantity: 1},
    {item_id: '1000764491', price: 400, quantity: 7}
  ]
}));
req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'POST',
  url: 'https://api.recommender.gigalogy.com/v1/items/purchase/client',
  headers: {'content-type': 'application/json', 'client-key': 'SOME_STRING_VALUE'},
  body: {
    user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',
    member_id: 'df3456tg-2909-459b-be55-62196afedf85',
    item_list: [
      {item_id: '1000757666', price: 5000, quantity: 1},
      {item_id: '1000764491', price: 400, quantity: 7}
    ]
  },
  json: true
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("POST", "https://api.recommender.gigalogy.com/v1/items/purchase/client");

req.headers({
  "content-type": "application/json",
  "client-key": "SOME_STRING_VALUE"
});

req.type("json");
req.send({
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "item_list": [
    {
      "item_id": "1000757666",
      "price": 5000,
      "quantity": 1
    },
    {
      "item_id": "1000764491",
      "price": 400,
      "quantity": 7
    }
  ]
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"application/json",
                           @"client-key": @"SOME_STRING_VALUE" };
NSDictionary *parameters = @{ @"user_id": @"a0cc6beb-2909-459b-be55-62196af78ce4",
                              @"member_id": @"df3456tg-2909-459b-be55-62196afedf85",
                              @"item_list": @[ @{ @"item_id": @"1000757666", @"price": @5000, @"quantity": @1 }, @{ @"item_id": @"1000764491", @"price": @400, @"quantity": @7 } ] };

NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/items/purchase/client"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"POST"];
[request setAllHTTPHeaderFields:headers];
[request setHTTPBody:postData];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/items/purchase/client",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "POST",
  CURLOPT_POSTFIELDS =&gt; "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_list\":[{\"item_id\":\"1000757666\",\"price\":5000,\"quantity\":1},{\"item_id\":\"1000764491\",\"price\":400,\"quantity\":7}]}",
  CURLOPT_HTTPHEADER =&gt; [
    "client-key: SOME_STRING_VALUE",
    "content-type: application/json"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/items/purchase/client');
$request-&gt;setMethod(HTTP_METH_POST);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'client-key' =&gt; 'SOME_STRING_VALUE'
]);

$request-&gt;setBody('{"user_id":"a0cc6beb-2909-459b-be55-62196af78ce4","member_id":"df3456tg-2909-459b-be55-62196afedf85","item_list":[{"item_id":"1000757666","price":5000,"quantity":1},{"item_id":"1000764491","price":400,"quantity":7}]}');

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$body = new http\Message\Body;
$body-&gt;append('{"user_id":"a0cc6beb-2909-459b-be55-62196af78ce4","member_id":"df3456tg-2909-459b-be55-62196afedf85","item_list":[{"item_id":"1000757666","price":5000,"quantity":1},{"item_id":"1000764491","price":400,"quantity":7}]}');

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/items/purchase/client');
$request-&gt;setRequestMethod('POST');
$request-&gt;setBody($body);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'client-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

payload = "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_list\":[{\"item_id\":\"1000757666\",\"price\":5000,\"quantity\":1},{\"item_id\":\"1000764491\",\"price\":400,\"quantity\":7}]}"

headers = {
    'content-type': "application/json",
    'client-key': "SOME_STRING_VALUE"
    }

conn.request("POST", "/v1/items/purchase/client", payload, headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/items/purchase/client"

payload = {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "item_list": [
        {
            "item_id": "1000757666",
            "price": 5000,
            "quantity": 1
        },
        {
            "item_id": "1000764491",
            "price": 400,
            "quantity": 7
        }
    ]
}
headers = {
    "content-type": "application/json",
    "client-key": "SOME_STRING_VALUE"
}

response = requests.request("POST", url, json=payload, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/items/purchase/client")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Post.new(url)
request["content-type"] = 'application/json'
request["client-key"] = 'SOME_STRING_VALUE'
request.body = "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_list\":[{\"item_id\":\"1000757666\",\"price\":5000,\"quantity\":1},{\"item_id\":\"1000764491\",\"price\":400,\"quantity\":7}]}"

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request POST \
  --url https://api.recommender.gigalogy.com/v1/items/purchase/client \
  --header 'client-key: SOME_STRING_VALUE' \
  --header 'content-type: application/json' \
  --data '{"user_id":"a0cc6beb-2909-459b-be55-62196af78ce4","member_id":"df3456tg-2909-459b-be55-62196afedf85","item_list":[{"item_id":"1000757666","price":5000,"quantity":1},{"item_id":"1000764491","price":400,"quantity":7}]}'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "application/json",
  "client-key": "SOME_STRING_VALUE"
]
let parameters = [
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "item_list": [
    [
      "item_id": "1000757666",
      "price": 5000,
      "quantity": 1
    ],
    [
      "item_id": "1000764491",
      "price": 400,
      "quantity": 7
    ]
  ]
] as [String : Any]

let postData = JSONSerialization.data(withJSONObject: parameters, options: [])

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/items/purchase/client")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "POST"
request.allHTTPHeaderFields = headers
request.httpBody = postData as Data

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: get/v1/items/purchase
HTTP Method: Get purchased info by user id
Method Description: Get purchased information by id

### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| user_id | str | str | Represents the id of a logged-out unique user. |
| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/items/purchase?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE&amp;start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE");
var request = new RestRequest(Method.GET);
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Get,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/items/purchase?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE&amp;start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/items/purchase?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE&amp;start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE"

	req, _ := http.NewRequest("GET", url, nil)

	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/items/purchase?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE&amp;start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE")
  .get()
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.get("https://api.recommender.gigalogy.com/v1/items/purchase?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE&amp;start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/items/purchase?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE&amp;start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE",
  "method": "GET",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = null;

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("GET", "https://api.recommender.gigalogy.com/v1/items/purchase?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE&amp;start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "GET",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/items/purchase?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE&amp;start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'GET',
  url: 'https://api.recommender.gigalogy.com/v1/items/purchase',
  qs: {
    user_id: 'SOME_STRING_VALUE',
    member_id: 'SOME_STRING_VALUE',
    start: 'SOME_INTEGER_VALUE',
    size: 'SOME_INTEGER_VALUE'
  },
  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("GET", "https://api.recommender.gigalogy.com/v1/items/purchase");

req.query({
  "user_id": "SOME_STRING_VALUE",
  "member_id": "SOME_STRING_VALUE",
  "start": "SOME_INTEGER_VALUE",
  "size": "SOME_INTEGER_VALUE"
});

req.headers({
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/items/purchase?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE&amp;start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"GET"];
[request setAllHTTPHeaderFields:headers];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/items/purchase?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE&amp;start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "GET",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/items/purchase');
$request-&gt;setMethod(HTTP_METH_GET);

$request-&gt;setQueryData([
  'user_id' =&gt; 'SOME_STRING_VALUE',
  'member_id' =&gt; 'SOME_STRING_VALUE',
  'start' =&gt; 'SOME_INTEGER_VALUE',
  'size' =&gt; 'SOME_INTEGER_VALUE'
]);

$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/items/purchase');
$request-&gt;setRequestMethod('GET');
$request-&gt;setQuery(new http\QueryString([
  'user_id' =&gt; 'SOME_STRING_VALUE',
  'member_id' =&gt; 'SOME_STRING_VALUE',
  'start' =&gt; 'SOME_INTEGER_VALUE',
  'size' =&gt; 'SOME_INTEGER_VALUE'
]));

$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

headers = {
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("GET", "/v1/items/purchase?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE&amp;start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/items/purchase"

querystring = {"user_id":"SOME_STRING_VALUE","member_id":"SOME_STRING_VALUE","start":"SOME_INTEGER_VALUE","size":"SOME_INTEGER_VALUE"}

headers = {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("GET", url, headers=headers, params=querystring)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/items/purchase?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE&amp;start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request GET \
  --url 'https://api.recommender.gigalogy.com/v1/items/purchase?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE&amp;start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE' \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'project-key: SOME_STRING_VALUE'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/items/purchase?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE&amp;start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "GET"
request.allHTTPHeaderFields = headers

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: post/v1/items/purchase
HTTP Method: Captures user purchase information and save them
Method Description: This endpoints captures user purchase info and save it to the database. It takes
user_id, item_list which includes item_id, price, quantity for a specific item as
required parameters and member_id as an optional parameter.

### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| user_id | str | str | Represents the id of a logged-out unique user. |
| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |
| item_list | List[Dict[str,str]] | str | Represents item list of purchased items including item_id, price, quantity. |
| item_id | str | str | Represents the id of the purchased item. |
| price | str | str | Price of that purchased item. |
| quantity | str | str | Number of items that are purchased for specific item id. |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/items/purchase");
var request = new RestRequest(Method.POST);
request.AddHeader("content-type", "application/json");
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
request.AddParameter("application/json", "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_list\":[{\"item_id\":\"1000757666\",\"price\":5000,\"quantity\":1},{\"item_id\":\"1000764491\",\"price\":400,\"quantity\":7}]}", ParameterType.RequestBody);
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Post,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/items/purchase"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
    Content = new StringContent("{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_list\":[{\"item_id\":\"1000757666\",\"price\":5000,\"quantity\":1},{\"item_id\":\"1000764491\",\"price\":400,\"quantity\":7}]}")
    {
        Headers =
        {
            ContentType = new MediaTypeHeaderValue("application/json")
        }
    }
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"strings"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/items/purchase"

	payload := strings.NewReader("{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_list\":[{\"item_id\":\"1000757666\",\"price\":5000,\"quantity\":1},{\"item_id\":\"1000764491\",\"price\":400,\"quantity\":7}]}")

	req, _ := http.NewRequest("POST", url, payload)

	req.Header.Add("content-type", "application/json")
	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

MediaType mediaType = MediaType.parse("application/json");
RequestBody body = RequestBody.create(mediaType, "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_list\":[{\"item_id\":\"1000757666\",\"price\":5000,\"quantity\":1},{\"item_id\":\"1000764491\",\"price\":400,\"quantity\":7}]}");
Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/items/purchase")
  .post(body)
  .addHeader("content-type", "application/json")
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.post("https://api.recommender.gigalogy.com/v1/items/purchase")
  .header("content-type", "application/json")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .body("{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_list\":[{\"item_id\":\"1000757666\",\"price\":5000,\"quantity\":1},{\"item_id\":\"1000764491\",\"price\":400,\"quantity\":7}]}")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/items/purchase",
  "method": "POST",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  },
  "processData": false,
  "data": "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_list\":[{\"item_id\":\"1000757666\",\"price\":5000,\"quantity\":1},{\"item_id\":\"1000764491\",\"price\":400,\"quantity\":7}]}"
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = JSON.stringify({
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "item_list": [
    {
      "item_id": "1000757666",
      "price": 5000,
      "quantity": 1
    },
    {
      "item_id": "1000764491",
      "price": 400,
      "quantity": 7
    }
  ]
});

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("POST", "https://api.recommender.gigalogy.com/v1/items/purchase");
xhr.setRequestHeader("content-type", "application/json");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "POST",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/items/purchase",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.write(JSON.stringify({
  user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',
  member_id: 'df3456tg-2909-459b-be55-62196afedf85',
  item_list: [
    {item_id: '1000757666', price: 5000, quantity: 1},
    {item_id: '1000764491', price: 400, quantity: 7}
  ]
}));
req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'POST',
  url: 'https://api.recommender.gigalogy.com/v1/items/purchase',
  headers: {
    'content-type': 'application/json',
    'project-key': 'SOME_STRING_VALUE',
    'api-key': 'SOME_STRING_VALUE'
  },
  body: {
    user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',
    member_id: 'df3456tg-2909-459b-be55-62196afedf85',
    item_list: [
      {item_id: '1000757666', price: 5000, quantity: 1},
      {item_id: '1000764491', price: 400, quantity: 7}
    ]
  },
  json: true
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("POST", "https://api.recommender.gigalogy.com/v1/items/purchase");

req.headers({
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.type("json");
req.send({
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "item_list": [
    {
      "item_id": "1000757666",
      "price": 5000,
      "quantity": 1
    },
    {
      "item_id": "1000764491",
      "price": 400,
      "quantity": 7
    }
  ]
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"application/json",
                           @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };
NSDictionary *parameters = @{ @"user_id": @"a0cc6beb-2909-459b-be55-62196af78ce4",
                              @"member_id": @"df3456tg-2909-459b-be55-62196afedf85",
                              @"item_list": @[ @{ @"item_id": @"1000757666", @"price": @5000, @"quantity": @1 }, @{ @"item_id": @"1000764491", @"price": @400, @"quantity": @7 } ] };

NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/items/purchase"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"POST"];
[request setAllHTTPHeaderFields:headers];
[request setHTTPBody:postData];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/items/purchase",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "POST",
  CURLOPT_POSTFIELDS =&gt; "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_list\":[{\"item_id\":\"1000757666\",\"price\":5000,\"quantity\":1},{\"item_id\":\"1000764491\",\"price\":400,\"quantity\":7}]}",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "content-type: application/json",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/items/purchase');
$request-&gt;setMethod(HTTP_METH_POST);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$request-&gt;setBody('{"user_id":"a0cc6beb-2909-459b-be55-62196af78ce4","member_id":"df3456tg-2909-459b-be55-62196afedf85","item_list":[{"item_id":"1000757666","price":5000,"quantity":1},{"item_id":"1000764491","price":400,"quantity":7}]}');

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$body = new http\Message\Body;
$body-&gt;append('{"user_id":"a0cc6beb-2909-459b-be55-62196af78ce4","member_id":"df3456tg-2909-459b-be55-62196afedf85","item_list":[{"item_id":"1000757666","price":5000,"quantity":1},{"item_id":"1000764491","price":400,"quantity":7}]}');

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/items/purchase');
$request-&gt;setRequestMethod('POST');
$request-&gt;setBody($body);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

payload = "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_list\":[{\"item_id\":\"1000757666\",\"price\":5000,\"quantity\":1},{\"item_id\":\"1000764491\",\"price\":400,\"quantity\":7}]}"

headers = {
    'content-type': "application/json",
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("POST", "/v1/items/purchase", payload, headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/items/purchase"

payload = {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "item_list": [
        {
            "item_id": "1000757666",
            "price": 5000,
            "quantity": 1
        },
        {
            "item_id": "1000764491",
            "price": 400,
            "quantity": 7
        }
    ]
}
headers = {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("POST", url, json=payload, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/items/purchase")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Post.new(url)
request["content-type"] = 'application/json'
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'
request.body = "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_list\":[{\"item_id\":\"1000757666\",\"price\":5000,\"quantity\":1},{\"item_id\":\"1000764491\",\"price\":400,\"quantity\":7}]}"

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request POST \
  --url https://api.recommender.gigalogy.com/v1/items/purchase \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'content-type: application/json' \
  --header 'project-key: SOME_STRING_VALUE' \
  --data '{"user_id":"a0cc6beb-2909-459b-be55-62196af78ce4","member_id":"df3456tg-2909-459b-be55-62196afedf85","item_list":[{"item_id":"1000757666","price":5000,"quantity":1},{"item_id":"1000764491","price":400,"quantity":7}]}'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]
let parameters = [
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "item_list": [
    [
      "item_id": "1000757666",
      "price": 5000,
      "quantity": 1
    ],
    [
      "item_id": "1000764491",
      "price": 400,
      "quantity": 7
    ]
  ]
] as [String : Any]

let postData = JSONSerialization.data(withJSONObject: parameters, options: [])

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/items/purchase")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "POST"
request.allHTTPHeaderFields = headers
request.httpBody = postData as Data

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: post/v1/items/purchase/save
HTTP Method: Upload a CSV file and save data in purchase index
Method Description: This endpoint uploads and saves data from the CSV file in the purchase index. It only
takes text or CSV files as a required parameter. If you want to upload your
purchase data from a CSV file with our recommender system this endpoint will upload
the file and save them to the database.
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/items/purchase/save");
var request = new RestRequest(Method.POST);
request.AddHeader("content-type", "multipart/form-data");
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Post,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/items/purchase/save"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/items/purchase/save"

	req, _ := http.NewRequest("POST", url, nil)

	req.Header.Add("content-type", "multipart/form-data")
	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/items/purchase/save")
  .post(null)
  .addHeader("content-type", "multipart/form-data")
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.post("https://api.recommender.gigalogy.com/v1/items/purchase/save")
  .header("content-type", "multipart/form-data")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/items/purchase/save",
  "method": "POST",
  "headers": {
    "content-type": "multipart/form-data",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = null;

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("POST", "https://api.recommender.gigalogy.com/v1/items/purchase/save");
xhr.setRequestHeader("content-type", "multipart/form-data");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "POST",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/items/purchase/save",
  "headers": {
    "content-type": "multipart/form-data",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'POST',
  url: 'https://api.recommender.gigalogy.com/v1/items/purchase/save',
  headers: {
    'content-type': 'multipart/form-data',
    'project-key': 'SOME_STRING_VALUE',
    'api-key': 'SOME_STRING_VALUE'
  }
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("POST", "https://api.recommender.gigalogy.com/v1/items/purchase/save");

req.headers({
  "content-type": "multipart/form-data",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"multipart/form-data",
                           @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/items/purchase/save"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"POST"];
[request setAllHTTPHeaderFields:headers];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/items/purchase/save",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "POST",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "content-type: multipart/form-data",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/items/purchase/save');
$request-&gt;setMethod(HTTP_METH_POST);

$request-&gt;setHeaders([
  'content-type' =&gt; 'multipart/form-data',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/items/purchase/save');
$request-&gt;setRequestMethod('POST');
$request-&gt;setHeaders([
  'content-type' =&gt; 'multipart/form-data',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

headers = {
    'content-type': "multipart/form-data",
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("POST", "/v1/items/purchase/save", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/items/purchase/save"

headers = {
    "content-type": "multipart/form-data",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("POST", url, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/items/purchase/save")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Post.new(url)
request["content-type"] = 'multipart/form-data'
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request POST \
  --url https://api.recommender.gigalogy.com/v1/items/purchase/save \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'content-type: multipart/form-data' \
  --header 'project-key: SOME_STRING_VALUE'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "multipart/form-data",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/items/purchase/save")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "POST"
request.allHTTPHeaderFields = headers

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: get/v1/items/rating
HTTP Method: Get rating info by user id
Method Description: Get ratings information by id

### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| user_id | str | str | Represents the id of a logged-out unique user. |
| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/items/rating?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE&amp;start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE");
var request = new RestRequest(Method.GET);
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Get,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/items/rating?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE&amp;start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/items/rating?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE&amp;start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE"

	req, _ := http.NewRequest("GET", url, nil)

	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/items/rating?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE&amp;start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE")
  .get()
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.get("https://api.recommender.gigalogy.com/v1/items/rating?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE&amp;start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/items/rating?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE&amp;start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE",
  "method": "GET",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = null;

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("GET", "https://api.recommender.gigalogy.com/v1/items/rating?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE&amp;start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "GET",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/items/rating?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE&amp;start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'GET',
  url: 'https://api.recommender.gigalogy.com/v1/items/rating',
  qs: {
    user_id: 'SOME_STRING_VALUE',
    member_id: 'SOME_STRING_VALUE',
    start: 'SOME_INTEGER_VALUE',
    size: 'SOME_INTEGER_VALUE'
  },
  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("GET", "https://api.recommender.gigalogy.com/v1/items/rating");

req.query({
  "user_id": "SOME_STRING_VALUE",
  "member_id": "SOME_STRING_VALUE",
  "start": "SOME_INTEGER_VALUE",
  "size": "SOME_INTEGER_VALUE"
});

req.headers({
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/items/rating?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE&amp;start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"GET"];
[request setAllHTTPHeaderFields:headers];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/items/rating?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE&amp;start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "GET",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/items/rating');
$request-&gt;setMethod(HTTP_METH_GET);

$request-&gt;setQueryData([
  'user_id' =&gt; 'SOME_STRING_VALUE',
  'member_id' =&gt; 'SOME_STRING_VALUE',
  'start' =&gt; 'SOME_INTEGER_VALUE',
  'size' =&gt; 'SOME_INTEGER_VALUE'
]);

$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/items/rating');
$request-&gt;setRequestMethod('GET');
$request-&gt;setQuery(new http\QueryString([
  'user_id' =&gt; 'SOME_STRING_VALUE',
  'member_id' =&gt; 'SOME_STRING_VALUE',
  'start' =&gt; 'SOME_INTEGER_VALUE',
  'size' =&gt; 'SOME_INTEGER_VALUE'
]));

$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

headers = {
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("GET", "/v1/items/rating?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE&amp;start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/items/rating"

querystring = {"user_id":"SOME_STRING_VALUE","member_id":"SOME_STRING_VALUE","start":"SOME_INTEGER_VALUE","size":"SOME_INTEGER_VALUE"}

headers = {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("GET", url, headers=headers, params=querystring)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/items/rating?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE&amp;start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request GET \
  --url 'https://api.recommender.gigalogy.com/v1/items/rating?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE&amp;start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE' \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'project-key: SOME_STRING_VALUE'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/items/rating?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE&amp;start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "GET"
request.allHTTPHeaderFields = headers

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: post/v1/items/rating
HTTP Method: Capture user's given ratings on specific item and save them
Method Description: This endpoint captures users given ratings positive (1) or negative (0) on
a specific item and save them to the database. It takes user_id, item_id, and
rating for the specific item as required parameters and member_id as an optional parameter.

### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| user_id | str | str | Represents the id of a logged-out unique user. |
| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |
| item_id | str | str | Represents the id of the rated item. |
| rating | str | str | Represents the rating for specific items. The value should be either "1" or "0" where "1" represents positive rating and "0" represents negative rating. |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/items/rating");
var request = new RestRequest(Method.POST);
request.AddHeader("content-type", "application/json");
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
request.AddParameter("application/json", "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\",\"rating\":\"1\"}", ParameterType.RequestBody);
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Post,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/items/rating"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
    Content = new StringContent("{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\",\"rating\":\"1\"}")
    {
        Headers =
        {
            ContentType = new MediaTypeHeaderValue("application/json")
        }
    }
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"strings"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/items/rating"

	payload := strings.NewReader("{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\",\"rating\":\"1\"}")

	req, _ := http.NewRequest("POST", url, payload)

	req.Header.Add("content-type", "application/json")
	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

MediaType mediaType = MediaType.parse("application/json");
RequestBody body = RequestBody.create(mediaType, "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\",\"rating\":\"1\"}");
Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/items/rating")
  .post(body)
  .addHeader("content-type", "application/json")
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.post("https://api.recommender.gigalogy.com/v1/items/rating")
  .header("content-type", "application/json")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .body("{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\",\"rating\":\"1\"}")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/items/rating",
  "method": "POST",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  },
  "processData": false,
  "data": "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\",\"rating\":\"1\"}"
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = JSON.stringify({
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "item_id": "1000764491",
  "rating": "1"
});

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("POST", "https://api.recommender.gigalogy.com/v1/items/rating");
xhr.setRequestHeader("content-type", "application/json");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "POST",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/items/rating",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.write(JSON.stringify({
  user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',
  member_id: 'df3456tg-2909-459b-be55-62196afedf85',
  item_id: '1000764491',
  rating: '1'
}));
req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'POST',
  url: 'https://api.recommender.gigalogy.com/v1/items/rating',
  headers: {
    'content-type': 'application/json',
    'project-key': 'SOME_STRING_VALUE',
    'api-key': 'SOME_STRING_VALUE'
  },
  body: {
    user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',
    member_id: 'df3456tg-2909-459b-be55-62196afedf85',
    item_id: '1000764491',
    rating: '1'
  },
  json: true
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("POST", "https://api.recommender.gigalogy.com/v1/items/rating");

req.headers({
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.type("json");
req.send({
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "item_id": "1000764491",
  "rating": "1"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"application/json",
                           @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };
NSDictionary *parameters = @{ @"user_id": @"a0cc6beb-2909-459b-be55-62196af78ce4",
                              @"member_id": @"df3456tg-2909-459b-be55-62196afedf85",
                              @"item_id": @"1000764491",
                              @"rating": @"1" };

NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/items/rating"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"POST"];
[request setAllHTTPHeaderFields:headers];
[request setHTTPBody:postData];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/items/rating",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "POST",
  CURLOPT_POSTFIELDS =&gt; "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\",\"rating\":\"1\"}",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "content-type: application/json",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/items/rating');
$request-&gt;setMethod(HTTP_METH_POST);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$request-&gt;setBody('{"user_id":"a0cc6beb-2909-459b-be55-62196af78ce4","member_id":"df3456tg-2909-459b-be55-62196afedf85","item_id":"1000764491","rating":"1"}');

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$body = new http\Message\Body;
$body-&gt;append('{"user_id":"a0cc6beb-2909-459b-be55-62196af78ce4","member_id":"df3456tg-2909-459b-be55-62196afedf85","item_id":"1000764491","rating":"1"}');

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/items/rating');
$request-&gt;setRequestMethod('POST');
$request-&gt;setBody($body);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

payload = "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\",\"rating\":\"1\"}"

headers = {
    'content-type': "application/json",
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("POST", "/v1/items/rating", payload, headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/items/rating"

payload = {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "item_id": "1000764491",
    "rating": "1"
}
headers = {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("POST", url, json=payload, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/items/rating")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Post.new(url)
request["content-type"] = 'application/json'
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'
request.body = "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\",\"rating\":\"1\"}"

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request POST \
  --url https://api.recommender.gigalogy.com/v1/items/rating \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'content-type: application/json' \
  --header 'project-key: SOME_STRING_VALUE' \
  --data '{"user_id":"a0cc6beb-2909-459b-be55-62196af78ce4","member_id":"df3456tg-2909-459b-be55-62196afedf85","item_id":"1000764491","rating":"1"}'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]
let parameters = [
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "item_id": "1000764491",
  "rating": "1"
] as [String : Any]

let postData = JSONSerialization.data(withJSONObject: parameters, options: [])

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/items/rating")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "POST"
request.allHTTPHeaderFields = headers
request.httpBody = postData as Data

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: post/v1/items/rating/client
HTTP Method: Capture user's given ratings on specific item and save them using client-key
Method Description: This endpoint captures users given ratings positive (1) or negative (0) on
a specific item and save them to the database. It takes user_id, item_id, and
rating for the specific item as required parameters and member_id as an optional parameter.

### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| user_id | str | str | Represents the id of a logged-out unique user. |
| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |
| item_id | str | str | Represents the id of the rated item. |
| rating | str | str | Represents the rating for specific items. The value should be either "1" or "0" where "1" represents positive rating and "0" represents negative rating. |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/items/rating/client");
var request = new RestRequest(Method.POST);
request.AddHeader("content-type", "application/json");
request.AddHeader("client-key", "SOME_STRING_VALUE");
request.AddParameter("application/json", "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\",\"rating\":\"1\"}", ParameterType.RequestBody);
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Post,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/items/rating/client"),
    Headers =
    {
        { "client-key", "SOME_STRING_VALUE" },
    },
    Content = new StringContent("{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\",\"rating\":\"1\"}")
    {
        Headers =
        {
            ContentType = new MediaTypeHeaderValue("application/json")
        }
    }
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"strings"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/items/rating/client"

	payload := strings.NewReader("{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\",\"rating\":\"1\"}")

	req, _ := http.NewRequest("POST", url, payload)

	req.Header.Add("content-type", "application/json")
	req.Header.Add("client-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

MediaType mediaType = MediaType.parse("application/json");
RequestBody body = RequestBody.create(mediaType, "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\",\"rating\":\"1\"}");
Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/items/rating/client")
  .post(body)
  .addHeader("content-type", "application/json")
  .addHeader("client-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.post("https://api.recommender.gigalogy.com/v1/items/rating/client")
  .header("content-type", "application/json")
  .header("client-key", "SOME_STRING_VALUE")
  .body("{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\",\"rating\":\"1\"}")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/items/rating/client",
  "method": "POST",
  "headers": {
    "content-type": "application/json",
    "client-key": "SOME_STRING_VALUE"
  },
  "processData": false,
  "data": "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\",\"rating\":\"1\"}"
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = JSON.stringify({
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "item_id": "1000764491",
  "rating": "1"
});

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("POST", "https://api.recommender.gigalogy.com/v1/items/rating/client");
xhr.setRequestHeader("content-type", "application/json");
xhr.setRequestHeader("client-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "POST",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/items/rating/client",
  "headers": {
    "content-type": "application/json",
    "client-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.write(JSON.stringify({
  user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',
  member_id: 'df3456tg-2909-459b-be55-62196afedf85',
  item_id: '1000764491',
  rating: '1'
}));
req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'POST',
  url: 'https://api.recommender.gigalogy.com/v1/items/rating/client',
  headers: {'content-type': 'application/json', 'client-key': 'SOME_STRING_VALUE'},
  body: {
    user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',
    member_id: 'df3456tg-2909-459b-be55-62196afedf85',
    item_id: '1000764491',
    rating: '1'
  },
  json: true
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("POST", "https://api.recommender.gigalogy.com/v1/items/rating/client");

req.headers({
  "content-type": "application/json",
  "client-key": "SOME_STRING_VALUE"
});

req.type("json");
req.send({
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "item_id": "1000764491",
  "rating": "1"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"application/json",
                           @"client-key": @"SOME_STRING_VALUE" };
NSDictionary *parameters = @{ @"user_id": @"a0cc6beb-2909-459b-be55-62196af78ce4",
                              @"member_id": @"df3456tg-2909-459b-be55-62196afedf85",
                              @"item_id": @"1000764491",
                              @"rating": @"1" };

NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/items/rating/client"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"POST"];
[request setAllHTTPHeaderFields:headers];
[request setHTTPBody:postData];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/items/rating/client",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "POST",
  CURLOPT_POSTFIELDS =&gt; "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\",\"rating\":\"1\"}",
  CURLOPT_HTTPHEADER =&gt; [
    "client-key: SOME_STRING_VALUE",
    "content-type: application/json"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/items/rating/client');
$request-&gt;setMethod(HTTP_METH_POST);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'client-key' =&gt; 'SOME_STRING_VALUE'
]);

$request-&gt;setBody('{"user_id":"a0cc6beb-2909-459b-be55-62196af78ce4","member_id":"df3456tg-2909-459b-be55-62196afedf85","item_id":"1000764491","rating":"1"}');

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$body = new http\Message\Body;
$body-&gt;append('{"user_id":"a0cc6beb-2909-459b-be55-62196af78ce4","member_id":"df3456tg-2909-459b-be55-62196afedf85","item_id":"1000764491","rating":"1"}');

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/items/rating/client');
$request-&gt;setRequestMethod('POST');
$request-&gt;setBody($body);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'client-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

payload = "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\",\"rating\":\"1\"}"

headers = {
    'content-type': "application/json",
    'client-key': "SOME_STRING_VALUE"
    }

conn.request("POST", "/v1/items/rating/client", payload, headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/items/rating/client"

payload = {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "item_id": "1000764491",
    "rating": "1"
}
headers = {
    "content-type": "application/json",
    "client-key": "SOME_STRING_VALUE"
}

response = requests.request("POST", url, json=payload, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/items/rating/client")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Post.new(url)
request["content-type"] = 'application/json'
request["client-key"] = 'SOME_STRING_VALUE'
request.body = "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\",\"rating\":\"1\"}"

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request POST \
  --url https://api.recommender.gigalogy.com/v1/items/rating/client \
  --header 'client-key: SOME_STRING_VALUE' \
  --header 'content-type: application/json' \
  --data '{"user_id":"a0cc6beb-2909-459b-be55-62196af78ce4","member_id":"df3456tg-2909-459b-be55-62196afedf85","item_id":"1000764491","rating":"1"}'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "application/json",
  "client-key": "SOME_STRING_VALUE"
]
let parameters = [
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "item_id": "1000764491",
  "rating": "1"
] as [String : Any]

let postData = JSONSerialization.data(withJSONObject: parameters, options: [])

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/items/rating/client")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "POST"
request.allHTTPHeaderFields = headers
request.httpBody = postData as Data

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: post/v1/items/rating/save
HTTP Method: Upload a CSV file and save data in rating index
Method Description: This endpoint uploads and saves data from the CSV file in the rating index. It only
takes text or CSV files as a required parameter. If you want to upload your
rating data from a CSV file with our recommender system this endpoint will upload
the file and save them to the database.
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/items/rating/save");
var request = new RestRequest(Method.POST);
request.AddHeader("content-type", "multipart/form-data");
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Post,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/items/rating/save"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/items/rating/save"

	req, _ := http.NewRequest("POST", url, nil)

	req.Header.Add("content-type", "multipart/form-data")
	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/items/rating/save")
  .post(null)
  .addHeader("content-type", "multipart/form-data")
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.post("https://api.recommender.gigalogy.com/v1/items/rating/save")
  .header("content-type", "multipart/form-data")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/items/rating/save",
  "method": "POST",
  "headers": {
    "content-type": "multipart/form-data",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = null;

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("POST", "https://api.recommender.gigalogy.com/v1/items/rating/save");
xhr.setRequestHeader("content-type", "multipart/form-data");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "POST",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/items/rating/save",
  "headers": {
    "content-type": "multipart/form-data",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'POST',
  url: 'https://api.recommender.gigalogy.com/v1/items/rating/save',
  headers: {
    'content-type': 'multipart/form-data',
    'project-key': 'SOME_STRING_VALUE',
    'api-key': 'SOME_STRING_VALUE'
  }
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("POST", "https://api.recommender.gigalogy.com/v1/items/rating/save");

req.headers({
  "content-type": "multipart/form-data",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"multipart/form-data",
                           @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/items/rating/save"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"POST"];
[request setAllHTTPHeaderFields:headers];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/items/rating/save",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "POST",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "content-type: multipart/form-data",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/items/rating/save');
$request-&gt;setMethod(HTTP_METH_POST);

$request-&gt;setHeaders([
  'content-type' =&gt; 'multipart/form-data',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/items/rating/save');
$request-&gt;setRequestMethod('POST');
$request-&gt;setHeaders([
  'content-type' =&gt; 'multipart/form-data',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

headers = {
    'content-type': "multipart/form-data",
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("POST", "/v1/items/rating/save", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/items/rating/save"

headers = {
    "content-type": "multipart/form-data",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("POST", url, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/items/rating/save")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Post.new(url)
request["content-type"] = 'multipart/form-data'
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request POST \
  --url https://api.recommender.gigalogy.com/v1/items/rating/save \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'content-type: multipart/form-data' \
  --header 'project-key: SOME_STRING_VALUE'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "multipart/form-data",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/items/rating/save")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "POST"
request.allHTTPHeaderFields = headers

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: get/v1/users/generate/id
HTTP Method: Generate an unique user id
Method Description: This end point generates an unique user id.
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/users/generate/id");
var request = new RestRequest(Method.GET);
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Get,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/users/generate/id"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/users/generate/id"

	req, _ := http.NewRequest("GET", url, nil)

	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/users/generate/id")
  .get()
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.get("https://api.recommender.gigalogy.com/v1/users/generate/id")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/users/generate/id",
  "method": "GET",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = null;

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("GET", "https://api.recommender.gigalogy.com/v1/users/generate/id");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "GET",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/users/generate/id",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'GET',
  url: 'https://api.recommender.gigalogy.com/v1/users/generate/id',
  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("GET", "https://api.recommender.gigalogy.com/v1/users/generate/id");

req.headers({
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/users/generate/id"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"GET"];
[request setAllHTTPHeaderFields:headers];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/users/generate/id",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "GET",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/users/generate/id');
$request-&gt;setMethod(HTTP_METH_GET);

$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/users/generate/id');
$request-&gt;setRequestMethod('GET');
$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

headers = {
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("GET", "/v1/users/generate/id", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/users/generate/id"

headers = {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("GET", url, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/users/generate/id")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request GET \
  --url https://api.recommender.gigalogy.com/v1/users/generate/id \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'project-key: SOME_STRING_VALUE'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/users/generate/id")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "GET"
request.allHTTPHeaderFields = headers

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: get/v1/users
HTTP Method: Get user info by user id
Method Description: Get user information by id

### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| user_id | str | str | Represents the id of a logged-out unique user. |
| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/users?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE");
var request = new RestRequest(Method.GET);
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Get,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/users?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/users?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE"

	req, _ := http.NewRequest("GET", url, nil)

	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/users?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE")
  .get()
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.get("https://api.recommender.gigalogy.com/v1/users?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/users?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE",
  "method": "GET",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = null;

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("GET", "https://api.recommender.gigalogy.com/v1/users?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "GET",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/users?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'GET',
  url: 'https://api.recommender.gigalogy.com/v1/users',
  qs: {user_id: 'SOME_STRING_VALUE', member_id: 'SOME_STRING_VALUE'},
  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("GET", "https://api.recommender.gigalogy.com/v1/users");

req.query({
  "user_id": "SOME_STRING_VALUE",
  "member_id": "SOME_STRING_VALUE"
});

req.headers({
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/users?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"GET"];
[request setAllHTTPHeaderFields:headers];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/users?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "GET",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/users');
$request-&gt;setMethod(HTTP_METH_GET);

$request-&gt;setQueryData([
  'user_id' =&gt; 'SOME_STRING_VALUE',
  'member_id' =&gt; 'SOME_STRING_VALUE'
]);

$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/users');
$request-&gt;setRequestMethod('GET');
$request-&gt;setQuery(new http\QueryString([
  'user_id' =&gt; 'SOME_STRING_VALUE',
  'member_id' =&gt; 'SOME_STRING_VALUE'
]));

$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

headers = {
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("GET", "/v1/users?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/users"

querystring = {"user_id":"SOME_STRING_VALUE","member_id":"SOME_STRING_VALUE"}

headers = {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("GET", url, headers=headers, params=querystring)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/users?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request GET \
  --url 'https://api.recommender.gigalogy.com/v1/users?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE' \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'project-key: SOME_STRING_VALUE'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/users?user_id=SOME_STRING_VALUE&amp;member_id=SOME_STRING_VALUE")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "GET"
request.allHTTPHeaderFields = headers

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: put/v1/users
HTTP Method: Updates user information
Method Description: This endpoint captures user information and saves them to the database.
It takes user_id and user_info as required parameters and member_id as optional
parameter.
### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| user_id | str | str | Represents the id of a unique user. |
| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |
| address | Optional[str] | str | Represents address of the unique user. |
| gender | Optional[int] | int | Represents gender of the unique user. 1 for male or 2 for female or 3 for others. |
| age | Optional[int] | int | Represents age of the user. |
| key_name | str | str | Represents the type or preference of the user. If you have multiple values for user preference you can assign them here. |
| separator | Optional[str] | str | If one key contains multiple parameter with separator in your data source please assign the separator here. If there is no separator in column value you can pass `null` or remove the key from the request body. |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/users");
var request = new RestRequest(Method.PUT);
request.AddHeader("content-type", "application/json");
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
request.AddParameter("application/json", "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"user_info\":{\"address\":\"string\",\"gender\":\"integer --&gt; 1 for male or 2 for female or 3 for others\",\"age\":25,\"user_type\":[{\"key_name1\":\"value1_value2\",\"separator\":\"_\"},{\"key_name2\":\"value3\"}]}}", ParameterType.RequestBody);
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Put,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/users"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
    Content = new StringContent("{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"user_info\":{\"address\":\"string\",\"gender\":\"integer --&gt; 1 for male or 2 for female or 3 for others\",\"age\":25,\"user_type\":[{\"key_name1\":\"value1_value2\",\"separator\":\"_\"},{\"key_name2\":\"value3\"}]}}")
    {
        Headers =
        {
            ContentType = new MediaTypeHeaderValue("application/json")
        }
    }
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"strings"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/users"

	payload := strings.NewReader("{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"user_info\":{\"address\":\"string\",\"gender\":\"integer --&gt; 1 for male or 2 for female or 3 for others\",\"age\":25,\"user_type\":[{\"key_name1\":\"value1_value2\",\"separator\":\"_\"},{\"key_name2\":\"value3\"}]}}")

	req, _ := http.NewRequest("PUT", url, payload)

	req.Header.Add("content-type", "application/json")
	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

MediaType mediaType = MediaType.parse("application/json");
RequestBody body = RequestBody.create(mediaType, "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"user_info\":{\"address\":\"string\",\"gender\":\"integer --&gt; 1 for male or 2 for female or 3 for others\",\"age\":25,\"user_type\":[{\"key_name1\":\"value1_value2\",\"separator\":\"_\"},{\"key_name2\":\"value3\"}]}}");
Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/users")
  .put(body)
  .addHeader("content-type", "application/json")
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.put("https://api.recommender.gigalogy.com/v1/users")
  .header("content-type", "application/json")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .body("{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"user_info\":{\"address\":\"string\",\"gender\":\"integer --&gt; 1 for male or 2 for female or 3 for others\",\"age\":25,\"user_type\":[{\"key_name1\":\"value1_value2\",\"separator\":\"_\"},{\"key_name2\":\"value3\"}]}}")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/users",
  "method": "PUT",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  },
  "processData": false,
  "data": "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"user_info\":{\"address\":\"string\",\"gender\":\"integer --&gt; 1 for male or 2 for female or 3 for others\",\"age\":25,\"user_type\":[{\"key_name1\":\"value1_value2\",\"separator\":\"_\"},{\"key_name2\":\"value3\"}]}}"
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = JSON.stringify({
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "user_info": {
    "address": "string",
    "gender": "integer --&gt; 1 for male or 2 for female or 3 for others",
    "age": 25,
    "user_type": [
      {
        "key_name1": "value1_value2",
        "separator": "_"
      },
      {
        "key_name2": "value3"
      }
    ]
  }
});

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("PUT", "https://api.recommender.gigalogy.com/v1/users");
xhr.setRequestHeader("content-type", "application/json");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "PUT",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/users",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.write(JSON.stringify({
  user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',
  member_id: 'df3456tg-2909-459b-be55-62196afedf85',
  user_info: {
    address: 'string',
    gender: 'integer --&gt; 1 for male or 2 for female or 3 for others',
    age: 25,
    user_type: [{key_name1: 'value1_value2', separator: '_'}, {key_name2: 'value3'}]
  }
}));
req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'PUT',
  url: 'https://api.recommender.gigalogy.com/v1/users',
  headers: {
    'content-type': 'application/json',
    'project-key': 'SOME_STRING_VALUE',
    'api-key': 'SOME_STRING_VALUE'
  },
  body: {
    user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',
    member_id: 'df3456tg-2909-459b-be55-62196afedf85',
    user_info: {
      address: 'string',
      gender: 'integer --&gt; 1 for male or 2 for female or 3 for others',
      age: 25,
      user_type: [{key_name1: 'value1_value2', separator: '_'}, {key_name2: 'value3'}]
    }
  },
  json: true
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("PUT", "https://api.recommender.gigalogy.com/v1/users");

req.headers({
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.type("json");
req.send({
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "user_info": {
    "address": "string",
    "gender": "integer --&gt; 1 for male or 2 for female or 3 for others",
    "age": 25,
    "user_type": [
      {
        "key_name1": "value1_value2",
        "separator": "_"
      },
      {
        "key_name2": "value3"
      }
    ]
  }
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"application/json",
                           @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };
NSDictionary *parameters = @{ @"user_id": @"a0cc6beb-2909-459b-be55-62196af78ce4",
                              @"member_id": @"df3456tg-2909-459b-be55-62196afedf85",
                              @"user_info": @{ @"address": @"string", @"gender": @"integer --&gt; 1 for male or 2 for female or 3 for others", @"age": @25, @"user_type": @[ @{ @"key_name1": @"value1_value2", @"separator": @"_" }, @{ @"key_name2": @"value3" } ] } };

NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/users"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"PUT"];
[request setAllHTTPHeaderFields:headers];
[request setHTTPBody:postData];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/users",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "PUT",
  CURLOPT_POSTFIELDS =&gt; "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"user_info\":{\"address\":\"string\",\"gender\":\"integer --&gt; 1 for male or 2 for female or 3 for others\",\"age\":25,\"user_type\":[{\"key_name1\":\"value1_value2\",\"separator\":\"_\"},{\"key_name2\":\"value3\"}]}}",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "content-type: application/json",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/users');
$request-&gt;setMethod(HTTP_METH_PUT);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$request-&gt;setBody('{"user_id":"a0cc6beb-2909-459b-be55-62196af78ce4","member_id":"df3456tg-2909-459b-be55-62196afedf85","user_info":{"address":"string","gender":"integer --&gt; 1 for male or 2 for female or 3 for others","age":25,"user_type":[{"key_name1":"value1_value2","separator":"_"},{"key_name2":"value3"}]}}');

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$body = new http\Message\Body;
$body-&gt;append('{"user_id":"a0cc6beb-2909-459b-be55-62196af78ce4","member_id":"df3456tg-2909-459b-be55-62196afedf85","user_info":{"address":"string","gender":"integer --&gt; 1 for male or 2 for female or 3 for others","age":25,"user_type":[{"key_name1":"value1_value2","separator":"_"},{"key_name2":"value3"}]}}');

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/users');
$request-&gt;setRequestMethod('PUT');
$request-&gt;setBody($body);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

payload = "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"user_info\":{\"address\":\"string\",\"gender\":\"integer --&gt; 1 for male or 2 for female or 3 for others\",\"age\":25,\"user_type\":[{\"key_name1\":\"value1_value2\",\"separator\":\"_\"},{\"key_name2\":\"value3\"}]}}"

headers = {
    'content-type': "application/json",
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("PUT", "/v1/users", payload, headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/users"

payload = {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "user_info": {
        "address": "string",
        "gender": "integer --&gt; 1 for male or 2 for female or 3 for others",
        "age": 25,
        "user_type": [{
                "key_name1": "value1_value2",
                "separator": "_"
            }, {"key_name2": "value3"}]
    }
}
headers = {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("PUT", url, json=payload, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/users")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Put.new(url)
request["content-type"] = 'application/json'
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'
request.body = "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"user_info\":{\"address\":\"string\",\"gender\":\"integer --&gt; 1 for male or 2 for female or 3 for others\",\"age\":25,\"user_type\":[{\"key_name1\":\"value1_value2\",\"separator\":\"_\"},{\"key_name2\":\"value3\"}]}}"

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request PUT \
  --url https://api.recommender.gigalogy.com/v1/users \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'content-type: application/json' \
  --header 'project-key: SOME_STRING_VALUE' \
  --data '{"user_id":"a0cc6beb-2909-459b-be55-62196af78ce4","member_id":"df3456tg-2909-459b-be55-62196afedf85","user_info":{"address":"string","gender":"integer --&gt; 1 for male or 2 for female or 3 for others","age":25,"user_type":[{"key_name1":"value1_value2","separator":"_"},{"key_name2":"value3"}]}}'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]
let parameters = [
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "user_info": [
    "address": "string",
    "gender": "integer --&gt; 1 for male or 2 for female or 3 for others",
    "age": 25,
    "user_type": [[
        "key_name1": "value1_value2",
        "separator": "_"
      ], ["key_name2": "value3"]]
  ]
] as [String : Any]

let postData = JSONSerialization.data(withJSONObject: parameters, options: [])

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/users")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "PUT"
request.allHTTPHeaderFields = headers
request.httpBody = postData as Data

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: post/v1/users
HTTP Method: Captures user information
Method Description: This endpoint captures user information and saves them to the database.
It takes user_id and user_info as required parameters and member_id as optional
parameter.
### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| user_id | str | str | Represents the id of a unique user. |
| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |
| address | Optional[str] | str | Represents address of the unique user. |
| gender | Optional[int] | int | Represents gender of the unique user. 1 for male or 2 for female or 3 for others. |
| age | Optional[int] | int | Represents age of the user. |
| key_name | str | str | Represents the type or preference of the user. If you have multiple values for user preference you can assign them here. |
| separator | Optional[str] | str | If one key contains multiple parameter with separator in your data source please assign the separator here. If there is no separator in column value you can pass `null` or remove the key from the request body. |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/users");
var request = new RestRequest(Method.POST);
request.AddHeader("content-type", "application/json");
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
request.AddParameter("application/json", "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"user_info\":{\"address\":\"string\",\"gender\":\"integer --&gt; 1 for male or 2 for female or 3 for others\",\"age\":25,\"user_type\":[{\"key_name1\":\"value1_value2\",\"separator\":\"_\"},{\"key_name2\":\"value3\"}]}}", ParameterType.RequestBody);
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Post,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/users"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
    Content = new StringContent("{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"user_info\":{\"address\":\"string\",\"gender\":\"integer --&gt; 1 for male or 2 for female or 3 for others\",\"age\":25,\"user_type\":[{\"key_name1\":\"value1_value2\",\"separator\":\"_\"},{\"key_name2\":\"value3\"}]}}")
    {
        Headers =
        {
            ContentType = new MediaTypeHeaderValue("application/json")
        }
    }
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"strings"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/users"

	payload := strings.NewReader("{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"user_info\":{\"address\":\"string\",\"gender\":\"integer --&gt; 1 for male or 2 for female or 3 for others\",\"age\":25,\"user_type\":[{\"key_name1\":\"value1_value2\",\"separator\":\"_\"},{\"key_name2\":\"value3\"}]}}")

	req, _ := http.NewRequest("POST", url, payload)

	req.Header.Add("content-type", "application/json")
	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

MediaType mediaType = MediaType.parse("application/json");
RequestBody body = RequestBody.create(mediaType, "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"user_info\":{\"address\":\"string\",\"gender\":\"integer --&gt; 1 for male or 2 for female or 3 for others\",\"age\":25,\"user_type\":[{\"key_name1\":\"value1_value2\",\"separator\":\"_\"},{\"key_name2\":\"value3\"}]}}");
Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/users")
  .post(body)
  .addHeader("content-type", "application/json")
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.post("https://api.recommender.gigalogy.com/v1/users")
  .header("content-type", "application/json")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .body("{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"user_info\":{\"address\":\"string\",\"gender\":\"integer --&gt; 1 for male or 2 for female or 3 for others\",\"age\":25,\"user_type\":[{\"key_name1\":\"value1_value2\",\"separator\":\"_\"},{\"key_name2\":\"value3\"}]}}")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/users",
  "method": "POST",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  },
  "processData": false,
  "data": "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"user_info\":{\"address\":\"string\",\"gender\":\"integer --&gt; 1 for male or 2 for female or 3 for others\",\"age\":25,\"user_type\":[{\"key_name1\":\"value1_value2\",\"separator\":\"_\"},{\"key_name2\":\"value3\"}]}}"
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = JSON.stringify({
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "user_info": {
    "address": "string",
    "gender": "integer --&gt; 1 for male or 2 for female or 3 for others",
    "age": 25,
    "user_type": [
      {
        "key_name1": "value1_value2",
        "separator": "_"
      },
      {
        "key_name2": "value3"
      }
    ]
  }
});

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("POST", "https://api.recommender.gigalogy.com/v1/users");
xhr.setRequestHeader("content-type", "application/json");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "POST",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/users",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.write(JSON.stringify({
  user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',
  member_id: 'df3456tg-2909-459b-be55-62196afedf85',
  user_info: {
    address: 'string',
    gender: 'integer --&gt; 1 for male or 2 for female or 3 for others',
    age: 25,
    user_type: [{key_name1: 'value1_value2', separator: '_'}, {key_name2: 'value3'}]
  }
}));
req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'POST',
  url: 'https://api.recommender.gigalogy.com/v1/users',
  headers: {
    'content-type': 'application/json',
    'project-key': 'SOME_STRING_VALUE',
    'api-key': 'SOME_STRING_VALUE'
  },
  body: {
    user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',
    member_id: 'df3456tg-2909-459b-be55-62196afedf85',
    user_info: {
      address: 'string',
      gender: 'integer --&gt; 1 for male or 2 for female or 3 for others',
      age: 25,
      user_type: [{key_name1: 'value1_value2', separator: '_'}, {key_name2: 'value3'}]
    }
  },
  json: true
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("POST", "https://api.recommender.gigalogy.com/v1/users");

req.headers({
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.type("json");
req.send({
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "user_info": {
    "address": "string",
    "gender": "integer --&gt; 1 for male or 2 for female or 3 for others",
    "age": 25,
    "user_type": [
      {
        "key_name1": "value1_value2",
        "separator": "_"
      },
      {
        "key_name2": "value3"
      }
    ]
  }
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"application/json",
                           @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };
NSDictionary *parameters = @{ @"user_id": @"a0cc6beb-2909-459b-be55-62196af78ce4",
                              @"member_id": @"df3456tg-2909-459b-be55-62196afedf85",
                              @"user_info": @{ @"address": @"string", @"gender": @"integer --&gt; 1 for male or 2 for female or 3 for others", @"age": @25, @"user_type": @[ @{ @"key_name1": @"value1_value2", @"separator": @"_" }, @{ @"key_name2": @"value3" } ] } };

NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/users"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"POST"];
[request setAllHTTPHeaderFields:headers];
[request setHTTPBody:postData];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/users",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "POST",
  CURLOPT_POSTFIELDS =&gt; "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"user_info\":{\"address\":\"string\",\"gender\":\"integer --&gt; 1 for male or 2 for female or 3 for others\",\"age\":25,\"user_type\":[{\"key_name1\":\"value1_value2\",\"separator\":\"_\"},{\"key_name2\":\"value3\"}]}}",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "content-type: application/json",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/users');
$request-&gt;setMethod(HTTP_METH_POST);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$request-&gt;setBody('{"user_id":"a0cc6beb-2909-459b-be55-62196af78ce4","member_id":"df3456tg-2909-459b-be55-62196afedf85","user_info":{"address":"string","gender":"integer --&gt; 1 for male or 2 for female or 3 for others","age":25,"user_type":[{"key_name1":"value1_value2","separator":"_"},{"key_name2":"value3"}]}}');

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$body = new http\Message\Body;
$body-&gt;append('{"user_id":"a0cc6beb-2909-459b-be55-62196af78ce4","member_id":"df3456tg-2909-459b-be55-62196afedf85","user_info":{"address":"string","gender":"integer --&gt; 1 for male or 2 for female or 3 for others","age":25,"user_type":[{"key_name1":"value1_value2","separator":"_"},{"key_name2":"value3"}]}}');

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/users');
$request-&gt;setRequestMethod('POST');
$request-&gt;setBody($body);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

payload = "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"user_info\":{\"address\":\"string\",\"gender\":\"integer --&gt; 1 for male or 2 for female or 3 for others\",\"age\":25,\"user_type\":[{\"key_name1\":\"value1_value2\",\"separator\":\"_\"},{\"key_name2\":\"value3\"}]}}"

headers = {
    'content-type': "application/json",
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("POST", "/v1/users", payload, headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/users"

payload = {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "user_info": {
        "address": "string",
        "gender": "integer --&gt; 1 for male or 2 for female or 3 for others",
        "age": 25,
        "user_type": [{
                "key_name1": "value1_value2",
                "separator": "_"
            }, {"key_name2": "value3"}]
    }
}
headers = {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("POST", url, json=payload, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/users")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Post.new(url)
request["content-type"] = 'application/json'
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'
request.body = "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"user_info\":{\"address\":\"string\",\"gender\":\"integer --&gt; 1 for male or 2 for female or 3 for others\",\"age\":25,\"user_type\":[{\"key_name1\":\"value1_value2\",\"separator\":\"_\"},{\"key_name2\":\"value3\"}]}}"

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request POST \
  --url https://api.recommender.gigalogy.com/v1/users \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'content-type: application/json' \
  --header 'project-key: SOME_STRING_VALUE' \
  --data '{"user_id":"a0cc6beb-2909-459b-be55-62196af78ce4","member_id":"df3456tg-2909-459b-be55-62196afedf85","user_info":{"address":"string","gender":"integer --&gt; 1 for male or 2 for female or 3 for others","age":25,"user_type":[{"key_name1":"value1_value2","separator":"_"},{"key_name2":"value3"}]}}'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]
let parameters = [
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "user_info": [
    "address": "string",
    "gender": "integer --&gt; 1 for male or 2 for female or 3 for others",
    "age": 25,
    "user_type": [[
        "key_name1": "value1_value2",
        "separator": "_"
      ], ["key_name2": "value3"]]
  ]
] as [String : Any]

let postData = JSONSerialization.data(withJSONObject: parameters, options: [])

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/users")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "POST"
request.allHTTPHeaderFields = headers
request.httpBody = postData as Data

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: post/v1/users/client
HTTP Method: Captures user information using client key
Method Description: This endpoint captures user information and saves them to the database.
It takes user_id and user_info as required parameters and member_id as optional
parameter.
### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| user_id | str | str | Represents the id of a unique user. |
| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |
| address | Optional[str] | str | Represents address of the unique user. |
| gender | Optional[int] | int | Represents gender of the unique user. 1 for male or 2 for female or 3 for others. |
| age | Optional[int] | int | Represents age of the user. |
| key_name | str | str | Represents the type or preference of the user. If you have multiple values for user preference you can assign them here. |
| separator | Optional[str] | str | If one key contains multiple parameter with separator in your data source please assign the separator here. If there is no separator in column value you can pass `null` or remove the key from the request body. |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/users/client");
var request = new RestRequest(Method.POST);
request.AddHeader("content-type", "application/json");
request.AddHeader("client-key", "SOME_STRING_VALUE");
request.AddParameter("application/json", "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"user_info\":{\"address\":\"string\",\"gender\":\"integer --&gt; 1 for male or 2 for female or 3 for others\",\"age\":25,\"user_type\":[{\"key_name1\":\"value1_value2\",\"separator\":\"_\"},{\"key_name2\":\"value3\"}]}}", ParameterType.RequestBody);
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Post,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/users/client"),
    Headers =
    {
        { "client-key", "SOME_STRING_VALUE" },
    },
    Content = new StringContent("{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"user_info\":{\"address\":\"string\",\"gender\":\"integer --&gt; 1 for male or 2 for female or 3 for others\",\"age\":25,\"user_type\":[{\"key_name1\":\"value1_value2\",\"separator\":\"_\"},{\"key_name2\":\"value3\"}]}}")
    {
        Headers =
        {
            ContentType = new MediaTypeHeaderValue("application/json")
        }
    }
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"strings"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/users/client"

	payload := strings.NewReader("{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"user_info\":{\"address\":\"string\",\"gender\":\"integer --&gt; 1 for male or 2 for female or 3 for others\",\"age\":25,\"user_type\":[{\"key_name1\":\"value1_value2\",\"separator\":\"_\"},{\"key_name2\":\"value3\"}]}}")

	req, _ := http.NewRequest("POST", url, payload)

	req.Header.Add("content-type", "application/json")
	req.Header.Add("client-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

MediaType mediaType = MediaType.parse("application/json");
RequestBody body = RequestBody.create(mediaType, "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"user_info\":{\"address\":\"string\",\"gender\":\"integer --&gt; 1 for male or 2 for female or 3 for others\",\"age\":25,\"user_type\":[{\"key_name1\":\"value1_value2\",\"separator\":\"_\"},{\"key_name2\":\"value3\"}]}}");
Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/users/client")
  .post(body)
  .addHeader("content-type", "application/json")
  .addHeader("client-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.post("https://api.recommender.gigalogy.com/v1/users/client")
  .header("content-type", "application/json")
  .header("client-key", "SOME_STRING_VALUE")
  .body("{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"user_info\":{\"address\":\"string\",\"gender\":\"integer --&gt; 1 for male or 2 for female or 3 for others\",\"age\":25,\"user_type\":[{\"key_name1\":\"value1_value2\",\"separator\":\"_\"},{\"key_name2\":\"value3\"}]}}")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/users/client",
  "method": "POST",
  "headers": {
    "content-type": "application/json",
    "client-key": "SOME_STRING_VALUE"
  },
  "processData": false,
  "data": "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"user_info\":{\"address\":\"string\",\"gender\":\"integer --&gt; 1 for male or 2 for female or 3 for others\",\"age\":25,\"user_type\":[{\"key_name1\":\"value1_value2\",\"separator\":\"_\"},{\"key_name2\":\"value3\"}]}}"
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = JSON.stringify({
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "user_info": {
    "address": "string",
    "gender": "integer --&gt; 1 for male or 2 for female or 3 for others",
    "age": 25,
    "user_type": [
      {
        "key_name1": "value1_value2",
        "separator": "_"
      },
      {
        "key_name2": "value3"
      }
    ]
  }
});

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("POST", "https://api.recommender.gigalogy.com/v1/users/client");
xhr.setRequestHeader("content-type", "application/json");
xhr.setRequestHeader("client-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "POST",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/users/client",
  "headers": {
    "content-type": "application/json",
    "client-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.write(JSON.stringify({
  user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',
  member_id: 'df3456tg-2909-459b-be55-62196afedf85',
  user_info: {
    address: 'string',
    gender: 'integer --&gt; 1 for male or 2 for female or 3 for others',
    age: 25,
    user_type: [{key_name1: 'value1_value2', separator: '_'}, {key_name2: 'value3'}]
  }
}));
req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'POST',
  url: 'https://api.recommender.gigalogy.com/v1/users/client',
  headers: {'content-type': 'application/json', 'client-key': 'SOME_STRING_VALUE'},
  body: {
    user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',
    member_id: 'df3456tg-2909-459b-be55-62196afedf85',
    user_info: {
      address: 'string',
      gender: 'integer --&gt; 1 for male or 2 for female or 3 for others',
      age: 25,
      user_type: [{key_name1: 'value1_value2', separator: '_'}, {key_name2: 'value3'}]
    }
  },
  json: true
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("POST", "https://api.recommender.gigalogy.com/v1/users/client");

req.headers({
  "content-type": "application/json",
  "client-key": "SOME_STRING_VALUE"
});

req.type("json");
req.send({
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "user_info": {
    "address": "string",
    "gender": "integer --&gt; 1 for male or 2 for female or 3 for others",
    "age": 25,
    "user_type": [
      {
        "key_name1": "value1_value2",
        "separator": "_"
      },
      {
        "key_name2": "value3"
      }
    ]
  }
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"application/json",
                           @"client-key": @"SOME_STRING_VALUE" };
NSDictionary *parameters = @{ @"user_id": @"a0cc6beb-2909-459b-be55-62196af78ce4",
                              @"member_id": @"df3456tg-2909-459b-be55-62196afedf85",
                              @"user_info": @{ @"address": @"string", @"gender": @"integer --&gt; 1 for male or 2 for female or 3 for others", @"age": @25, @"user_type": @[ @{ @"key_name1": @"value1_value2", @"separator": @"_" }, @{ @"key_name2": @"value3" } ] } };

NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/users/client"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"POST"];
[request setAllHTTPHeaderFields:headers];
[request setHTTPBody:postData];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/users/client",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "POST",
  CURLOPT_POSTFIELDS =&gt; "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"user_info\":{\"address\":\"string\",\"gender\":\"integer --&gt; 1 for male or 2 for female or 3 for others\",\"age\":25,\"user_type\":[{\"key_name1\":\"value1_value2\",\"separator\":\"_\"},{\"key_name2\":\"value3\"}]}}",
  CURLOPT_HTTPHEADER =&gt; [
    "client-key: SOME_STRING_VALUE",
    "content-type: application/json"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/users/client');
$request-&gt;setMethod(HTTP_METH_POST);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'client-key' =&gt; 'SOME_STRING_VALUE'
]);

$request-&gt;setBody('{"user_id":"a0cc6beb-2909-459b-be55-62196af78ce4","member_id":"df3456tg-2909-459b-be55-62196afedf85","user_info":{"address":"string","gender":"integer --&gt; 1 for male or 2 for female or 3 for others","age":25,"user_type":[{"key_name1":"value1_value2","separator":"_"},{"key_name2":"value3"}]}}');

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$body = new http\Message\Body;
$body-&gt;append('{"user_id":"a0cc6beb-2909-459b-be55-62196af78ce4","member_id":"df3456tg-2909-459b-be55-62196afedf85","user_info":{"address":"string","gender":"integer --&gt; 1 for male or 2 for female or 3 for others","age":25,"user_type":[{"key_name1":"value1_value2","separator":"_"},{"key_name2":"value3"}]}}');

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/users/client');
$request-&gt;setRequestMethod('POST');
$request-&gt;setBody($body);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'client-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

payload = "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"user_info\":{\"address\":\"string\",\"gender\":\"integer --&gt; 1 for male or 2 for female or 3 for others\",\"age\":25,\"user_type\":[{\"key_name1\":\"value1_value2\",\"separator\":\"_\"},{\"key_name2\":\"value3\"}]}}"

headers = {
    'content-type': "application/json",
    'client-key': "SOME_STRING_VALUE"
    }

conn.request("POST", "/v1/users/client", payload, headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/users/client"

payload = {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "user_info": {
        "address": "string",
        "gender": "integer --&gt; 1 for male or 2 for female or 3 for others",
        "age": 25,
        "user_type": [{
                "key_name1": "value1_value2",
                "separator": "_"
            }, {"key_name2": "value3"}]
    }
}
headers = {
    "content-type": "application/json",
    "client-key": "SOME_STRING_VALUE"
}

response = requests.request("POST", url, json=payload, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/users/client")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Post.new(url)
request["content-type"] = 'application/json'
request["client-key"] = 'SOME_STRING_VALUE'
request.body = "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"user_info\":{\"address\":\"string\",\"gender\":\"integer --&gt; 1 for male or 2 for female or 3 for others\",\"age\":25,\"user_type\":[{\"key_name1\":\"value1_value2\",\"separator\":\"_\"},{\"key_name2\":\"value3\"}]}}"

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request POST \
  --url https://api.recommender.gigalogy.com/v1/users/client \
  --header 'client-key: SOME_STRING_VALUE' \
  --header 'content-type: application/json' \
  --data '{"user_id":"a0cc6beb-2909-459b-be55-62196af78ce4","member_id":"df3456tg-2909-459b-be55-62196afedf85","user_info":{"address":"string","gender":"integer --&gt; 1 for male or 2 for female or 3 for others","age":25,"user_type":[{"key_name1":"value1_value2","separator":"_"},{"key_name2":"value3"}]}}'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "application/json",
  "client-key": "SOME_STRING_VALUE"
]
let parameters = [
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "user_info": [
    "address": "string",
    "gender": "integer --&gt; 1 for male or 2 for female or 3 for others",
    "age": 25,
    "user_type": [[
        "key_name1": "value1_value2",
        "separator": "_"
      ], ["key_name2": "value3"]]
  ]
] as [String : Any]

let postData = JSONSerialization.data(withJSONObject: parameters, options: [])

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/users/client")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "POST"
request.allHTTPHeaderFields = headers
request.httpBody = postData as Data

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: post/v1/users/save
HTTP Method: Upload a CSV file and save data in user index
Method Description: This endpoint uploads and saves data from the CSV file in the user index. It only
takes text or CSV files as a required parameter. If you want to upload your
user information data from a CSV file with our recommender system this endpoint will upload
the file and save them to the database.
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/users/save");
var request = new RestRequest(Method.POST);
request.AddHeader("content-type", "multipart/form-data");
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Post,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/users/save"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/users/save"

	req, _ := http.NewRequest("POST", url, nil)

	req.Header.Add("content-type", "multipart/form-data")
	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/users/save")
  .post(null)
  .addHeader("content-type", "multipart/form-data")
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.post("https://api.recommender.gigalogy.com/v1/users/save")
  .header("content-type", "multipart/form-data")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/users/save",
  "method": "POST",
  "headers": {
    "content-type": "multipart/form-data",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = null;

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("POST", "https://api.recommender.gigalogy.com/v1/users/save");
xhr.setRequestHeader("content-type", "multipart/form-data");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "POST",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/users/save",
  "headers": {
    "content-type": "multipart/form-data",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'POST',
  url: 'https://api.recommender.gigalogy.com/v1/users/save',
  headers: {
    'content-type': 'multipart/form-data',
    'project-key': 'SOME_STRING_VALUE',
    'api-key': 'SOME_STRING_VALUE'
  }
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("POST", "https://api.recommender.gigalogy.com/v1/users/save");

req.headers({
  "content-type": "multipart/form-data",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"multipart/form-data",
                           @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/users/save"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"POST"];
[request setAllHTTPHeaderFields:headers];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/users/save",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "POST",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "content-type: multipart/form-data",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/users/save');
$request-&gt;setMethod(HTTP_METH_POST);

$request-&gt;setHeaders([
  'content-type' =&gt; 'multipart/form-data',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/users/save');
$request-&gt;setRequestMethod('POST');
$request-&gt;setHeaders([
  'content-type' =&gt; 'multipart/form-data',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

headers = {
    'content-type': "multipart/form-data",
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("POST", "/v1/users/save", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/users/save"

headers = {
    "content-type": "multipart/form-data",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("POST", url, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/users/save")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Post.new(url)
request["content-type"] = 'multipart/form-data'
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request POST \
  --url https://api.recommender.gigalogy.com/v1/users/save \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'content-type: multipart/form-data' \
  --header 'project-key: SOME_STRING_VALUE'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "multipart/form-data",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/users/save")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "POST"
request.allHTTPHeaderFields = headers

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: post/v1/items/recommend
HTTP Method: recommend the most similar items to our input item_id in terms of content
Method Description: This endpoint understands the content of your item and returns the most similar
items as response. It takes user_id, item_id, details as required parameter
and member_id as optional parameter.
This endpoint can be used on product details page.

### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| user_id | str | str | Represents the id of a logged-out unique user. |
| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |
| item_id | str | str | Represents the id of an item. |
| details | bool | bool | If you want to get recommended items with details this parameter would be `True` otherwise it would be `False`. |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/items/recommend");
var request = new RestRequest(Method.POST);
request.AddHeader("content-type", "application/json");
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
request.AddParameter("application/json", "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000757666\",\"details\":true}", ParameterType.RequestBody);
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Post,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/items/recommend"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
    Content = new StringContent("{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000757666\",\"details\":true}")
    {
        Headers =
        {
            ContentType = new MediaTypeHeaderValue("application/json")
        }
    }
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"strings"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/items/recommend"

	payload := strings.NewReader("{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000757666\",\"details\":true}")

	req, _ := http.NewRequest("POST", url, payload)

	req.Header.Add("content-type", "application/json")
	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

MediaType mediaType = MediaType.parse("application/json");
RequestBody body = RequestBody.create(mediaType, "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000757666\",\"details\":true}");
Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/items/recommend")
  .post(body)
  .addHeader("content-type", "application/json")
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.post("https://api.recommender.gigalogy.com/v1/items/recommend")
  .header("content-type", "application/json")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .body("{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000757666\",\"details\":true}")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/items/recommend",
  "method": "POST",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  },
  "processData": false,
  "data": "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000757666\",\"details\":true}"
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = JSON.stringify({
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "item_id": "1000757666",
  "details": true
});

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("POST", "https://api.recommender.gigalogy.com/v1/items/recommend");
xhr.setRequestHeader("content-type", "application/json");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "POST",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/items/recommend",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.write(JSON.stringify({
  user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',
  member_id: 'df3456tg-2909-459b-be55-62196afedf85',
  item_id: '1000757666',
  details: true
}));
req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'POST',
  url: 'https://api.recommender.gigalogy.com/v1/items/recommend',
  headers: {
    'content-type': 'application/json',
    'project-key': 'SOME_STRING_VALUE',
    'api-key': 'SOME_STRING_VALUE'
  },
  body: {
    user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',
    member_id: 'df3456tg-2909-459b-be55-62196afedf85',
    item_id: '1000757666',
    details: true
  },
  json: true
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("POST", "https://api.recommender.gigalogy.com/v1/items/recommend");

req.headers({
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.type("json");
req.send({
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "item_id": "1000757666",
  "details": true
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"application/json",
                           @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };
NSDictionary *parameters = @{ @"user_id": @"a0cc6beb-2909-459b-be55-62196af78ce4",
                              @"member_id": @"df3456tg-2909-459b-be55-62196afedf85",
                              @"item_id": @"1000757666",
                              @"details": @YES };

NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/items/recommend"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"POST"];
[request setAllHTTPHeaderFields:headers];
[request setHTTPBody:postData];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/items/recommend",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "POST",
  CURLOPT_POSTFIELDS =&gt; "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000757666\",\"details\":true}",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "content-type: application/json",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/items/recommend');
$request-&gt;setMethod(HTTP_METH_POST);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$request-&gt;setBody('{"user_id":"a0cc6beb-2909-459b-be55-62196af78ce4","member_id":"df3456tg-2909-459b-be55-62196afedf85","item_id":"1000757666","details":true}');

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$body = new http\Message\Body;
$body-&gt;append('{"user_id":"a0cc6beb-2909-459b-be55-62196af78ce4","member_id":"df3456tg-2909-459b-be55-62196afedf85","item_id":"1000757666","details":true}');

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/items/recommend');
$request-&gt;setRequestMethod('POST');
$request-&gt;setBody($body);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

payload = "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000757666\",\"details\":true}"

headers = {
    'content-type': "application/json",
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("POST", "/v1/items/recommend", payload, headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/items/recommend"

payload = {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "item_id": "1000757666",
    "details": True
}
headers = {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("POST", url, json=payload, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/items/recommend")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Post.new(url)
request["content-type"] = 'application/json'
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'
request.body = "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000757666\",\"details\":true}"

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request POST \
  --url https://api.recommender.gigalogy.com/v1/items/recommend \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'content-type: application/json' \
  --header 'project-key: SOME_STRING_VALUE' \
  --data '{"user_id":"a0cc6beb-2909-459b-be55-62196af78ce4","member_id":"df3456tg-2909-459b-be55-62196afedf85","item_id":"1000757666","details":true}'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]
let parameters = [
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "item_id": "1000757666",
  "details": true
] as [String : Any]

let postData = JSONSerialization.data(withJSONObject: parameters, options: [])

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/items/recommend")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "POST"
request.allHTTPHeaderFields = headers
request.httpBody = postData as Data

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: post/v1/items/purchased/together
HTTP Method: recommend items those are purchased together
Method Description: This endpoint returns items those are frequently purchased together. 
It takes user_id, item_id, details as required parameter
and member_id as optional parameter.
This endpoint can be used on product details page.

### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| user_id | str | str | Represents the id of a logged-out unique user. |
| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |
| item_id | str | str | Represents the id of an item. |
| details | bool | bool | If you want to get recommended items with details this parameter would be `True` otherwise it would be `False`. |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/items/purchased/together");
var request = new RestRequest(Method.POST);
request.AddHeader("content-type", "application/json");
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
request.AddParameter("application/json", "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000757666\",\"details\":true}", ParameterType.RequestBody);
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Post,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/items/purchased/together"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
    Content = new StringContent("{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000757666\",\"details\":true}")
    {
        Headers =
        {
            ContentType = new MediaTypeHeaderValue("application/json")
        }
    }
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"strings"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/items/purchased/together"

	payload := strings.NewReader("{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000757666\",\"details\":true}")

	req, _ := http.NewRequest("POST", url, payload)

	req.Header.Add("content-type", "application/json")
	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

MediaType mediaType = MediaType.parse("application/json");
RequestBody body = RequestBody.create(mediaType, "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000757666\",\"details\":true}");
Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/items/purchased/together")
  .post(body)
  .addHeader("content-type", "application/json")
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.post("https://api.recommender.gigalogy.com/v1/items/purchased/together")
  .header("content-type", "application/json")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .body("{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000757666\",\"details\":true}")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/items/purchased/together",
  "method": "POST",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  },
  "processData": false,
  "data": "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000757666\",\"details\":true}"
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = JSON.stringify({
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "item_id": "1000757666",
  "details": true
});

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("POST", "https://api.recommender.gigalogy.com/v1/items/purchased/together");
xhr.setRequestHeader("content-type", "application/json");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "POST",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/items/purchased/together",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.write(JSON.stringify({
  user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',
  member_id: 'df3456tg-2909-459b-be55-62196afedf85',
  item_id: '1000757666',
  details: true
}));
req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'POST',
  url: 'https://api.recommender.gigalogy.com/v1/items/purchased/together',
  headers: {
    'content-type': 'application/json',
    'project-key': 'SOME_STRING_VALUE',
    'api-key': 'SOME_STRING_VALUE'
  },
  body: {
    user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',
    member_id: 'df3456tg-2909-459b-be55-62196afedf85',
    item_id: '1000757666',
    details: true
  },
  json: true
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("POST", "https://api.recommender.gigalogy.com/v1/items/purchased/together");

req.headers({
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.type("json");
req.send({
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "item_id": "1000757666",
  "details": true
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"application/json",
                           @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };
NSDictionary *parameters = @{ @"user_id": @"a0cc6beb-2909-459b-be55-62196af78ce4",
                              @"member_id": @"df3456tg-2909-459b-be55-62196afedf85",
                              @"item_id": @"1000757666",
                              @"details": @YES };

NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/items/purchased/together"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"POST"];
[request setAllHTTPHeaderFields:headers];
[request setHTTPBody:postData];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/items/purchased/together",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "POST",
  CURLOPT_POSTFIELDS =&gt; "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000757666\",\"details\":true}",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "content-type: application/json",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/items/purchased/together');
$request-&gt;setMethod(HTTP_METH_POST);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$request-&gt;setBody('{"user_id":"a0cc6beb-2909-459b-be55-62196af78ce4","member_id":"df3456tg-2909-459b-be55-62196afedf85","item_id":"1000757666","details":true}');

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$body = new http\Message\Body;
$body-&gt;append('{"user_id":"a0cc6beb-2909-459b-be55-62196af78ce4","member_id":"df3456tg-2909-459b-be55-62196afedf85","item_id":"1000757666","details":true}');

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/items/purchased/together');
$request-&gt;setRequestMethod('POST');
$request-&gt;setBody($body);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

payload = "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000757666\",\"details\":true}"

headers = {
    'content-type': "application/json",
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("POST", "/v1/items/purchased/together", payload, headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/items/purchased/together"

payload = {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "item_id": "1000757666",
    "details": True
}
headers = {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("POST", url, json=payload, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/items/purchased/together")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Post.new(url)
request["content-type"] = 'application/json'
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'
request.body = "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000757666\",\"details\":true}"

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request POST \
  --url https://api.recommender.gigalogy.com/v1/items/purchased/together \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'content-type: application/json' \
  --header 'project-key: SOME_STRING_VALUE' \
  --data '{"user_id":"a0cc6beb-2909-459b-be55-62196af78ce4","member_id":"df3456tg-2909-459b-be55-62196afedf85","item_id":"1000757666","details":true}'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]
let parameters = [
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "item_id": "1000757666",
  "details": true
] as [String : Any]

let postData = JSONSerialization.data(withJSONObject: parameters, options: [])

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/items/purchased/together")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "POST"
request.allHTTPHeaderFields = headers
request.httpBody = postData as Data

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: post/v1/users/recommend
HTTP Method: recommend the most suitable items based on user behavior
Method Description: This endpoint understands user behavior such as browse, purchase, favorites,
time spent in your application and returns the most suitable items for them
as response. It takes user_id, details, interval, top_n_items as required parameter and member_id as
optional parameter.
This endpoint can be used on user feed, top page, personalized suggestions etc.

### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| user_id | str | str | Represents the id of a logged-out unique user. |
| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |
| interval | Enum | Selected enum value | Represents the time range depending which it will predict trending and top recommended items. Available values are `weekly`, `bi-weekly`, `monthly`, `quarterly`, `yearly`. Interval should be similar to the interval parameter of `../rank/settings` endpoint.
| top_n_item | int | int | Represents number of top ranked items in given time interval. |
| details | bool | bool | If you want to get recommended items with details this parameter would be `True` otherwise it would be `False`. |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/users/recommend");
var request = new RestRequest(Method.POST);
request.AddHeader("content-type", "application/json");
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
request.AddParameter("application/json", "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"top_n_item\":100,\"interval\":\"weekly\",\"start\":0,\"size\":10,\"details\":true}", ParameterType.RequestBody);
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Post,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/users/recommend"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
    Content = new StringContent("{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"top_n_item\":100,\"interval\":\"weekly\",\"start\":0,\"size\":10,\"details\":true}")
    {
        Headers =
        {
            ContentType = new MediaTypeHeaderValue("application/json")
        }
    }
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"strings"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/users/recommend"

	payload := strings.NewReader("{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"top_n_item\":100,\"interval\":\"weekly\",\"start\":0,\"size\":10,\"details\":true}")

	req, _ := http.NewRequest("POST", url, payload)

	req.Header.Add("content-type", "application/json")
	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

MediaType mediaType = MediaType.parse("application/json");
RequestBody body = RequestBody.create(mediaType, "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"top_n_item\":100,\"interval\":\"weekly\",\"start\":0,\"size\":10,\"details\":true}");
Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/users/recommend")
  .post(body)
  .addHeader("content-type", "application/json")
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.post("https://api.recommender.gigalogy.com/v1/users/recommend")
  .header("content-type", "application/json")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .body("{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"top_n_item\":100,\"interval\":\"weekly\",\"start\":0,\"size\":10,\"details\":true}")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/users/recommend",
  "method": "POST",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  },
  "processData": false,
  "data": "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"top_n_item\":100,\"interval\":\"weekly\",\"start\":0,\"size\":10,\"details\":true}"
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = JSON.stringify({
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "top_n_item": 100,
  "interval": "weekly",
  "start": 0,
  "size": 10,
  "details": true
});

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("POST", "https://api.recommender.gigalogy.com/v1/users/recommend");
xhr.setRequestHeader("content-type", "application/json");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "POST",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/users/recommend",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.write(JSON.stringify({
  user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',
  member_id: 'df3456tg-2909-459b-be55-62196afedf85',
  top_n_item: 100,
  interval: 'weekly',
  start: 0,
  size: 10,
  details: true
}));
req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'POST',
  url: 'https://api.recommender.gigalogy.com/v1/users/recommend',
  headers: {
    'content-type': 'application/json',
    'project-key': 'SOME_STRING_VALUE',
    'api-key': 'SOME_STRING_VALUE'
  },
  body: {
    user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',
    member_id: 'df3456tg-2909-459b-be55-62196afedf85',
    top_n_item: 100,
    interval: 'weekly',
    start: 0,
    size: 10,
    details: true
  },
  json: true
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("POST", "https://api.recommender.gigalogy.com/v1/users/recommend");

req.headers({
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.type("json");
req.send({
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "top_n_item": 100,
  "interval": "weekly",
  "start": 0,
  "size": 10,
  "details": true
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"application/json",
                           @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };
NSDictionary *parameters = @{ @"user_id": @"a0cc6beb-2909-459b-be55-62196af78ce4",
                              @"member_id": @"df3456tg-2909-459b-be55-62196afedf85",
                              @"top_n_item": @100,
                              @"interval": @"weekly",
                              @"start": @0,
                              @"size": @10,
                              @"details": @YES };

NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/users/recommend"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"POST"];
[request setAllHTTPHeaderFields:headers];
[request setHTTPBody:postData];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/users/recommend",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "POST",
  CURLOPT_POSTFIELDS =&gt; "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"top_n_item\":100,\"interval\":\"weekly\",\"start\":0,\"size\":10,\"details\":true}",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "content-type: application/json",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/users/recommend');
$request-&gt;setMethod(HTTP_METH_POST);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$request-&gt;setBody('{"user_id":"a0cc6beb-2909-459b-be55-62196af78ce4","member_id":"df3456tg-2909-459b-be55-62196afedf85","top_n_item":100,"interval":"weekly","start":0,"size":10,"details":true}');

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$body = new http\Message\Body;
$body-&gt;append('{"user_id":"a0cc6beb-2909-459b-be55-62196af78ce4","member_id":"df3456tg-2909-459b-be55-62196afedf85","top_n_item":100,"interval":"weekly","start":0,"size":10,"details":true}');

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/users/recommend');
$request-&gt;setRequestMethod('POST');
$request-&gt;setBody($body);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

payload = "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"top_n_item\":100,\"interval\":\"weekly\",\"start\":0,\"size\":10,\"details\":true}"

headers = {
    'content-type': "application/json",
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("POST", "/v1/users/recommend", payload, headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/users/recommend"

payload = {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "top_n_item": 100,
    "interval": "weekly",
    "start": 0,
    "size": 10,
    "details": True
}
headers = {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("POST", url, json=payload, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/users/recommend")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Post.new(url)
request["content-type"] = 'application/json'
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'
request.body = "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"top_n_item\":100,\"interval\":\"weekly\",\"start\":0,\"size\":10,\"details\":true}"

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request POST \
  --url https://api.recommender.gigalogy.com/v1/users/recommend \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'content-type: application/json' \
  --header 'project-key: SOME_STRING_VALUE' \
  --data '{"user_id":"a0cc6beb-2909-459b-be55-62196af78ce4","member_id":"df3456tg-2909-459b-be55-62196afedf85","top_n_item":100,"interval":"weekly","start":0,"size":10,"details":true}'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]
let parameters = [
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "top_n_item": 100,
  "interval": "weekly",
  "start": 0,
  "size": 10,
  "details": true
] as [String : Any]

let postData = JSONSerialization.data(withJSONObject: parameters, options: [])

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/users/recommend")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "POST"
request.allHTTPHeaderFields = headers
request.httpBody = postData as Data

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: post/v1/items/trending
HTTP Method: recommend the latest trending items
Method Description: This endpoint considers all sorts of possible parameters in your application
such as user behavior, item co-relation, external impact, business impact and
returns the trending items for given interval as response. It takes top_n_item,
interval, details as required parameters.
This endpoint can be used on user feed, top page, personalized suggestions etc.

### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| top_n_item | int | int | Represents number of top ranked items in given time interval. |
| interval | Enum | Selected enum value | Represents the time range depending which it will predict trending and top recommended items. Available values are `weekly`, `bi-weekly`, `monthly`, `quarterly`, `yearly`. Interval should be similar to the interval parameter of `../rank/settings` endpoint. |
| details | bool | bool | If you want to get recommended items with details this parameter would be `True` otherwise it would be `False`. |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/items/trending");
var request = new RestRequest(Method.POST);
request.AddHeader("content-type", "application/json");
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
request.AddParameter("application/json", "{\"top_n_item\":100,\"interval\":\"weekly\",\"details\":true}", ParameterType.RequestBody);
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Post,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/items/trending"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
    Content = new StringContent("{\"top_n_item\":100,\"interval\":\"weekly\",\"details\":true}")
    {
        Headers =
        {
            ContentType = new MediaTypeHeaderValue("application/json")
        }
    }
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"strings"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/items/trending"

	payload := strings.NewReader("{\"top_n_item\":100,\"interval\":\"weekly\",\"details\":true}")

	req, _ := http.NewRequest("POST", url, payload)

	req.Header.Add("content-type", "application/json")
	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

MediaType mediaType = MediaType.parse("application/json");
RequestBody body = RequestBody.create(mediaType, "{\"top_n_item\":100,\"interval\":\"weekly\",\"details\":true}");
Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/items/trending")
  .post(body)
  .addHeader("content-type", "application/json")
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.post("https://api.recommender.gigalogy.com/v1/items/trending")
  .header("content-type", "application/json")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .body("{\"top_n_item\":100,\"interval\":\"weekly\",\"details\":true}")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/items/trending",
  "method": "POST",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  },
  "processData": false,
  "data": "{\"top_n_item\":100,\"interval\":\"weekly\",\"details\":true}"
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = JSON.stringify({
  "top_n_item": 100,
  "interval": "weekly",
  "details": true
});

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("POST", "https://api.recommender.gigalogy.com/v1/items/trending");
xhr.setRequestHeader("content-type", "application/json");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "POST",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/items/trending",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.write(JSON.stringify({top_n_item: 100, interval: 'weekly', details: true}));
req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'POST',
  url: 'https://api.recommender.gigalogy.com/v1/items/trending',
  headers: {
    'content-type': 'application/json',
    'project-key': 'SOME_STRING_VALUE',
    'api-key': 'SOME_STRING_VALUE'
  },
  body: {top_n_item: 100, interval: 'weekly', details: true},
  json: true
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("POST", "https://api.recommender.gigalogy.com/v1/items/trending");

req.headers({
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.type("json");
req.send({
  "top_n_item": 100,
  "interval": "weekly",
  "details": true
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"application/json",
                           @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };
NSDictionary *parameters = @{ @"top_n_item": @100,
                              @"interval": @"weekly",
                              @"details": @YES };

NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/items/trending"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"POST"];
[request setAllHTTPHeaderFields:headers];
[request setHTTPBody:postData];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/items/trending",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "POST",
  CURLOPT_POSTFIELDS =&gt; "{\"top_n_item\":100,\"interval\":\"weekly\",\"details\":true}",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "content-type: application/json",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/items/trending');
$request-&gt;setMethod(HTTP_METH_POST);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$request-&gt;setBody('{"top_n_item":100,"interval":"weekly","details":true}');

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$body = new http\Message\Body;
$body-&gt;append('{"top_n_item":100,"interval":"weekly","details":true}');

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/items/trending');
$request-&gt;setRequestMethod('POST');
$request-&gt;setBody($body);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

payload = "{\"top_n_item\":100,\"interval\":\"weekly\",\"details\":true}"

headers = {
    'content-type': "application/json",
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("POST", "/v1/items/trending", payload, headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/items/trending"

payload = {
    "top_n_item": 100,
    "interval": "weekly",
    "details": True
}
headers = {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("POST", url, json=payload, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/items/trending")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Post.new(url)
request["content-type"] = 'application/json'
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'
request.body = "{\"top_n_item\":100,\"interval\":\"weekly\",\"details\":true}"

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request POST \
  --url https://api.recommender.gigalogy.com/v1/items/trending \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'content-type: application/json' \
  --header 'project-key: SOME_STRING_VALUE' \
  --data '{"top_n_item":100,"interval":"weekly","details":true}'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]
let parameters = [
  "top_n_item": 100,
  "interval": "weekly",
  "details": true
] as [String : Any]

let postData = JSONSerialization.data(withJSONObject: parameters, options: [])

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/items/trending")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "POST"
request.allHTTPHeaderFields = headers
request.httpBody = postData as Data

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: post/v1/items/image/recommend
HTTP Method: recommend items based on image similarity
Method Description: This endpoint understands the features your input image contains and returns the
most similar items in your catalog in terms of the image features. It also considers
user behavior to boost the result. It takes user_id, item_id, details as required
parameter and member_id, image_url as optional parameter.
This endpoint can be used on product details page.

### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| user_id | str | str | Represents the id of a logged-out unique user. |
| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |
| item_id | str | str | Represents the id of an item. |
| ItemDetails | Optional[Dict[str, str]] | str | Represents the item details. If you use unknown item_id which does not exist in your data source then you have to pass item details to get most similar items. |
| image_url | str | str | Represents the image url of an item from this url it generate features will find the most similar items. |
| price | int | int | Represents the price of the given image_urls item. |
| category | Optional[List[str]] | int | Represents the list of categories of the given image_urls item. This category values has to be matched with the previously added items data |
| details | bool | bool | If you want to get recommended items with details this parameter would be `True` otherwise it would be `False`. |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/items/image/recommend");
var request = new RestRequest(Method.POST);
request.AddHeader("content-type", "application/json");
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
request.AddParameter("application/json", "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000757666\",\"item_details\":{\"image_url\":\"https://picsum.photos/200/300\",\"price\":8525,\"category\":[\"304904\",\"304029\",\"302536\"]},\"details\":true}", ParameterType.RequestBody);
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Post,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/items/image/recommend"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
    Content = new StringContent("{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000757666\",\"item_details\":{\"image_url\":\"https://picsum.photos/200/300\",\"price\":8525,\"category\":[\"304904\",\"304029\",\"302536\"]},\"details\":true}")
    {
        Headers =
        {
            ContentType = new MediaTypeHeaderValue("application/json")
        }
    }
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"strings"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/items/image/recommend"

	payload := strings.NewReader("{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000757666\",\"item_details\":{\"image_url\":\"https://picsum.photos/200/300\",\"price\":8525,\"category\":[\"304904\",\"304029\",\"302536\"]},\"details\":true}")

	req, _ := http.NewRequest("POST", url, payload)

	req.Header.Add("content-type", "application/json")
	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

MediaType mediaType = MediaType.parse("application/json");
RequestBody body = RequestBody.create(mediaType, "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000757666\",\"item_details\":{\"image_url\":\"https://picsum.photos/200/300\",\"price\":8525,\"category\":[\"304904\",\"304029\",\"302536\"]},\"details\":true}");
Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/items/image/recommend")
  .post(body)
  .addHeader("content-type", "application/json")
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.post("https://api.recommender.gigalogy.com/v1/items/image/recommend")
  .header("content-type", "application/json")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .body("{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000757666\",\"item_details\":{\"image_url\":\"https://picsum.photos/200/300\",\"price\":8525,\"category\":[\"304904\",\"304029\",\"302536\"]},\"details\":true}")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/items/image/recommend",
  "method": "POST",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  },
  "processData": false,
  "data": "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000757666\",\"item_details\":{\"image_url\":\"https://picsum.photos/200/300\",\"price\":8525,\"category\":[\"304904\",\"304029\",\"302536\"]},\"details\":true}"
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = JSON.stringify({
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "item_id": "1000757666",
  "item_details": {
    "image_url": "https://picsum.photos/200/300",
    "price": 8525,
    "category": [
      "304904",
      "304029",
      "302536"
    ]
  },
  "details": true
});

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("POST", "https://api.recommender.gigalogy.com/v1/items/image/recommend");
xhr.setRequestHeader("content-type", "application/json");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "POST",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/items/image/recommend",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.write(JSON.stringify({
  user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',
  member_id: 'df3456tg-2909-459b-be55-62196afedf85',
  item_id: '1000757666',
  item_details: {
    image_url: 'https://picsum.photos/200/300',
    price: 8525,
    category: ['304904', '304029', '302536']
  },
  details: true
}));
req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'POST',
  url: 'https://api.recommender.gigalogy.com/v1/items/image/recommend',
  headers: {
    'content-type': 'application/json',
    'project-key': 'SOME_STRING_VALUE',
    'api-key': 'SOME_STRING_VALUE'
  },
  body: {
    user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',
    member_id: 'df3456tg-2909-459b-be55-62196afedf85',
    item_id: '1000757666',
    item_details: {
      image_url: 'https://picsum.photos/200/300',
      price: 8525,
      category: ['304904', '304029', '302536']
    },
    details: true
  },
  json: true
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("POST", "https://api.recommender.gigalogy.com/v1/items/image/recommend");

req.headers({
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.type("json");
req.send({
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "item_id": "1000757666",
  "item_details": {
    "image_url": "https://picsum.photos/200/300",
    "price": 8525,
    "category": [
      "304904",
      "304029",
      "302536"
    ]
  },
  "details": true
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"application/json",
                           @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };
NSDictionary *parameters = @{ @"user_id": @"a0cc6beb-2909-459b-be55-62196af78ce4",
                              @"member_id": @"df3456tg-2909-459b-be55-62196afedf85",
                              @"item_id": @"1000757666",
                              @"item_details": @{ @"image_url": @"https://picsum.photos/200/300", @"price": @8525, @"category": @[ @"304904", @"304029", @"302536" ] },
                              @"details": @YES };

NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/items/image/recommend"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"POST"];
[request setAllHTTPHeaderFields:headers];
[request setHTTPBody:postData];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/items/image/recommend",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "POST",
  CURLOPT_POSTFIELDS =&gt; "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000757666\",\"item_details\":{\"image_url\":\"https://picsum.photos/200/300\",\"price\":8525,\"category\":[\"304904\",\"304029\",\"302536\"]},\"details\":true}",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "content-type: application/json",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/items/image/recommend');
$request-&gt;setMethod(HTTP_METH_POST);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$request-&gt;setBody('{"user_id":"a0cc6beb-2909-459b-be55-62196af78ce4","member_id":"df3456tg-2909-459b-be55-62196afedf85","item_id":"1000757666","item_details":{"image_url":"https://picsum.photos/200/300","price":8525,"category":["304904","304029","302536"]},"details":true}');

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$body = new http\Message\Body;
$body-&gt;append('{"user_id":"a0cc6beb-2909-459b-be55-62196af78ce4","member_id":"df3456tg-2909-459b-be55-62196afedf85","item_id":"1000757666","item_details":{"image_url":"https://picsum.photos/200/300","price":8525,"category":["304904","304029","302536"]},"details":true}');

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/items/image/recommend');
$request-&gt;setRequestMethod('POST');
$request-&gt;setBody($body);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

payload = "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000757666\",\"item_details\":{\"image_url\":\"https://picsum.photos/200/300\",\"price\":8525,\"category\":[\"304904\",\"304029\",\"302536\"]},\"details\":true}"

headers = {
    'content-type': "application/json",
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("POST", "/v1/items/image/recommend", payload, headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/items/image/recommend"

payload = {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "item_id": "1000757666",
    "item_details": {
        "image_url": "https://picsum.photos/200/300",
        "price": 8525,
        "category": ["304904", "304029", "302536"]
    },
    "details": True
}
headers = {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("POST", url, json=payload, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/items/image/recommend")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Post.new(url)
request["content-type"] = 'application/json'
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'
request.body = "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000757666\",\"item_details\":{\"image_url\":\"https://picsum.photos/200/300\",\"price\":8525,\"category\":[\"304904\",\"304029\",\"302536\"]},\"details\":true}"

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request POST \
  --url https://api.recommender.gigalogy.com/v1/items/image/recommend \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'content-type: application/json' \
  --header 'project-key: SOME_STRING_VALUE' \
  --data '{"user_id":"a0cc6beb-2909-459b-be55-62196af78ce4","member_id":"df3456tg-2909-459b-be55-62196afedf85","item_id":"1000757666","item_details":{"image_url":"https://picsum.photos/200/300","price":8525,"category":["304904","304029","302536"]},"details":true}'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]
let parameters = [
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "item_id": "1000757666",
  "item_details": [
    "image_url": "https://picsum.photos/200/300",
    "price": 8525,
    "category": ["304904", "304029", "302536"]
  ],
  "details": true
] as [String : Any]

let postData = JSONSerialization.data(withJSONObject: parameters, options: [])

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/items/image/recommend")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "POST"
request.allHTTPHeaderFields = headers
request.httpBody = postData as Data

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: post/v1/users/search/recommend
HTTP Method: recommend items based on user search history
Method Description: This endpoint understands user behavior based on their search history and returns
the most suitable items for them as response. It takes user_id, type, storage, details as required
parameter and member_id as optional parameter. This endpoint can be used on user
feed, top page, personalized suggestions etc.

### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| user_id | str | str | Represents the id of a logged-out unique user. |
| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |
| type | Enum | Selected enum value | Represents the type of GPT search. Available values are `individual` and `group`. |
| storage | Enum | Selected enum value | Represents the type of Storage. Available values are `memory` and `database`. |
| details | bool | bool | If you want to get recommended items with details this parameter would be `True` otherwise it would be `False`. |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/users/search/recommend");
var request = new RestRequest(Method.POST);
request.AddHeader("content-type", "application/json");
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
request.AddParameter("application/json", "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"type\":\"individual\",\"storage\":\"memory\",\"search_size\":1000,\"start\":0,\"size\":10,\"language\":\"en\",\"is_keyword_enabled\":false,\"details\":true}", ParameterType.RequestBody);
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Post,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/users/search/recommend"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
    Content = new StringContent("{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"type\":\"individual\",\"storage\":\"memory\",\"search_size\":1000,\"start\":0,\"size\":10,\"language\":\"en\",\"is_keyword_enabled\":false,\"details\":true}")
    {
        Headers =
        {
            ContentType = new MediaTypeHeaderValue("application/json")
        }
    }
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"strings"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/users/search/recommend"

	payload := strings.NewReader("{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"type\":\"individual\",\"storage\":\"memory\",\"search_size\":1000,\"start\":0,\"size\":10,\"language\":\"en\",\"is_keyword_enabled\":false,\"details\":true}")

	req, _ := http.NewRequest("POST", url, payload)

	req.Header.Add("content-type", "application/json")
	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

MediaType mediaType = MediaType.parse("application/json");
RequestBody body = RequestBody.create(mediaType, "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"type\":\"individual\",\"storage\":\"memory\",\"search_size\":1000,\"start\":0,\"size\":10,\"language\":\"en\",\"is_keyword_enabled\":false,\"details\":true}");
Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/users/search/recommend")
  .post(body)
  .addHeader("content-type", "application/json")
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.post("https://api.recommender.gigalogy.com/v1/users/search/recommend")
  .header("content-type", "application/json")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .body("{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"type\":\"individual\",\"storage\":\"memory\",\"search_size\":1000,\"start\":0,\"size\":10,\"language\":\"en\",\"is_keyword_enabled\":false,\"details\":true}")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/users/search/recommend",
  "method": "POST",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  },
  "processData": false,
  "data": "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"type\":\"individual\",\"storage\":\"memory\",\"search_size\":1000,\"start\":0,\"size\":10,\"language\":\"en\",\"is_keyword_enabled\":false,\"details\":true}"
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = JSON.stringify({
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "type": "individual",
  "storage": "memory",
  "search_size": 1000,
  "start": 0,
  "size": 10,
  "language": "en",
  "is_keyword_enabled": false,
  "details": true
});

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("POST", "https://api.recommender.gigalogy.com/v1/users/search/recommend");
xhr.setRequestHeader("content-type", "application/json");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "POST",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/users/search/recommend",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.write(JSON.stringify({
  user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',
  member_id: 'df3456tg-2909-459b-be55-62196afedf85',
  type: 'individual',
  storage: 'memory',
  search_size: 1000,
  start: 0,
  size: 10,
  language: 'en',
  is_keyword_enabled: false,
  details: true
}));
req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'POST',
  url: 'https://api.recommender.gigalogy.com/v1/users/search/recommend',
  headers: {
    'content-type': 'application/json',
    'project-key': 'SOME_STRING_VALUE',
    'api-key': 'SOME_STRING_VALUE'
  },
  body: {
    user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',
    member_id: 'df3456tg-2909-459b-be55-62196afedf85',
    type: 'individual',
    storage: 'memory',
    search_size: 1000,
    start: 0,
    size: 10,
    language: 'en',
    is_keyword_enabled: false,
    details: true
  },
  json: true
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("POST", "https://api.recommender.gigalogy.com/v1/users/search/recommend");

req.headers({
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.type("json");
req.send({
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "type": "individual",
  "storage": "memory",
  "search_size": 1000,
  "start": 0,
  "size": 10,
  "language": "en",
  "is_keyword_enabled": false,
  "details": true
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"application/json",
                           @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };
NSDictionary *parameters = @{ @"user_id": @"a0cc6beb-2909-459b-be55-62196af78ce4",
                              @"member_id": @"df3456tg-2909-459b-be55-62196afedf85",
                              @"type": @"individual",
                              @"storage": @"memory",
                              @"search_size": @1000,
                              @"start": @0,
                              @"size": @10,
                              @"language": @"en",
                              @"is_keyword_enabled": @NO,
                              @"details": @YES };

NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/users/search/recommend"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"POST"];
[request setAllHTTPHeaderFields:headers];
[request setHTTPBody:postData];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/users/search/recommend",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "POST",
  CURLOPT_POSTFIELDS =&gt; "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"type\":\"individual\",\"storage\":\"memory\",\"search_size\":1000,\"start\":0,\"size\":10,\"language\":\"en\",\"is_keyword_enabled\":false,\"details\":true}",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "content-type: application/json",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/users/search/recommend');
$request-&gt;setMethod(HTTP_METH_POST);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$request-&gt;setBody('{"user_id":"a0cc6beb-2909-459b-be55-62196af78ce4","member_id":"df3456tg-2909-459b-be55-62196afedf85","type":"individual","storage":"memory","search_size":1000,"start":0,"size":10,"language":"en","is_keyword_enabled":false,"details":true}');

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$body = new http\Message\Body;
$body-&gt;append('{"user_id":"a0cc6beb-2909-459b-be55-62196af78ce4","member_id":"df3456tg-2909-459b-be55-62196afedf85","type":"individual","storage":"memory","search_size":1000,"start":0,"size":10,"language":"en","is_keyword_enabled":false,"details":true}');

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/users/search/recommend');
$request-&gt;setRequestMethod('POST');
$request-&gt;setBody($body);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

payload = "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"type\":\"individual\",\"storage\":\"memory\",\"search_size\":1000,\"start\":0,\"size\":10,\"language\":\"en\",\"is_keyword_enabled\":false,\"details\":true}"

headers = {
    'content-type': "application/json",
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("POST", "/v1/users/search/recommend", payload, headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/users/search/recommend"

payload = {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "type": "individual",
    "storage": "memory",
    "search_size": 1000,
    "start": 0,
    "size": 10,
    "language": "en",
    "is_keyword_enabled": False,
    "details": True
}
headers = {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("POST", url, json=payload, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/users/search/recommend")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Post.new(url)
request["content-type"] = 'application/json'
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'
request.body = "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"type\":\"individual\",\"storage\":\"memory\",\"search_size\":1000,\"start\":0,\"size\":10,\"language\":\"en\",\"is_keyword_enabled\":false,\"details\":true}"

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request POST \
  --url https://api.recommender.gigalogy.com/v1/users/search/recommend \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'content-type: application/json' \
  --header 'project-key: SOME_STRING_VALUE' \
  --data '{"user_id":"a0cc6beb-2909-459b-be55-62196af78ce4","member_id":"df3456tg-2909-459b-be55-62196afedf85","type":"individual","storage":"memory","search_size":1000,"start":0,"size":10,"language":"en","is_keyword_enabled":false,"details":true}'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]
let parameters = [
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "type": "individual",
  "storage": "memory",
  "search_size": 1000,
  "start": 0,
  "size": 10,
  "language": "en",
  "is_keyword_enabled": false,
  "details": true
] as [String : Any]

let postData = JSONSerialization.data(withJSONObject: parameters, options: [])

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/users/search/recommend")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "POST"
request.allHTTPHeaderFields = headers
request.httpBody = postData as Data

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: post/v1/questionnaire/recommend
HTTP Method: Get product recommendation with questionnaire result from users.
Method Description: Get product recommendation with questionnaire result from users.
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/questionnaire/recommend");
var request = new RestRequest(Method.POST);
request.AddHeader("content-type", "application/json");
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
request.AddParameter("application/json", "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"questionnaire_id\":\"c8e9fd30-1d85-4bd6-929a-47cc509c5756\",\"values\":{\"section_name\":{\"q1\":\"c\",\"q2\":\"a\",\"q3\":\"b\"}}}", ParameterType.RequestBody);
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Post,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/questionnaire/recommend"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
    Content = new StringContent("{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"questionnaire_id\":\"c8e9fd30-1d85-4bd6-929a-47cc509c5756\",\"values\":{\"section_name\":{\"q1\":\"c\",\"q2\":\"a\",\"q3\":\"b\"}}}")
    {
        Headers =
        {
            ContentType = new MediaTypeHeaderValue("application/json")
        }
    }
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"strings"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/questionnaire/recommend"

	payload := strings.NewReader("{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"questionnaire_id\":\"c8e9fd30-1d85-4bd6-929a-47cc509c5756\",\"values\":{\"section_name\":{\"q1\":\"c\",\"q2\":\"a\",\"q3\":\"b\"}}}")

	req, _ := http.NewRequest("POST", url, payload)

	req.Header.Add("content-type", "application/json")
	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

MediaType mediaType = MediaType.parse("application/json");
RequestBody body = RequestBody.create(mediaType, "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"questionnaire_id\":\"c8e9fd30-1d85-4bd6-929a-47cc509c5756\",\"values\":{\"section_name\":{\"q1\":\"c\",\"q2\":\"a\",\"q3\":\"b\"}}}");
Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/questionnaire/recommend")
  .post(body)
  .addHeader("content-type", "application/json")
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.post("https://api.recommender.gigalogy.com/v1/questionnaire/recommend")
  .header("content-type", "application/json")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .body("{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"questionnaire_id\":\"c8e9fd30-1d85-4bd6-929a-47cc509c5756\",\"values\":{\"section_name\":{\"q1\":\"c\",\"q2\":\"a\",\"q3\":\"b\"}}}")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/questionnaire/recommend",
  "method": "POST",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  },
  "processData": false,
  "data": "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"questionnaire_id\":\"c8e9fd30-1d85-4bd6-929a-47cc509c5756\",\"values\":{\"section_name\":{\"q1\":\"c\",\"q2\":\"a\",\"q3\":\"b\"}}}"
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = JSON.stringify({
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "questionnaire_id": "c8e9fd30-1d85-4bd6-929a-47cc509c5756",
  "values": {
    "section_name": {
      "q1": "c",
      "q2": "a",
      "q3": "b"
    }
  }
});

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("POST", "https://api.recommender.gigalogy.com/v1/questionnaire/recommend");
xhr.setRequestHeader("content-type", "application/json");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "POST",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/questionnaire/recommend",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.write(JSON.stringify({
  user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',
  member_id: 'df3456tg-2909-459b-be55-62196afedf85',
  questionnaire_id: 'c8e9fd30-1d85-4bd6-929a-47cc509c5756',
  values: {section_name: {q1: 'c', q2: 'a', q3: 'b'}}
}));
req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'POST',
  url: 'https://api.recommender.gigalogy.com/v1/questionnaire/recommend',
  headers: {
    'content-type': 'application/json',
    'project-key': 'SOME_STRING_VALUE',
    'api-key': 'SOME_STRING_VALUE'
  },
  body: {
    user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',
    member_id: 'df3456tg-2909-459b-be55-62196afedf85',
    questionnaire_id: 'c8e9fd30-1d85-4bd6-929a-47cc509c5756',
    values: {section_name: {q1: 'c', q2: 'a', q3: 'b'}}
  },
  json: true
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("POST", "https://api.recommender.gigalogy.com/v1/questionnaire/recommend");

req.headers({
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.type("json");
req.send({
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "questionnaire_id": "c8e9fd30-1d85-4bd6-929a-47cc509c5756",
  "values": {
    "section_name": {
      "q1": "c",
      "q2": "a",
      "q3": "b"
    }
  }
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"application/json",
                           @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };
NSDictionary *parameters = @{ @"user_id": @"a0cc6beb-2909-459b-be55-62196af78ce4",
                              @"member_id": @"df3456tg-2909-459b-be55-62196afedf85",
                              @"questionnaire_id": @"c8e9fd30-1d85-4bd6-929a-47cc509c5756",
                              @"values": @{ @"section_name": @{ @"q1": @"c", @"q2": @"a", @"q3": @"b" } } };

NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/questionnaire/recommend"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"POST"];
[request setAllHTTPHeaderFields:headers];
[request setHTTPBody:postData];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/questionnaire/recommend",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "POST",
  CURLOPT_POSTFIELDS =&gt; "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"questionnaire_id\":\"c8e9fd30-1d85-4bd6-929a-47cc509c5756\",\"values\":{\"section_name\":{\"q1\":\"c\",\"q2\":\"a\",\"q3\":\"b\"}}}",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "content-type: application/json",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/questionnaire/recommend');
$request-&gt;setMethod(HTTP_METH_POST);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$request-&gt;setBody('{"user_id":"a0cc6beb-2909-459b-be55-62196af78ce4","member_id":"df3456tg-2909-459b-be55-62196afedf85","questionnaire_id":"c8e9fd30-1d85-4bd6-929a-47cc509c5756","values":{"section_name":{"q1":"c","q2":"a","q3":"b"}}}');

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$body = new http\Message\Body;
$body-&gt;append('{"user_id":"a0cc6beb-2909-459b-be55-62196af78ce4","member_id":"df3456tg-2909-459b-be55-62196afedf85","questionnaire_id":"c8e9fd30-1d85-4bd6-929a-47cc509c5756","values":{"section_name":{"q1":"c","q2":"a","q3":"b"}}}');

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/questionnaire/recommend');
$request-&gt;setRequestMethod('POST');
$request-&gt;setBody($body);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

payload = "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"questionnaire_id\":\"c8e9fd30-1d85-4bd6-929a-47cc509c5756\",\"values\":{\"section_name\":{\"q1\":\"c\",\"q2\":\"a\",\"q3\":\"b\"}}}"

headers = {
    'content-type': "application/json",
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("POST", "/v1/questionnaire/recommend", payload, headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/questionnaire/recommend"

payload = {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "questionnaire_id": "c8e9fd30-1d85-4bd6-929a-47cc509c5756",
    "values": {"section_name": {
            "q1": "c",
            "q2": "a",
            "q3": "b"
        }}
}
headers = {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("POST", url, json=payload, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/questionnaire/recommend")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Post.new(url)
request["content-type"] = 'application/json'
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'
request.body = "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"questionnaire_id\":\"c8e9fd30-1d85-4bd6-929a-47cc509c5756\",\"values\":{\"section_name\":{\"q1\":\"c\",\"q2\":\"a\",\"q3\":\"b\"}}}"

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request POST \
  --url https://api.recommender.gigalogy.com/v1/questionnaire/recommend \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'content-type: application/json' \
  --header 'project-key: SOME_STRING_VALUE' \
  --data '{"user_id":"a0cc6beb-2909-459b-be55-62196af78ce4","member_id":"df3456tg-2909-459b-be55-62196afedf85","questionnaire_id":"c8e9fd30-1d85-4bd6-929a-47cc509c5756","values":{"section_name":{"q1":"c","q2":"a","q3":"b"}}}'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]
let parameters = [
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "questionnaire_id": "c8e9fd30-1d85-4bd6-929a-47cc509c5756",
  "values": ["section_name": [
      "q1": "c",
      "q2": "a",
      "q3": "b"
    ]]
] as [String : Any]

let postData = JSONSerialization.data(withJSONObject: parameters, options: [])

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/questionnaire/recommend")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "POST"
request.allHTTPHeaderFields = headers
request.httpBody = postData as Data

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: post/v1/questionnaires
HTTP Method: Create a new questionnaire
Method Description: Create a new questionnaire.

### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| name | str | str | name of the questionnaire |
| questions | dict[str, dict] | obj | questions object hold sections and its list of questions. Each question will in their separate object. key of the question objects should be like `q1`, `q2`, `q3` and so on|
| question_text | str | str | the question string |
| type | str | str | type of the question; e.g. radio/checkbox/free text..... |
| options | str | list[str] | a list of possible answers of the question and their serial|

A successful response includes a questionnaire id.
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/questionnaires");
var request = new RestRequest(Method.POST);
request.AddHeader("content-type", "application/json");
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
request.AddParameter("application/json", "{\"name\":\"Name of your questionnaire\",\"questions\":{\"skincare_history\":{\"q1\":{\"question\":\"whats your age?\",\"type\":\"text\",\"options\":{\"age\":\"\"}},\"q2\":{\"question\":\"whats your gender?\",\"type\":\"radio\",\"options\":{\"a\":\"male\",\"b\":\"female\"}}},\"skincare_goal\":{\"q1\":{\"question\":\"what is your skincare concern?\",\"type\":\"checkbox\",\"options\":{\"a\":\"acne\",\"b\":\"anti-aging\",\"c\":\"Closed comedons(blackheads, whiteheads)\",\"d\":\"Hyperpigmentation\",\"e\":\"Dullness\",\"f\":\"Dehydrated skin\"}}}}}", ParameterType.RequestBody);
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Post,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/questionnaires"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
    Content = new StringContent("{\"name\":\"Name of your questionnaire\",\"questions\":{\"skincare_history\":{\"q1\":{\"question\":\"whats your age?\",\"type\":\"text\",\"options\":{\"age\":\"\"}},\"q2\":{\"question\":\"whats your gender?\",\"type\":\"radio\",\"options\":{\"a\":\"male\",\"b\":\"female\"}}},\"skincare_goal\":{\"q1\":{\"question\":\"what is your skincare concern?\",\"type\":\"checkbox\",\"options\":{\"a\":\"acne\",\"b\":\"anti-aging\",\"c\":\"Closed comedons(blackheads, whiteheads)\",\"d\":\"Hyperpigmentation\",\"e\":\"Dullness\",\"f\":\"Dehydrated skin\"}}}}}")
    {
        Headers =
        {
            ContentType = new MediaTypeHeaderValue("application/json")
        }
    }
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"strings"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/questionnaires"

	payload := strings.NewReader("{\"name\":\"Name of your questionnaire\",\"questions\":{\"skincare_history\":{\"q1\":{\"question\":\"whats your age?\",\"type\":\"text\",\"options\":{\"age\":\"\"}},\"q2\":{\"question\":\"whats your gender?\",\"type\":\"radio\",\"options\":{\"a\":\"male\",\"b\":\"female\"}}},\"skincare_goal\":{\"q1\":{\"question\":\"what is your skincare concern?\",\"type\":\"checkbox\",\"options\":{\"a\":\"acne\",\"b\":\"anti-aging\",\"c\":\"Closed comedons(blackheads, whiteheads)\",\"d\":\"Hyperpigmentation\",\"e\":\"Dullness\",\"f\":\"Dehydrated skin\"}}}}}")

	req, _ := http.NewRequest("POST", url, payload)

	req.Header.Add("content-type", "application/json")
	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

MediaType mediaType = MediaType.parse("application/json");
RequestBody body = RequestBody.create(mediaType, "{\"name\":\"Name of your questionnaire\",\"questions\":{\"skincare_history\":{\"q1\":{\"question\":\"whats your age?\",\"type\":\"text\",\"options\":{\"age\":\"\"}},\"q2\":{\"question\":\"whats your gender?\",\"type\":\"radio\",\"options\":{\"a\":\"male\",\"b\":\"female\"}}},\"skincare_goal\":{\"q1\":{\"question\":\"what is your skincare concern?\",\"type\":\"checkbox\",\"options\":{\"a\":\"acne\",\"b\":\"anti-aging\",\"c\":\"Closed comedons(blackheads, whiteheads)\",\"d\":\"Hyperpigmentation\",\"e\":\"Dullness\",\"f\":\"Dehydrated skin\"}}}}}");
Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/questionnaires")
  .post(body)
  .addHeader("content-type", "application/json")
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.post("https://api.recommender.gigalogy.com/v1/questionnaires")
  .header("content-type", "application/json")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .body("{\"name\":\"Name of your questionnaire\",\"questions\":{\"skincare_history\":{\"q1\":{\"question\":\"whats your age?\",\"type\":\"text\",\"options\":{\"age\":\"\"}},\"q2\":{\"question\":\"whats your gender?\",\"type\":\"radio\",\"options\":{\"a\":\"male\",\"b\":\"female\"}}},\"skincare_goal\":{\"q1\":{\"question\":\"what is your skincare concern?\",\"type\":\"checkbox\",\"options\":{\"a\":\"acne\",\"b\":\"anti-aging\",\"c\":\"Closed comedons(blackheads, whiteheads)\",\"d\":\"Hyperpigmentation\",\"e\":\"Dullness\",\"f\":\"Dehydrated skin\"}}}}}")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/questionnaires",
  "method": "POST",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  },
  "processData": false,
  "data": "{\"name\":\"Name of your questionnaire\",\"questions\":{\"skincare_history\":{\"q1\":{\"question\":\"whats your age?\",\"type\":\"text\",\"options\":{\"age\":\"\"}},\"q2\":{\"question\":\"whats your gender?\",\"type\":\"radio\",\"options\":{\"a\":\"male\",\"b\":\"female\"}}},\"skincare_goal\":{\"q1\":{\"question\":\"what is your skincare concern?\",\"type\":\"checkbox\",\"options\":{\"a\":\"acne\",\"b\":\"anti-aging\",\"c\":\"Closed comedons(blackheads, whiteheads)\",\"d\":\"Hyperpigmentation\",\"e\":\"Dullness\",\"f\":\"Dehydrated skin\"}}}}}"
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = JSON.stringify({
  "name": "Name of your questionnaire",
  "questions": {
    "skincare_history": {
      "q1": {
        "question": "whats your age?",
        "type": "text",
        "options": {
          "age": ""
        }
      },
      "q2": {
        "question": "whats your gender?",
        "type": "radio",
        "options": {
          "a": "male",
          "b": "female"
        }
      }
    },
    "skincare_goal": {
      "q1": {
        "question": "what is your skincare concern?",
        "type": "checkbox",
        "options": {
          "a": "acne",
          "b": "anti-aging",
          "c": "Closed comedons(blackheads, whiteheads)",
          "d": "Hyperpigmentation",
          "e": "Dullness",
          "f": "Dehydrated skin"
        }
      }
    }
  }
});

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("POST", "https://api.recommender.gigalogy.com/v1/questionnaires");
xhr.setRequestHeader("content-type", "application/json");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "POST",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/questionnaires",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.write(JSON.stringify({
  name: 'Name of your questionnaire',
  questions: {
    skincare_history: {
      q1: {question: 'whats your age?', type: 'text', options: {age: ''}},
      q2: {
        question: 'whats your gender?',
        type: 'radio',
        options: {a: 'male', b: 'female'}
      }
    },
    skincare_goal: {
      q1: {
        question: 'what is your skincare concern?',
        type: 'checkbox',
        options: {
          a: 'acne',
          b: 'anti-aging',
          c: 'Closed comedons(blackheads, whiteheads)',
          d: 'Hyperpigmentation',
          e: 'Dullness',
          f: 'Dehydrated skin'
        }
      }
    }
  }
}));
req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'POST',
  url: 'https://api.recommender.gigalogy.com/v1/questionnaires',
  headers: {
    'content-type': 'application/json',
    'project-key': 'SOME_STRING_VALUE',
    'api-key': 'SOME_STRING_VALUE'
  },
  body: {
    name: 'Name of your questionnaire',
    questions: {
      skincare_history: {
        q1: {question: 'whats your age?', type: 'text', options: {age: ''}},
        q2: {
          question: 'whats your gender?',
          type: 'radio',
          options: {a: 'male', b: 'female'}
        }
      },
      skincare_goal: {
        q1: {
          question: 'what is your skincare concern?',
          type: 'checkbox',
          options: {
            a: 'acne',
            b: 'anti-aging',
            c: 'Closed comedons(blackheads, whiteheads)',
            d: 'Hyperpigmentation',
            e: 'Dullness',
            f: 'Dehydrated skin'
          }
        }
      }
    }
  },
  json: true
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("POST", "https://api.recommender.gigalogy.com/v1/questionnaires");

req.headers({
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.type("json");
req.send({
  "name": "Name of your questionnaire",
  "questions": {
    "skincare_history": {
      "q1": {
        "question": "whats your age?",
        "type": "text",
        "options": {
          "age": ""
        }
      },
      "q2": {
        "question": "whats your gender?",
        "type": "radio",
        "options": {
          "a": "male",
          "b": "female"
        }
      }
    },
    "skincare_goal": {
      "q1": {
        "question": "what is your skincare concern?",
        "type": "checkbox",
        "options": {
          "a": "acne",
          "b": "anti-aging",
          "c": "Closed comedons(blackheads, whiteheads)",
          "d": "Hyperpigmentation",
          "e": "Dullness",
          "f": "Dehydrated skin"
        }
      }
    }
  }
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"application/json",
                           @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };
NSDictionary *parameters = @{ @"name": @"Name of your questionnaire",
                              @"questions": @{ @"skincare_history": @{ @"q1": @{ @"question": @"whats your age?", @"type": @"text", @"options": @{ @"age": @"" } }, @"q2": @{ @"question": @"whats your gender?", @"type": @"radio", @"options": @{ @"a": @"male", @"b": @"female" } } }, @"skincare_goal": @{ @"q1": @{ @"question": @"what is your skincare concern?", @"type": @"checkbox", @"options": @{ @"a": @"acne", @"b": @"anti-aging", @"c": @"Closed comedons(blackheads, whiteheads)", @"d": @"Hyperpigmentation", @"e": @"Dullness", @"f": @"Dehydrated skin" } } } } };

NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/questionnaires"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"POST"];
[request setAllHTTPHeaderFields:headers];
[request setHTTPBody:postData];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/questionnaires",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "POST",
  CURLOPT_POSTFIELDS =&gt; "{\"name\":\"Name of your questionnaire\",\"questions\":{\"skincare_history\":{\"q1\":{\"question\":\"whats your age?\",\"type\":\"text\",\"options\":{\"age\":\"\"}},\"q2\":{\"question\":\"whats your gender?\",\"type\":\"radio\",\"options\":{\"a\":\"male\",\"b\":\"female\"}}},\"skincare_goal\":{\"q1\":{\"question\":\"what is your skincare concern?\",\"type\":\"checkbox\",\"options\":{\"a\":\"acne\",\"b\":\"anti-aging\",\"c\":\"Closed comedons(blackheads, whiteheads)\",\"d\":\"Hyperpigmentation\",\"e\":\"Dullness\",\"f\":\"Dehydrated skin\"}}}}}",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "content-type: application/json",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/questionnaires');
$request-&gt;setMethod(HTTP_METH_POST);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$request-&gt;setBody('{"name":"Name of your questionnaire","questions":{"skincare_history":{"q1":{"question":"whats your age?","type":"text","options":{"age":""}},"q2":{"question":"whats your gender?","type":"radio","options":{"a":"male","b":"female"}}},"skincare_goal":{"q1":{"question":"what is your skincare concern?","type":"checkbox","options":{"a":"acne","b":"anti-aging","c":"Closed comedons(blackheads, whiteheads)","d":"Hyperpigmentation","e":"Dullness","f":"Dehydrated skin"}}}}}');

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$body = new http\Message\Body;
$body-&gt;append('{"name":"Name of your questionnaire","questions":{"skincare_history":{"q1":{"question":"whats your age?","type":"text","options":{"age":""}},"q2":{"question":"whats your gender?","type":"radio","options":{"a":"male","b":"female"}}},"skincare_goal":{"q1":{"question":"what is your skincare concern?","type":"checkbox","options":{"a":"acne","b":"anti-aging","c":"Closed comedons(blackheads, whiteheads)","d":"Hyperpigmentation","e":"Dullness","f":"Dehydrated skin"}}}}}');

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/questionnaires');
$request-&gt;setRequestMethod('POST');
$request-&gt;setBody($body);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

payload = "{\"name\":\"Name of your questionnaire\",\"questions\":{\"skincare_history\":{\"q1\":{\"question\":\"whats your age?\",\"type\":\"text\",\"options\":{\"age\":\"\"}},\"q2\":{\"question\":\"whats your gender?\",\"type\":\"radio\",\"options\":{\"a\":\"male\",\"b\":\"female\"}}},\"skincare_goal\":{\"q1\":{\"question\":\"what is your skincare concern?\",\"type\":\"checkbox\",\"options\":{\"a\":\"acne\",\"b\":\"anti-aging\",\"c\":\"Closed comedons(blackheads, whiteheads)\",\"d\":\"Hyperpigmentation\",\"e\":\"Dullness\",\"f\":\"Dehydrated skin\"}}}}}"

headers = {
    'content-type': "application/json",
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("POST", "/v1/questionnaires", payload, headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/questionnaires"

payload = {
    "name": "Name of your questionnaire",
    "questions": {
        "skincare_history": {
            "q1": {
                "question": "whats your age?",
                "type": "text",
                "options": {"age": ""}
            },
            "q2": {
                "question": "whats your gender?",
                "type": "radio",
                "options": {
                    "a": "male",
                    "b": "female"
                }
            }
        },
        "skincare_goal": {"q1": {
                "question": "what is your skincare concern?",
                "type": "checkbox",
                "options": {
                    "a": "acne",
                    "b": "anti-aging",
                    "c": "Closed comedons(blackheads, whiteheads)",
                    "d": "Hyperpigmentation",
                    "e": "Dullness",
                    "f": "Dehydrated skin"
                }
            }}
    }
}
headers = {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("POST", url, json=payload, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/questionnaires")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Post.new(url)
request["content-type"] = 'application/json'
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'
request.body = "{\"name\":\"Name of your questionnaire\",\"questions\":{\"skincare_history\":{\"q1\":{\"question\":\"whats your age?\",\"type\":\"text\",\"options\":{\"age\":\"\"}},\"q2\":{\"question\":\"whats your gender?\",\"type\":\"radio\",\"options\":{\"a\":\"male\",\"b\":\"female\"}}},\"skincare_goal\":{\"q1\":{\"question\":\"what is your skincare concern?\",\"type\":\"checkbox\",\"options\":{\"a\":\"acne\",\"b\":\"anti-aging\",\"c\":\"Closed comedons(blackheads, whiteheads)\",\"d\":\"Hyperpigmentation\",\"e\":\"Dullness\",\"f\":\"Dehydrated skin\"}}}}}"

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request POST \
  --url https://api.recommender.gigalogy.com/v1/questionnaires \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'content-type: application/json' \
  --header 'project-key: SOME_STRING_VALUE' \
  --data '{"name":"Name of your questionnaire","questions":{"skincare_history":{"q1":{"question":"whats your age?","type":"text","options":{"age":""}},"q2":{"question":"whats your gender?","type":"radio","options":{"a":"male","b":"female"}}},"skincare_goal":{"q1":{"question":"what is your skincare concern?","type":"checkbox","options":{"a":"acne","b":"anti-aging","c":"Closed comedons(blackheads, whiteheads)","d":"Hyperpigmentation","e":"Dullness","f":"Dehydrated skin"}}}}}'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]
let parameters = [
  "name": "Name of your questionnaire",
  "questions": [
    "skincare_history": [
      "q1": [
        "question": "whats your age?",
        "type": "text",
        "options": ["age": ""]
      ],
      "q2": [
        "question": "whats your gender?",
        "type": "radio",
        "options": [
          "a": "male",
          "b": "female"
        ]
      ]
    ],
    "skincare_goal": ["q1": [
        "question": "what is your skincare concern?",
        "type": "checkbox",
        "options": [
          "a": "acne",
          "b": "anti-aging",
          "c": "Closed comedons(blackheads, whiteheads)",
          "d": "Hyperpigmentation",
          "e": "Dullness",
          "f": "Dehydrated skin"
        ]
      ]]
  ]
] as [String : Any]

let postData = JSONSerialization.data(withJSONObject: parameters, options: [])

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/questionnaires")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "POST"
request.allHTTPHeaderFields = headers
request.httpBody = postData as Data

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: get/v1/questionnaires/list
HTTP Method: Get all questionnaires
Method Description: Get all questionnaires.

### Parameters
----------

Returns all questionnaires associated with the project.
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/questionnaires/list");
var request = new RestRequest(Method.GET);
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Get,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/questionnaires/list"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/questionnaires/list"

	req, _ := http.NewRequest("GET", url, nil)

	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/questionnaires/list")
  .get()
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.get("https://api.recommender.gigalogy.com/v1/questionnaires/list")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/questionnaires/list",
  "method": "GET",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = null;

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("GET", "https://api.recommender.gigalogy.com/v1/questionnaires/list");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "GET",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/questionnaires/list",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'GET',
  url: 'https://api.recommender.gigalogy.com/v1/questionnaires/list',
  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("GET", "https://api.recommender.gigalogy.com/v1/questionnaires/list");

req.headers({
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/questionnaires/list"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"GET"];
[request setAllHTTPHeaderFields:headers];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/questionnaires/list",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "GET",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/questionnaires/list');
$request-&gt;setMethod(HTTP_METH_GET);

$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/questionnaires/list');
$request-&gt;setRequestMethod('GET');
$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

headers = {
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("GET", "/v1/questionnaires/list", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/questionnaires/list"

headers = {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("GET", url, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/questionnaires/list")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request GET \
  --url https://api.recommender.gigalogy.com/v1/questionnaires/list \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'project-key: SOME_STRING_VALUE'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/questionnaires/list")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "GET"
request.allHTTPHeaderFields = headers

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: get/v1/questionnaires/{questionnaire_id}
HTTP Method: Get details of a questionnaire.
Method Description: Get details of a questionnaire.

### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| questionnaire_id | str | str | The ID of the questionnaire to retrieve. (Required) |

Returns a questionnaire given the questionnaire id.
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D");
var request = new RestRequest(Method.GET);
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Get,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D"

	req, _ := http.NewRequest("GET", url, nil)

	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D")
  .get()
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.get("https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D",
  "method": "GET",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = null;

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("GET", "https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "GET",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/questionnaires/%7Bquestionnaire_id%7D",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'GET',
  url: 'https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D',
  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("GET", "https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D");

req.headers({
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"GET"];
[request setAllHTTPHeaderFields:headers];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "GET",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D');
$request-&gt;setMethod(HTTP_METH_GET);

$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D');
$request-&gt;setRequestMethod('GET');
$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

headers = {
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("GET", "/v1/questionnaires/%7Bquestionnaire_id%7D", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D"

headers = {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("GET", url, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request GET \
  --url https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'project-key: SOME_STRING_VALUE'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "GET"
request.allHTTPHeaderFields = headers

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: put/v1/questionnaires/{questionnaire_id}
HTTP Method: Update a questionnaire.
Method Description: Update a questionnaire.

### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| name | str | str | name of the questionnaire |
| questions | dict[str, dict] | obj | questions object hold sections and its list of questions. Each question will in their separate object. key of the question objects should be like `q1`, `q2`, `q3` and so on|
| question_text | str | str | the question string |
| type | str | str | type of the question; e.g. radio/checkbox/free text..... |
| options | str | list[str] | a list of possible answers of the question and their serial|
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D");
var request = new RestRequest(Method.PUT);
request.AddHeader("content-type", "application/json");
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
request.AddParameter("application/json", "{\"name\":\"Name of your questionnaire\",\"questions\":{\"skincare_history\":{\"q1\":{\"question\":\"whats your age?\",\"type\":\"text\",\"options\":{\"age\":\"\"}},\"q2\":{\"question\":\"whats your gender?\",\"type\":\"radio\",\"options\":{\"a\":\"male\",\"b\":\"female\"}}},\"skincare_goal\":{\"q1\":{\"question\":\"what is your skincare concern?\",\"type\":\"checkbox\",\"options\":{\"a\":\"acne\",\"b\":\"anti-aging\",\"c\":\"Closed comedons(blackheads, whiteheads)\",\"d\":\"Hyperpigmentation\",\"e\":\"Dullness\",\"f\":\"Dehydrated skin\"}}}}}", ParameterType.RequestBody);
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Put,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
    Content = new StringContent("{\"name\":\"Name of your questionnaire\",\"questions\":{\"skincare_history\":{\"q1\":{\"question\":\"whats your age?\",\"type\":\"text\",\"options\":{\"age\":\"\"}},\"q2\":{\"question\":\"whats your gender?\",\"type\":\"radio\",\"options\":{\"a\":\"male\",\"b\":\"female\"}}},\"skincare_goal\":{\"q1\":{\"question\":\"what is your skincare concern?\",\"type\":\"checkbox\",\"options\":{\"a\":\"acne\",\"b\":\"anti-aging\",\"c\":\"Closed comedons(blackheads, whiteheads)\",\"d\":\"Hyperpigmentation\",\"e\":\"Dullness\",\"f\":\"Dehydrated skin\"}}}}}")
    {
        Headers =
        {
            ContentType = new MediaTypeHeaderValue("application/json")
        }
    }
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"strings"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D"

	payload := strings.NewReader("{\"name\":\"Name of your questionnaire\",\"questions\":{\"skincare_history\":{\"q1\":{\"question\":\"whats your age?\",\"type\":\"text\",\"options\":{\"age\":\"\"}},\"q2\":{\"question\":\"whats your gender?\",\"type\":\"radio\",\"options\":{\"a\":\"male\",\"b\":\"female\"}}},\"skincare_goal\":{\"q1\":{\"question\":\"what is your skincare concern?\",\"type\":\"checkbox\",\"options\":{\"a\":\"acne\",\"b\":\"anti-aging\",\"c\":\"Closed comedons(blackheads, whiteheads)\",\"d\":\"Hyperpigmentation\",\"e\":\"Dullness\",\"f\":\"Dehydrated skin\"}}}}}")

	req, _ := http.NewRequest("PUT", url, payload)

	req.Header.Add("content-type", "application/json")
	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

MediaType mediaType = MediaType.parse("application/json");
RequestBody body = RequestBody.create(mediaType, "{\"name\":\"Name of your questionnaire\",\"questions\":{\"skincare_history\":{\"q1\":{\"question\":\"whats your age?\",\"type\":\"text\",\"options\":{\"age\":\"\"}},\"q2\":{\"question\":\"whats your gender?\",\"type\":\"radio\",\"options\":{\"a\":\"male\",\"b\":\"female\"}}},\"skincare_goal\":{\"q1\":{\"question\":\"what is your skincare concern?\",\"type\":\"checkbox\",\"options\":{\"a\":\"acne\",\"b\":\"anti-aging\",\"c\":\"Closed comedons(blackheads, whiteheads)\",\"d\":\"Hyperpigmentation\",\"e\":\"Dullness\",\"f\":\"Dehydrated skin\"}}}}}");
Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D")
  .put(body)
  .addHeader("content-type", "application/json")
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.put("https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D")
  .header("content-type", "application/json")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .body("{\"name\":\"Name of your questionnaire\",\"questions\":{\"skincare_history\":{\"q1\":{\"question\":\"whats your age?\",\"type\":\"text\",\"options\":{\"age\":\"\"}},\"q2\":{\"question\":\"whats your gender?\",\"type\":\"radio\",\"options\":{\"a\":\"male\",\"b\":\"female\"}}},\"skincare_goal\":{\"q1\":{\"question\":\"what is your skincare concern?\",\"type\":\"checkbox\",\"options\":{\"a\":\"acne\",\"b\":\"anti-aging\",\"c\":\"Closed comedons(blackheads, whiteheads)\",\"d\":\"Hyperpigmentation\",\"e\":\"Dullness\",\"f\":\"Dehydrated skin\"}}}}}")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D",
  "method": "PUT",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  },
  "processData": false,
  "data": "{\"name\":\"Name of your questionnaire\",\"questions\":{\"skincare_history\":{\"q1\":{\"question\":\"whats your age?\",\"type\":\"text\",\"options\":{\"age\":\"\"}},\"q2\":{\"question\":\"whats your gender?\",\"type\":\"radio\",\"options\":{\"a\":\"male\",\"b\":\"female\"}}},\"skincare_goal\":{\"q1\":{\"question\":\"what is your skincare concern?\",\"type\":\"checkbox\",\"options\":{\"a\":\"acne\",\"b\":\"anti-aging\",\"c\":\"Closed comedons(blackheads, whiteheads)\",\"d\":\"Hyperpigmentation\",\"e\":\"Dullness\",\"f\":\"Dehydrated skin\"}}}}}"
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = JSON.stringify({
  "name": "Name of your questionnaire",
  "questions": {
    "skincare_history": {
      "q1": {
        "question": "whats your age?",
        "type": "text",
        "options": {
          "age": ""
        }
      },
      "q2": {
        "question": "whats your gender?",
        "type": "radio",
        "options": {
          "a": "male",
          "b": "female"
        }
      }
    },
    "skincare_goal": {
      "q1": {
        "question": "what is your skincare concern?",
        "type": "checkbox",
        "options": {
          "a": "acne",
          "b": "anti-aging",
          "c": "Closed comedons(blackheads, whiteheads)",
          "d": "Hyperpigmentation",
          "e": "Dullness",
          "f": "Dehydrated skin"
        }
      }
    }
  }
});

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("PUT", "https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D");
xhr.setRequestHeader("content-type", "application/json");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "PUT",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/questionnaires/%7Bquestionnaire_id%7D",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.write(JSON.stringify({
  name: 'Name of your questionnaire',
  questions: {
    skincare_history: {
      q1: {question: 'whats your age?', type: 'text', options: {age: ''}},
      q2: {
        question: 'whats your gender?',
        type: 'radio',
        options: {a: 'male', b: 'female'}
      }
    },
    skincare_goal: {
      q1: {
        question: 'what is your skincare concern?',
        type: 'checkbox',
        options: {
          a: 'acne',
          b: 'anti-aging',
          c: 'Closed comedons(blackheads, whiteheads)',
          d: 'Hyperpigmentation',
          e: 'Dullness',
          f: 'Dehydrated skin'
        }
      }
    }
  }
}));
req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'PUT',
  url: 'https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D',
  headers: {
    'content-type': 'application/json',
    'project-key': 'SOME_STRING_VALUE',
    'api-key': 'SOME_STRING_VALUE'
  },
  body: {
    name: 'Name of your questionnaire',
    questions: {
      skincare_history: {
        q1: {question: 'whats your age?', type: 'text', options: {age: ''}},
        q2: {
          question: 'whats your gender?',
          type: 'radio',
          options: {a: 'male', b: 'female'}
        }
      },
      skincare_goal: {
        q1: {
          question: 'what is your skincare concern?',
          type: 'checkbox',
          options: {
            a: 'acne',
            b: 'anti-aging',
            c: 'Closed comedons(blackheads, whiteheads)',
            d: 'Hyperpigmentation',
            e: 'Dullness',
            f: 'Dehydrated skin'
          }
        }
      }
    }
  },
  json: true
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("PUT", "https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D");

req.headers({
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.type("json");
req.send({
  "name": "Name of your questionnaire",
  "questions": {
    "skincare_history": {
      "q1": {
        "question": "whats your age?",
        "type": "text",
        "options": {
          "age": ""
        }
      },
      "q2": {
        "question": "whats your gender?",
        "type": "radio",
        "options": {
          "a": "male",
          "b": "female"
        }
      }
    },
    "skincare_goal": {
      "q1": {
        "question": "what is your skincare concern?",
        "type": "checkbox",
        "options": {
          "a": "acne",
          "b": "anti-aging",
          "c": "Closed comedons(blackheads, whiteheads)",
          "d": "Hyperpigmentation",
          "e": "Dullness",
          "f": "Dehydrated skin"
        }
      }
    }
  }
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"application/json",
                           @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };
NSDictionary *parameters = @{ @"name": @"Name of your questionnaire",
                              @"questions": @{ @"skincare_history": @{ @"q1": @{ @"question": @"whats your age?", @"type": @"text", @"options": @{ @"age": @"" } }, @"q2": @{ @"question": @"whats your gender?", @"type": @"radio", @"options": @{ @"a": @"male", @"b": @"female" } } }, @"skincare_goal": @{ @"q1": @{ @"question": @"what is your skincare concern?", @"type": @"checkbox", @"options": @{ @"a": @"acne", @"b": @"anti-aging", @"c": @"Closed comedons(blackheads, whiteheads)", @"d": @"Hyperpigmentation", @"e": @"Dullness", @"f": @"Dehydrated skin" } } } } };

NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"PUT"];
[request setAllHTTPHeaderFields:headers];
[request setHTTPBody:postData];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "PUT",
  CURLOPT_POSTFIELDS =&gt; "{\"name\":\"Name of your questionnaire\",\"questions\":{\"skincare_history\":{\"q1\":{\"question\":\"whats your age?\",\"type\":\"text\",\"options\":{\"age\":\"\"}},\"q2\":{\"question\":\"whats your gender?\",\"type\":\"radio\",\"options\":{\"a\":\"male\",\"b\":\"female\"}}},\"skincare_goal\":{\"q1\":{\"question\":\"what is your skincare concern?\",\"type\":\"checkbox\",\"options\":{\"a\":\"acne\",\"b\":\"anti-aging\",\"c\":\"Closed comedons(blackheads, whiteheads)\",\"d\":\"Hyperpigmentation\",\"e\":\"Dullness\",\"f\":\"Dehydrated skin\"}}}}}",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "content-type: application/json",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D');
$request-&gt;setMethod(HTTP_METH_PUT);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$request-&gt;setBody('{"name":"Name of your questionnaire","questions":{"skincare_history":{"q1":{"question":"whats your age?","type":"text","options":{"age":""}},"q2":{"question":"whats your gender?","type":"radio","options":{"a":"male","b":"female"}}},"skincare_goal":{"q1":{"question":"what is your skincare concern?","type":"checkbox","options":{"a":"acne","b":"anti-aging","c":"Closed comedons(blackheads, whiteheads)","d":"Hyperpigmentation","e":"Dullness","f":"Dehydrated skin"}}}}}');

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$body = new http\Message\Body;
$body-&gt;append('{"name":"Name of your questionnaire","questions":{"skincare_history":{"q1":{"question":"whats your age?","type":"text","options":{"age":""}},"q2":{"question":"whats your gender?","type":"radio","options":{"a":"male","b":"female"}}},"skincare_goal":{"q1":{"question":"what is your skincare concern?","type":"checkbox","options":{"a":"acne","b":"anti-aging","c":"Closed comedons(blackheads, whiteheads)","d":"Hyperpigmentation","e":"Dullness","f":"Dehydrated skin"}}}}}');

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D');
$request-&gt;setRequestMethod('PUT');
$request-&gt;setBody($body);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

payload = "{\"name\":\"Name of your questionnaire\",\"questions\":{\"skincare_history\":{\"q1\":{\"question\":\"whats your age?\",\"type\":\"text\",\"options\":{\"age\":\"\"}},\"q2\":{\"question\":\"whats your gender?\",\"type\":\"radio\",\"options\":{\"a\":\"male\",\"b\":\"female\"}}},\"skincare_goal\":{\"q1\":{\"question\":\"what is your skincare concern?\",\"type\":\"checkbox\",\"options\":{\"a\":\"acne\",\"b\":\"anti-aging\",\"c\":\"Closed comedons(blackheads, whiteheads)\",\"d\":\"Hyperpigmentation\",\"e\":\"Dullness\",\"f\":\"Dehydrated skin\"}}}}}"

headers = {
    'content-type': "application/json",
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("PUT", "/v1/questionnaires/%7Bquestionnaire_id%7D", payload, headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D"

payload = {
    "name": "Name of your questionnaire",
    "questions": {
        "skincare_history": {
            "q1": {
                "question": "whats your age?",
                "type": "text",
                "options": {"age": ""}
            },
            "q2": {
                "question": "whats your gender?",
                "type": "radio",
                "options": {
                    "a": "male",
                    "b": "female"
                }
            }
        },
        "skincare_goal": {"q1": {
                "question": "what is your skincare concern?",
                "type": "checkbox",
                "options": {
                    "a": "acne",
                    "b": "anti-aging",
                    "c": "Closed comedons(blackheads, whiteheads)",
                    "d": "Hyperpigmentation",
                    "e": "Dullness",
                    "f": "Dehydrated skin"
                }
            }}
    }
}
headers = {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("PUT", url, json=payload, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Put.new(url)
request["content-type"] = 'application/json'
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'
request.body = "{\"name\":\"Name of your questionnaire\",\"questions\":{\"skincare_history\":{\"q1\":{\"question\":\"whats your age?\",\"type\":\"text\",\"options\":{\"age\":\"\"}},\"q2\":{\"question\":\"whats your gender?\",\"type\":\"radio\",\"options\":{\"a\":\"male\",\"b\":\"female\"}}},\"skincare_goal\":{\"q1\":{\"question\":\"what is your skincare concern?\",\"type\":\"checkbox\",\"options\":{\"a\":\"acne\",\"b\":\"anti-aging\",\"c\":\"Closed comedons(blackheads, whiteheads)\",\"d\":\"Hyperpigmentation\",\"e\":\"Dullness\",\"f\":\"Dehydrated skin\"}}}}}"

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request PUT \
  --url https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'content-type: application/json' \
  --header 'project-key: SOME_STRING_VALUE' \
  --data '{"name":"Name of your questionnaire","questions":{"skincare_history":{"q1":{"question":"whats your age?","type":"text","options":{"age":""}},"q2":{"question":"whats your gender?","type":"radio","options":{"a":"male","b":"female"}}},"skincare_goal":{"q1":{"question":"what is your skincare concern?","type":"checkbox","options":{"a":"acne","b":"anti-aging","c":"Closed comedons(blackheads, whiteheads)","d":"Hyperpigmentation","e":"Dullness","f":"Dehydrated skin"}}}}}'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]
let parameters = [
  "name": "Name of your questionnaire",
  "questions": [
    "skincare_history": [
      "q1": [
        "question": "whats your age?",
        "type": "text",
        "options": ["age": ""]
      ],
      "q2": [
        "question": "whats your gender?",
        "type": "radio",
        "options": [
          "a": "male",
          "b": "female"
        ]
      ]
    ],
    "skincare_goal": ["q1": [
        "question": "what is your skincare concern?",
        "type": "checkbox",
        "options": [
          "a": "acne",
          "b": "anti-aging",
          "c": "Closed comedons(blackheads, whiteheads)",
          "d": "Hyperpigmentation",
          "e": "Dullness",
          "f": "Dehydrated skin"
        ]
      ]]
  ]
] as [String : Any]

let postData = JSONSerialization.data(withJSONObject: parameters, options: [])

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "PUT"
request.allHTTPHeaderFields = headers
request.httpBody = postData as Data

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: delete/v1/questionnaires/{questionnaire_id}
HTTP Method: Delete a questionnaire.
Method Description: Delete a questionnaire.

### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| questionnaire_id | str | str | The ID of the questionnaire to retrieve. (Required) |

Returns the delete status.
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D");
var request = new RestRequest(Method.DELETE);
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Delete,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D"

	req, _ := http.NewRequest("DELETE", url, nil)

	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D")
  .delete(null)
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.delete("https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D",
  "method": "DELETE",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = null;

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("DELETE", "https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "DELETE",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/questionnaires/%7Bquestionnaire_id%7D",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'DELETE',
  url: 'https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D',
  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("DELETE", "https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D");

req.headers({
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"DELETE"];
[request setAllHTTPHeaderFields:headers];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "DELETE",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D');
$request-&gt;setMethod(HTTP_METH_DELETE);

$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D');
$request-&gt;setRequestMethod('DELETE');
$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

headers = {
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("DELETE", "/v1/questionnaires/%7Bquestionnaire_id%7D", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D"

headers = {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("DELETE", url, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Delete.new(url)
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request DELETE \
  --url https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'project-key: SOME_STRING_VALUE'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "DELETE"
request.allHTTPHeaderFields = headers

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: get/v1/questionnaires/{questionnaire_id}/mapper
HTTP Method: Get the mapper of a questionnaire.
Method Description: Get details of a questionnaire mapper.

### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| questionnaire_id | str | str | The ID of the questionnaire to retrieve. (Required) |

Returns the mapper of a questionnaire given the questionnaire id.
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper");
var request = new RestRequest(Method.GET);
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Get,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper"

	req, _ := http.NewRequest("GET", url, nil)

	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper")
  .get()
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.get("https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper",
  "method": "GET",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = null;

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("GET", "https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "GET",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/questionnaires/%7Bquestionnaire_id%7D/mapper",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'GET',
  url: 'https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper',
  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("GET", "https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper");

req.headers({
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"GET"];
[request setAllHTTPHeaderFields:headers];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "GET",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper');
$request-&gt;setMethod(HTTP_METH_GET);

$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper');
$request-&gt;setRequestMethod('GET');
$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

headers = {
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("GET", "/v1/questionnaires/%7Bquestionnaire_id%7D/mapper", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper"

headers = {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("GET", url, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request GET \
  --url https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'project-key: SOME_STRING_VALUE'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "GET"
request.allHTTPHeaderFields = headers

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: put/v1/questionnaires/{questionnaire_id}/mapper
HTTP Method: Update a mapper.
Method Description: Update a mapper.

### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| questionnaire_id | str | str | The ID of the questionnaire to retrieve. (Required) |
| prompt_sections | str | Dict[str, str] | List of the prompt sections. Each section will have its own key, these key will used in mapper |
| prompt_order | str | List[str] | A list of prompt sections key in the order they should be in the resultant prompt |
| questions | str | Dict[str, Dict] | Contains the question sections and their questions |
| mapper | str | Dict[str, Dict] | maps different answers to decisions. |
| model | str | Selected enum value | Represents the the model to be used for recommendation generation. |
| max_token_size | int | int | expected max token size for the reply |
| intro | str | str | Share a little context about the questionnaire|
| system | str | str | You are an expert on ...|

Returns mapper update status.
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper");
var request = new RestRequest(Method.PUT);
request.AddHeader("content-type", "application/json");
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
request.AddParameter("application/json", "{\"questions\":{\"skincare_history\":{\"q1\":{\"mapper\":{\"any\":{\"age\":\"\"}}},\"q2\":{\"mapper\":{\"a\":{\"gender\":\"male\"},\"b\":{\"gender\":\"female\"}}},\"q7\":{\"mapper\":{\"~\":{\"a|b|c\":{\"exclude\":[\"Retinol\"]}}}}}},\"exclusive\":{\"prompt_key-1\":\"prompt_key-2\"},\"prompt_sections\":{\"skincare_history\":\"I am {age} years old {gender}\",\"skin_type\":\"My skin type is {skin_type}\",\"include\":\"include these category {include}\"},\"prompt_order\":[\"skincare_history\",\"include\",\"skin_type\"],\"gpt_settings\":{\"model\":\"gpt-3.5-turbo-0613\",\"search_max_token\":2500,\"intro\":\"Share a little context about the question\",\"system\":\"You are an expert on ...\",\"temperature\":0,\"top_p\":1,\"frequency_penalty\":0,\"presence_penalty\":0,\"stop\":[\"AI:\",\"Human:\"]}}", ParameterType.RequestBody);
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Put,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
    Content = new StringContent("{\"questions\":{\"skincare_history\":{\"q1\":{\"mapper\":{\"any\":{\"age\":\"\"}}},\"q2\":{\"mapper\":{\"a\":{\"gender\":\"male\"},\"b\":{\"gender\":\"female\"}}},\"q7\":{\"mapper\":{\"~\":{\"a|b|c\":{\"exclude\":[\"Retinol\"]}}}}}},\"exclusive\":{\"prompt_key-1\":\"prompt_key-2\"},\"prompt_sections\":{\"skincare_history\":\"I am {age} years old {gender}\",\"skin_type\":\"My skin type is {skin_type}\",\"include\":\"include these category {include}\"},\"prompt_order\":[\"skincare_history\",\"include\",\"skin_type\"],\"gpt_settings\":{\"model\":\"gpt-3.5-turbo-0613\",\"search_max_token\":2500,\"intro\":\"Share a little context about the question\",\"system\":\"You are an expert on ...\",\"temperature\":0,\"top_p\":1,\"frequency_penalty\":0,\"presence_penalty\":0,\"stop\":[\"AI:\",\"Human:\"]}}")
    {
        Headers =
        {
            ContentType = new MediaTypeHeaderValue("application/json")
        }
    }
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"strings"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper"

	payload := strings.NewReader("{\"questions\":{\"skincare_history\":{\"q1\":{\"mapper\":{\"any\":{\"age\":\"\"}}},\"q2\":{\"mapper\":{\"a\":{\"gender\":\"male\"},\"b\":{\"gender\":\"female\"}}},\"q7\":{\"mapper\":{\"~\":{\"a|b|c\":{\"exclude\":[\"Retinol\"]}}}}}},\"exclusive\":{\"prompt_key-1\":\"prompt_key-2\"},\"prompt_sections\":{\"skincare_history\":\"I am {age} years old {gender}\",\"skin_type\":\"My skin type is {skin_type}\",\"include\":\"include these category {include}\"},\"prompt_order\":[\"skincare_history\",\"include\",\"skin_type\"],\"gpt_settings\":{\"model\":\"gpt-3.5-turbo-0613\",\"search_max_token\":2500,\"intro\":\"Share a little context about the question\",\"system\":\"You are an expert on ...\",\"temperature\":0,\"top_p\":1,\"frequency_penalty\":0,\"presence_penalty\":0,\"stop\":[\"AI:\",\"Human:\"]}}")

	req, _ := http.NewRequest("PUT", url, payload)

	req.Header.Add("content-type", "application/json")
	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

MediaType mediaType = MediaType.parse("application/json");
RequestBody body = RequestBody.create(mediaType, "{\"questions\":{\"skincare_history\":{\"q1\":{\"mapper\":{\"any\":{\"age\":\"\"}}},\"q2\":{\"mapper\":{\"a\":{\"gender\":\"male\"},\"b\":{\"gender\":\"female\"}}},\"q7\":{\"mapper\":{\"~\":{\"a|b|c\":{\"exclude\":[\"Retinol\"]}}}}}},\"exclusive\":{\"prompt_key-1\":\"prompt_key-2\"},\"prompt_sections\":{\"skincare_history\":\"I am {age} years old {gender}\",\"skin_type\":\"My skin type is {skin_type}\",\"include\":\"include these category {include}\"},\"prompt_order\":[\"skincare_history\",\"include\",\"skin_type\"],\"gpt_settings\":{\"model\":\"gpt-3.5-turbo-0613\",\"search_max_token\":2500,\"intro\":\"Share a little context about the question\",\"system\":\"You are an expert on ...\",\"temperature\":0,\"top_p\":1,\"frequency_penalty\":0,\"presence_penalty\":0,\"stop\":[\"AI:\",\"Human:\"]}}");
Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper")
  .put(body)
  .addHeader("content-type", "application/json")
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.put("https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper")
  .header("content-type", "application/json")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .body("{\"questions\":{\"skincare_history\":{\"q1\":{\"mapper\":{\"any\":{\"age\":\"\"}}},\"q2\":{\"mapper\":{\"a\":{\"gender\":\"male\"},\"b\":{\"gender\":\"female\"}}},\"q7\":{\"mapper\":{\"~\":{\"a|b|c\":{\"exclude\":[\"Retinol\"]}}}}}},\"exclusive\":{\"prompt_key-1\":\"prompt_key-2\"},\"prompt_sections\":{\"skincare_history\":\"I am {age} years old {gender}\",\"skin_type\":\"My skin type is {skin_type}\",\"include\":\"include these category {include}\"},\"prompt_order\":[\"skincare_history\",\"include\",\"skin_type\"],\"gpt_settings\":{\"model\":\"gpt-3.5-turbo-0613\",\"search_max_token\":2500,\"intro\":\"Share a little context about the question\",\"system\":\"You are an expert on ...\",\"temperature\":0,\"top_p\":1,\"frequency_penalty\":0,\"presence_penalty\":0,\"stop\":[\"AI:\",\"Human:\"]}}")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper",
  "method": "PUT",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  },
  "processData": false,
  "data": "{\"questions\":{\"skincare_history\":{\"q1\":{\"mapper\":{\"any\":{\"age\":\"\"}}},\"q2\":{\"mapper\":{\"a\":{\"gender\":\"male\"},\"b\":{\"gender\":\"female\"}}},\"q7\":{\"mapper\":{\"~\":{\"a|b|c\":{\"exclude\":[\"Retinol\"]}}}}}},\"exclusive\":{\"prompt_key-1\":\"prompt_key-2\"},\"prompt_sections\":{\"skincare_history\":\"I am {age} years old {gender}\",\"skin_type\":\"My skin type is {skin_type}\",\"include\":\"include these category {include}\"},\"prompt_order\":[\"skincare_history\",\"include\",\"skin_type\"],\"gpt_settings\":{\"model\":\"gpt-3.5-turbo-0613\",\"search_max_token\":2500,\"intro\":\"Share a little context about the question\",\"system\":\"You are an expert on ...\",\"temperature\":0,\"top_p\":1,\"frequency_penalty\":0,\"presence_penalty\":0,\"stop\":[\"AI:\",\"Human:\"]}}"
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = JSON.stringify({
  "questions": {
    "skincare_history": {
      "q1": {
        "mapper": {
          "any": {
            "age": ""
          }
        }
      },
      "q2": {
        "mapper": {
          "a": {
            "gender": "male"
          },
          "b": {
            "gender": "female"
          }
        }
      },
      "q7": {
        "mapper": {
          "~": {
            "a|b|c": {
              "exclude": [
                "Retinol"
              ]
            }
          }
        }
      }
    }
  },
  "exclusive": {
    "prompt_key-1": "prompt_key-2"
  },
  "prompt_sections": {
    "skincare_history": "I am {age} years old {gender}",
    "skin_type": "My skin type is {skin_type}",
    "include": "include these category {include}"
  },
  "prompt_order": [
    "skincare_history",
    "include",
    "skin_type"
  ],
  "gpt_settings": {
    "model": "gpt-3.5-turbo-0613",
    "search_max_token": 2500,
    "intro": "Share a little context about the question",
    "system": "You are an expert on ...",
    "temperature": 0,
    "top_p": 1,
    "frequency_penalty": 0,
    "presence_penalty": 0,
    "stop": [
      "AI:",
      "Human:"
    ]
  }
});

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("PUT", "https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper");
xhr.setRequestHeader("content-type", "application/json");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "PUT",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/questionnaires/%7Bquestionnaire_id%7D/mapper",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.write(JSON.stringify({
  questions: {
    skincare_history: {
      q1: {mapper: {any: {age: ''}}},
      q2: {mapper: {a: {gender: 'male'}, b: {gender: 'female'}}},
      q7: {mapper: {'~': {'a|b|c': {exclude: ['Retinol']}}}}
    }
  },
  exclusive: {'prompt_key-1': 'prompt_key-2'},
  prompt_sections: {
    skincare_history: 'I am {age} years old {gender}',
    skin_type: 'My skin type is {skin_type}',
    include: 'include these category {include}'
  },
  prompt_order: ['skincare_history', 'include', 'skin_type'],
  gpt_settings: {
    model: 'gpt-3.5-turbo-0613',
    search_max_token: 2500,
    intro: 'Share a little context about the question',
    system: 'You are an expert on ...',
    temperature: 0,
    top_p: 1,
    frequency_penalty: 0,
    presence_penalty: 0,
    stop: ['AI:', 'Human:']
  }
}));
req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'PUT',
  url: 'https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper',
  headers: {
    'content-type': 'application/json',
    'project-key': 'SOME_STRING_VALUE',
    'api-key': 'SOME_STRING_VALUE'
  },
  body: {
    questions: {
      skincare_history: {
        q1: {mapper: {any: {age: ''}}},
        q2: {mapper: {a: {gender: 'male'}, b: {gender: 'female'}}},
        q7: {mapper: {'~': {'a|b|c': {exclude: ['Retinol']}}}}
      }
    },
    exclusive: {'prompt_key-1': 'prompt_key-2'},
    prompt_sections: {
      skincare_history: 'I am {age} years old {gender}',
      skin_type: 'My skin type is {skin_type}',
      include: 'include these category {include}'
    },
    prompt_order: ['skincare_history', 'include', 'skin_type'],
    gpt_settings: {
      model: 'gpt-3.5-turbo-0613',
      search_max_token: 2500,
      intro: 'Share a little context about the question',
      system: 'You are an expert on ...',
      temperature: 0,
      top_p: 1,
      frequency_penalty: 0,
      presence_penalty: 0,
      stop: ['AI:', 'Human:']
    }
  },
  json: true
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("PUT", "https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper");

req.headers({
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.type("json");
req.send({
  "questions": {
    "skincare_history": {
      "q1": {
        "mapper": {
          "any": {
            "age": ""
          }
        }
      },
      "q2": {
        "mapper": {
          "a": {
            "gender": "male"
          },
          "b": {
            "gender": "female"
          }
        }
      },
      "q7": {
        "mapper": {
          "~": {
            "a|b|c": {
              "exclude": [
                "Retinol"
              ]
            }
          }
        }
      }
    }
  },
  "exclusive": {
    "prompt_key-1": "prompt_key-2"
  },
  "prompt_sections": {
    "skincare_history": "I am {age} years old {gender}",
    "skin_type": "My skin type is {skin_type}",
    "include": "include these category {include}"
  },
  "prompt_order": [
    "skincare_history",
    "include",
    "skin_type"
  ],
  "gpt_settings": {
    "model": "gpt-3.5-turbo-0613",
    "search_max_token": 2500,
    "intro": "Share a little context about the question",
    "system": "You are an expert on ...",
    "temperature": 0,
    "top_p": 1,
    "frequency_penalty": 0,
    "presence_penalty": 0,
    "stop": [
      "AI:",
      "Human:"
    ]
  }
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"application/json",
                           @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };
NSDictionary *parameters = @{ @"questions": @{ @"skincare_history": @{ @"q1": @{ @"mapper": @{ @"any": @{ @"age": @"" } } }, @"q2": @{ @"mapper": @{ @"a": @{ @"gender": @"male" }, @"b": @{ @"gender": @"female" } } }, @"q7": @{ @"mapper": @{ @"~": @{ @"a|b|c": @{ @"exclude": @[ @"Retinol" ] } } } } } },
                              @"exclusive": @{ @"prompt_key-1": @"prompt_key-2" },
                              @"prompt_sections": @{ @"skincare_history": @"I am {age} years old {gender}", @"skin_type": @"My skin type is {skin_type}", @"include": @"include these category {include}" },
                              @"prompt_order": @[ @"skincare_history", @"include", @"skin_type" ],
                              @"gpt_settings": @{ @"model": @"gpt-3.5-turbo-0613", @"search_max_token": @2500, @"intro": @"Share a little context about the question", @"system": @"You are an expert on ...", @"temperature": @0, @"top_p": @1, @"frequency_penalty": @0, @"presence_penalty": @0, @"stop": @[ @"AI:", @"Human:" ] } };

NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"PUT"];
[request setAllHTTPHeaderFields:headers];
[request setHTTPBody:postData];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "PUT",
  CURLOPT_POSTFIELDS =&gt; "{\"questions\":{\"skincare_history\":{\"q1\":{\"mapper\":{\"any\":{\"age\":\"\"}}},\"q2\":{\"mapper\":{\"a\":{\"gender\":\"male\"},\"b\":{\"gender\":\"female\"}}},\"q7\":{\"mapper\":{\"~\":{\"a|b|c\":{\"exclude\":[\"Retinol\"]}}}}}},\"exclusive\":{\"prompt_key-1\":\"prompt_key-2\"},\"prompt_sections\":{\"skincare_history\":\"I am {age} years old {gender}\",\"skin_type\":\"My skin type is {skin_type}\",\"include\":\"include these category {include}\"},\"prompt_order\":[\"skincare_history\",\"include\",\"skin_type\"],\"gpt_settings\":{\"model\":\"gpt-3.5-turbo-0613\",\"search_max_token\":2500,\"intro\":\"Share a little context about the question\",\"system\":\"You are an expert on ...\",\"temperature\":0,\"top_p\":1,\"frequency_penalty\":0,\"presence_penalty\":0,\"stop\":[\"AI:\",\"Human:\"]}}",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "content-type: application/json",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper');
$request-&gt;setMethod(HTTP_METH_PUT);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$request-&gt;setBody('{"questions":{"skincare_history":{"q1":{"mapper":{"any":{"age":""}}},"q2":{"mapper":{"a":{"gender":"male"},"b":{"gender":"female"}}},"q7":{"mapper":{"~":{"a|b|c":{"exclude":["Retinol"]}}}}}},"exclusive":{"prompt_key-1":"prompt_key-2"},"prompt_sections":{"skincare_history":"I am {age} years old {gender}","skin_type":"My skin type is {skin_type}","include":"include these category {include}"},"prompt_order":["skincare_history","include","skin_type"],"gpt_settings":{"model":"gpt-3.5-turbo-0613","search_max_token":2500,"intro":"Share a little context about the question","system":"You are an expert on ...","temperature":0,"top_p":1,"frequency_penalty":0,"presence_penalty":0,"stop":["AI:","Human:"]}}');

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$body = new http\Message\Body;
$body-&gt;append('{"questions":{"skincare_history":{"q1":{"mapper":{"any":{"age":""}}},"q2":{"mapper":{"a":{"gender":"male"},"b":{"gender":"female"}}},"q7":{"mapper":{"~":{"a|b|c":{"exclude":["Retinol"]}}}}}},"exclusive":{"prompt_key-1":"prompt_key-2"},"prompt_sections":{"skincare_history":"I am {age} years old {gender}","skin_type":"My skin type is {skin_type}","include":"include these category {include}"},"prompt_order":["skincare_history","include","skin_type"],"gpt_settings":{"model":"gpt-3.5-turbo-0613","search_max_token":2500,"intro":"Share a little context about the question","system":"You are an expert on ...","temperature":0,"top_p":1,"frequency_penalty":0,"presence_penalty":0,"stop":["AI:","Human:"]}}');

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper');
$request-&gt;setRequestMethod('PUT');
$request-&gt;setBody($body);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

payload = "{\"questions\":{\"skincare_history\":{\"q1\":{\"mapper\":{\"any\":{\"age\":\"\"}}},\"q2\":{\"mapper\":{\"a\":{\"gender\":\"male\"},\"b\":{\"gender\":\"female\"}}},\"q7\":{\"mapper\":{\"~\":{\"a|b|c\":{\"exclude\":[\"Retinol\"]}}}}}},\"exclusive\":{\"prompt_key-1\":\"prompt_key-2\"},\"prompt_sections\":{\"skincare_history\":\"I am {age} years old {gender}\",\"skin_type\":\"My skin type is {skin_type}\",\"include\":\"include these category {include}\"},\"prompt_order\":[\"skincare_history\",\"include\",\"skin_type\"],\"gpt_settings\":{\"model\":\"gpt-3.5-turbo-0613\",\"search_max_token\":2500,\"intro\":\"Share a little context about the question\",\"system\":\"You are an expert on ...\",\"temperature\":0,\"top_p\":1,\"frequency_penalty\":0,\"presence_penalty\":0,\"stop\":[\"AI:\",\"Human:\"]}}"

headers = {
    'content-type': "application/json",
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("PUT", "/v1/questionnaires/%7Bquestionnaire_id%7D/mapper", payload, headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper"

payload = {
    "questions": {"skincare_history": {
            "q1": {"mapper": {"any": {"age": ""}}},
            "q2": {"mapper": {
                    "a": {"gender": "male"},
                    "b": {"gender": "female"}
                }},
            "q7": {"mapper": {"~": {"a|b|c": {"exclude": ["Retinol"]}}}}
        }},
    "exclusive": {"prompt_key-1": "prompt_key-2"},
    "prompt_sections": {
        "skincare_history": "I am {age} years old {gender}",
        "skin_type": "My skin type is {skin_type}",
        "include": "include these category {include}"
    },
    "prompt_order": ["skincare_history", "include", "skin_type"],
    "gpt_settings": {
        "model": "gpt-3.5-turbo-0613",
        "search_max_token": 2500,
        "intro": "Share a little context about the question",
        "system": "You are an expert on ...",
        "temperature": 0,
        "top_p": 1,
        "frequency_penalty": 0,
        "presence_penalty": 0,
        "stop": ["AI:", "Human:"]
    }
}
headers = {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("PUT", url, json=payload, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Put.new(url)
request["content-type"] = 'application/json'
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'
request.body = "{\"questions\":{\"skincare_history\":{\"q1\":{\"mapper\":{\"any\":{\"age\":\"\"}}},\"q2\":{\"mapper\":{\"a\":{\"gender\":\"male\"},\"b\":{\"gender\":\"female\"}}},\"q7\":{\"mapper\":{\"~\":{\"a|b|c\":{\"exclude\":[\"Retinol\"]}}}}}},\"exclusive\":{\"prompt_key-1\":\"prompt_key-2\"},\"prompt_sections\":{\"skincare_history\":\"I am {age} years old {gender}\",\"skin_type\":\"My skin type is {skin_type}\",\"include\":\"include these category {include}\"},\"prompt_order\":[\"skincare_history\",\"include\",\"skin_type\"],\"gpt_settings\":{\"model\":\"gpt-3.5-turbo-0613\",\"search_max_token\":2500,\"intro\":\"Share a little context about the question\",\"system\":\"You are an expert on ...\",\"temperature\":0,\"top_p\":1,\"frequency_penalty\":0,\"presence_penalty\":0,\"stop\":[\"AI:\",\"Human:\"]}}"

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request PUT \
  --url https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'content-type: application/json' \
  --header 'project-key: SOME_STRING_VALUE' \
  --data '{"questions":{"skincare_history":{"q1":{"mapper":{"any":{"age":""}}},"q2":{"mapper":{"a":{"gender":"male"},"b":{"gender":"female"}}},"q7":{"mapper":{"~":{"a|b|c":{"exclude":["Retinol"]}}}}}},"exclusive":{"prompt_key-1":"prompt_key-2"},"prompt_sections":{"skincare_history":"I am {age} years old {gender}","skin_type":"My skin type is {skin_type}","include":"include these category {include}"},"prompt_order":["skincare_history","include","skin_type"],"gpt_settings":{"model":"gpt-3.5-turbo-0613","search_max_token":2500,"intro":"Share a little context about the question","system":"You are an expert on ...","temperature":0,"top_p":1,"frequency_penalty":0,"presence_penalty":0,"stop":["AI:","Human:"]}}'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]
let parameters = [
  "questions": ["skincare_history": [
      "q1": ["mapper": ["any": ["age": ""]]],
      "q2": ["mapper": [
          "a": ["gender": "male"],
          "b": ["gender": "female"]
        ]],
      "q7": ["mapper": ["~": ["a|b|c": ["exclude": ["Retinol"]]]]]
    ]],
  "exclusive": ["prompt_key-1": "prompt_key-2"],
  "prompt_sections": [
    "skincare_history": "I am {age} years old {gender}",
    "skin_type": "My skin type is {skin_type}",
    "include": "include these category {include}"
  ],
  "prompt_order": ["skincare_history", "include", "skin_type"],
  "gpt_settings": [
    "model": "gpt-3.5-turbo-0613",
    "search_max_token": 2500,
    "intro": "Share a little context about the question",
    "system": "You are an expert on ...",
    "temperature": 0,
    "top_p": 1,
    "frequency_penalty": 0,
    "presence_penalty": 0,
    "stop": ["AI:", "Human:"]
  ]
] as [String : Any]

let postData = JSONSerialization.data(withJSONObject: parameters, options: [])

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "PUT"
request.allHTTPHeaderFields = headers
request.httpBody = postData as Data

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: post/v1/questionnaires/{questionnaire_id}/mapper
HTTP Method: Add mapper for a questionnaire.
Method Description: Add a mapper for a questionnaire.

### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| questionnaire_id | str | str | The ID of the questionnaire to retrieve. (Required) |
| prompt_sections | str | Dict[str, str] | List of the prompt sections. Each section will have its own key, these key will used in mapper |
| prompt_order | str | List[str] | A list of prompt sections key in the order they should be in the resultant prompt |
| questions | str | Dict[str, Dict] | Contains the question sections and their questions |
| mapper | str | Dict[str, Dict] | maps different answers to decisions. |
| model | str | Selected enum value | Represents the the model to be used for recommendation generation. |
| max_token_size | int | int | expected max token size for the reply |
| intro | str | str | Share a little context about the questionnaire|
| system | str | str | You are an expert on ...|

Returns mapper add status.
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper");
var request = new RestRequest(Method.POST);
request.AddHeader("content-type", "application/json");
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
request.AddParameter("application/json", "{\"questions\":{\"skincare_history\":{\"q1\":{\"mapper\":{\"any\":{\"age\":\"\"}}},\"q2\":{\"mapper\":{\"a\":{\"gender\":\"male\"},\"b\":{\"gender\":\"female\"}}},\"q7\":{\"mapper\":{\"~\":{\"a|b|c\":{\"exclude\":[\"Retinol\"]}}}}}},\"exclusive\":{\"prompt_key-1\":\"prompt_key-2\"},\"prompt_sections\":{\"skincare_history\":\"I am {age} years old {gender}\",\"skin_type\":\"My skin type is {skin_type}\",\"include\":\"include these category {include}\"},\"prompt_order\":[\"skincare_history\",\"include\",\"skin_type\"],\"gpt_settings\":{\"model\":\"gpt-3.5-turbo-0613\",\"search_max_token\":2500,\"intro\":\"Share a little context about the question\",\"system\":\"You are an expert on ...\",\"temperature\":0,\"top_p\":1,\"frequency_penalty\":0,\"presence_penalty\":0,\"stop\":[\"AI:\",\"Human:\"]}}", ParameterType.RequestBody);
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Post,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
    Content = new StringContent("{\"questions\":{\"skincare_history\":{\"q1\":{\"mapper\":{\"any\":{\"age\":\"\"}}},\"q2\":{\"mapper\":{\"a\":{\"gender\":\"male\"},\"b\":{\"gender\":\"female\"}}},\"q7\":{\"mapper\":{\"~\":{\"a|b|c\":{\"exclude\":[\"Retinol\"]}}}}}},\"exclusive\":{\"prompt_key-1\":\"prompt_key-2\"},\"prompt_sections\":{\"skincare_history\":\"I am {age} years old {gender}\",\"skin_type\":\"My skin type is {skin_type}\",\"include\":\"include these category {include}\"},\"prompt_order\":[\"skincare_history\",\"include\",\"skin_type\"],\"gpt_settings\":{\"model\":\"gpt-3.5-turbo-0613\",\"search_max_token\":2500,\"intro\":\"Share a little context about the question\",\"system\":\"You are an expert on ...\",\"temperature\":0,\"top_p\":1,\"frequency_penalty\":0,\"presence_penalty\":0,\"stop\":[\"AI:\",\"Human:\"]}}")
    {
        Headers =
        {
            ContentType = new MediaTypeHeaderValue("application/json")
        }
    }
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"strings"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper"

	payload := strings.NewReader("{\"questions\":{\"skincare_history\":{\"q1\":{\"mapper\":{\"any\":{\"age\":\"\"}}},\"q2\":{\"mapper\":{\"a\":{\"gender\":\"male\"},\"b\":{\"gender\":\"female\"}}},\"q7\":{\"mapper\":{\"~\":{\"a|b|c\":{\"exclude\":[\"Retinol\"]}}}}}},\"exclusive\":{\"prompt_key-1\":\"prompt_key-2\"},\"prompt_sections\":{\"skincare_history\":\"I am {age} years old {gender}\",\"skin_type\":\"My skin type is {skin_type}\",\"include\":\"include these category {include}\"},\"prompt_order\":[\"skincare_history\",\"include\",\"skin_type\"],\"gpt_settings\":{\"model\":\"gpt-3.5-turbo-0613\",\"search_max_token\":2500,\"intro\":\"Share a little context about the question\",\"system\":\"You are an expert on ...\",\"temperature\":0,\"top_p\":1,\"frequency_penalty\":0,\"presence_penalty\":0,\"stop\":[\"AI:\",\"Human:\"]}}")

	req, _ := http.NewRequest("POST", url, payload)

	req.Header.Add("content-type", "application/json")
	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

MediaType mediaType = MediaType.parse("application/json");
RequestBody body = RequestBody.create(mediaType, "{\"questions\":{\"skincare_history\":{\"q1\":{\"mapper\":{\"any\":{\"age\":\"\"}}},\"q2\":{\"mapper\":{\"a\":{\"gender\":\"male\"},\"b\":{\"gender\":\"female\"}}},\"q7\":{\"mapper\":{\"~\":{\"a|b|c\":{\"exclude\":[\"Retinol\"]}}}}}},\"exclusive\":{\"prompt_key-1\":\"prompt_key-2\"},\"prompt_sections\":{\"skincare_history\":\"I am {age} years old {gender}\",\"skin_type\":\"My skin type is {skin_type}\",\"include\":\"include these category {include}\"},\"prompt_order\":[\"skincare_history\",\"include\",\"skin_type\"],\"gpt_settings\":{\"model\":\"gpt-3.5-turbo-0613\",\"search_max_token\":2500,\"intro\":\"Share a little context about the question\",\"system\":\"You are an expert on ...\",\"temperature\":0,\"top_p\":1,\"frequency_penalty\":0,\"presence_penalty\":0,\"stop\":[\"AI:\",\"Human:\"]}}");
Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper")
  .post(body)
  .addHeader("content-type", "application/json")
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.post("https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper")
  .header("content-type", "application/json")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .body("{\"questions\":{\"skincare_history\":{\"q1\":{\"mapper\":{\"any\":{\"age\":\"\"}}},\"q2\":{\"mapper\":{\"a\":{\"gender\":\"male\"},\"b\":{\"gender\":\"female\"}}},\"q7\":{\"mapper\":{\"~\":{\"a|b|c\":{\"exclude\":[\"Retinol\"]}}}}}},\"exclusive\":{\"prompt_key-1\":\"prompt_key-2\"},\"prompt_sections\":{\"skincare_history\":\"I am {age} years old {gender}\",\"skin_type\":\"My skin type is {skin_type}\",\"include\":\"include these category {include}\"},\"prompt_order\":[\"skincare_history\",\"include\",\"skin_type\"],\"gpt_settings\":{\"model\":\"gpt-3.5-turbo-0613\",\"search_max_token\":2500,\"intro\":\"Share a little context about the question\",\"system\":\"You are an expert on ...\",\"temperature\":0,\"top_p\":1,\"frequency_penalty\":0,\"presence_penalty\":0,\"stop\":[\"AI:\",\"Human:\"]}}")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper",
  "method": "POST",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  },
  "processData": false,
  "data": "{\"questions\":{\"skincare_history\":{\"q1\":{\"mapper\":{\"any\":{\"age\":\"\"}}},\"q2\":{\"mapper\":{\"a\":{\"gender\":\"male\"},\"b\":{\"gender\":\"female\"}}},\"q7\":{\"mapper\":{\"~\":{\"a|b|c\":{\"exclude\":[\"Retinol\"]}}}}}},\"exclusive\":{\"prompt_key-1\":\"prompt_key-2\"},\"prompt_sections\":{\"skincare_history\":\"I am {age} years old {gender}\",\"skin_type\":\"My skin type is {skin_type}\",\"include\":\"include these category {include}\"},\"prompt_order\":[\"skincare_history\",\"include\",\"skin_type\"],\"gpt_settings\":{\"model\":\"gpt-3.5-turbo-0613\",\"search_max_token\":2500,\"intro\":\"Share a little context about the question\",\"system\":\"You are an expert on ...\",\"temperature\":0,\"top_p\":1,\"frequency_penalty\":0,\"presence_penalty\":0,\"stop\":[\"AI:\",\"Human:\"]}}"
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = JSON.stringify({
  "questions": {
    "skincare_history": {
      "q1": {
        "mapper": {
          "any": {
            "age": ""
          }
        }
      },
      "q2": {
        "mapper": {
          "a": {
            "gender": "male"
          },
          "b": {
            "gender": "female"
          }
        }
      },
      "q7": {
        "mapper": {
          "~": {
            "a|b|c": {
              "exclude": [
                "Retinol"
              ]
            }
          }
        }
      }
    }
  },
  "exclusive": {
    "prompt_key-1": "prompt_key-2"
  },
  "prompt_sections": {
    "skincare_history": "I am {age} years old {gender}",
    "skin_type": "My skin type is {skin_type}",
    "include": "include these category {include}"
  },
  "prompt_order": [
    "skincare_history",
    "include",
    "skin_type"
  ],
  "gpt_settings": {
    "model": "gpt-3.5-turbo-0613",
    "search_max_token": 2500,
    "intro": "Share a little context about the question",
    "system": "You are an expert on ...",
    "temperature": 0,
    "top_p": 1,
    "frequency_penalty": 0,
    "presence_penalty": 0,
    "stop": [
      "AI:",
      "Human:"
    ]
  }
});

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("POST", "https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper");
xhr.setRequestHeader("content-type", "application/json");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "POST",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/questionnaires/%7Bquestionnaire_id%7D/mapper",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.write(JSON.stringify({
  questions: {
    skincare_history: {
      q1: {mapper: {any: {age: ''}}},
      q2: {mapper: {a: {gender: 'male'}, b: {gender: 'female'}}},
      q7: {mapper: {'~': {'a|b|c': {exclude: ['Retinol']}}}}
    }
  },
  exclusive: {'prompt_key-1': 'prompt_key-2'},
  prompt_sections: {
    skincare_history: 'I am {age} years old {gender}',
    skin_type: 'My skin type is {skin_type}',
    include: 'include these category {include}'
  },
  prompt_order: ['skincare_history', 'include', 'skin_type'],
  gpt_settings: {
    model: 'gpt-3.5-turbo-0613',
    search_max_token: 2500,
    intro: 'Share a little context about the question',
    system: 'You are an expert on ...',
    temperature: 0,
    top_p: 1,
    frequency_penalty: 0,
    presence_penalty: 0,
    stop: ['AI:', 'Human:']
  }
}));
req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'POST',
  url: 'https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper',
  headers: {
    'content-type': 'application/json',
    'project-key': 'SOME_STRING_VALUE',
    'api-key': 'SOME_STRING_VALUE'
  },
  body: {
    questions: {
      skincare_history: {
        q1: {mapper: {any: {age: ''}}},
        q2: {mapper: {a: {gender: 'male'}, b: {gender: 'female'}}},
        q7: {mapper: {'~': {'a|b|c': {exclude: ['Retinol']}}}}
      }
    },
    exclusive: {'prompt_key-1': 'prompt_key-2'},
    prompt_sections: {
      skincare_history: 'I am {age} years old {gender}',
      skin_type: 'My skin type is {skin_type}',
      include: 'include these category {include}'
    },
    prompt_order: ['skincare_history', 'include', 'skin_type'],
    gpt_settings: {
      model: 'gpt-3.5-turbo-0613',
      search_max_token: 2500,
      intro: 'Share a little context about the question',
      system: 'You are an expert on ...',
      temperature: 0,
      top_p: 1,
      frequency_penalty: 0,
      presence_penalty: 0,
      stop: ['AI:', 'Human:']
    }
  },
  json: true
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("POST", "https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper");

req.headers({
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.type("json");
req.send({
  "questions": {
    "skincare_history": {
      "q1": {
        "mapper": {
          "any": {
            "age": ""
          }
        }
      },
      "q2": {
        "mapper": {
          "a": {
            "gender": "male"
          },
          "b": {
            "gender": "female"
          }
        }
      },
      "q7": {
        "mapper": {
          "~": {
            "a|b|c": {
              "exclude": [
                "Retinol"
              ]
            }
          }
        }
      }
    }
  },
  "exclusive": {
    "prompt_key-1": "prompt_key-2"
  },
  "prompt_sections": {
    "skincare_history": "I am {age} years old {gender}",
    "skin_type": "My skin type is {skin_type}",
    "include": "include these category {include}"
  },
  "prompt_order": [
    "skincare_history",
    "include",
    "skin_type"
  ],
  "gpt_settings": {
    "model": "gpt-3.5-turbo-0613",
    "search_max_token": 2500,
    "intro": "Share a little context about the question",
    "system": "You are an expert on ...",
    "temperature": 0,
    "top_p": 1,
    "frequency_penalty": 0,
    "presence_penalty": 0,
    "stop": [
      "AI:",
      "Human:"
    ]
  }
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"application/json",
                           @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };
NSDictionary *parameters = @{ @"questions": @{ @"skincare_history": @{ @"q1": @{ @"mapper": @{ @"any": @{ @"age": @"" } } }, @"q2": @{ @"mapper": @{ @"a": @{ @"gender": @"male" }, @"b": @{ @"gender": @"female" } } }, @"q7": @{ @"mapper": @{ @"~": @{ @"a|b|c": @{ @"exclude": @[ @"Retinol" ] } } } } } },
                              @"exclusive": @{ @"prompt_key-1": @"prompt_key-2" },
                              @"prompt_sections": @{ @"skincare_history": @"I am {age} years old {gender}", @"skin_type": @"My skin type is {skin_type}", @"include": @"include these category {include}" },
                              @"prompt_order": @[ @"skincare_history", @"include", @"skin_type" ],
                              @"gpt_settings": @{ @"model": @"gpt-3.5-turbo-0613", @"search_max_token": @2500, @"intro": @"Share a little context about the question", @"system": @"You are an expert on ...", @"temperature": @0, @"top_p": @1, @"frequency_penalty": @0, @"presence_penalty": @0, @"stop": @[ @"AI:", @"Human:" ] } };

NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"POST"];
[request setAllHTTPHeaderFields:headers];
[request setHTTPBody:postData];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "POST",
  CURLOPT_POSTFIELDS =&gt; "{\"questions\":{\"skincare_history\":{\"q1\":{\"mapper\":{\"any\":{\"age\":\"\"}}},\"q2\":{\"mapper\":{\"a\":{\"gender\":\"male\"},\"b\":{\"gender\":\"female\"}}},\"q7\":{\"mapper\":{\"~\":{\"a|b|c\":{\"exclude\":[\"Retinol\"]}}}}}},\"exclusive\":{\"prompt_key-1\":\"prompt_key-2\"},\"prompt_sections\":{\"skincare_history\":\"I am {age} years old {gender}\",\"skin_type\":\"My skin type is {skin_type}\",\"include\":\"include these category {include}\"},\"prompt_order\":[\"skincare_history\",\"include\",\"skin_type\"],\"gpt_settings\":{\"model\":\"gpt-3.5-turbo-0613\",\"search_max_token\":2500,\"intro\":\"Share a little context about the question\",\"system\":\"You are an expert on ...\",\"temperature\":0,\"top_p\":1,\"frequency_penalty\":0,\"presence_penalty\":0,\"stop\":[\"AI:\",\"Human:\"]}}",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "content-type: application/json",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper');
$request-&gt;setMethod(HTTP_METH_POST);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$request-&gt;setBody('{"questions":{"skincare_history":{"q1":{"mapper":{"any":{"age":""}}},"q2":{"mapper":{"a":{"gender":"male"},"b":{"gender":"female"}}},"q7":{"mapper":{"~":{"a|b|c":{"exclude":["Retinol"]}}}}}},"exclusive":{"prompt_key-1":"prompt_key-2"},"prompt_sections":{"skincare_history":"I am {age} years old {gender}","skin_type":"My skin type is {skin_type}","include":"include these category {include}"},"prompt_order":["skincare_history","include","skin_type"],"gpt_settings":{"model":"gpt-3.5-turbo-0613","search_max_token":2500,"intro":"Share a little context about the question","system":"You are an expert on ...","temperature":0,"top_p":1,"frequency_penalty":0,"presence_penalty":0,"stop":["AI:","Human:"]}}');

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$body = new http\Message\Body;
$body-&gt;append('{"questions":{"skincare_history":{"q1":{"mapper":{"any":{"age":""}}},"q2":{"mapper":{"a":{"gender":"male"},"b":{"gender":"female"}}},"q7":{"mapper":{"~":{"a|b|c":{"exclude":["Retinol"]}}}}}},"exclusive":{"prompt_key-1":"prompt_key-2"},"prompt_sections":{"skincare_history":"I am {age} years old {gender}","skin_type":"My skin type is {skin_type}","include":"include these category {include}"},"prompt_order":["skincare_history","include","skin_type"],"gpt_settings":{"model":"gpt-3.5-turbo-0613","search_max_token":2500,"intro":"Share a little context about the question","system":"You are an expert on ...","temperature":0,"top_p":1,"frequency_penalty":0,"presence_penalty":0,"stop":["AI:","Human:"]}}');

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper');
$request-&gt;setRequestMethod('POST');
$request-&gt;setBody($body);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

payload = "{\"questions\":{\"skincare_history\":{\"q1\":{\"mapper\":{\"any\":{\"age\":\"\"}}},\"q2\":{\"mapper\":{\"a\":{\"gender\":\"male\"},\"b\":{\"gender\":\"female\"}}},\"q7\":{\"mapper\":{\"~\":{\"a|b|c\":{\"exclude\":[\"Retinol\"]}}}}}},\"exclusive\":{\"prompt_key-1\":\"prompt_key-2\"},\"prompt_sections\":{\"skincare_history\":\"I am {age} years old {gender}\",\"skin_type\":\"My skin type is {skin_type}\",\"include\":\"include these category {include}\"},\"prompt_order\":[\"skincare_history\",\"include\",\"skin_type\"],\"gpt_settings\":{\"model\":\"gpt-3.5-turbo-0613\",\"search_max_token\":2500,\"intro\":\"Share a little context about the question\",\"system\":\"You are an expert on ...\",\"temperature\":0,\"top_p\":1,\"frequency_penalty\":0,\"presence_penalty\":0,\"stop\":[\"AI:\",\"Human:\"]}}"

headers = {
    'content-type': "application/json",
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("POST", "/v1/questionnaires/%7Bquestionnaire_id%7D/mapper", payload, headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper"

payload = {
    "questions": {"skincare_history": {
            "q1": {"mapper": {"any": {"age": ""}}},
            "q2": {"mapper": {
                    "a": {"gender": "male"},
                    "b": {"gender": "female"}
                }},
            "q7": {"mapper": {"~": {"a|b|c": {"exclude": ["Retinol"]}}}}
        }},
    "exclusive": {"prompt_key-1": "prompt_key-2"},
    "prompt_sections": {
        "skincare_history": "I am {age} years old {gender}",
        "skin_type": "My skin type is {skin_type}",
        "include": "include these category {include}"
    },
    "prompt_order": ["skincare_history", "include", "skin_type"],
    "gpt_settings": {
        "model": "gpt-3.5-turbo-0613",
        "search_max_token": 2500,
        "intro": "Share a little context about the question",
        "system": "You are an expert on ...",
        "temperature": 0,
        "top_p": 1,
        "frequency_penalty": 0,
        "presence_penalty": 0,
        "stop": ["AI:", "Human:"]
    }
}
headers = {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("POST", url, json=payload, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Post.new(url)
request["content-type"] = 'application/json'
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'
request.body = "{\"questions\":{\"skincare_history\":{\"q1\":{\"mapper\":{\"any\":{\"age\":\"\"}}},\"q2\":{\"mapper\":{\"a\":{\"gender\":\"male\"},\"b\":{\"gender\":\"female\"}}},\"q7\":{\"mapper\":{\"~\":{\"a|b|c\":{\"exclude\":[\"Retinol\"]}}}}}},\"exclusive\":{\"prompt_key-1\":\"prompt_key-2\"},\"prompt_sections\":{\"skincare_history\":\"I am {age} years old {gender}\",\"skin_type\":\"My skin type is {skin_type}\",\"include\":\"include these category {include}\"},\"prompt_order\":[\"skincare_history\",\"include\",\"skin_type\"],\"gpt_settings\":{\"model\":\"gpt-3.5-turbo-0613\",\"search_max_token\":2500,\"intro\":\"Share a little context about the question\",\"system\":\"You are an expert on ...\",\"temperature\":0,\"top_p\":1,\"frequency_penalty\":0,\"presence_penalty\":0,\"stop\":[\"AI:\",\"Human:\"]}}"

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request POST \
  --url https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'content-type: application/json' \
  --header 'project-key: SOME_STRING_VALUE' \
  --data '{"questions":{"skincare_history":{"q1":{"mapper":{"any":{"age":""}}},"q2":{"mapper":{"a":{"gender":"male"},"b":{"gender":"female"}}},"q7":{"mapper":{"~":{"a|b|c":{"exclude":["Retinol"]}}}}}},"exclusive":{"prompt_key-1":"prompt_key-2"},"prompt_sections":{"skincare_history":"I am {age} years old {gender}","skin_type":"My skin type is {skin_type}","include":"include these category {include}"},"prompt_order":["skincare_history","include","skin_type"],"gpt_settings":{"model":"gpt-3.5-turbo-0613","search_max_token":2500,"intro":"Share a little context about the question","system":"You are an expert on ...","temperature":0,"top_p":1,"frequency_penalty":0,"presence_penalty":0,"stop":["AI:","Human:"]}}'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]
let parameters = [
  "questions": ["skincare_history": [
      "q1": ["mapper": ["any": ["age": ""]]],
      "q2": ["mapper": [
          "a": ["gender": "male"],
          "b": ["gender": "female"]
        ]],
      "q7": ["mapper": ["~": ["a|b|c": ["exclude": ["Retinol"]]]]]
    ]],
  "exclusive": ["prompt_key-1": "prompt_key-2"],
  "prompt_sections": [
    "skincare_history": "I am {age} years old {gender}",
    "skin_type": "My skin type is {skin_type}",
    "include": "include these category {include}"
  ],
  "prompt_order": ["skincare_history", "include", "skin_type"],
  "gpt_settings": [
    "model": "gpt-3.5-turbo-0613",
    "search_max_token": 2500,
    "intro": "Share a little context about the question",
    "system": "You are an expert on ...",
    "temperature": 0,
    "top_p": 1,
    "frequency_penalty": 0,
    "presence_penalty": 0,
    "stop": ["AI:", "Human:"]
  ]
] as [String : Any]

let postData = JSONSerialization.data(withJSONObject: parameters, options: [])

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "POST"
request.allHTTPHeaderFields = headers
request.httpBody = postData as Data

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: delete/v1/questionnaires/{questionnaire_id}/mapper
HTTP Method: Delete a mapper.
Method Description: Delete a mapper.

### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| questionnaire_id | str | str | The ID of the questionnaire to retrieve. (Required) |

Returns the delete status.
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper");
var request = new RestRequest(Method.DELETE);
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Delete,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper"

	req, _ := http.NewRequest("DELETE", url, nil)

	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper")
  .delete(null)
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.delete("https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper",
  "method": "DELETE",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = null;

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("DELETE", "https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "DELETE",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/questionnaires/%7Bquestionnaire_id%7D/mapper",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'DELETE',
  url: 'https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper',
  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("DELETE", "https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper");

req.headers({
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"DELETE"];
[request setAllHTTPHeaderFields:headers];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "DELETE",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper');
$request-&gt;setMethod(HTTP_METH_DELETE);

$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper');
$request-&gt;setRequestMethod('DELETE');
$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

headers = {
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("DELETE", "/v1/questionnaires/%7Bquestionnaire_id%7D/mapper", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper"

headers = {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("DELETE", url, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Delete.new(url)
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request DELETE \
  --url https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'project-key: SOME_STRING_VALUE'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "DELETE"
request.allHTTPHeaderFields = headers

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: get/v1/questionnaires/{questionnaire_id}/logs
HTTP Method: Get logs of responses against a questionnaire.
Method Description: Get logs of responses against a questionnaire.

### Parameters
----------

Returns all prompts, response and request assoicated with a questionnaire.
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/logs?request_id=SOME_STRING_VALUE&amp;start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE");
var request = new RestRequest(Method.GET);
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Get,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/logs?request_id=SOME_STRING_VALUE&amp;start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/logs?request_id=SOME_STRING_VALUE&amp;start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE"

	req, _ := http.NewRequest("GET", url, nil)

	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/logs?request_id=SOME_STRING_VALUE&amp;start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE")
  .get()
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.get("https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/logs?request_id=SOME_STRING_VALUE&amp;start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/logs?request_id=SOME_STRING_VALUE&amp;start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE",
  "method": "GET",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = null;

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("GET", "https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/logs?request_id=SOME_STRING_VALUE&amp;start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "GET",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/questionnaires/%7Bquestionnaire_id%7D/logs?request_id=SOME_STRING_VALUE&amp;start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'GET',
  url: 'https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/logs',
  qs: {
    request_id: 'SOME_STRING_VALUE',
    start: 'SOME_INTEGER_VALUE',
    size: 'SOME_INTEGER_VALUE'
  },
  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("GET", "https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/logs");

req.query({
  "request_id": "SOME_STRING_VALUE",
  "start": "SOME_INTEGER_VALUE",
  "size": "SOME_INTEGER_VALUE"
});

req.headers({
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/logs?request_id=SOME_STRING_VALUE&amp;start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"GET"];
[request setAllHTTPHeaderFields:headers];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/logs?request_id=SOME_STRING_VALUE&amp;start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "GET",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/logs');
$request-&gt;setMethod(HTTP_METH_GET);

$request-&gt;setQueryData([
  'request_id' =&gt; 'SOME_STRING_VALUE',
  'start' =&gt; 'SOME_INTEGER_VALUE',
  'size' =&gt; 'SOME_INTEGER_VALUE'
]);

$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/logs');
$request-&gt;setRequestMethod('GET');
$request-&gt;setQuery(new http\QueryString([
  'request_id' =&gt; 'SOME_STRING_VALUE',
  'start' =&gt; 'SOME_INTEGER_VALUE',
  'size' =&gt; 'SOME_INTEGER_VALUE'
]));

$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

headers = {
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("GET", "/v1/questionnaires/%7Bquestionnaire_id%7D/logs?request_id=SOME_STRING_VALUE&amp;start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/logs"

querystring = {"request_id":"SOME_STRING_VALUE","start":"SOME_INTEGER_VALUE","size":"SOME_INTEGER_VALUE"}

headers = {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("GET", url, headers=headers, params=querystring)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/logs?request_id=SOME_STRING_VALUE&amp;start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request GET \
  --url 'https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/logs?request_id=SOME_STRING_VALUE&amp;start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE' \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'project-key: SOME_STRING_VALUE'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/logs?request_id=SOME_STRING_VALUE&amp;start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "GET"
request.allHTTPHeaderFields = headers

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: get/v1/tasks/{task_id}
HTTP Method: Get a task by its id
Method Description: Get the latest status of a background task by passing task id as a query parameter.

### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| task_id | str | str | Represents the id of a background task. |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/tasks/%7Btask_id%7D");
var request = new RestRequest(Method.GET);
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Get,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/tasks/%7Btask_id%7D"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/tasks/%7Btask_id%7D"

	req, _ := http.NewRequest("GET", url, nil)

	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/tasks/%7Btask_id%7D")
  .get()
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.get("https://api.recommender.gigalogy.com/v1/tasks/%7Btask_id%7D")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/tasks/%7Btask_id%7D",
  "method": "GET",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = null;

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("GET", "https://api.recommender.gigalogy.com/v1/tasks/%7Btask_id%7D");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "GET",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/tasks/%7Btask_id%7D",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'GET',
  url: 'https://api.recommender.gigalogy.com/v1/tasks/%7Btask_id%7D',
  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("GET", "https://api.recommender.gigalogy.com/v1/tasks/%7Btask_id%7D");

req.headers({
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/tasks/%7Btask_id%7D"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"GET"];
[request setAllHTTPHeaderFields:headers];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/tasks/%7Btask_id%7D",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "GET",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/tasks/%7Btask_id%7D');
$request-&gt;setMethod(HTTP_METH_GET);

$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/tasks/%7Btask_id%7D');
$request-&gt;setRequestMethod('GET');
$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

headers = {
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("GET", "/v1/tasks/%7Btask_id%7D", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/tasks/%7Btask_id%7D"

headers = {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("GET", url, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/tasks/%7Btask_id%7D")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request GET \
  --url https://api.recommender.gigalogy.com/v1/tasks/%7Btask_id%7D \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'project-key: SOME_STRING_VALUE'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/tasks/%7Btask_id%7D")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "GET"
request.allHTTPHeaderFields = headers

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: get/v1/tasks
HTTP Method: get all task by type and status
Method Description: Get a list of all tasks by a specific type. By default this endpoint will return
latest 100 tasks with their details.

### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| task_type | Enum | Selected enum value | Available values are `item_train`, `image_train`, `rank_train`, `insight_process`. |
| task_status | Enum | Selected enum value | Available values are `claimable`, `pending`, `success`, `cancelled`, `failed`. |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/tasks?task_type=SOME_STRING_VALUE&amp;task_status=SOME_STRING_VALUE");
var request = new RestRequest(Method.GET);
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Get,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/tasks?task_type=SOME_STRING_VALUE&amp;task_status=SOME_STRING_VALUE"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/tasks?task_type=SOME_STRING_VALUE&amp;task_status=SOME_STRING_VALUE"

	req, _ := http.NewRequest("GET", url, nil)

	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/tasks?task_type=SOME_STRING_VALUE&amp;task_status=SOME_STRING_VALUE")
  .get()
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.get("https://api.recommender.gigalogy.com/v1/tasks?task_type=SOME_STRING_VALUE&amp;task_status=SOME_STRING_VALUE")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/tasks?task_type=SOME_STRING_VALUE&amp;task_status=SOME_STRING_VALUE",
  "method": "GET",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = null;

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("GET", "https://api.recommender.gigalogy.com/v1/tasks?task_type=SOME_STRING_VALUE&amp;task_status=SOME_STRING_VALUE");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "GET",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/tasks?task_type=SOME_STRING_VALUE&amp;task_status=SOME_STRING_VALUE",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'GET',
  url: 'https://api.recommender.gigalogy.com/v1/tasks',
  qs: {task_type: 'SOME_STRING_VALUE', task_status: 'SOME_STRING_VALUE'},
  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("GET", "https://api.recommender.gigalogy.com/v1/tasks");

req.query({
  "task_type": "SOME_STRING_VALUE",
  "task_status": "SOME_STRING_VALUE"
});

req.headers({
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/tasks?task_type=SOME_STRING_VALUE&amp;task_status=SOME_STRING_VALUE"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"GET"];
[request setAllHTTPHeaderFields:headers];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/tasks?task_type=SOME_STRING_VALUE&amp;task_status=SOME_STRING_VALUE",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "GET",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/tasks');
$request-&gt;setMethod(HTTP_METH_GET);

$request-&gt;setQueryData([
  'task_type' =&gt; 'SOME_STRING_VALUE',
  'task_status' =&gt; 'SOME_STRING_VALUE'
]);

$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/tasks');
$request-&gt;setRequestMethod('GET');
$request-&gt;setQuery(new http\QueryString([
  'task_type' =&gt; 'SOME_STRING_VALUE',
  'task_status' =&gt; 'SOME_STRING_VALUE'
]));

$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

headers = {
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("GET", "/v1/tasks?task_type=SOME_STRING_VALUE&amp;task_status=SOME_STRING_VALUE", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/tasks"

querystring = {"task_type":"SOME_STRING_VALUE","task_status":"SOME_STRING_VALUE"}

headers = {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("GET", url, headers=headers, params=querystring)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/tasks?task_type=SOME_STRING_VALUE&amp;task_status=SOME_STRING_VALUE")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request GET \
  --url 'https://api.recommender.gigalogy.com/v1/tasks?task_type=SOME_STRING_VALUE&amp;task_status=SOME_STRING_VALUE' \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'project-key: SOME_STRING_VALUE'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/tasks?task_type=SOME_STRING_VALUE&amp;task_status=SOME_STRING_VALUE")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "GET"
request.allHTTPHeaderFields = headers

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: post/v1/reach
HTTP Method: Shows user reach of recommender API
Method Description: This endpoint will show the stats of user reach for browsing, purchasing,
and rating items. User need to choose the unit for getting respected response.

### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| reach_type | Enum | Selected enum value | Represents the unit for counting the user reach for browsing, purchasing and rating. Available values are `total` and `daily.` |
| start_date | Optional[str] | str | Initial date of date range based on which it will show major KPIs of our recommender system. |
| end_date |Optional[str] | str | End date of date range based on which it will show major KPIs of our recommender system. |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/reach?reach_type=SOME_STRING_VALUE");
var request = new RestRequest(Method.POST);
request.AddHeader("content-type", "application/json");
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
request.AddParameter("application/json", "{\"start_date\":\"2021-08-05\",\"end_date\":\"2021-08-06\"}", ParameterType.RequestBody);
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Post,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/reach?reach_type=SOME_STRING_VALUE"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
    Content = new StringContent("{\"start_date\":\"2021-08-05\",\"end_date\":\"2021-08-06\"}")
    {
        Headers =
        {
            ContentType = new MediaTypeHeaderValue("application/json")
        }
    }
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"strings"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/reach?reach_type=SOME_STRING_VALUE"

	payload := strings.NewReader("{\"start_date\":\"2021-08-05\",\"end_date\":\"2021-08-06\"}")

	req, _ := http.NewRequest("POST", url, payload)

	req.Header.Add("content-type", "application/json")
	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

MediaType mediaType = MediaType.parse("application/json");
RequestBody body = RequestBody.create(mediaType, "{\"start_date\":\"2021-08-05\",\"end_date\":\"2021-08-06\"}");
Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/reach?reach_type=SOME_STRING_VALUE")
  .post(body)
  .addHeader("content-type", "application/json")
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.post("https://api.recommender.gigalogy.com/v1/reach?reach_type=SOME_STRING_VALUE")
  .header("content-type", "application/json")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .body("{\"start_date\":\"2021-08-05\",\"end_date\":\"2021-08-06\"}")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/reach?reach_type=SOME_STRING_VALUE",
  "method": "POST",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  },
  "processData": false,
  "data": "{\"start_date\":\"2021-08-05\",\"end_date\":\"2021-08-06\"}"
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = JSON.stringify({
  "start_date": "2021-08-05",
  "end_date": "2021-08-06"
});

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("POST", "https://api.recommender.gigalogy.com/v1/reach?reach_type=SOME_STRING_VALUE");
xhr.setRequestHeader("content-type", "application/json");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "POST",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/reach?reach_type=SOME_STRING_VALUE",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.write(JSON.stringify({start_date: '2021-08-05', end_date: '2021-08-06'}));
req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'POST',
  url: 'https://api.recommender.gigalogy.com/v1/reach',
  qs: {reach_type: 'SOME_STRING_VALUE'},
  headers: {
    'content-type': 'application/json',
    'project-key': 'SOME_STRING_VALUE',
    'api-key': 'SOME_STRING_VALUE'
  },
  body: {start_date: '2021-08-05', end_date: '2021-08-06'},
  json: true
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("POST", "https://api.recommender.gigalogy.com/v1/reach");

req.query({
  "reach_type": "SOME_STRING_VALUE"
});

req.headers({
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.type("json");
req.send({
  "start_date": "2021-08-05",
  "end_date": "2021-08-06"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"application/json",
                           @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };
NSDictionary *parameters = @{ @"start_date": @"2021-08-05",
                              @"end_date": @"2021-08-06" };

NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/reach?reach_type=SOME_STRING_VALUE"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"POST"];
[request setAllHTTPHeaderFields:headers];
[request setHTTPBody:postData];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/reach?reach_type=SOME_STRING_VALUE",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "POST",
  CURLOPT_POSTFIELDS =&gt; "{\"start_date\":\"2021-08-05\",\"end_date\":\"2021-08-06\"}",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "content-type: application/json",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/reach');
$request-&gt;setMethod(HTTP_METH_POST);

$request-&gt;setQueryData([
  'reach_type' =&gt; 'SOME_STRING_VALUE'
]);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$request-&gt;setBody('{"start_date":"2021-08-05","end_date":"2021-08-06"}');

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$body = new http\Message\Body;
$body-&gt;append('{"start_date":"2021-08-05","end_date":"2021-08-06"}');

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/reach');
$request-&gt;setRequestMethod('POST');
$request-&gt;setBody($body);

$request-&gt;setQuery(new http\QueryString([
  'reach_type' =&gt; 'SOME_STRING_VALUE'
]));

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

payload = "{\"start_date\":\"2021-08-05\",\"end_date\":\"2021-08-06\"}"

headers = {
    'content-type': "application/json",
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("POST", "/v1/reach?reach_type=SOME_STRING_VALUE", payload, headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/reach"

querystring = {"reach_type":"SOME_STRING_VALUE"}

payload = {
    "start_date": "2021-08-05",
    "end_date": "2021-08-06"
}
headers = {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("POST", url, json=payload, headers=headers, params=querystring)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/reach?reach_type=SOME_STRING_VALUE")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Post.new(url)
request["content-type"] = 'application/json'
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'
request.body = "{\"start_date\":\"2021-08-05\",\"end_date\":\"2021-08-06\"}"

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request POST \
  --url 'https://api.recommender.gigalogy.com/v1/reach?reach_type=SOME_STRING_VALUE' \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'content-type: application/json' \
  --header 'project-key: SOME_STRING_VALUE' \
  --data '{"start_date":"2021-08-05","end_date":"2021-08-06"}'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]
let parameters = [
  "start_date": "2021-08-05",
  "end_date": "2021-08-06"
] as [String : Any]

let postData = JSONSerialization.data(withJSONObject: parameters, options: [])

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/reach?reach_type=SOME_STRING_VALUE")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "POST"
request.allHTTPHeaderFields = headers
request.httpBody = postData as Data

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: post/v1/stats
HTTP Method: Save document in the stats index
Method Description: This endpoint will create the a document stats index.

### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| start_date | str | str | Initial date of date range based on which you want to save stats. |
| end_date |str | str | End date of date range based on which you want to save stats. |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/stats");
var request = new RestRequest(Method.POST);
request.AddHeader("content-type", "application/json");
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
request.AddParameter("application/json", "{\"start_date\":\"2021-08-05\",\"end_date\":\"2021-08-06\"}", ParameterType.RequestBody);
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Post,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/stats"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
    Content = new StringContent("{\"start_date\":\"2021-08-05\",\"end_date\":\"2021-08-06\"}")
    {
        Headers =
        {
            ContentType = new MediaTypeHeaderValue("application/json")
        }
    }
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"strings"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/stats"

	payload := strings.NewReader("{\"start_date\":\"2021-08-05\",\"end_date\":\"2021-08-06\"}")

	req, _ := http.NewRequest("POST", url, payload)

	req.Header.Add("content-type", "application/json")
	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

MediaType mediaType = MediaType.parse("application/json");
RequestBody body = RequestBody.create(mediaType, "{\"start_date\":\"2021-08-05\",\"end_date\":\"2021-08-06\"}");
Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/stats")
  .post(body)
  .addHeader("content-type", "application/json")
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.post("https://api.recommender.gigalogy.com/v1/stats")
  .header("content-type", "application/json")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .body("{\"start_date\":\"2021-08-05\",\"end_date\":\"2021-08-06\"}")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/stats",
  "method": "POST",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  },
  "processData": false,
  "data": "{\"start_date\":\"2021-08-05\",\"end_date\":\"2021-08-06\"}"
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = JSON.stringify({
  "start_date": "2021-08-05",
  "end_date": "2021-08-06"
});

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("POST", "https://api.recommender.gigalogy.com/v1/stats");
xhr.setRequestHeader("content-type", "application/json");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "POST",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/stats",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.write(JSON.stringify({start_date: '2021-08-05', end_date: '2021-08-06'}));
req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'POST',
  url: 'https://api.recommender.gigalogy.com/v1/stats',
  headers: {
    'content-type': 'application/json',
    'project-key': 'SOME_STRING_VALUE',
    'api-key': 'SOME_STRING_VALUE'
  },
  body: {start_date: '2021-08-05', end_date: '2021-08-06'},
  json: true
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("POST", "https://api.recommender.gigalogy.com/v1/stats");

req.headers({
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.type("json");
req.send({
  "start_date": "2021-08-05",
  "end_date": "2021-08-06"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"application/json",
                           @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };
NSDictionary *parameters = @{ @"start_date": @"2021-08-05",
                              @"end_date": @"2021-08-06" };

NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/stats"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"POST"];
[request setAllHTTPHeaderFields:headers];
[request setHTTPBody:postData];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/stats",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "POST",
  CURLOPT_POSTFIELDS =&gt; "{\"start_date\":\"2021-08-05\",\"end_date\":\"2021-08-06\"}",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "content-type: application/json",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/stats');
$request-&gt;setMethod(HTTP_METH_POST);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$request-&gt;setBody('{"start_date":"2021-08-05","end_date":"2021-08-06"}');

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$body = new http\Message\Body;
$body-&gt;append('{"start_date":"2021-08-05","end_date":"2021-08-06"}');

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/stats');
$request-&gt;setRequestMethod('POST');
$request-&gt;setBody($body);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

payload = "{\"start_date\":\"2021-08-05\",\"end_date\":\"2021-08-06\"}"

headers = {
    'content-type': "application/json",
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("POST", "/v1/stats", payload, headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/stats"

payload = {
    "start_date": "2021-08-05",
    "end_date": "2021-08-06"
}
headers = {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("POST", url, json=payload, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/stats")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Post.new(url)
request["content-type"] = 'application/json'
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'
request.body = "{\"start_date\":\"2021-08-05\",\"end_date\":\"2021-08-06\"}"

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request POST \
  --url https://api.recommender.gigalogy.com/v1/stats \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'content-type: application/json' \
  --header 'project-key: SOME_STRING_VALUE' \
  --data '{"start_date":"2021-08-05","end_date":"2021-08-06"}'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]
let parameters = [
  "start_date": "2021-08-05",
  "end_date": "2021-08-06"
] as [String : Any]

let postData = JSONSerialization.data(withJSONObject: parameters, options: [])

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/stats")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "POST"
request.allHTTPHeaderFields = headers
request.httpBody = postData as Data

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: get/v1/stats/{date}
HTTP Method: Get document from the stats index
Method Description: No description available.
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D");
var request = new RestRequest(Method.GET);
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Get,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D"

	req, _ := http.NewRequest("GET", url, nil)

	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D")
  .get()
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.get("https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D",
  "method": "GET",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = null;

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("GET", "https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "GET",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/stats/%7Bdate%7D",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'GET',
  url: 'https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D',
  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("GET", "https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D");

req.headers({
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"GET"];
[request setAllHTTPHeaderFields:headers];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "GET",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D');
$request-&gt;setMethod(HTTP_METH_GET);

$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D');
$request-&gt;setRequestMethod('GET');
$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

headers = {
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("GET", "/v1/stats/%7Bdate%7D", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D"

headers = {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("GET", url, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request GET \
  --url https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'project-key: SOME_STRING_VALUE'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "GET"
request.allHTTPHeaderFields = headers

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: put/v1/stats/{date}
HTTP Method: Update document in the stats index
Method Description: This endpoint will update the existing document.
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D");
var request = new RestRequest(Method.PUT);
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Put,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D"

	req, _ := http.NewRequest("PUT", url, nil)

	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D")
  .put(null)
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.put("https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D",
  "method": "PUT",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = null;

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("PUT", "https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "PUT",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/stats/%7Bdate%7D",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'PUT',
  url: 'https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D',
  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("PUT", "https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D");

req.headers({
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"PUT"];
[request setAllHTTPHeaderFields:headers];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "PUT",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D');
$request-&gt;setMethod(HTTP_METH_PUT);

$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D');
$request-&gt;setRequestMethod('PUT');
$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

headers = {
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("PUT", "/v1/stats/%7Bdate%7D", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D"

headers = {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("PUT", url, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Put.new(url)
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request PUT \
  --url https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'project-key: SOME_STRING_VALUE'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "PUT"
request.allHTTPHeaderFields = headers

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: delete/v1/stats/{date}
HTTP Method: Delete document in the stats index
Method Description: No description available.
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D");
var request = new RestRequest(Method.DELETE);
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Delete,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D"

	req, _ := http.NewRequest("DELETE", url, nil)

	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D")
  .delete(null)
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.delete("https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D",
  "method": "DELETE",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = null;

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("DELETE", "https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "DELETE",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/stats/%7Bdate%7D",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'DELETE',
  url: 'https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D',
  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("DELETE", "https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D");

req.headers({
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"DELETE"];
[request setAllHTTPHeaderFields:headers];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "DELETE",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D');
$request-&gt;setMethod(HTTP_METH_DELETE);

$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D');
$request-&gt;setRequestMethod('DELETE');
$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

headers = {
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("DELETE", "/v1/stats/%7Bdate%7D", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D"

headers = {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("DELETE", url, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Delete.new(url)
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request DELETE \
  --url https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'project-key: SOME_STRING_VALUE'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "DELETE"
request.allHTTPHeaderFields = headers

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: post/v1/gpt/dataset/train
HTTP Method: Train dataset to produce pre-processed data and embeddings and save it in vector db
Method Description: GPT train for a specific dataset.
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/gpt/dataset/train");
var request = new RestRequest(Method.POST);
request.AddHeader("content-type", "application/x-www-form-urlencoded");
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Post,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/gpt/dataset/train"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/gpt/dataset/train"

	req, _ := http.NewRequest("POST", url, nil)

	req.Header.Add("content-type", "application/x-www-form-urlencoded")
	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/gpt/dataset/train")
  .post(null)
  .addHeader("content-type", "application/x-www-form-urlencoded")
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.post("https://api.recommender.gigalogy.com/v1/gpt/dataset/train")
  .header("content-type", "application/x-www-form-urlencoded")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/gpt/dataset/train",
  "method": "POST",
  "headers": {
    "content-type": "application/x-www-form-urlencoded",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = null;

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("POST", "https://api.recommender.gigalogy.com/v1/gpt/dataset/train");
xhr.setRequestHeader("content-type", "application/x-www-form-urlencoded");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "POST",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/gpt/dataset/train",
  "headers": {
    "content-type": "application/x-www-form-urlencoded",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'POST',
  url: 'https://api.recommender.gigalogy.com/v1/gpt/dataset/train',
  headers: {
    'content-type': 'application/x-www-form-urlencoded',
    'project-key': 'SOME_STRING_VALUE',
    'api-key': 'SOME_STRING_VALUE'
  }
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("POST", "https://api.recommender.gigalogy.com/v1/gpt/dataset/train");

req.headers({
  "content-type": "application/x-www-form-urlencoded",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"application/x-www-form-urlencoded",
                           @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/gpt/dataset/train"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"POST"];
[request setAllHTTPHeaderFields:headers];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/gpt/dataset/train",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "POST",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "content-type: application/x-www-form-urlencoded",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/gpt/dataset/train');
$request-&gt;setMethod(HTTP_METH_POST);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/x-www-form-urlencoded',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/dataset/train');
$request-&gt;setRequestMethod('POST');
$request-&gt;setHeaders([
  'content-type' =&gt; 'application/x-www-form-urlencoded',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

headers = {
    'content-type': "application/x-www-form-urlencoded",
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("POST", "/v1/gpt/dataset/train", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/gpt/dataset/train"

headers = {
    "content-type": "application/x-www-form-urlencoded",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("POST", url, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/gpt/dataset/train")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Post.new(url)
request["content-type"] = 'application/x-www-form-urlencoded'
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request POST \
  --url https://api.recommender.gigalogy.com/v1/gpt/dataset/train \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'content-type: application/x-www-form-urlencoded' \
  --header 'project-key: SOME_STRING_VALUE'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "application/x-www-form-urlencoded",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/gpt/dataset/train")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "POST"
request.allHTTPHeaderFields = headers

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: post/v1/gpt/save
HTTP Method: Upload a CSV file
Method Description: Saves GPT related files
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/gpt/save");
var request = new RestRequest(Method.POST);
request.AddHeader("content-type", "multipart/form-data");
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Post,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/gpt/save"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/gpt/save"

	req, _ := http.NewRequest("POST", url, nil)

	req.Header.Add("content-type", "multipart/form-data")
	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/gpt/save")
  .post(null)
  .addHeader("content-type", "multipart/form-data")
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.post("https://api.recommender.gigalogy.com/v1/gpt/save")
  .header("content-type", "multipart/form-data")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/gpt/save",
  "method": "POST",
  "headers": {
    "content-type": "multipart/form-data",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = null;

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("POST", "https://api.recommender.gigalogy.com/v1/gpt/save");
xhr.setRequestHeader("content-type", "multipart/form-data");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "POST",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/gpt/save",
  "headers": {
    "content-type": "multipart/form-data",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'POST',
  url: 'https://api.recommender.gigalogy.com/v1/gpt/save',
  headers: {
    'content-type': 'multipart/form-data',
    'project-key': 'SOME_STRING_VALUE',
    'api-key': 'SOME_STRING_VALUE'
  }
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("POST", "https://api.recommender.gigalogy.com/v1/gpt/save");

req.headers({
  "content-type": "multipart/form-data",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"multipart/form-data",
                           @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/gpt/save"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"POST"];
[request setAllHTTPHeaderFields:headers];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/gpt/save",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "POST",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "content-type: multipart/form-data",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/gpt/save');
$request-&gt;setMethod(HTTP_METH_POST);

$request-&gt;setHeaders([
  'content-type' =&gt; 'multipart/form-data',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/save');
$request-&gt;setRequestMethod('POST');
$request-&gt;setHeaders([
  'content-type' =&gt; 'multipart/form-data',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

headers = {
    'content-type': "multipart/form-data",
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("POST", "/v1/gpt/save", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/gpt/save"

headers = {
    "content-type": "multipart/form-data",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("POST", url, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/gpt/save")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Post.new(url)
request["content-type"] = 'multipart/form-data'
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request POST \
  --url https://api.recommender.gigalogy.com/v1/gpt/save \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'content-type: multipart/form-data' \
  --header 'project-key: SOME_STRING_VALUE'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "multipart/form-data",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/gpt/save")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "POST"
request.allHTTPHeaderFields = headers

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: post/v1/gpt/ask
HTTP Method: Ask a question and receive an answer
Method Description: Response from GPTFlow
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/gpt/ask");
var request = new RestRequest(Method.POST);
request.AddHeader("content-type", "application/json");
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
request.AddParameter("application/json", "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"query\":\"What is life?\",\"intro\":\"Share a little context about the question\",\"system\":\"You are an expert on ...\",\"model\":\"gpt-3.5-turbo-0613\",\"storage\":\"memory\",\"search_max_token\":2500,\"temperature\":0,\"top_p\":1,\"frequency_penalty\":0,\"presence_penalty\":0,\"stop\":[\"AI:\",\"Human:\"],\"preferred_content\":{\"dataset_id\":\"1234\"}}", ParameterType.RequestBody);
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Post,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/gpt/ask"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
    Content = new StringContent("{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"query\":\"What is life?\",\"intro\":\"Share a little context about the question\",\"system\":\"You are an expert on ...\",\"model\":\"gpt-3.5-turbo-0613\",\"storage\":\"memory\",\"search_max_token\":2500,\"temperature\":0,\"top_p\":1,\"frequency_penalty\":0,\"presence_penalty\":0,\"stop\":[\"AI:\",\"Human:\"],\"preferred_content\":{\"dataset_id\":\"1234\"}}")
    {
        Headers =
        {
            ContentType = new MediaTypeHeaderValue("application/json")
        }
    }
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"strings"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/gpt/ask"

	payload := strings.NewReader("{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"query\":\"What is life?\",\"intro\":\"Share a little context about the question\",\"system\":\"You are an expert on ...\",\"model\":\"gpt-3.5-turbo-0613\",\"storage\":\"memory\",\"search_max_token\":2500,\"temperature\":0,\"top_p\":1,\"frequency_penalty\":0,\"presence_penalty\":0,\"stop\":[\"AI:\",\"Human:\"],\"preferred_content\":{\"dataset_id\":\"1234\"}}")

	req, _ := http.NewRequest("POST", url, payload)

	req.Header.Add("content-type", "application/json")
	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

MediaType mediaType = MediaType.parse("application/json");
RequestBody body = RequestBody.create(mediaType, "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"query\":\"What is life?\",\"intro\":\"Share a little context about the question\",\"system\":\"You are an expert on ...\",\"model\":\"gpt-3.5-turbo-0613\",\"storage\":\"memory\",\"search_max_token\":2500,\"temperature\":0,\"top_p\":1,\"frequency_penalty\":0,\"presence_penalty\":0,\"stop\":[\"AI:\",\"Human:\"],\"preferred_content\":{\"dataset_id\":\"1234\"}}");
Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/gpt/ask")
  .post(body)
  .addHeader("content-type", "application/json")
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.post("https://api.recommender.gigalogy.com/v1/gpt/ask")
  .header("content-type", "application/json")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .body("{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"query\":\"What is life?\",\"intro\":\"Share a little context about the question\",\"system\":\"You are an expert on ...\",\"model\":\"gpt-3.5-turbo-0613\",\"storage\":\"memory\",\"search_max_token\":2500,\"temperature\":0,\"top_p\":1,\"frequency_penalty\":0,\"presence_penalty\":0,\"stop\":[\"AI:\",\"Human:\"],\"preferred_content\":{\"dataset_id\":\"1234\"}}")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/gpt/ask",
  "method": "POST",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  },
  "processData": false,
  "data": "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"query\":\"What is life?\",\"intro\":\"Share a little context about the question\",\"system\":\"You are an expert on ...\",\"model\":\"gpt-3.5-turbo-0613\",\"storage\":\"memory\",\"search_max_token\":2500,\"temperature\":0,\"top_p\":1,\"frequency_penalty\":0,\"presence_penalty\":0,\"stop\":[\"AI:\",\"Human:\"],\"preferred_content\":{\"dataset_id\":\"1234\"}}"
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = JSON.stringify({
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "query": "What is life?",
  "intro": "Share a little context about the question",
  "system": "You are an expert on ...",
  "model": "gpt-3.5-turbo-0613",
  "storage": "memory",
  "search_max_token": 2500,
  "temperature": 0,
  "top_p": 1,
  "frequency_penalty": 0,
  "presence_penalty": 0,
  "stop": [
    "AI:",
    "Human:"
  ],
  "preferred_content": {
    "dataset_id": "1234"
  }
});

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("POST", "https://api.recommender.gigalogy.com/v1/gpt/ask");
xhr.setRequestHeader("content-type", "application/json");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "POST",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/gpt/ask",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.write(JSON.stringify({
  user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',
  member_id: 'df3456tg-2909-459b-be55-62196afedf85',
  query: 'What is life?',
  intro: 'Share a little context about the question',
  system: 'You are an expert on ...',
  model: 'gpt-3.5-turbo-0613',
  storage: 'memory',
  search_max_token: 2500,
  temperature: 0,
  top_p: 1,
  frequency_penalty: 0,
  presence_penalty: 0,
  stop: ['AI:', 'Human:'],
  preferred_content: {dataset_id: '1234'}
}));
req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'POST',
  url: 'https://api.recommender.gigalogy.com/v1/gpt/ask',
  headers: {
    'content-type': 'application/json',
    'project-key': 'SOME_STRING_VALUE',
    'api-key': 'SOME_STRING_VALUE'
  },
  body: {
    user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',
    member_id: 'df3456tg-2909-459b-be55-62196afedf85',
    query: 'What is life?',
    intro: 'Share a little context about the question',
    system: 'You are an expert on ...',
    model: 'gpt-3.5-turbo-0613',
    storage: 'memory',
    search_max_token: 2500,
    temperature: 0,
    top_p: 1,
    frequency_penalty: 0,
    presence_penalty: 0,
    stop: ['AI:', 'Human:'],
    preferred_content: {dataset_id: '1234'}
  },
  json: true
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("POST", "https://api.recommender.gigalogy.com/v1/gpt/ask");

req.headers({
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.type("json");
req.send({
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "query": "What is life?",
  "intro": "Share a little context about the question",
  "system": "You are an expert on ...",
  "model": "gpt-3.5-turbo-0613",
  "storage": "memory",
  "search_max_token": 2500,
  "temperature": 0,
  "top_p": 1,
  "frequency_penalty": 0,
  "presence_penalty": 0,
  "stop": [
    "AI:",
    "Human:"
  ],
  "preferred_content": {
    "dataset_id": "1234"
  }
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"application/json",
                           @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };
NSDictionary *parameters = @{ @"user_id": @"a0cc6beb-2909-459b-be55-62196af78ce4",
                              @"member_id": @"df3456tg-2909-459b-be55-62196afedf85",
                              @"query": @"What is life?",
                              @"intro": @"Share a little context about the question",
                              @"system": @"You are an expert on ...",
                              @"model": @"gpt-3.5-turbo-0613",
                              @"storage": @"memory",
                              @"search_max_token": @2500,
                              @"temperature": @0,
                              @"top_p": @1,
                              @"frequency_penalty": @0,
                              @"presence_penalty": @0,
                              @"stop": @[ @"AI:", @"Human:" ],
                              @"preferred_content": @{ @"dataset_id": @"1234" } };

NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/gpt/ask"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"POST"];
[request setAllHTTPHeaderFields:headers];
[request setHTTPBody:postData];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/gpt/ask",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "POST",
  CURLOPT_POSTFIELDS =&gt; "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"query\":\"What is life?\",\"intro\":\"Share a little context about the question\",\"system\":\"You are an expert on ...\",\"model\":\"gpt-3.5-turbo-0613\",\"storage\":\"memory\",\"search_max_token\":2500,\"temperature\":0,\"top_p\":1,\"frequency_penalty\":0,\"presence_penalty\":0,\"stop\":[\"AI:\",\"Human:\"],\"preferred_content\":{\"dataset_id\":\"1234\"}}",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "content-type: application/json",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/gpt/ask');
$request-&gt;setMethod(HTTP_METH_POST);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$request-&gt;setBody('{"user_id":"a0cc6beb-2909-459b-be55-62196af78ce4","member_id":"df3456tg-2909-459b-be55-62196afedf85","query":"What is life?","intro":"Share a little context about the question","system":"You are an expert on ...","model":"gpt-3.5-turbo-0613","storage":"memory","search_max_token":2500,"temperature":0,"top_p":1,"frequency_penalty":0,"presence_penalty":0,"stop":["AI:","Human:"],"preferred_content":{"dataset_id":"1234"}}');

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$body = new http\Message\Body;
$body-&gt;append('{"user_id":"a0cc6beb-2909-459b-be55-62196af78ce4","member_id":"df3456tg-2909-459b-be55-62196afedf85","query":"What is life?","intro":"Share a little context about the question","system":"You are an expert on ...","model":"gpt-3.5-turbo-0613","storage":"memory","search_max_token":2500,"temperature":0,"top_p":1,"frequency_penalty":0,"presence_penalty":0,"stop":["AI:","Human:"],"preferred_content":{"dataset_id":"1234"}}');

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/ask');
$request-&gt;setRequestMethod('POST');
$request-&gt;setBody($body);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

payload = "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"query\":\"What is life?\",\"intro\":\"Share a little context about the question\",\"system\":\"You are an expert on ...\",\"model\":\"gpt-3.5-turbo-0613\",\"storage\":\"memory\",\"search_max_token\":2500,\"temperature\":0,\"top_p\":1,\"frequency_penalty\":0,\"presence_penalty\":0,\"stop\":[\"AI:\",\"Human:\"],\"preferred_content\":{\"dataset_id\":\"1234\"}}"

headers = {
    'content-type': "application/json",
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("POST", "/v1/gpt/ask", payload, headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/gpt/ask"

payload = {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "query": "What is life?",
    "intro": "Share a little context about the question",
    "system": "You are an expert on ...",
    "model": "gpt-3.5-turbo-0613",
    "storage": "memory",
    "search_max_token": 2500,
    "temperature": 0,
    "top_p": 1,
    "frequency_penalty": 0,
    "presence_penalty": 0,
    "stop": ["AI:", "Human:"],
    "preferred_content": {"dataset_id": "1234"}
}
headers = {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("POST", url, json=payload, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/gpt/ask")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Post.new(url)
request["content-type"] = 'application/json'
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'
request.body = "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"query\":\"What is life?\",\"intro\":\"Share a little context about the question\",\"system\":\"You are an expert on ...\",\"model\":\"gpt-3.5-turbo-0613\",\"storage\":\"memory\",\"search_max_token\":2500,\"temperature\":0,\"top_p\":1,\"frequency_penalty\":0,\"presence_penalty\":0,\"stop\":[\"AI:\",\"Human:\"],\"preferred_content\":{\"dataset_id\":\"1234\"}}"

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request POST \
  --url https://api.recommender.gigalogy.com/v1/gpt/ask \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'content-type: application/json' \
  --header 'project-key: SOME_STRING_VALUE' \
  --data '{"user_id":"a0cc6beb-2909-459b-be55-62196af78ce4","member_id":"df3456tg-2909-459b-be55-62196afedf85","query":"What is life?","intro":"Share a little context about the question","system":"You are an expert on ...","model":"gpt-3.5-turbo-0613","storage":"memory","search_max_token":2500,"temperature":0,"top_p":1,"frequency_penalty":0,"presence_penalty":0,"stop":["AI:","Human:"],"preferred_content":{"dataset_id":"1234"}}'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]
let parameters = [
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "query": "What is life?",
  "intro": "Share a little context about the question",
  "system": "You are an expert on ...",
  "model": "gpt-3.5-turbo-0613",
  "storage": "memory",
  "search_max_token": 2500,
  "temperature": 0,
  "top_p": 1,
  "frequency_penalty": 0,
  "presence_penalty": 0,
  "stop": ["AI:", "Human:"],
  "preferred_content": ["dataset_id": "1234"]
] as [String : Any]

let postData = JSONSerialization.data(withJSONObject: parameters, options: [])

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/gpt/ask")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "POST"
request.allHTTPHeaderFields = headers
request.httpBody = postData as Data

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: post/v1/gpt/ask/vision
HTTP Method: Ask GPT with Image
Method Description: This endpoint generates search results based on image similarity and your query.

### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| image | str($bin) | file | Represents the image file used to search/ask. Supports webp, jpeg, jpg, and png formats. |
| query | str | str | Query to ask to gpt |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/gpt/ask/vision");
var request = new RestRequest(Method.POST);
request.AddHeader("content-type", "multipart/form-data");
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Post,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/gpt/ask/vision"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/gpt/ask/vision"

	req, _ := http.NewRequest("POST", url, nil)

	req.Header.Add("content-type", "multipart/form-data")
	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/gpt/ask/vision")
  .post(null)
  .addHeader("content-type", "multipart/form-data")
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.post("https://api.recommender.gigalogy.com/v1/gpt/ask/vision")
  .header("content-type", "multipart/form-data")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/gpt/ask/vision",
  "method": "POST",
  "headers": {
    "content-type": "multipart/form-data",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = null;

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("POST", "https://api.recommender.gigalogy.com/v1/gpt/ask/vision");
xhr.setRequestHeader("content-type", "multipart/form-data");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "POST",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/gpt/ask/vision",
  "headers": {
    "content-type": "multipart/form-data",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'POST',
  url: 'https://api.recommender.gigalogy.com/v1/gpt/ask/vision',
  headers: {
    'content-type': 'multipart/form-data',
    'project-key': 'SOME_STRING_VALUE',
    'api-key': 'SOME_STRING_VALUE'
  }
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("POST", "https://api.recommender.gigalogy.com/v1/gpt/ask/vision");

req.headers({
  "content-type": "multipart/form-data",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"multipart/form-data",
                           @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/gpt/ask/vision"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"POST"];
[request setAllHTTPHeaderFields:headers];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/gpt/ask/vision",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "POST",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "content-type: multipart/form-data",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/gpt/ask/vision');
$request-&gt;setMethod(HTTP_METH_POST);

$request-&gt;setHeaders([
  'content-type' =&gt; 'multipart/form-data',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/ask/vision');
$request-&gt;setRequestMethod('POST');
$request-&gt;setHeaders([
  'content-type' =&gt; 'multipart/form-data',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

headers = {
    'content-type': "multipart/form-data",
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("POST", "/v1/gpt/ask/vision", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/gpt/ask/vision"

headers = {
    "content-type": "multipart/form-data",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("POST", url, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/gpt/ask/vision")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Post.new(url)
request["content-type"] = 'multipart/form-data'
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request POST \
  --url https://api.recommender.gigalogy.com/v1/gpt/ask/vision \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'content-type: multipart/form-data' \
  --header 'project-key: SOME_STRING_VALUE'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "multipart/form-data",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/gpt/ask/vision")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "POST"
request.allHTTPHeaderFields = headers

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: post/v1/items/search
HTTP Method: Advance search with gpt models
Method Description: Search using GPT models
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/items/search");
var request = new RestRequest(Method.POST);
request.AddHeader("content-type", "application/json");
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
request.AddParameter("application/json", "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"message\":\"What is life?\",\"type\":\"individual\",\"search_size\":1000,\"start\":0,\"size\":10,\"price_lower\":1,\"price_upper\":10000,\"categories\":[\"category1\",\"category2\"],\"flags\":{\"flag1\":true,\"flag2\":false},\"sort\":{\"column_name\":\"asc / desc\"},\"storage\":\"memory\",\"dynamic_filtering\":[\"column1\",\"column2\"],\"is_keyword_enabled\":true,\"details\":false}", ParameterType.RequestBody);
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Post,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/items/search"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
    Content = new StringContent("{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"message\":\"What is life?\",\"type\":\"individual\",\"search_size\":1000,\"start\":0,\"size\":10,\"price_lower\":1,\"price_upper\":10000,\"categories\":[\"category1\",\"category2\"],\"flags\":{\"flag1\":true,\"flag2\":false},\"sort\":{\"column_name\":\"asc / desc\"},\"storage\":\"memory\",\"dynamic_filtering\":[\"column1\",\"column2\"],\"is_keyword_enabled\":true,\"details\":false}")
    {
        Headers =
        {
            ContentType = new MediaTypeHeaderValue("application/json")
        }
    }
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"strings"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/items/search"

	payload := strings.NewReader("{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"message\":\"What is life?\",\"type\":\"individual\",\"search_size\":1000,\"start\":0,\"size\":10,\"price_lower\":1,\"price_upper\":10000,\"categories\":[\"category1\",\"category2\"],\"flags\":{\"flag1\":true,\"flag2\":false},\"sort\":{\"column_name\":\"asc / desc\"},\"storage\":\"memory\",\"dynamic_filtering\":[\"column1\",\"column2\"],\"is_keyword_enabled\":true,\"details\":false}")

	req, _ := http.NewRequest("POST", url, payload)

	req.Header.Add("content-type", "application/json")
	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

MediaType mediaType = MediaType.parse("application/json");
RequestBody body = RequestBody.create(mediaType, "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"message\":\"What is life?\",\"type\":\"individual\",\"search_size\":1000,\"start\":0,\"size\":10,\"price_lower\":1,\"price_upper\":10000,\"categories\":[\"category1\",\"category2\"],\"flags\":{\"flag1\":true,\"flag2\":false},\"sort\":{\"column_name\":\"asc / desc\"},\"storage\":\"memory\",\"dynamic_filtering\":[\"column1\",\"column2\"],\"is_keyword_enabled\":true,\"details\":false}");
Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/items/search")
  .post(body)
  .addHeader("content-type", "application/json")
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.post("https://api.recommender.gigalogy.com/v1/items/search")
  .header("content-type", "application/json")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .body("{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"message\":\"What is life?\",\"type\":\"individual\",\"search_size\":1000,\"start\":0,\"size\":10,\"price_lower\":1,\"price_upper\":10000,\"categories\":[\"category1\",\"category2\"],\"flags\":{\"flag1\":true,\"flag2\":false},\"sort\":{\"column_name\":\"asc / desc\"},\"storage\":\"memory\",\"dynamic_filtering\":[\"column1\",\"column2\"],\"is_keyword_enabled\":true,\"details\":false}")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/items/search",
  "method": "POST",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  },
  "processData": false,
  "data": "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"message\":\"What is life?\",\"type\":\"individual\",\"search_size\":1000,\"start\":0,\"size\":10,\"price_lower\":1,\"price_upper\":10000,\"categories\":[\"category1\",\"category2\"],\"flags\":{\"flag1\":true,\"flag2\":false},\"sort\":{\"column_name\":\"asc / desc\"},\"storage\":\"memory\",\"dynamic_filtering\":[\"column1\",\"column2\"],\"is_keyword_enabled\":true,\"details\":false}"
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = JSON.stringify({
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "message": "What is life?",
  "type": "individual",
  "search_size": 1000,
  "start": 0,
  "size": 10,
  "price_lower": 1,
  "price_upper": 10000,
  "categories": [
    "category1",
    "category2"
  ],
  "flags": {
    "flag1": true,
    "flag2": false
  },
  "sort": {
    "column_name": "asc / desc"
  },
  "storage": "memory",
  "dynamic_filtering": [
    "column1",
    "column2"
  ],
  "is_keyword_enabled": true,
  "details": false
});

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("POST", "https://api.recommender.gigalogy.com/v1/items/search");
xhr.setRequestHeader("content-type", "application/json");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "POST",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/items/search",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.write(JSON.stringify({
  user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',
  member_id: 'df3456tg-2909-459b-be55-62196afedf85',
  message: 'What is life?',
  type: 'individual',
  search_size: 1000,
  start: 0,
  size: 10,
  price_lower: 1,
  price_upper: 10000,
  categories: ['category1', 'category2'],
  flags: {flag1: true, flag2: false},
  sort: {column_name: 'asc / desc'},
  storage: 'memory',
  dynamic_filtering: ['column1', 'column2'],
  is_keyword_enabled: true,
  details: false
}));
req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'POST',
  url: 'https://api.recommender.gigalogy.com/v1/items/search',
  headers: {
    'content-type': 'application/json',
    'project-key': 'SOME_STRING_VALUE',
    'api-key': 'SOME_STRING_VALUE'
  },
  body: {
    user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',
    member_id: 'df3456tg-2909-459b-be55-62196afedf85',
    message: 'What is life?',
    type: 'individual',
    search_size: 1000,
    start: 0,
    size: 10,
    price_lower: 1,
    price_upper: 10000,
    categories: ['category1', 'category2'],
    flags: {flag1: true, flag2: false},
    sort: {column_name: 'asc / desc'},
    storage: 'memory',
    dynamic_filtering: ['column1', 'column2'],
    is_keyword_enabled: true,
    details: false
  },
  json: true
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("POST", "https://api.recommender.gigalogy.com/v1/items/search");

req.headers({
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.type("json");
req.send({
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "message": "What is life?",
  "type": "individual",
  "search_size": 1000,
  "start": 0,
  "size": 10,
  "price_lower": 1,
  "price_upper": 10000,
  "categories": [
    "category1",
    "category2"
  ],
  "flags": {
    "flag1": true,
    "flag2": false
  },
  "sort": {
    "column_name": "asc / desc"
  },
  "storage": "memory",
  "dynamic_filtering": [
    "column1",
    "column2"
  ],
  "is_keyword_enabled": true,
  "details": false
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"application/json",
                           @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };
NSDictionary *parameters = @{ @"user_id": @"a0cc6beb-2909-459b-be55-62196af78ce4",
                              @"member_id": @"df3456tg-2909-459b-be55-62196afedf85",
                              @"message": @"What is life?",
                              @"type": @"individual",
                              @"search_size": @1000,
                              @"start": @0,
                              @"size": @10,
                              @"price_lower": @1,
                              @"price_upper": @10000,
                              @"categories": @[ @"category1", @"category2" ],
                              @"flags": @{ @"flag1": @YES, @"flag2": @NO },
                              @"sort": @{ @"column_name": @"asc / desc" },
                              @"storage": @"memory",
                              @"dynamic_filtering": @[ @"column1", @"column2" ],
                              @"is_keyword_enabled": @YES,
                              @"details": @NO };

NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/items/search"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"POST"];
[request setAllHTTPHeaderFields:headers];
[request setHTTPBody:postData];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/items/search",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "POST",
  CURLOPT_POSTFIELDS =&gt; "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"message\":\"What is life?\",\"type\":\"individual\",\"search_size\":1000,\"start\":0,\"size\":10,\"price_lower\":1,\"price_upper\":10000,\"categories\":[\"category1\",\"category2\"],\"flags\":{\"flag1\":true,\"flag2\":false},\"sort\":{\"column_name\":\"asc / desc\"},\"storage\":\"memory\",\"dynamic_filtering\":[\"column1\",\"column2\"],\"is_keyword_enabled\":true,\"details\":false}",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "content-type: application/json",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/items/search');
$request-&gt;setMethod(HTTP_METH_POST);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$request-&gt;setBody('{"user_id":"a0cc6beb-2909-459b-be55-62196af78ce4","member_id":"df3456tg-2909-459b-be55-62196afedf85","message":"What is life?","type":"individual","search_size":1000,"start":0,"size":10,"price_lower":1,"price_upper":10000,"categories":["category1","category2"],"flags":{"flag1":true,"flag2":false},"sort":{"column_name":"asc / desc"},"storage":"memory","dynamic_filtering":["column1","column2"],"is_keyword_enabled":true,"details":false}');

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$body = new http\Message\Body;
$body-&gt;append('{"user_id":"a0cc6beb-2909-459b-be55-62196af78ce4","member_id":"df3456tg-2909-459b-be55-62196afedf85","message":"What is life?","type":"individual","search_size":1000,"start":0,"size":10,"price_lower":1,"price_upper":10000,"categories":["category1","category2"],"flags":{"flag1":true,"flag2":false},"sort":{"column_name":"asc / desc"},"storage":"memory","dynamic_filtering":["column1","column2"],"is_keyword_enabled":true,"details":false}');

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/items/search');
$request-&gt;setRequestMethod('POST');
$request-&gt;setBody($body);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

payload = "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"message\":\"What is life?\",\"type\":\"individual\",\"search_size\":1000,\"start\":0,\"size\":10,\"price_lower\":1,\"price_upper\":10000,\"categories\":[\"category1\",\"category2\"],\"flags\":{\"flag1\":true,\"flag2\":false},\"sort\":{\"column_name\":\"asc / desc\"},\"storage\":\"memory\",\"dynamic_filtering\":[\"column1\",\"column2\"],\"is_keyword_enabled\":true,\"details\":false}"

headers = {
    'content-type': "application/json",
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("POST", "/v1/items/search", payload, headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/items/search"

payload = {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "message": "What is life?",
    "type": "individual",
    "search_size": 1000,
    "start": 0,
    "size": 10,
    "price_lower": 1,
    "price_upper": 10000,
    "categories": ["category1", "category2"],
    "flags": {
        "flag1": True,
        "flag2": False
    },
    "sort": {"column_name": "asc / desc"},
    "storage": "memory",
    "dynamic_filtering": ["column1", "column2"],
    "is_keyword_enabled": True,
    "details": False
}
headers = {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("POST", url, json=payload, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/items/search")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Post.new(url)
request["content-type"] = 'application/json'
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'
request.body = "{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"message\":\"What is life?\",\"type\":\"individual\",\"search_size\":1000,\"start\":0,\"size\":10,\"price_lower\":1,\"price_upper\":10000,\"categories\":[\"category1\",\"category2\"],\"flags\":{\"flag1\":true,\"flag2\":false},\"sort\":{\"column_name\":\"asc / desc\"},\"storage\":\"memory\",\"dynamic_filtering\":[\"column1\",\"column2\"],\"is_keyword_enabled\":true,\"details\":false}"

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request POST \
  --url https://api.recommender.gigalogy.com/v1/items/search \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'content-type: application/json' \
  --header 'project-key: SOME_STRING_VALUE' \
  --data '{"user_id":"a0cc6beb-2909-459b-be55-62196af78ce4","member_id":"df3456tg-2909-459b-be55-62196afedf85","message":"What is life?","type":"individual","search_size":1000,"start":0,"size":10,"price_lower":1,"price_upper":10000,"categories":["category1","category2"],"flags":{"flag1":true,"flag2":false},"sort":{"column_name":"asc / desc"},"storage":"memory","dynamic_filtering":["column1","column2"],"is_keyword_enabled":true,"details":false}'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]
let parameters = [
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "message": "What is life?",
  "type": "individual",
  "search_size": 1000,
  "start": 0,
  "size": 10,
  "price_lower": 1,
  "price_upper": 10000,
  "categories": ["category1", "category2"],
  "flags": [
    "flag1": true,
    "flag2": false
  ],
  "sort": ["column_name": "asc / desc"],
  "storage": "memory",
  "dynamic_filtering": ["column1", "column2"],
  "is_keyword_enabled": true,
  "details": false
] as [String : Any]

let postData = JSONSerialization.data(withJSONObject: parameters, options: [])

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/items/search")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "POST"
request.allHTTPHeaderFields = headers
request.httpBody = postData as Data

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: get/v1/gpt/train
HTTP Method: Train with pre-processed data and embeddings and save it in vector db
Method Description: GPT train
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/gpt/train");
var request = new RestRequest(Method.GET);
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Get,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/gpt/train"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/gpt/train"

	req, _ := http.NewRequest("GET", url, nil)

	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/gpt/train")
  .get()
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.get("https://api.recommender.gigalogy.com/v1/gpt/train")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/gpt/train",
  "method": "GET",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = null;

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("GET", "https://api.recommender.gigalogy.com/v1/gpt/train");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "GET",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/gpt/train",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'GET',
  url: 'https://api.recommender.gigalogy.com/v1/gpt/train',
  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("GET", "https://api.recommender.gigalogy.com/v1/gpt/train");

req.headers({
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/gpt/train"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"GET"];
[request setAllHTTPHeaderFields:headers];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/gpt/train",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "GET",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/gpt/train');
$request-&gt;setMethod(HTTP_METH_GET);

$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/train');
$request-&gt;setRequestMethod('GET');
$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

headers = {
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("GET", "/v1/gpt/train", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/gpt/train"

headers = {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("GET", url, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/gpt/train")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request GET \
  --url https://api.recommender.gigalogy.com/v1/gpt/train \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'project-key: SOME_STRING_VALUE'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/gpt/train")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "GET"
request.allHTTPHeaderFields = headers

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: get/v1/gpt/conversations/{conversation_id}
HTTP Method: Get details of a conversation
Method Description: Get details of a GPT conversation.

### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| conversation_id | str | str | The ID of the conversation to retrieve. (Required) |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/gpt/conversations/%7Bconversation_id%7D");
var request = new RestRequest(Method.GET);
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Get,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/gpt/conversations/%7Bconversation_id%7D"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/gpt/conversations/%7Bconversation_id%7D"

	req, _ := http.NewRequest("GET", url, nil)

	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/gpt/conversations/%7Bconversation_id%7D")
  .get()
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.get("https://api.recommender.gigalogy.com/v1/gpt/conversations/%7Bconversation_id%7D")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/gpt/conversations/%7Bconversation_id%7D",
  "method": "GET",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = null;

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("GET", "https://api.recommender.gigalogy.com/v1/gpt/conversations/%7Bconversation_id%7D");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "GET",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/gpt/conversations/%7Bconversation_id%7D",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'GET',
  url: 'https://api.recommender.gigalogy.com/v1/gpt/conversations/%7Bconversation_id%7D',
  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("GET", "https://api.recommender.gigalogy.com/v1/gpt/conversations/%7Bconversation_id%7D");

req.headers({
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/gpt/conversations/%7Bconversation_id%7D"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"GET"];
[request setAllHTTPHeaderFields:headers];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/gpt/conversations/%7Bconversation_id%7D",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "GET",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/gpt/conversations/%7Bconversation_id%7D');
$request-&gt;setMethod(HTTP_METH_GET);

$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/conversations/%7Bconversation_id%7D');
$request-&gt;setRequestMethod('GET');
$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

headers = {
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("GET", "/v1/gpt/conversations/%7Bconversation_id%7D", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/gpt/conversations/%7Bconversation_id%7D"

headers = {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("GET", url, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/gpt/conversations/%7Bconversation_id%7D")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request GET \
  --url https://api.recommender.gigalogy.com/v1/gpt/conversations/%7Bconversation_id%7D \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'project-key: SOME_STRING_VALUE'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/gpt/conversations/%7Bconversation_id%7D")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "GET"
request.allHTTPHeaderFields = headers

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: get/v1/gpt/conversations
HTTP Method: Get gpt conversations of the project
Method Description: Provides a list of conversations. It takes to optional parameter: start_date and end_date to indicate the range of conversations. 
By default it assumes a delta of 7 days.

### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| start_date | Optional[str] | str | Initial date of the conversation date range. |
| end_date |Optional[str] | str | End date of the conversation date range. |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/gpt/conversations?start_date=SOME_STRING_VALUE&amp;end_date=SOME_STRING_VALUE");
var request = new RestRequest(Method.GET);
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Get,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/gpt/conversations?start_date=SOME_STRING_VALUE&amp;end_date=SOME_STRING_VALUE"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/gpt/conversations?start_date=SOME_STRING_VALUE&amp;end_date=SOME_STRING_VALUE"

	req, _ := http.NewRequest("GET", url, nil)

	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/gpt/conversations?start_date=SOME_STRING_VALUE&amp;end_date=SOME_STRING_VALUE")
  .get()
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.get("https://api.recommender.gigalogy.com/v1/gpt/conversations?start_date=SOME_STRING_VALUE&amp;end_date=SOME_STRING_VALUE")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/gpt/conversations?start_date=SOME_STRING_VALUE&amp;end_date=SOME_STRING_VALUE",
  "method": "GET",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = null;

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("GET", "https://api.recommender.gigalogy.com/v1/gpt/conversations?start_date=SOME_STRING_VALUE&amp;end_date=SOME_STRING_VALUE");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "GET",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/gpt/conversations?start_date=SOME_STRING_VALUE&amp;end_date=SOME_STRING_VALUE",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'GET',
  url: 'https://api.recommender.gigalogy.com/v1/gpt/conversations',
  qs: {start_date: 'SOME_STRING_VALUE', end_date: 'SOME_STRING_VALUE'},
  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("GET", "https://api.recommender.gigalogy.com/v1/gpt/conversations");

req.query({
  "start_date": "SOME_STRING_VALUE",
  "end_date": "SOME_STRING_VALUE"
});

req.headers({
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/gpt/conversations?start_date=SOME_STRING_VALUE&amp;end_date=SOME_STRING_VALUE"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"GET"];
[request setAllHTTPHeaderFields:headers];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/gpt/conversations?start_date=SOME_STRING_VALUE&amp;end_date=SOME_STRING_VALUE",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "GET",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/gpt/conversations');
$request-&gt;setMethod(HTTP_METH_GET);

$request-&gt;setQueryData([
  'start_date' =&gt; 'SOME_STRING_VALUE',
  'end_date' =&gt; 'SOME_STRING_VALUE'
]);

$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/conversations');
$request-&gt;setRequestMethod('GET');
$request-&gt;setQuery(new http\QueryString([
  'start_date' =&gt; 'SOME_STRING_VALUE',
  'end_date' =&gt; 'SOME_STRING_VALUE'
]));

$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

headers = {
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("GET", "/v1/gpt/conversations?start_date=SOME_STRING_VALUE&amp;end_date=SOME_STRING_VALUE", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/gpt/conversations"

querystring = {"start_date":"SOME_STRING_VALUE","end_date":"SOME_STRING_VALUE"}

headers = {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("GET", url, headers=headers, params=querystring)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/gpt/conversations?start_date=SOME_STRING_VALUE&amp;end_date=SOME_STRING_VALUE")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request GET \
  --url 'https://api.recommender.gigalogy.com/v1/gpt/conversations?start_date=SOME_STRING_VALUE&amp;end_date=SOME_STRING_VALUE' \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'project-key: SOME_STRING_VALUE'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/gpt/conversations?start_date=SOME_STRING_VALUE&amp;end_date=SOME_STRING_VALUE")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "GET"
request.allHTTPHeaderFields = headers

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: put/v1/gpt/conversations
HTTP Method: Send your feedback for a received answer
Method Description: Feedback for GPTFlow response

### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| conversation_id | str | str | ID of the conversation to provide feedback for. |
| message | optional[str] | str | Feedback message describing the user's experience of the GPT response. |
| type | str | str | Type of feedback (e.g., positive, negative). |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/gpt/conversations");
var request = new RestRequest(Method.PUT);
request.AddHeader("content-type", "application/json");
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
request.AddParameter("application/json", "{\"conversation_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"message\":\"Tell us your experience of the GPT response\",\"type\":\"positive\"}", ParameterType.RequestBody);
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Put,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/gpt/conversations"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
    Content = new StringContent("{\"conversation_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"message\":\"Tell us your experience of the GPT response\",\"type\":\"positive\"}")
    {
        Headers =
        {
            ContentType = new MediaTypeHeaderValue("application/json")
        }
    }
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"strings"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/gpt/conversations"

	payload := strings.NewReader("{\"conversation_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"message\":\"Tell us your experience of the GPT response\",\"type\":\"positive\"}")

	req, _ := http.NewRequest("PUT", url, payload)

	req.Header.Add("content-type", "application/json")
	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

MediaType mediaType = MediaType.parse("application/json");
RequestBody body = RequestBody.create(mediaType, "{\"conversation_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"message\":\"Tell us your experience of the GPT response\",\"type\":\"positive\"}");
Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/gpt/conversations")
  .put(body)
  .addHeader("content-type", "application/json")
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.put("https://api.recommender.gigalogy.com/v1/gpt/conversations")
  .header("content-type", "application/json")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .body("{\"conversation_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"message\":\"Tell us your experience of the GPT response\",\"type\":\"positive\"}")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/gpt/conversations",
  "method": "PUT",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  },
  "processData": false,
  "data": "{\"conversation_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"message\":\"Tell us your experience of the GPT response\",\"type\":\"positive\"}"
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = JSON.stringify({
  "conversation_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "message": "Tell us your experience of the GPT response",
  "type": "positive"
});

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("PUT", "https://api.recommender.gigalogy.com/v1/gpt/conversations");
xhr.setRequestHeader("content-type", "application/json");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "PUT",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/gpt/conversations",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.write(JSON.stringify({
  conversation_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',
  message: 'Tell us your experience of the GPT response',
  type: 'positive'
}));
req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'PUT',
  url: 'https://api.recommender.gigalogy.com/v1/gpt/conversations',
  headers: {
    'content-type': 'application/json',
    'project-key': 'SOME_STRING_VALUE',
    'api-key': 'SOME_STRING_VALUE'
  },
  body: {
    conversation_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',
    message: 'Tell us your experience of the GPT response',
    type: 'positive'
  },
  json: true
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("PUT", "https://api.recommender.gigalogy.com/v1/gpt/conversations");

req.headers({
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.type("json");
req.send({
  "conversation_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "message": "Tell us your experience of the GPT response",
  "type": "positive"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"application/json",
                           @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };
NSDictionary *parameters = @{ @"conversation_id": @"a0cc6beb-2909-459b-be55-62196af78ce4",
                              @"message": @"Tell us your experience of the GPT response",
                              @"type": @"positive" };

NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/gpt/conversations"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"PUT"];
[request setAllHTTPHeaderFields:headers];
[request setHTTPBody:postData];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/gpt/conversations",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "PUT",
  CURLOPT_POSTFIELDS =&gt; "{\"conversation_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"message\":\"Tell us your experience of the GPT response\",\"type\":\"positive\"}",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "content-type: application/json",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/gpt/conversations');
$request-&gt;setMethod(HTTP_METH_PUT);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$request-&gt;setBody('{"conversation_id":"a0cc6beb-2909-459b-be55-62196af78ce4","message":"Tell us your experience of the GPT response","type":"positive"}');

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$body = new http\Message\Body;
$body-&gt;append('{"conversation_id":"a0cc6beb-2909-459b-be55-62196af78ce4","message":"Tell us your experience of the GPT response","type":"positive"}');

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/conversations');
$request-&gt;setRequestMethod('PUT');
$request-&gt;setBody($body);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

payload = "{\"conversation_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"message\":\"Tell us your experience of the GPT response\",\"type\":\"positive\"}"

headers = {
    'content-type': "application/json",
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("PUT", "/v1/gpt/conversations", payload, headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/gpt/conversations"

payload = {
    "conversation_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "message": "Tell us your experience of the GPT response",
    "type": "positive"
}
headers = {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("PUT", url, json=payload, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/gpt/conversations")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Put.new(url)
request["content-type"] = 'application/json'
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'
request.body = "{\"conversation_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"message\":\"Tell us your experience of the GPT response\",\"type\":\"positive\"}"

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request PUT \
  --url https://api.recommender.gigalogy.com/v1/gpt/conversations \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'content-type: application/json' \
  --header 'project-key: SOME_STRING_VALUE' \
  --data '{"conversation_id":"a0cc6beb-2909-459b-be55-62196af78ce4","message":"Tell us your experience of the GPT response","type":"positive"}'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]
let parameters = [
  "conversation_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "message": "Tell us your experience of the GPT response",
  "type": "positive"
] as [String : Any]

let postData = JSONSerialization.data(withJSONObject: parameters, options: [])

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/gpt/conversations")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "PUT"
request.allHTTPHeaderFields = headers
request.httpBody = postData as Data

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: get/v1/gpt/settings
HTTP Method: Get GPT settings
Method Description: Get your saved GPT settings.
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/gpt/settings");
var request = new RestRequest(Method.GET);
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Get,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/gpt/settings"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/gpt/settings"

	req, _ := http.NewRequest("GET", url, nil)

	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/gpt/settings")
  .get()
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.get("https://api.recommender.gigalogy.com/v1/gpt/settings")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/gpt/settings",
  "method": "GET",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = null;

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("GET", "https://api.recommender.gigalogy.com/v1/gpt/settings");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "GET",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/gpt/settings",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'GET',
  url: 'https://api.recommender.gigalogy.com/v1/gpt/settings',
  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("GET", "https://api.recommender.gigalogy.com/v1/gpt/settings");

req.headers({
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/gpt/settings"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"GET"];
[request setAllHTTPHeaderFields:headers];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/gpt/settings",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "GET",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/gpt/settings');
$request-&gt;setMethod(HTTP_METH_GET);

$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/settings');
$request-&gt;setRequestMethod('GET');
$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

headers = {
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("GET", "/v1/gpt/settings", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/gpt/settings"

headers = {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("GET", url, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/gpt/settings")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request GET \
  --url https://api.recommender.gigalogy.com/v1/gpt/settings \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'project-key: SOME_STRING_VALUE'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/gpt/settings")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "GET"
request.allHTTPHeaderFields = headers

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: put/v1/gpt/settings
HTTP Method: Update gpt settings
Method Description: Update the project wide settings for GPT. It takes following parameters. 

### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| model | str | str | The name of model. Supported models are `gpt-3.5-turbo-0613`, `text-davinci-003`, `gpt-3.5-turbo-instruct`, `gpt-3.5-turbo-16k-0613` and `gpt-4-0613` |
| bot_mode_strict | bool | bool | If the bot mode is strict or not (default is False). |
| system | str | str | setup the bot persona e.g. You are an expert on .... |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/gpt/settings");
var request = new RestRequest(Method.PUT);
request.AddHeader("content-type", "application/json");
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
request.AddParameter("application/json", "{\"model\":\"gpt-3.5-turbo-0613\",\"bot_mode_strict\":false,\"system\":\"You are an expert on ...\"}", ParameterType.RequestBody);
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Put,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/gpt/settings"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
    Content = new StringContent("{\"model\":\"gpt-3.5-turbo-0613\",\"bot_mode_strict\":false,\"system\":\"You are an expert on ...\"}")
    {
        Headers =
        {
            ContentType = new MediaTypeHeaderValue("application/json")
        }
    }
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"strings"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/gpt/settings"

	payload := strings.NewReader("{\"model\":\"gpt-3.5-turbo-0613\",\"bot_mode_strict\":false,\"system\":\"You are an expert on ...\"}")

	req, _ := http.NewRequest("PUT", url, payload)

	req.Header.Add("content-type", "application/json")
	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

MediaType mediaType = MediaType.parse("application/json");
RequestBody body = RequestBody.create(mediaType, "{\"model\":\"gpt-3.5-turbo-0613\",\"bot_mode_strict\":false,\"system\":\"You are an expert on ...\"}");
Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/gpt/settings")
  .put(body)
  .addHeader("content-type", "application/json")
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.put("https://api.recommender.gigalogy.com/v1/gpt/settings")
  .header("content-type", "application/json")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .body("{\"model\":\"gpt-3.5-turbo-0613\",\"bot_mode_strict\":false,\"system\":\"You are an expert on ...\"}")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/gpt/settings",
  "method": "PUT",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  },
  "processData": false,
  "data": "{\"model\":\"gpt-3.5-turbo-0613\",\"bot_mode_strict\":false,\"system\":\"You are an expert on ...\"}"
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = JSON.stringify({
  "model": "gpt-3.5-turbo-0613",
  "bot_mode_strict": false,
  "system": "You are an expert on ..."
});

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("PUT", "https://api.recommender.gigalogy.com/v1/gpt/settings");
xhr.setRequestHeader("content-type", "application/json");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "PUT",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/gpt/settings",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.write(JSON.stringify({
  model: 'gpt-3.5-turbo-0613',
  bot_mode_strict: false,
  system: 'You are an expert on ...'
}));
req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'PUT',
  url: 'https://api.recommender.gigalogy.com/v1/gpt/settings',
  headers: {
    'content-type': 'application/json',
    'project-key': 'SOME_STRING_VALUE',
    'api-key': 'SOME_STRING_VALUE'
  },
  body: {
    model: 'gpt-3.5-turbo-0613',
    bot_mode_strict: false,
    system: 'You are an expert on ...'
  },
  json: true
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("PUT", "https://api.recommender.gigalogy.com/v1/gpt/settings");

req.headers({
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.type("json");
req.send({
  "model": "gpt-3.5-turbo-0613",
  "bot_mode_strict": false,
  "system": "You are an expert on ..."
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"application/json",
                           @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };
NSDictionary *parameters = @{ @"model": @"gpt-3.5-turbo-0613",
                              @"bot_mode_strict": @NO,
                              @"system": @"You are an expert on ..." };

NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/gpt/settings"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"PUT"];
[request setAllHTTPHeaderFields:headers];
[request setHTTPBody:postData];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/gpt/settings",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "PUT",
  CURLOPT_POSTFIELDS =&gt; "{\"model\":\"gpt-3.5-turbo-0613\",\"bot_mode_strict\":false,\"system\":\"You are an expert on ...\"}",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "content-type: application/json",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/gpt/settings');
$request-&gt;setMethod(HTTP_METH_PUT);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$request-&gt;setBody('{"model":"gpt-3.5-turbo-0613","bot_mode_strict":false,"system":"You are an expert on ..."}');

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$body = new http\Message\Body;
$body-&gt;append('{"model":"gpt-3.5-turbo-0613","bot_mode_strict":false,"system":"You are an expert on ..."}');

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/settings');
$request-&gt;setRequestMethod('PUT');
$request-&gt;setBody($body);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

payload = "{\"model\":\"gpt-3.5-turbo-0613\",\"bot_mode_strict\":false,\"system\":\"You are an expert on ...\"}"

headers = {
    'content-type': "application/json",
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("PUT", "/v1/gpt/settings", payload, headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/gpt/settings"

payload = {
    "model": "gpt-3.5-turbo-0613",
    "bot_mode_strict": False,
    "system": "You are an expert on ..."
}
headers = {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("PUT", url, json=payload, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/gpt/settings")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Put.new(url)
request["content-type"] = 'application/json'
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'
request.body = "{\"model\":\"gpt-3.5-turbo-0613\",\"bot_mode_strict\":false,\"system\":\"You are an expert on ...\"}"

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request PUT \
  --url https://api.recommender.gigalogy.com/v1/gpt/settings \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'content-type: application/json' \
  --header 'project-key: SOME_STRING_VALUE' \
  --data '{"model":"gpt-3.5-turbo-0613","bot_mode_strict":false,"system":"You are an expert on ..."}'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]
let parameters = [
  "model": "gpt-3.5-turbo-0613",
  "bot_mode_strict": false,
  "system": "You are an expert on ..."
] as [String : Any]

let postData = JSONSerialization.data(withJSONObject: parameters, options: [])

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/gpt/settings")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "PUT"
request.allHTTPHeaderFields = headers
request.httpBody = postData as Data

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: post/v1/gpt/settings
HTTP Method: Create GPT settings
Method Description: This endpoint determines the project wide settings for GPT. It takes following parameters. 

### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| model | str | str | The name of model. Supported models are `gpt-3.5-turbo-0613`, `text-davinci-003`, `gpt-3.5-turbo-instruct`, `gpt-3.5-turbo-16k-0613` and `gpt-4-0613` |
| bot_mode_strict | bool | bool | If the bot mode is strict or not (default is False). |
| system | str | str | setup the bot persona e.g. You are an expert on .... |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/gpt/settings");
var request = new RestRequest(Method.POST);
request.AddHeader("content-type", "application/json");
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
request.AddParameter("application/json", "{\"model\":\"gpt-3.5-turbo-0613\",\"bot_mode_strict\":false,\"system\":\"You are an expert on ...\"}", ParameterType.RequestBody);
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Post,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/gpt/settings"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
    Content = new StringContent("{\"model\":\"gpt-3.5-turbo-0613\",\"bot_mode_strict\":false,\"system\":\"You are an expert on ...\"}")
    {
        Headers =
        {
            ContentType = new MediaTypeHeaderValue("application/json")
        }
    }
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"strings"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/gpt/settings"

	payload := strings.NewReader("{\"model\":\"gpt-3.5-turbo-0613\",\"bot_mode_strict\":false,\"system\":\"You are an expert on ...\"}")

	req, _ := http.NewRequest("POST", url, payload)

	req.Header.Add("content-type", "application/json")
	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

MediaType mediaType = MediaType.parse("application/json");
RequestBody body = RequestBody.create(mediaType, "{\"model\":\"gpt-3.5-turbo-0613\",\"bot_mode_strict\":false,\"system\":\"You are an expert on ...\"}");
Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/gpt/settings")
  .post(body)
  .addHeader("content-type", "application/json")
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.post("https://api.recommender.gigalogy.com/v1/gpt/settings")
  .header("content-type", "application/json")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .body("{\"model\":\"gpt-3.5-turbo-0613\",\"bot_mode_strict\":false,\"system\":\"You are an expert on ...\"}")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/gpt/settings",
  "method": "POST",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  },
  "processData": false,
  "data": "{\"model\":\"gpt-3.5-turbo-0613\",\"bot_mode_strict\":false,\"system\":\"You are an expert on ...\"}"
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = JSON.stringify({
  "model": "gpt-3.5-turbo-0613",
  "bot_mode_strict": false,
  "system": "You are an expert on ..."
});

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("POST", "https://api.recommender.gigalogy.com/v1/gpt/settings");
xhr.setRequestHeader("content-type", "application/json");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "POST",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/gpt/settings",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.write(JSON.stringify({
  model: 'gpt-3.5-turbo-0613',
  bot_mode_strict: false,
  system: 'You are an expert on ...'
}));
req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'POST',
  url: 'https://api.recommender.gigalogy.com/v1/gpt/settings',
  headers: {
    'content-type': 'application/json',
    'project-key': 'SOME_STRING_VALUE',
    'api-key': 'SOME_STRING_VALUE'
  },
  body: {
    model: 'gpt-3.5-turbo-0613',
    bot_mode_strict: false,
    system: 'You are an expert on ...'
  },
  json: true
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("POST", "https://api.recommender.gigalogy.com/v1/gpt/settings");

req.headers({
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.type("json");
req.send({
  "model": "gpt-3.5-turbo-0613",
  "bot_mode_strict": false,
  "system": "You are an expert on ..."
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"application/json",
                           @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };
NSDictionary *parameters = @{ @"model": @"gpt-3.5-turbo-0613",
                              @"bot_mode_strict": @NO,
                              @"system": @"You are an expert on ..." };

NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/gpt/settings"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"POST"];
[request setAllHTTPHeaderFields:headers];
[request setHTTPBody:postData];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/gpt/settings",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "POST",
  CURLOPT_POSTFIELDS =&gt; "{\"model\":\"gpt-3.5-turbo-0613\",\"bot_mode_strict\":false,\"system\":\"You are an expert on ...\"}",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "content-type: application/json",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/gpt/settings');
$request-&gt;setMethod(HTTP_METH_POST);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$request-&gt;setBody('{"model":"gpt-3.5-turbo-0613","bot_mode_strict":false,"system":"You are an expert on ..."}');

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$body = new http\Message\Body;
$body-&gt;append('{"model":"gpt-3.5-turbo-0613","bot_mode_strict":false,"system":"You are an expert on ..."}');

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/settings');
$request-&gt;setRequestMethod('POST');
$request-&gt;setBody($body);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

payload = "{\"model\":\"gpt-3.5-turbo-0613\",\"bot_mode_strict\":false,\"system\":\"You are an expert on ...\"}"

headers = {
    'content-type': "application/json",
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("POST", "/v1/gpt/settings", payload, headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/gpt/settings"

payload = {
    "model": "gpt-3.5-turbo-0613",
    "bot_mode_strict": False,
    "system": "You are an expert on ..."
}
headers = {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("POST", url, json=payload, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/gpt/settings")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Post.new(url)
request["content-type"] = 'application/json'
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'
request.body = "{\"model\":\"gpt-3.5-turbo-0613\",\"bot_mode_strict\":false,\"system\":\"You are an expert on ...\"}"

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request POST \
  --url https://api.recommender.gigalogy.com/v1/gpt/settings \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'content-type: application/json' \
  --header 'project-key: SOME_STRING_VALUE' \
  --data '{"model":"gpt-3.5-turbo-0613","bot_mode_strict":false,"system":"You are an expert on ..."}'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]
let parameters = [
  "model": "gpt-3.5-turbo-0613",
  "bot_mode_strict": false,
  "system": "You are an expert on ..."
] as [String : Any]

let postData = JSONSerialization.data(withJSONObject: parameters, options: [])

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/gpt/settings")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "POST"
request.allHTTPHeaderFields = headers
request.httpBody = postData as Data

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: get/v1/gpt/datasets
HTTP Method: Get list of all datasets
Method Description: Get metadata of all dataset.
### Parameters
----------
| name   | key type            | value type  | description                                         |
| :-----:| :------------------: | :---------: | :--------------------------------------------------: |
| start  | Optional[int]       | int         | The starting index for dataset retrieval (default is 0, minimum is 0). |
| size   | Optional[int]       | int         | The number of records to retrieve (default is 10, minimum is 1, maximum is 1000). |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/gpt/datasets?start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE");
var request = new RestRequest(Method.GET);
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Get,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/gpt/datasets?start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/gpt/datasets?start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE"

	req, _ := http.NewRequest("GET", url, nil)

	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/gpt/datasets?start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE")
  .get()
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.get("https://api.recommender.gigalogy.com/v1/gpt/datasets?start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/gpt/datasets?start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE",
  "method": "GET",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = null;

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("GET", "https://api.recommender.gigalogy.com/v1/gpt/datasets?start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "GET",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/gpt/datasets?start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'GET',
  url: 'https://api.recommender.gigalogy.com/v1/gpt/datasets',
  qs: {start: 'SOME_INTEGER_VALUE', size: 'SOME_INTEGER_VALUE'},
  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("GET", "https://api.recommender.gigalogy.com/v1/gpt/datasets");

req.query({
  "start": "SOME_INTEGER_VALUE",
  "size": "SOME_INTEGER_VALUE"
});

req.headers({
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/gpt/datasets?start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"GET"];
[request setAllHTTPHeaderFields:headers];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/gpt/datasets?start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "GET",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets');
$request-&gt;setMethod(HTTP_METH_GET);

$request-&gt;setQueryData([
  'start' =&gt; 'SOME_INTEGER_VALUE',
  'size' =&gt; 'SOME_INTEGER_VALUE'
]);

$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets');
$request-&gt;setRequestMethod('GET');
$request-&gt;setQuery(new http\QueryString([
  'start' =&gt; 'SOME_INTEGER_VALUE',
  'size' =&gt; 'SOME_INTEGER_VALUE'
]));

$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

headers = {
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("GET", "/v1/gpt/datasets?start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/gpt/datasets"

querystring = {"start":"SOME_INTEGER_VALUE","size":"SOME_INTEGER_VALUE"}

headers = {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("GET", url, headers=headers, params=querystring)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/gpt/datasets?start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request GET \
  --url 'https://api.recommender.gigalogy.com/v1/gpt/datasets?start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE' \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'project-key: SOME_STRING_VALUE'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/gpt/datasets?start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "GET"
request.allHTTPHeaderFields = headers

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: post/v1/gpt/datasets
HTTP Method: Upload your dataset for training. MyGPT supports CSV, JSON formats.
Method Description: Upload dataset to train your GPT. `csv`, `json` file types are supported.
idx_column identifies your data row/objects, if none given we will use `idx` as column name and give an UUID to each unit of data.
Provide image_url_column if your data have image and you want to use vision api with this dataset. The parameter takes the column name containing data unit's image url.

### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| name | str | str | The name of the dataset. |
| idx_column | Optional[str] | str | The index column of the dataset default is `idx`. |
| is_idx_fillup_if_empty | bool | Should we fill up empty index values? |
| secondary_idx_column | Optional[str] | str | The secondary index column of the dataset. |
| image_url_column  | Optional[str] | str   | image url column or field name |
| description | Optional[str] | str | The description of the dataset. |
| dataset_file | Optional | Binary File | The **csv, json** file to be uploaded. |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/gpt/datasets");
var request = new RestRequest(Method.POST);
request.AddHeader("content-type", "multipart/form-data");
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Post,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/gpt/datasets"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/gpt/datasets"

	req, _ := http.NewRequest("POST", url, nil)

	req.Header.Add("content-type", "multipart/form-data")
	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/gpt/datasets")
  .post(null)
  .addHeader("content-type", "multipart/form-data")
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.post("https://api.recommender.gigalogy.com/v1/gpt/datasets")
  .header("content-type", "multipart/form-data")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/gpt/datasets",
  "method": "POST",
  "headers": {
    "content-type": "multipart/form-data",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = null;

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("POST", "https://api.recommender.gigalogy.com/v1/gpt/datasets");
xhr.setRequestHeader("content-type", "multipart/form-data");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "POST",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/gpt/datasets",
  "headers": {
    "content-type": "multipart/form-data",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'POST',
  url: 'https://api.recommender.gigalogy.com/v1/gpt/datasets',
  headers: {
    'content-type': 'multipart/form-data',
    'project-key': 'SOME_STRING_VALUE',
    'api-key': 'SOME_STRING_VALUE'
  }
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("POST", "https://api.recommender.gigalogy.com/v1/gpt/datasets");

req.headers({
  "content-type": "multipart/form-data",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"multipart/form-data",
                           @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/gpt/datasets"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"POST"];
[request setAllHTTPHeaderFields:headers];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/gpt/datasets",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "POST",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "content-type: multipart/form-data",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets');
$request-&gt;setMethod(HTTP_METH_POST);

$request-&gt;setHeaders([
  'content-type' =&gt; 'multipart/form-data',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets');
$request-&gt;setRequestMethod('POST');
$request-&gt;setHeaders([
  'content-type' =&gt; 'multipart/form-data',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

headers = {
    'content-type': "multipart/form-data",
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("POST", "/v1/gpt/datasets", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/gpt/datasets"

headers = {
    "content-type": "multipart/form-data",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("POST", url, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/gpt/datasets")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Post.new(url)
request["content-type"] = 'multipart/form-data'
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request POST \
  --url https://api.recommender.gigalogy.com/v1/gpt/datasets \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'content-type: multipart/form-data' \
  --header 'project-key: SOME_STRING_VALUE'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "multipart/form-data",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/gpt/datasets")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "POST"
request.allHTTPHeaderFields = headers

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: get/v1/gpt/datasets/{dataset_id}
HTTP Method: Get summary of a dataset
Method Description: Get details of a dataset. The response includes both metadata and documents summaries like, 
a. Total document count
b. Total text trained document count
c. Total image trained document count
d. Active document count

### Parameters
----------
| name   | key type            | value type  | description                                         |
| :-----:| :------------------: | :---------: | :--------------------------------------------------: |
| dataset_id | str | str | ID of the dataset |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D");
var request = new RestRequest(Method.GET);
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Get,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D"

	req, _ := http.NewRequest("GET", url, nil)

	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D")
  .get()
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.get("https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D",
  "method": "GET",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = null;

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("GET", "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "GET",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/gpt/datasets/%7Bdataset_id%7D",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'GET',
  url: 'https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D',
  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("GET", "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D");

req.headers({
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"GET"];
[request setAllHTTPHeaderFields:headers];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "GET",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D');
$request-&gt;setMethod(HTTP_METH_GET);

$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D');
$request-&gt;setRequestMethod('GET');
$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

headers = {
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("GET", "/v1/gpt/datasets/%7Bdataset_id%7D", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D"

headers = {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("GET", url, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request GET \
  --url https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'project-key: SOME_STRING_VALUE'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "GET"
request.allHTTPHeaderFields = headers

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: put/v1/gpt/datasets/{dataset_id}
HTTP Method: Update a dataset
Method Description: Update a dataset meta data and/or add documents from csv/json file.

### Parameters
----------
| name | key type | value type | description |
| :-----------: | :-----------: | :-----------: | :-----------: |
| dataset_id | str | str | ID of the dataset to be updated |
| name | str | str | The name of the dataset. |
| is_idx_fillup_if_empty | bool | Should we fill up empty index values? |
| secondary_idx_column | Optional[str] | str | The secondary index column of the dataset. |
| image_url_column  | Optional[str] | str   | image url column or field name |
| description | Optional[str] | str | The description of the dataset. |
| dataset_file | Optional | Binary File | The **csv, json** file to be uploaded. |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D");
var request = new RestRequest(Method.PUT);
request.AddHeader("content-type", "multipart/form-data");
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Put,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D"

	req, _ := http.NewRequest("PUT", url, nil)

	req.Header.Add("content-type", "multipart/form-data")
	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D")
  .put(null)
  .addHeader("content-type", "multipart/form-data")
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.put("https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D")
  .header("content-type", "multipart/form-data")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D",
  "method": "PUT",
  "headers": {
    "content-type": "multipart/form-data",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = null;

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("PUT", "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D");
xhr.setRequestHeader("content-type", "multipart/form-data");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "PUT",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/gpt/datasets/%7Bdataset_id%7D",
  "headers": {
    "content-type": "multipart/form-data",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'PUT',
  url: 'https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D',
  headers: {
    'content-type': 'multipart/form-data',
    'project-key': 'SOME_STRING_VALUE',
    'api-key': 'SOME_STRING_VALUE'
  }
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("PUT", "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D");

req.headers({
  "content-type": "multipart/form-data",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"multipart/form-data",
                           @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"PUT"];
[request setAllHTTPHeaderFields:headers];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "PUT",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "content-type: multipart/form-data",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D');
$request-&gt;setMethod(HTTP_METH_PUT);

$request-&gt;setHeaders([
  'content-type' =&gt; 'multipart/form-data',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D');
$request-&gt;setRequestMethod('PUT');
$request-&gt;setHeaders([
  'content-type' =&gt; 'multipart/form-data',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

headers = {
    'content-type': "multipart/form-data",
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("PUT", "/v1/gpt/datasets/%7Bdataset_id%7D", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D"

headers = {
    "content-type": "multipart/form-data",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("PUT", url, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Put.new(url)
request["content-type"] = 'multipart/form-data'
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request PUT \
  --url https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'content-type: multipart/form-data' \
  --header 'project-key: SOME_STRING_VALUE'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "multipart/form-data",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "PUT"
request.allHTTPHeaderFields = headers

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: delete/v1/gpt/datasets/{dataset_id}
HTTP Method: Deletes the dataset
Method Description: Deletes a dataset entierly. To clear a dataset use `/documents` endpoint.

### Parameters
----------
| name   | key type            | value type  | description                                         |
| :-----:| :------------------: | :---------: | :--------------------------------------------------: |
| dataset_id | str | str | ID of the dataset |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D");
var request = new RestRequest(Method.DELETE);
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Delete,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D"

	req, _ := http.NewRequest("DELETE", url, nil)

	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D")
  .delete(null)
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.delete("https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D",
  "method": "DELETE",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = null;

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("DELETE", "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "DELETE",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/gpt/datasets/%7Bdataset_id%7D",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'DELETE',
  url: 'https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D',
  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("DELETE", "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D");

req.headers({
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"DELETE"];
[request setAllHTTPHeaderFields:headers];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "DELETE",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D');
$request-&gt;setMethod(HTTP_METH_DELETE);

$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D');
$request-&gt;setRequestMethod('DELETE');
$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

headers = {
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("DELETE", "/v1/gpt/datasets/%7Bdataset_id%7D", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D"

headers = {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("DELETE", url, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Delete.new(url)
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request DELETE \
  --url https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'project-key: SOME_STRING_VALUE'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "DELETE"
request.allHTTPHeaderFields = headers

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: get/v1/gpt/datasets/{dataset_id}/documents
HTTP Method: Get data of a dataset
Method Description: Get data of a dataset. Use query parameters to customize the search result.
### Parameters
----------
| name   | key type            | value type  | description                                         |
| :-----:| :------------------: | :---------: | :--------------------------------------------------: |
| start  | Optional[int]       | int         | The starting index for dataset retrieval (default is 0, minimum is 0). |
| size   | Optional[int]       | int         | The number of records to retrieve (default is 10, minimum is 1, maximum is 1000). |
| text_training_status | Optional[str]       | str | The status of the dataset (possible values are `trained`, `untrained`). |
| image_training_status | Optional[str] | str | The status of the dataset (possible values are `trained`, `untrained`). |
| active_status   | Optional[str]       | str | The active status of the dataset (possible values are `archived`, `active`). |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents?start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE&amp;text_training_status=SOME_STRING_VALUE&amp;image_training_status=SOME_STRING_VALUE&amp;active_status=SOME_STRING_VALUE");
var request = new RestRequest(Method.GET);
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Get,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents?start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE&amp;text_training_status=SOME_STRING_VALUE&amp;image_training_status=SOME_STRING_VALUE&amp;active_status=SOME_STRING_VALUE"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents?start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE&amp;text_training_status=SOME_STRING_VALUE&amp;image_training_status=SOME_STRING_VALUE&amp;active_status=SOME_STRING_VALUE"

	req, _ := http.NewRequest("GET", url, nil)

	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents?start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE&amp;text_training_status=SOME_STRING_VALUE&amp;image_training_status=SOME_STRING_VALUE&amp;active_status=SOME_STRING_VALUE")
  .get()
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.get("https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents?start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE&amp;text_training_status=SOME_STRING_VALUE&amp;image_training_status=SOME_STRING_VALUE&amp;active_status=SOME_STRING_VALUE")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents?start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE&amp;text_training_status=SOME_STRING_VALUE&amp;image_training_status=SOME_STRING_VALUE&amp;active_status=SOME_STRING_VALUE",
  "method": "GET",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = null;

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("GET", "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents?start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE&amp;text_training_status=SOME_STRING_VALUE&amp;image_training_status=SOME_STRING_VALUE&amp;active_status=SOME_STRING_VALUE");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "GET",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/gpt/datasets/%7Bdataset_id%7D/documents?start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE&amp;text_training_status=SOME_STRING_VALUE&amp;image_training_status=SOME_STRING_VALUE&amp;active_status=SOME_STRING_VALUE",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'GET',
  url: 'https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents',
  qs: {
    start: 'SOME_INTEGER_VALUE',
    size: 'SOME_INTEGER_VALUE',
    text_training_status: 'SOME_STRING_VALUE',
    image_training_status: 'SOME_STRING_VALUE',
    active_status: 'SOME_STRING_VALUE'
  },
  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("GET", "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents");

req.query({
  "start": "SOME_INTEGER_VALUE",
  "size": "SOME_INTEGER_VALUE",
  "text_training_status": "SOME_STRING_VALUE",
  "image_training_status": "SOME_STRING_VALUE",
  "active_status": "SOME_STRING_VALUE"
});

req.headers({
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents?start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE&amp;text_training_status=SOME_STRING_VALUE&amp;image_training_status=SOME_STRING_VALUE&amp;active_status=SOME_STRING_VALUE"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"GET"];
[request setAllHTTPHeaderFields:headers];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents?start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE&amp;text_training_status=SOME_STRING_VALUE&amp;image_training_status=SOME_STRING_VALUE&amp;active_status=SOME_STRING_VALUE",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "GET",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents');
$request-&gt;setMethod(HTTP_METH_GET);

$request-&gt;setQueryData([
  'start' =&gt; 'SOME_INTEGER_VALUE',
  'size' =&gt; 'SOME_INTEGER_VALUE',
  'text_training_status' =&gt; 'SOME_STRING_VALUE',
  'image_training_status' =&gt; 'SOME_STRING_VALUE',
  'active_status' =&gt; 'SOME_STRING_VALUE'
]);

$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents');
$request-&gt;setRequestMethod('GET');
$request-&gt;setQuery(new http\QueryString([
  'start' =&gt; 'SOME_INTEGER_VALUE',
  'size' =&gt; 'SOME_INTEGER_VALUE',
  'text_training_status' =&gt; 'SOME_STRING_VALUE',
  'image_training_status' =&gt; 'SOME_STRING_VALUE',
  'active_status' =&gt; 'SOME_STRING_VALUE'
]));

$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

headers = {
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("GET", "/v1/gpt/datasets/%7Bdataset_id%7D/documents?start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE&amp;text_training_status=SOME_STRING_VALUE&amp;image_training_status=SOME_STRING_VALUE&amp;active_status=SOME_STRING_VALUE", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents"

querystring = {"start":"SOME_INTEGER_VALUE","size":"SOME_INTEGER_VALUE","text_training_status":"SOME_STRING_VALUE","image_training_status":"SOME_STRING_VALUE","active_status":"SOME_STRING_VALUE"}

headers = {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("GET", url, headers=headers, params=querystring)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents?start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE&amp;text_training_status=SOME_STRING_VALUE&amp;image_training_status=SOME_STRING_VALUE&amp;active_status=SOME_STRING_VALUE")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request GET \
  --url 'https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents?start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE&amp;text_training_status=SOME_STRING_VALUE&amp;image_training_status=SOME_STRING_VALUE&amp;active_status=SOME_STRING_VALUE' \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'project-key: SOME_STRING_VALUE'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents?start=SOME_INTEGER_VALUE&amp;size=SOME_INTEGER_VALUE&amp;text_training_status=SOME_STRING_VALUE&amp;image_training_status=SOME_STRING_VALUE&amp;active_status=SOME_STRING_VALUE")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "GET"
request.allHTTPHeaderFields = headers

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: put/v1/gpt/datasets/{dataset_id}/documents
HTTP Method: Update documents
Method Description: Update documents under a dataset. User can update metadata in bulk with document ids.
If all is `true`, `ids` value is ignored.
### Parameters
----------
| name   | key type            | value type  | description                                         |
| :-----:| :------------------: | :---------: | :--------------------------------------------------: |
| ids       | Optional[list[str]]         | list[str] | A list of idxs of the dataset which needs to be updated. |
| all       | Optional[bool]         | bool | determines if all documents should be updated, default `false` |
| metadata_updates | list[dict] | list[dict] | A list of objects containing data rows to update. |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents");
var request = new RestRequest(Method.PUT);
request.AddHeader("content-type", "application/json");
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
request.AddParameter("application/json", "{\"ids\":[\"idx-1\",\"idx-2\"],\"is_update_all\":false,\"updates\":[{\"field_name\":\"active_status\",\"value\":\"active\"},{\"field_name\":\"status\",\"value\":\"untrained\"},{\"field_name\":\"image_train_status\",\"value\":\"trained\"}]}", ParameterType.RequestBody);
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Put,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
    Content = new StringContent("{\"ids\":[\"idx-1\",\"idx-2\"],\"is_update_all\":false,\"updates\":[{\"field_name\":\"active_status\",\"value\":\"active\"},{\"field_name\":\"status\",\"value\":\"untrained\"},{\"field_name\":\"image_train_status\",\"value\":\"trained\"}]}")
    {
        Headers =
        {
            ContentType = new MediaTypeHeaderValue("application/json")
        }
    }
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"strings"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents"

	payload := strings.NewReader("{\"ids\":[\"idx-1\",\"idx-2\"],\"is_update_all\":false,\"updates\":[{\"field_name\":\"active_status\",\"value\":\"active\"},{\"field_name\":\"status\",\"value\":\"untrained\"},{\"field_name\":\"image_train_status\",\"value\":\"trained\"}]}")

	req, _ := http.NewRequest("PUT", url, payload)

	req.Header.Add("content-type", "application/json")
	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

MediaType mediaType = MediaType.parse("application/json");
RequestBody body = RequestBody.create(mediaType, "{\"ids\":[\"idx-1\",\"idx-2\"],\"is_update_all\":false,\"updates\":[{\"field_name\":\"active_status\",\"value\":\"active\"},{\"field_name\":\"status\",\"value\":\"untrained\"},{\"field_name\":\"image_train_status\",\"value\":\"trained\"}]}");
Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents")
  .put(body)
  .addHeader("content-type", "application/json")
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.put("https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents")
  .header("content-type", "application/json")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .body("{\"ids\":[\"idx-1\",\"idx-2\"],\"is_update_all\":false,\"updates\":[{\"field_name\":\"active_status\",\"value\":\"active\"},{\"field_name\":\"status\",\"value\":\"untrained\"},{\"field_name\":\"image_train_status\",\"value\":\"trained\"}]}")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents",
  "method": "PUT",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  },
  "processData": false,
  "data": "{\"ids\":[\"idx-1\",\"idx-2\"],\"is_update_all\":false,\"updates\":[{\"field_name\":\"active_status\",\"value\":\"active\"},{\"field_name\":\"status\",\"value\":\"untrained\"},{\"field_name\":\"image_train_status\",\"value\":\"trained\"}]}"
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = JSON.stringify({
  "ids": [
    "idx-1",
    "idx-2"
  ],
  "is_update_all": false,
  "updates": [
    {
      "field_name": "active_status",
      "value": "active"
    },
    {
      "field_name": "status",
      "value": "untrained"
    },
    {
      "field_name": "image_train_status",
      "value": "trained"
    }
  ]
});

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("PUT", "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents");
xhr.setRequestHeader("content-type", "application/json");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "PUT",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/gpt/datasets/%7Bdataset_id%7D/documents",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.write(JSON.stringify({
  ids: ['idx-1', 'idx-2'],
  is_update_all: false,
  updates: [
    {field_name: 'active_status', value: 'active'},
    {field_name: 'status', value: 'untrained'},
    {field_name: 'image_train_status', value: 'trained'}
  ]
}));
req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'PUT',
  url: 'https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents',
  headers: {
    'content-type': 'application/json',
    'project-key': 'SOME_STRING_VALUE',
    'api-key': 'SOME_STRING_VALUE'
  },
  body: {
    ids: ['idx-1', 'idx-2'],
    is_update_all: false,
    updates: [
      {field_name: 'active_status', value: 'active'},
      {field_name: 'status', value: 'untrained'},
      {field_name: 'image_train_status', value: 'trained'}
    ]
  },
  json: true
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("PUT", "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents");

req.headers({
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.type("json");
req.send({
  "ids": [
    "idx-1",
    "idx-2"
  ],
  "is_update_all": false,
  "updates": [
    {
      "field_name": "active_status",
      "value": "active"
    },
    {
      "field_name": "status",
      "value": "untrained"
    },
    {
      "field_name": "image_train_status",
      "value": "trained"
    }
  ]
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"application/json",
                           @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };
NSDictionary *parameters = @{ @"ids": @[ @"idx-1", @"idx-2" ],
                              @"is_update_all": @NO,
                              @"updates": @[ @{ @"field_name": @"active_status", @"value": @"active" }, @{ @"field_name": @"status", @"value": @"untrained" }, @{ @"field_name": @"image_train_status", @"value": @"trained" } ] };

NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"PUT"];
[request setAllHTTPHeaderFields:headers];
[request setHTTPBody:postData];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "PUT",
  CURLOPT_POSTFIELDS =&gt; "{\"ids\":[\"idx-1\",\"idx-2\"],\"is_update_all\":false,\"updates\":[{\"field_name\":\"active_status\",\"value\":\"active\"},{\"field_name\":\"status\",\"value\":\"untrained\"},{\"field_name\":\"image_train_status\",\"value\":\"trained\"}]}",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "content-type: application/json",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents');
$request-&gt;setMethod(HTTP_METH_PUT);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$request-&gt;setBody('{"ids":["idx-1","idx-2"],"is_update_all":false,"updates":[{"field_name":"active_status","value":"active"},{"field_name":"status","value":"untrained"},{"field_name":"image_train_status","value":"trained"}]}');

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$body = new http\Message\Body;
$body-&gt;append('{"ids":["idx-1","idx-2"],"is_update_all":false,"updates":[{"field_name":"active_status","value":"active"},{"field_name":"status","value":"untrained"},{"field_name":"image_train_status","value":"trained"}]}');

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents');
$request-&gt;setRequestMethod('PUT');
$request-&gt;setBody($body);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

payload = "{\"ids\":[\"idx-1\",\"idx-2\"],\"is_update_all\":false,\"updates\":[{\"field_name\":\"active_status\",\"value\":\"active\"},{\"field_name\":\"status\",\"value\":\"untrained\"},{\"field_name\":\"image_train_status\",\"value\":\"trained\"}]}"

headers = {
    'content-type': "application/json",
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("PUT", "/v1/gpt/datasets/%7Bdataset_id%7D/documents", payload, headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents"

payload = {
    "ids": ["idx-1", "idx-2"],
    "is_update_all": False,
    "updates": [
        {
            "field_name": "active_status",
            "value": "active"
        },
        {
            "field_name": "status",
            "value": "untrained"
        },
        {
            "field_name": "image_train_status",
            "value": "trained"
        }
    ]
}
headers = {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("PUT", url, json=payload, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Put.new(url)
request["content-type"] = 'application/json'
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'
request.body = "{\"ids\":[\"idx-1\",\"idx-2\"],\"is_update_all\":false,\"updates\":[{\"field_name\":\"active_status\",\"value\":\"active\"},{\"field_name\":\"status\",\"value\":\"untrained\"},{\"field_name\":\"image_train_status\",\"value\":\"trained\"}]}"

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request PUT \
  --url https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'content-type: application/json' \
  --header 'project-key: SOME_STRING_VALUE' \
  --data '{"ids":["idx-1","idx-2"],"is_update_all":false,"updates":[{"field_name":"active_status","value":"active"},{"field_name":"status","value":"untrained"},{"field_name":"image_train_status","value":"trained"}]}'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]
let parameters = [
  "ids": ["idx-1", "idx-2"],
  "is_update_all": false,
  "updates": [
    [
      "field_name": "active_status",
      "value": "active"
    ],
    [
      "field_name": "status",
      "value": "untrained"
    ],
    [
      "field_name": "image_train_status",
      "value": "trained"
    ]
  ]
] as [String : Any]

let postData = JSONSerialization.data(withJSONObject: parameters, options: [])

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "PUT"
request.allHTTPHeaderFields = headers
request.httpBody = postData as Data

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: post/v1/gpt/datasets/{dataset_id}/documents
HTTP Method: Create documents under a dataset
Method Description: Create documents under a dataset.

### Parameters
----------
| name   | key type            | value type  | description                                         |
| :-----:| :------------------: | :---------: | :--------------------------------------------------: |
| data_list | list[dict]       | list[dict] | A list of objects |
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents");
var request = new RestRequest(Method.POST);
request.AddHeader("content-type", "application/json");
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
request.AddParameter("application/json", "{\"documents\":[{}]}", ParameterType.RequestBody);
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Post,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
    Content = new StringContent("{\"documents\":[{}]}")
    {
        Headers =
        {
            ContentType = new MediaTypeHeaderValue("application/json")
        }
    }
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"strings"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents"

	payload := strings.NewReader("{\"documents\":[{}]}")

	req, _ := http.NewRequest("POST", url, payload)

	req.Header.Add("content-type", "application/json")
	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

MediaType mediaType = MediaType.parse("application/json");
RequestBody body = RequestBody.create(mediaType, "{\"documents\":[{}]}");
Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents")
  .post(body)
  .addHeader("content-type", "application/json")
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.post("https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents")
  .header("content-type", "application/json")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .body("{\"documents\":[{}]}")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents",
  "method": "POST",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  },
  "processData": false,
  "data": "{\"documents\":[{}]}"
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = JSON.stringify({
  "documents": [
    {}
  ]
});

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("POST", "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents");
xhr.setRequestHeader("content-type", "application/json");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "POST",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/gpt/datasets/%7Bdataset_id%7D/documents",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.write(JSON.stringify({documents: [{}]}));
req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'POST',
  url: 'https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents',
  headers: {
    'content-type': 'application/json',
    'project-key': 'SOME_STRING_VALUE',
    'api-key': 'SOME_STRING_VALUE'
  },
  body: {documents: [{}]},
  json: true
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("POST", "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents");

req.headers({
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.type("json");
req.send({
  "documents": [
    {}
  ]
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"application/json",
                           @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };
NSDictionary *parameters = @{ @"documents": @[ @{  } ] };

NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"POST"];
[request setAllHTTPHeaderFields:headers];
[request setHTTPBody:postData];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "POST",
  CURLOPT_POSTFIELDS =&gt; "{\"documents\":[{}]}",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "content-type: application/json",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents');
$request-&gt;setMethod(HTTP_METH_POST);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$request-&gt;setBody('{"documents":[{}]}');

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$body = new http\Message\Body;
$body-&gt;append('{"documents":[{}]}');

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents');
$request-&gt;setRequestMethod('POST');
$request-&gt;setBody($body);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

payload = "{\"documents\":[{}]}"

headers = {
    'content-type': "application/json",
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("POST", "/v1/gpt/datasets/%7Bdataset_id%7D/documents", payload, headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents"

payload = {"documents": [{}]}
headers = {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("POST", url, json=payload, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Post.new(url)
request["content-type"] = 'application/json'
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'
request.body = "{\"documents\":[{}]}"

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request POST \
  --url https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'content-type: application/json' \
  --header 'project-key: SOME_STRING_VALUE' \
  --data '{"documents":[{}]}'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]
let parameters = ["documents": [[]]] as [String : Any]

let postData = JSONSerialization.data(withJSONObject: parameters, options: [])

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "POST"
request.allHTTPHeaderFields = headers
request.httpBody = postData as Data

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: delete/v1/gpt/datasets/{dataset_id}/documents
HTTP Method: Delete documents
Method Description: delete documents under a dataset. User can delete documets in bulk with document ids.
If all is `true`, `ids` value is ignored.

### Parameters
----------
| name   | key type            | value type  | description                                         |
| :-----:| :------------------: | :---------: | :--------------------------------------------------: |
| ids       | Optional[list[str]]         | list[str] | A list of idxs of the dataset which are to be deleted. |
| all | Optional[bool]         | bool | `true` if all documents to be deleted from the dataset while keeping the dataset, default `false`|
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents");
var request = new RestRequest(Method.DELETE);
request.AddHeader("content-type", "application/json");
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
request.AddParameter("application/json", "{\"ids\":[\"string\"],\"is_delete_all\":false}", ParameterType.RequestBody);
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Delete,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
    Content = new StringContent("{\"ids\":[\"string\"],\"is_delete_all\":false}")
    {
        Headers =
        {
            ContentType = new MediaTypeHeaderValue("application/json")
        }
    }
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"strings"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents"

	payload := strings.NewReader("{\"ids\":[\"string\"],\"is_delete_all\":false}")

	req, _ := http.NewRequest("DELETE", url, payload)

	req.Header.Add("content-type", "application/json")
	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

MediaType mediaType = MediaType.parse("application/json");
RequestBody body = RequestBody.create(mediaType, "{\"ids\":[\"string\"],\"is_delete_all\":false}");
Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents")
  .delete(body)
  .addHeader("content-type", "application/json")
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.delete("https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents")
  .header("content-type", "application/json")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .body("{\"ids\":[\"string\"],\"is_delete_all\":false}")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents",
  "method": "DELETE",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  },
  "processData": false,
  "data": "{\"ids\":[\"string\"],\"is_delete_all\":false}"
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = JSON.stringify({
  "ids": [
    "string"
  ],
  "is_delete_all": false
});

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("DELETE", "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents");
xhr.setRequestHeader("content-type", "application/json");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "DELETE",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/gpt/datasets/%7Bdataset_id%7D/documents",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.write(JSON.stringify({ids: ['string'], is_delete_all: false}));
req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'DELETE',
  url: 'https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents',
  headers: {
    'content-type': 'application/json',
    'project-key': 'SOME_STRING_VALUE',
    'api-key': 'SOME_STRING_VALUE'
  },
  body: {ids: ['string'], is_delete_all: false},
  json: true
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("DELETE", "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents");

req.headers({
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.type("json");
req.send({
  "ids": [
    "string"
  ],
  "is_delete_all": false
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"application/json",
                           @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };
NSDictionary *parameters = @{ @"ids": @[ @"string" ],
                              @"is_delete_all": @NO };

NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"DELETE"];
[request setAllHTTPHeaderFields:headers];
[request setHTTPBody:postData];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "DELETE",
  CURLOPT_POSTFIELDS =&gt; "{\"ids\":[\"string\"],\"is_delete_all\":false}",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "content-type: application/json",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents');
$request-&gt;setMethod(HTTP_METH_DELETE);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$request-&gt;setBody('{"ids":["string"],"is_delete_all":false}');

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$body = new http\Message\Body;
$body-&gt;append('{"ids":["string"],"is_delete_all":false}');

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents');
$request-&gt;setRequestMethod('DELETE');
$request-&gt;setBody($body);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

payload = "{\"ids\":[\"string\"],\"is_delete_all\":false}"

headers = {
    'content-type': "application/json",
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("DELETE", "/v1/gpt/datasets/%7Bdataset_id%7D/documents", payload, headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents"

payload = {
    "ids": ["string"],
    "is_delete_all": False
}
headers = {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("DELETE", url, json=payload, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Delete.new(url)
request["content-type"] = 'application/json'
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'
request.body = "{\"ids\":[\"string\"],\"is_delete_all\":false}"

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request DELETE \
  --url https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'content-type: application/json' \
  --header 'project-key: SOME_STRING_VALUE' \
  --data '{"ids":["string"],"is_delete_all":false}'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]
let parameters = [
  "ids": ["string"],
  "is_delete_all": false
] as [String : Any]

let postData = JSONSerialization.data(withJSONObject: parameters, options: [])

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "DELETE"
request.allHTTPHeaderFields = headers
request.httpBody = postData as Data

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: get/v1/gpt/datasets/{dataset_id}/{document_id}
HTTP Method: Get documents by its id.
Method Description: get details of the document with ID.
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D");
var request = new RestRequest(Method.GET);
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Get,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D"

	req, _ := http.NewRequest("GET", url, nil)

	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D")
  .get()
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.get("https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D",
  "method": "GET",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = null;

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("GET", "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "GET",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'GET',
  url: 'https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D',
  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("GET", "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D");

req.headers({
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"GET"];
[request setAllHTTPHeaderFields:headers];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "GET",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D');
$request-&gt;setMethod(HTTP_METH_GET);

$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D');
$request-&gt;setRequestMethod('GET');
$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

headers = {
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("GET", "/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D"

headers = {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("GET", url, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request GET \
  --url https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'project-key: SOME_STRING_VALUE'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "GET"
request.allHTTPHeaderFields = headers

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: put/v1/gpt/datasets/{dataset_id}/{document_id}
HTTP Method: Update documents by its id.
Method Description: Update a single document under the dataset
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D");
var request = new RestRequest(Method.PUT);
request.AddHeader("content-type", "application/json");
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
request.AddParameter("application/json", "{\"data\":{\"header\":\"\",\"content\":\"\"},\"status\":\"trained\",\"image_train_status\":\"trained\",\"active_status\":\"archived\"}", ParameterType.RequestBody);
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Put,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
    Content = new StringContent("{\"data\":{\"header\":\"\",\"content\":\"\"},\"status\":\"trained\",\"image_train_status\":\"trained\",\"active_status\":\"archived\"}")
    {
        Headers =
        {
            ContentType = new MediaTypeHeaderValue("application/json")
        }
    }
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"strings"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D"

	payload := strings.NewReader("{\"data\":{\"header\":\"\",\"content\":\"\"},\"status\":\"trained\",\"image_train_status\":\"trained\",\"active_status\":\"archived\"}")

	req, _ := http.NewRequest("PUT", url, payload)

	req.Header.Add("content-type", "application/json")
	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

MediaType mediaType = MediaType.parse("application/json");
RequestBody body = RequestBody.create(mediaType, "{\"data\":{\"header\":\"\",\"content\":\"\"},\"status\":\"trained\",\"image_train_status\":\"trained\",\"active_status\":\"archived\"}");
Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D")
  .put(body)
  .addHeader("content-type", "application/json")
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.put("https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D")
  .header("content-type", "application/json")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .body("{\"data\":{\"header\":\"\",\"content\":\"\"},\"status\":\"trained\",\"image_train_status\":\"trained\",\"active_status\":\"archived\"}")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D",
  "method": "PUT",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  },
  "processData": false,
  "data": "{\"data\":{\"header\":\"\",\"content\":\"\"},\"status\":\"trained\",\"image_train_status\":\"trained\",\"active_status\":\"archived\"}"
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = JSON.stringify({
  "data": {
    "header": "",
    "content": ""
  },
  "status": "trained",
  "image_train_status": "trained",
  "active_status": "archived"
});

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("PUT", "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D");
xhr.setRequestHeader("content-type", "application/json");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "PUT",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D",
  "headers": {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.write(JSON.stringify({
  data: {header: '', content: ''},
  status: 'trained',
  image_train_status: 'trained',
  active_status: 'archived'
}));
req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'PUT',
  url: 'https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D',
  headers: {
    'content-type': 'application/json',
    'project-key': 'SOME_STRING_VALUE',
    'api-key': 'SOME_STRING_VALUE'
  },
  body: {
    data: {header: '', content: ''},
    status: 'trained',
    image_train_status: 'trained',
    active_status: 'archived'
  },
  json: true
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("PUT", "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D");

req.headers({
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.type("json");
req.send({
  "data": {
    "header": "",
    "content": ""
  },
  "status": "trained",
  "image_train_status": "trained",
  "active_status": "archived"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"content-type": @"application/json",
                           @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };
NSDictionary *parameters = @{ @"data": @{ @"header": @"", @"content": @"" },
                              @"status": @"trained",
                              @"image_train_status": @"trained",
                              @"active_status": @"archived" };

NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"PUT"];
[request setAllHTTPHeaderFields:headers];
[request setHTTPBody:postData];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "PUT",
  CURLOPT_POSTFIELDS =&gt; "{\"data\":{\"header\":\"\",\"content\":\"\"},\"status\":\"trained\",\"image_train_status\":\"trained\",\"active_status\":\"archived\"}",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "content-type: application/json",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D');
$request-&gt;setMethod(HTTP_METH_PUT);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$request-&gt;setBody('{"data":{"header":"","content":""},"status":"trained","image_train_status":"trained","active_status":"archived"}');

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$body = new http\Message\Body;
$body-&gt;append('{"data":{"header":"","content":""},"status":"trained","image_train_status":"trained","active_status":"archived"}');

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D');
$request-&gt;setRequestMethod('PUT');
$request-&gt;setBody($body);

$request-&gt;setHeaders([
  'content-type' =&gt; 'application/json',
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

payload = "{\"data\":{\"header\":\"\",\"content\":\"\"},\"status\":\"trained\",\"image_train_status\":\"trained\",\"active_status\":\"archived\"}"

headers = {
    'content-type': "application/json",
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("PUT", "/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D", payload, headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D"

payload = {
    "data": {
        "header": "",
        "content": ""
    },
    "status": "trained",
    "image_train_status": "trained",
    "active_status": "archived"
}
headers = {
    "content-type": "application/json",
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("PUT", url, json=payload, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Put.new(url)
request["content-type"] = 'application/json'
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'
request.body = "{\"data\":{\"header\":\"\",\"content\":\"\"},\"status\":\"trained\",\"image_train_status\":\"trained\",\"active_status\":\"archived\"}"

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request PUT \
  --url https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'content-type: application/json' \
  --header 'project-key: SOME_STRING_VALUE' \
  --data '{"data":{"header":"","content":""},"status":"trained","image_train_status":"trained","active_status":"archived"}'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "content-type": "application/json",
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]
let parameters = [
  "data": [
    "header": "",
    "content": ""
  ],
  "status": "trained",
  "image_train_status": "trained",
  "active_status": "archived"
] as [String : Any]

let postData = JSONSerialization.data(withJSONObject: parameters, options: [])

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "PUT"
request.allHTTPHeaderFields = headers
request.httpBody = postData as Data

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
Endpoint: delete/v1/gpt/datasets/{dataset_id}/{document_id}
HTTP Method: Delete single document by its id from the index
Method Description: Delete a single document under the dataset
Responses:
 Code: 200 , Description: Successful Response
 Code: 202 , Description: Accepted
 Code: 400 , Description: Bad Request
 Code: 401 , Description: Unauthorized
 Code: 403 , Description: Forbidden
 Code: 404 , Description: Not Found
 Code: 422 , Description: Validation Error
 Code: 429 , Description: Too Many Requests
 Code: 500 , Description: Internal Server Error
Sample Request:
 - Language: Csharp + Restsharp
 - Code:```
var client = new RestClient("https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D");
var request = new RestRequest(Method.DELETE);
request.AddHeader("project-key", "SOME_STRING_VALUE");
request.AddHeader("api-key", "SOME_STRING_VALUE");
IRestResponse response = client.Execute(request);```
 - Language: Csharp + Httpclient
 - Code:```
var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Delete,
    RequestUri = new Uri("https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D"),
    Headers =
    {
        { "project-key", "SOME_STRING_VALUE" },
        { "api-key", "SOME_STRING_VALUE" },
    },
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}```
 - Language: Go + Native
 - Code:```
package main

import (
	"fmt"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D"

	req, _ := http.NewRequest("DELETE", url, nil)

	req.Header.Add("project-key", "SOME_STRING_VALUE")
	req.Header.Add("api-key", "SOME_STRING_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}```
 - Language: Java + Okhttp
 - Code:```
OkHttpClient client = new OkHttpClient();

Request request = new Request.Builder()
  .url("https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D")
  .delete(null)
  .addHeader("project-key", "SOME_STRING_VALUE")
  .addHeader("api-key", "SOME_STRING_VALUE")
  .build();

Response response = client.newCall(request).execute();```
 - Language: Java + Unirest
 - Code:```
HttpResponse&lt;String&gt; response = Unirest.delete("https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D")
  .header("project-key", "SOME_STRING_VALUE")
  .header("api-key", "SOME_STRING_VALUE")
  .asString();```
 - Language: Javascript + Jquery
 - Code:```
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D",
  "method": "DELETE",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

$.ajax(settings).done(function (response) {
  console.log(response);
});```
 - Language: Javascript + Xhr
 - Code:```
const data = null;

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open("DELETE", "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D");
xhr.setRequestHeader("project-key", "SOME_STRING_VALUE");
xhr.setRequestHeader("api-key", "SOME_STRING_VALUE");

xhr.send(data);```
 - Language: Node + Native
 - Code:```
const http = require("https");

const options = {
  "method": "DELETE",
  "hostname": "api.recommender.gigalogy.com",
  "port": null,
  "path": "/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D",
  "headers": {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.end();```
 - Language: Node + Request
 - Code:```
const request = require('request');

const options = {
  method: 'DELETE',
  url: 'https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D',
  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
```
 - Language: Node + Unirest
 - Code:```
const unirest = require("unirest");

const req = unirest("DELETE", "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D");

req.headers({
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
});

req.end(function (res) {
  if (res.error) throw new Error(res.error);

  console.log(res.body);
});
```
 - Language: Objc + Nsurlsession
 - Code:```
#import &lt;Foundation/Foundation.h&gt;

NSDictionary *headers = @{ @"project-key": @"SOME_STRING_VALUE",
                           @"api-key": @"SOME_STRING_VALUE" };

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"DELETE"];
[request setAllHTTPHeaderFields:headers];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];```
 - Language: Php + Curl
 - Code:```
&lt;?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL =&gt; "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D",
  CURLOPT_RETURNTRANSFER =&gt; true,
  CURLOPT_ENCODING =&gt; "",
  CURLOPT_MAXREDIRS =&gt; 10,
  CURLOPT_TIMEOUT =&gt; 30,
  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST =&gt; "DELETE",
  CURLOPT_HTTPHEADER =&gt; [
    "api-key: SOME_STRING_VALUE",
    "project-key: SOME_STRING_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}```
 - Language: Php + Http1
 - Code:```
&lt;?php

$request = new HttpRequest();
$request-&gt;setUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D');
$request-&gt;setMethod(HTTP_METH_DELETE);

$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

try {
  $response = $request-&gt;send();

  echo $response-&gt;getBody();
} catch (HttpException $ex) {
  echo $ex;
}```
 - Language: Php + Http2
 - Code:```
&lt;?php

$client = new http\Client;
$request = new http\Client\Request;

$request-&gt;setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D');
$request-&gt;setRequestMethod('DELETE');
$request-&gt;setHeaders([
  'project-key' =&gt; 'SOME_STRING_VALUE',
  'api-key' =&gt; 'SOME_STRING_VALUE'
]);

$client-&gt;enqueue($request)-&gt;send();
$response = $client-&gt;getResponse();

echo $response-&gt;getBody();```
 - Language: Python + Python3
 - Code:```
import http.client

conn = http.client.HTTPSConnection("api.recommender.gigalogy.com")

headers = {
    'project-key': "SOME_STRING_VALUE",
    'api-key': "SOME_STRING_VALUE"
    }

conn.request("DELETE", "/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))```
 - Language: Python + Requests
 - Code:```
import requests

url = "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D"

headers = {
    "project-key": "SOME_STRING_VALUE",
    "api-key": "SOME_STRING_VALUE"
}

response = requests.request("DELETE", url, headers=headers)

print(response.text)```
 - Language: Ruby + Native
 - Code:```
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Delete.new(url)
request["project-key"] = 'SOME_STRING_VALUE'
request["api-key"] = 'SOME_STRING_VALUE'

response = http.request(request)
puts response.read_body```
 - Language: Shell + Curl
 - Code:```
curl --request DELETE \
  --url https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D \
  --header 'api-key: SOME_STRING_VALUE' \
  --header 'project-key: SOME_STRING_VALUE'```
 - Language: Swift + Nsurlsession
 - Code:```
import Foundation

let headers = [
  "project-key": "SOME_STRING_VALUE",
  "api-key": "SOME_STRING_VALUE"
]

let request = NSMutableURLRequest(url: NSURL(string: "https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "DELETE"
request.allHTTPHeaderFields = headers

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -&gt; Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()```

--------------------------------
