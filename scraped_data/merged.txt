URL: http://gigalogy.com/
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Bridging the Gap Between Technology and User Experience

Empowering Businesses to Unlock the Full Potential of AI

GET STARTED
Trusted by
      
Our Products

Our solutions are easy to integrate into web and mobile applications. They are affordable and designed to maximize end user satisfaction, brand loyalty, and business revenue.

Omnichannel Personalization for E-Commerce Businesses

Using our state-of-the-art AI engine, we transform E-Commerce businesses by enhancing product discovery, user engagement, revenue growth, and LTV.

LEARN MORE
Personalized GPT Application Development Platform

An innovative platform that empowers you to train and manage your very own GPT (Generative Pre-trained Transformer) models. Unlock the potential to build intelligent applications tailored to your specific needs.

LEARN MORE
Revolutionize Your AIOps with Our Fully Managed Infrastructure

G-Core is a fully managed, end-to-end automated AIOps solution. It ensures a smooth journey for businesses to host, train, deploy, and integrate their machine learning solutions into production environments.

LEARN MORE
AI-Driven Programmatic Advertising Management Platform

SmartAds is a programmatic advertising management platform that uses Artificial Intelligence to predict the optimum way of setting up digital campaigns, adjusting budget, measuring performance cross-platform in real-time and ensures optimum ROAS with transparency.

LEARN MORE
Why Gigalogy ?

Produce high impact outcomes much more efficiently (time & cost) and with greater value. Build services quickly that transforms data into business impacting decisions.

State of the Art AI Solutions

We provide state-of-the-art AI solutions for various industries.



User-First Approach

For every feature we build, our focus is always on the end-user experience.

Highly Customizable Solutions

Our block module architecture allows for customization according to customer needs in a short period of time.

What's New?
February 1st 2024

Our CEO participated in startup accelerator X-Hub Tokyo London program, in partnership with JETRO and L-Marks. Our goal for 2024? Forging strategic partnerships and building investor relations in the UK to fuel our growth.
Read More



▶ WATCH NOW
December 20th 2023

"Honored by the incredible opportunity we had to showcase Gigalogy's Personalization platform at Web Summit! On November 16th, our CEO, Mosleh Uddin, took the stage at the Startup Showcase pitch competition, sharing a glimpse into our journey and solutions that strive to make a difference."
Read More

December 14th 2023

Just wrapped up an insightful event with our partner Cross Compass, Ltd., exploring the frontiers of "Generative AI for the Manufacturing Industry." Here's a glimpse into the highlights and key takeaways of yesterday's talk.
Read More



December 13th 2023

We are thrilled to announce that we will be co-hosting an exclusive event with our partner, Cross Compass, Ltd., at our office on Wednesday, December 13th.
Read More





November 30th 2023

Our CEO, Mosleh Uddin, delivered an insightful pitch on stage, unveiling how our personalization platform can propel e-commerce businesses to new heights.
Read More

November 16th 2023

Our CEO, Mosleh Uddin, delivered a quickfire presentation to the audience at the Startup Showcase. The occasion for innovative startups to seize the spotlight,
Read More

READ MORE
Experience Box
Episode 3: Becoming an AI Professional

In our previous episodes, we’ve explored the motivations behind venturing into the AI business and the crucial considerations when starting a company. Now, our focus shifts ...
Read More

Episode 2: The Birth of “AI Solutions for Digital Products: Gigalogy AI Platform”

In the second episode of my journey, I found myself pondering a groundbreaking idea as a product manager. Back in 2017, the potential ...
Read More

Episode 1: My Journey to Japan and the Beginnings of My AI Adventure

In the first episode of my story, I want to take you back to the beginning, when my fascination with Artificial Intelligence (AI) first ...
Read More

Introduction to AI-driven Personalized Search Engine

Search engine makes it easy for users to find products and information relevant to their needs. Your application must have a search tool if you want to enhance the user’s ...
Read More

Don’t feel guilty for being a fashion addict anymore

Have you always dreamed of making money during your shopping? It seems your dream has come true ...
Read More



Gigalogy makes AI accessible to everyone

Gigalogy launched “Gigalogy AI Platform (GAIP)”, to dramatically facilitate AI development Gigalogy, a user experience first company ...
Read More

READ MORE
Are you ready to start building applications with greater value?
GET STARTED

Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Bridging the Gap Between Technology and User Experience

Empowering Businesses to Unlock the Full Potential of AI

GET STARTED
Trusted by
      
Our Products

Our solutions are easy to integrate into web and mobile applications. They are affordable and designed to maximize end user satisfaction, brand loyalty, and business revenue.

Omnichannel Personalization for E-Commerce Businesses

Using our state-of-the-art AI engine, we transform E-Commerce businesses by enhancing product discovery, user engagement, revenue growth, and LTV.

LEARN MORE
Personalized GPT Application Development Platform

An innovative platform that empowers you to train and manage your very own GPT (Generative Pre-trained Transformer) models. Unlock the potential to build intelligent applications tailored to your specific needs.

LEARN MORE
Revolutionize Your AIOps with Our Fully Managed Infrastructure

G-Core is a fully managed, end-to-end automated AIOps solution. It ensures a smooth journey for businesses to host, train, deploy, and integrate their machine learning solutions into production environments.

LEARN MORE
AI-Driven Programmatic Advertising Management Platform

SmartAds is a programmatic advertising management platform that uses Artificial Intelligence to predict the optimum way of setting up digital campaigns, adjusting budget, measuring performance cross-platform in real-time and ensures optimum ROAS with transparency.

LEARN MORE
Why Gigalogy ?

Produce high impact outcomes much more efficiently (time & cost) and with greater value. Build services quickly that transforms data into business impacting decisions.

State of the Art AI Solutions

We provide state-of-the-art AI solutions for various industries.



User-First Approach

For every feature we build, our focus is always on the end-user experience.

Highly Customizable Solutions

Our block module architecture allows for customization according to customer needs in a short period of time.

What's New?
February 1st 2024

Our CEO participated in startup accelerator X-Hub Tokyo London program, in partnership with JETRO and L-Marks. Our goal for 2024? Forging strategic partnerships and building investor relations in the UK to fuel our growth.
Read More



▶ WATCH NOW
December 20th 2023

"Honored by the incredible opportunity we had to showcase Gigalogy's Personalization platform at Web Summit! On November 16th, our CEO, Mosleh Uddin, took the stage at the Startup Showcase pitch competition, sharing a glimpse into our journey and solutions that strive to make a difference."
Read More

December 14th 2023

Just wrapped up an insightful event with our partner Cross Compass, Ltd., exploring the frontiers of "Generative AI for the Manufacturing Industry." Here's a glimpse into the highlights and key takeaways of yesterday's talk.
Read More



December 13th 2023

We are thrilled to announce that we will be co-hosting an exclusive event with our partner, Cross Compass, Ltd., at our office on Wednesday, December 13th.
Read More





November 30th 2023

Our CEO, Mosleh Uddin, delivered an insightful pitch on stage, unveiling how our personalization platform can propel e-commerce businesses to new heights.
Read More

November 16th 2023

Our CEO, Mosleh Uddin, delivered a quickfire presentation to the audience at the Startup Showcase. The occasion for innovative startups to seize the spotlight,
Read More

READ MORE
Experience Box
Episode 3: Becoming an AI Professional

In our previous episodes, we’ve explored the motivations behind venturing into the AI business and the crucial considerations when starting a company. Now, our focus shifts ...
Read More

Episode 2: The Birth of “AI Solutions for Digital Products: Gigalogy AI Platform”

In the second episode of my journey, I found myself pondering a groundbreaking idea as a product manager. Back in 2017, the potential ...
Read More

Episode 1: My Journey to Japan and the Beginnings of My AI Adventure

In the first episode of my story, I want to take you back to the beginning, when my fascination with Artificial Intelligence (AI) first ...
Read More

Introduction to AI-driven Personalized Search Engine

Search engine makes it easy for users to find products and information relevant to their needs. Your application must have a search tool if you want to enhance the user’s ...
Read More

Don’t feel guilty for being a fashion addict anymore

Have you always dreamed of making money during your shopping? It seems your dream has come true ...
Read More



Gigalogy makes AI accessible to everyone

Gigalogy launched “Gigalogy AI Platform (GAIP)”, to dramatically facilitate AI development Gigalogy, a user experience first company ...
Read More

READ MORE
Are you ready to start building applications with greater value?
GET STARTED

Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/#ja
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Bridging the Gap Between Technology and User Experience

Empowering Businesses to Unlock the Full Potential of AI

GET STARTED
Trusted by
      
Our Products

Our solutions are easy to integrate into web and mobile applications. They are affordable and designed to maximize end user satisfaction, brand loyalty, and business revenue.

Omnichannel Personalization for E-Commerce Businesses

Using our state-of-the-art AI engine, we transform E-Commerce businesses by enhancing product discovery, user engagement, revenue growth, and LTV.

LEARN MORE
Personalized GPT Application Development Platform

An innovative platform that empowers you to train and manage your very own GPT (Generative Pre-trained Transformer) models. Unlock the potential to build intelligent applications tailored to your specific needs.

LEARN MORE
Revolutionize Your AIOps with Our Fully Managed Infrastructure

G-Core is a fully managed, end-to-end automated AIOps solution. It ensures a smooth journey for businesses to host, train, deploy, and integrate their machine learning solutions into production environments.

LEARN MORE
AI-Driven Programmatic Advertising Management Platform

SmartAds is a programmatic advertising management platform that uses Artificial Intelligence to predict the optimum way of setting up digital campaigns, adjusting budget, measuring performance cross-platform in real-time and ensures optimum ROAS with transparency.

LEARN MORE
Why Gigalogy ?

Produce high impact outcomes much more efficiently (time & cost) and with greater value. Build services quickly that transforms data into business impacting decisions.

State of the Art AI Solutions

We provide state-of-the-art AI solutions for various industries.



User-First Approach

For every feature we build, our focus is always on the end-user experience.

Highly Customizable Solutions

Our block module architecture allows for customization according to customer needs in a short period of time.

What's New?
February 1st 2024

Our CEO participated in startup accelerator X-Hub Tokyo London program, in partnership with JETRO and L-Marks. Our goal for 2024? Forging strategic partnerships and building investor relations in the UK to fuel our growth.
Read More



▶ WATCH NOW
December 20th 2023

"Honored by the incredible opportunity we had to showcase Gigalogy's Personalization platform at Web Summit! On November 16th, our CEO, Mosleh Uddin, took the stage at the Startup Showcase pitch competition, sharing a glimpse into our journey and solutions that strive to make a difference."
Read More

December 14th 2023

Just wrapped up an insightful event with our partner Cross Compass, Ltd., exploring the frontiers of "Generative AI for the Manufacturing Industry." Here's a glimpse into the highlights and key takeaways of yesterday's talk.
Read More



December 13th 2023

We are thrilled to announce that we will be co-hosting an exclusive event with our partner, Cross Compass, Ltd., at our office on Wednesday, December 13th.
Read More





November 30th 2023

Our CEO, Mosleh Uddin, delivered an insightful pitch on stage, unveiling how our personalization platform can propel e-commerce businesses to new heights.
Read More

November 16th 2023

Our CEO, Mosleh Uddin, delivered a quickfire presentation to the audience at the Startup Showcase. The occasion for innovative startups to seize the spotlight,
Read More

READ MORE
Experience Box
Episode 3: Becoming an AI Professional

In our previous episodes, we’ve explored the motivations behind venturing into the AI business and the crucial considerations when starting a company. Now, our focus shifts ...
Read More

Episode 2: The Birth of “AI Solutions for Digital Products: Gigalogy AI Platform”

In the second episode of my journey, I found myself pondering a groundbreaking idea as a product manager. Back in 2017, the potential ...
Read More

Episode 1: My Journey to Japan and the Beginnings of My AI Adventure

In the first episode of my story, I want to take you back to the beginning, when my fascination with Artificial Intelligence (AI) first ...
Read More

Introduction to AI-driven Personalized Search Engine

Search engine makes it easy for users to find products and information relevant to their needs. Your application must have a search tool if you want to enhance the user’s ...
Read More

Don’t feel guilty for being a fashion addict anymore

Have you always dreamed of making money during your shopping? It seems your dream has come true ...
Read More



Gigalogy makes AI accessible to everyone

Gigalogy launched “Gigalogy AI Platform (GAIP)”, to dramatically facilitate AI development Gigalogy, a user experience first company ...
Read More

READ MORE
Are you ready to start building applications with greater value?
GET STARTED

Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/#hometop
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Bridging the Gap Between Technology and User Experience

Empowering Businesses to Unlock the Full Potential of AI

GET STARTED
Trusted by
      
Our Products

Our solutions are easy to integrate into web and mobile applications. They are affordable and designed to maximize end user satisfaction, brand loyalty, and business revenue.

Omnichannel Personalization for E-Commerce Businesses

Using our state-of-the-art AI engine, we transform E-Commerce businesses by enhancing product discovery, user engagement, revenue growth, and LTV.

LEARN MORE
Personalized GPT Application Development Platform

An innovative platform that empowers you to train and manage your very own GPT (Generative Pre-trained Transformer) models. Unlock the potential to build intelligent applications tailored to your specific needs.

LEARN MORE
Revolutionize Your AIOps with Our Fully Managed Infrastructure

G-Core is a fully managed, end-to-end automated AIOps solution. It ensures a smooth journey for businesses to host, train, deploy, and integrate their machine learning solutions into production environments.

LEARN MORE
AI-Driven Programmatic Advertising Management Platform

SmartAds is a programmatic advertising management platform that uses Artificial Intelligence to predict the optimum way of setting up digital campaigns, adjusting budget, measuring performance cross-platform in real-time and ensures optimum ROAS with transparency.

LEARN MORE
Why Gigalogy ?

Produce high impact outcomes much more efficiently (time & cost) and with greater value. Build services quickly that transforms data into business impacting decisions.

State of the Art AI Solutions

We provide state-of-the-art AI solutions for various industries.



User-First Approach

For every feature we build, our focus is always on the end-user experience.

Highly Customizable Solutions

Our block module architecture allows for customization according to customer needs in a short period of time.

What's New?
February 1st 2024

Our CEO participated in startup accelerator X-Hub Tokyo London program, in partnership with JETRO and L-Marks. Our goal for 2024? Forging strategic partnerships and building investor relations in the UK to fuel our growth.
Read More



▶ WATCH NOW
December 20th 2023

"Honored by the incredible opportunity we had to showcase Gigalogy's Personalization platform at Web Summit! On November 16th, our CEO, Mosleh Uddin, took the stage at the Startup Showcase pitch competition, sharing a glimpse into our journey and solutions that strive to make a difference."
Read More

December 14th 2023

Just wrapped up an insightful event with our partner Cross Compass, Ltd., exploring the frontiers of "Generative AI for the Manufacturing Industry." Here's a glimpse into the highlights and key takeaways of yesterday's talk.
Read More



December 13th 2023

We are thrilled to announce that we will be co-hosting an exclusive event with our partner, Cross Compass, Ltd., at our office on Wednesday, December 13th.
Read More





November 30th 2023

Our CEO, Mosleh Uddin, delivered an insightful pitch on stage, unveiling how our personalization platform can propel e-commerce businesses to new heights.
Read More

November 16th 2023

Our CEO, Mosleh Uddin, delivered a quickfire presentation to the audience at the Startup Showcase. The occasion for innovative startups to seize the spotlight,
Read More

READ MORE
Experience Box
Episode 3: Becoming an AI Professional

In our previous episodes, we’ve explored the motivations behind venturing into the AI business and the crucial considerations when starting a company. Now, our focus shifts ...
Read More

Episode 2: The Birth of “AI Solutions for Digital Products: Gigalogy AI Platform”

In the second episode of my journey, I found myself pondering a groundbreaking idea as a product manager. Back in 2017, the potential ...
Read More

Episode 1: My Journey to Japan and the Beginnings of My AI Adventure

In the first episode of my story, I want to take you back to the beginning, when my fascination with Artificial Intelligence (AI) first ...
Read More

Introduction to AI-driven Personalized Search Engine

Search engine makes it easy for users to find products and information relevant to their needs. Your application must have a search tool if you want to enhance the user’s ...
Read More

Don’t feel guilty for being a fashion addict anymore

Have you always dreamed of making money during your shopping? It seems your dream has come true ...
Read More



Gigalogy makes AI accessible to everyone

Gigalogy launched “Gigalogy AI Platform (GAIP)”, to dramatically facilitate AI development Gigalogy, a user experience first company ...
Read More

READ MORE
Are you ready to start building applications with greater value?
GET STARTED

Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/personalization-platform/
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Personalization platform for e-commerce businesses

We recommend the right products, at the right time, to the right person

GET STARTED USE CASES
On a mission to reshape the future of e-commerce
Boosting Product discovery,
amplifying User Engagement,
driving Revenue Growth and elevating LTV
with our all-in-one personalization platform
Introducing Gigalogy personalizer
FOCUS ON EACH STEP OF
THE USER JOURNEY
REAL TIME
EASY TO INTEGRATE,
IMMEDIATE RESULTS
AI DRIVEN (GENERATIVE AI)
Personalization, at each step of the user journey

From the onset, even before a user discovers the brand, the experience is tailored. Personalization continues seamlessly from the initial website visit through to checkout. With real-time personalization, our engine ensures that each step of the user journey is personalized, eliminating generic product recommendations and irrelevant content.

The 3 stages of personalization
Discovery phase:

Optimizing social media ad campaigns to target the ideal users.

Engagement phase:

Crafting a seamless shopping journey from the moment users arrive to checkout, aided by an AI assistant for guidance.

Nurture phase:

Offering ongoing personalized promotions to foster lasting customer loyalty.

How it works

Integrate our solutions to any web or mobile application using our SDKs / REST APIs with minimum effort and maximum efficiency. Built in cold start support, our solutions are capable of providing quality response even when there is not enough user behavior data.

CREATE A PROJECT
INTEGRATE DATA SOURCE
TRAIN
PUBLISH
ENJOY
Early customer success
50%
CTR improvement

DISCOVERY

20%
Revenue increase

FULFILLMENT

3X
Repeat users

RETENTION

Competitive advantage
Features	Gigalogy	Company M	Company V	Company R
Ease of Integration	check_circle	cancel	cancel	check_circle
Generative AI	check_circle	cancel	cancel	cancel
Focus on User Journey	check_circle	change_history	change_history	change_history
Speed of Result	check_circle	change_history	change_history	change_history
Real Time	check_circle	change_history	change_history	change_history
Price	check_circle	change_history	cancel	cancel
Designed for Developers	check_circle	change_history	change_history	change_history
Elevate your e-commerce
and skyrocket your conversion rate now
GET STARTED USE CASES


Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/personalization-platform/#ja
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Personalization platform for e-commerce businesses

We recommend the right products, at the right time, to the right person

GET STARTED USE CASES
On a mission to reshape the future of e-commerce
Boosting Product discovery,
amplifying User Engagement,
driving Revenue Growth and elevating LTV
with our all-in-one personalization platform
Introducing Gigalogy personalizer
FOCUS ON EACH STEP OF
THE USER JOURNEY
REAL TIME
EASY TO INTEGRATE,
IMMEDIATE RESULTS
AI DRIVEN (GENERATIVE AI)
Personalization, at each step of the user journey

From the onset, even before a user discovers the brand, the experience is tailored. Personalization continues seamlessly from the initial website visit through to checkout. With real-time personalization, our engine ensures that each step of the user journey is personalized, eliminating generic product recommendations and irrelevant content.

The 3 stages of personalization
Discovery phase:

Optimizing social media ad campaigns to target the ideal users.

Engagement phase:

Crafting a seamless shopping journey from the moment users arrive to checkout, aided by an AI assistant for guidance.

Nurture phase:

Offering ongoing personalized promotions to foster lasting customer loyalty.

How it works

Integrate our solutions to any web or mobile application using our SDKs / REST APIs with minimum effort and maximum efficiency. Built in cold start support, our solutions are capable of providing quality response even when there is not enough user behavior data.

CREATE A PROJECT
INTEGRATE DATA SOURCE
TRAIN
PUBLISH
ENJOY
Early customer success
50%
CTR improvement

DISCOVERY

20%
Revenue increase

FULFILLMENT

3X
Repeat users

RETENTION

Competitive advantage
Features	Gigalogy	Company M	Company V	Company R
Ease of Integration	check_circle	cancel	cancel	check_circle
Generative AI	check_circle	cancel	cancel	cancel
Focus on User Journey	check_circle	change_history	change_history	change_history
Speed of Result	check_circle	change_history	change_history	change_history
Real Time	check_circle	change_history	change_history	change_history
Price	check_circle	change_history	cancel	cancel
Designed for Developers	check_circle	change_history	change_history	change_history
Elevate your e-commerce
and skyrocket your conversion rate now
GET STARTED USE CASES


Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/personalization-platform/#hometop
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Personalization platform for e-commerce businesses

We recommend the right products, at the right time, to the right person

GET STARTED USE CASES
On a mission to reshape the future of e-commerce
Boosting Product discovery,
amplifying User Engagement,
driving Revenue Growth and elevating LTV
with our all-in-one personalization platform
Introducing Gigalogy personalizer
FOCUS ON EACH STEP OF
THE USER JOURNEY
REAL TIME
EASY TO INTEGRATE,
IMMEDIATE RESULTS
AI DRIVEN (GENERATIVE AI)
Personalization, at each step of the user journey

From the onset, even before a user discovers the brand, the experience is tailored. Personalization continues seamlessly from the initial website visit through to checkout. With real-time personalization, our engine ensures that each step of the user journey is personalized, eliminating generic product recommendations and irrelevant content.

The 3 stages of personalization
Discovery phase:

Optimizing social media ad campaigns to target the ideal users.

Engagement phase:

Crafting a seamless shopping journey from the moment users arrive to checkout, aided by an AI assistant for guidance.

Nurture phase:

Offering ongoing personalized promotions to foster lasting customer loyalty.

How it works

Integrate our solutions to any web or mobile application using our SDKs / REST APIs with minimum effort and maximum efficiency. Built in cold start support, our solutions are capable of providing quality response even when there is not enough user behavior data.

CREATE A PROJECT
INTEGRATE DATA SOURCE
TRAIN
PUBLISH
ENJOY
Early customer success
50%
CTR improvement

DISCOVERY

20%
Revenue increase

FULFILLMENT

3X
Repeat users

RETENTION

Competitive advantage
Features	Gigalogy	Company M	Company V	Company R
Ease of Integration	check_circle	cancel	cancel	check_circle
Generative AI	check_circle	cancel	cancel	cancel
Focus on User Journey	check_circle	change_history	change_history	change_history
Speed of Result	check_circle	change_history	change_history	change_history
Real Time	check_circle	change_history	change_history	change_history
Price	check_circle	change_history	cancel	cancel
Designed for Developers	check_circle	change_history	change_history	change_history
Elevate your e-commerce
and skyrocket your conversion rate now
GET STARTED USE CASES


Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/personalization-use-case/
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Personalization - Customer Stories

Here are some examples of how customers are using Gigalogy Personalization in their products.

GET STARTED

Recommend Travel Destinations and Personalized Promotions to Users

We personalize each step of the user journey, recommending the most suitable travel destinations and promotions for each user based on their preferences, behavior, and historical data.

CUSTOMER PROFILE

1. Travel search and booking application

2. Provide campaigns for local and in-bound travelers

HOW WE IMPROVED CUSTOMER BUSINESS?

1. CTR improvement by 50%

2. Conversion increased by 20%

Recommend Products and Beauty Advice for Individuals

We listen to each user's concerns, recommend the most suitable products, and advise them on how to address these concerns using our AI-enabled advisor that combines user preferences and behavior patterns.

CUSTOMER PROFILE

Beauty E-Commerce application

HOW WE IMPROVED CUSTOMER BUSINESS?

1. Product recommendations based on survey responses and user similarity.

2. GPT enabled beauty advisor.

Are you ready to start building applications with greater value?
GET STARTED

Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/personalization-use-case/#ja
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Personalization - Customer Stories

Here are some examples of how customers are using Gigalogy Personalization in their products.

GET STARTED

Recommend Travel Destinations and Personalized Promotions to Users

We personalize each step of the user journey, recommending the most suitable travel destinations and promotions for each user based on their preferences, behavior, and historical data.

CUSTOMER PROFILE

1. Travel search and booking application

2. Provide campaigns for local and in-bound travelers

HOW WE IMPROVED CUSTOMER BUSINESS?

1. CTR improvement by 50%

2. Conversion increased by 20%

Recommend Products and Beauty Advice for Individuals

We listen to each user's concerns, recommend the most suitable products, and advise them on how to address these concerns using our AI-enabled advisor that combines user preferences and behavior patterns.

CUSTOMER PROFILE

Beauty E-Commerce application

HOW WE IMPROVED CUSTOMER BUSINESS?

1. Product recommendations based on survey responses and user similarity.

2. GPT enabled beauty advisor.

Are you ready to start building applications with greater value?
GET STARTED

Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/personalization-use-case/#hometop
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Personalization - Customer Stories

Here are some examples of how customers are using Gigalogy Personalization in their products.

GET STARTED

Recommend Travel Destinations and Personalized Promotions to Users

We personalize each step of the user journey, recommending the most suitable travel destinations and promotions for each user based on their preferences, behavior, and historical data.

CUSTOMER PROFILE

1. Travel search and booking application

2. Provide campaigns for local and in-bound travelers

HOW WE IMPROVED CUSTOMER BUSINESS?

1. CTR improvement by 50%

2. Conversion increased by 20%

Recommend Products and Beauty Advice for Individuals

We listen to each user's concerns, recommend the most suitable products, and advise them on how to address these concerns using our AI-enabled advisor that combines user preferences and behavior patterns.

CUSTOMER PROFILE

Beauty E-Commerce application

HOW WE IMPROVED CUSTOMER BUSINESS?

1. Product recommendations based on survey responses and user similarity.

2. GPT enabled beauty advisor.

Are you ready to start building applications with greater value?
GET STARTED

Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/gpt-flow-platform/
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Personalized GPT Application Development Platform

An innovative platform that empowers you to train and manage your very own GPT (Generative Pre-Trained Transformer) models, unlocking the potential to build intelligent applications tailored to your specific needs.

REQUEST A DEMO USE CASES

Key Features of MyGPT
Data Ownership and Privacy
Customization and Personalization
Smart Application Development
Easy Integration
Model Management and Versioning
Scalability and Performance
Extensive Documentation and Support
Data Source
URL of a website/blog/article/news
Word document
Powerpoint
Excel/spreadsheet
CSV
insert_drive_file
JSON
picture_as_pdf
PDF
Image
Why MyGPT?

With MyGPT, you can harness the power of advanced natural language processing capabilities to create personalized virtual assistants, chatbots, recommendation systems, and much more.

How MyGPT Works?
1.
INTEGRATE DATA
2.
AUTOMATED TRAINING
3.
GENERATE API
4.
BUILD APPLICATIONS
Competitive Advantage
Features	MyGPT
Ease of Customization	check_circle
Usage Of Own Data	check_circle
Fine-tuning	check_circle
Model Management	check_circle
Ready To Use API	check_circle
Fully Managed Solution	check_circle
Multiple LLM model support	check_circle
Affordable	check_circle
Supported Language Models
gpt-3.5-turbo-instruct
gpt-3.5-turbo
gpt-3.5-turbo-16k
gpt-4
PaLM
Llama 2
Are you ready to start building applications with greater value?
REQUEST A DEMO USE CASES

Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/gpt-flow-platform/#ja
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Personalized GPT Application Development Platform

An innovative platform that empowers you to train and manage your very own GPT (Generative Pre-Trained Transformer) models, unlocking the potential to build intelligent applications tailored to your specific needs.

REQUEST A DEMO USE CASES

Key Features of MyGPT
Data Ownership and Privacy
Customization and Personalization
Smart Application Development
Easy Integration
Model Management and Versioning
Scalability and Performance
Extensive Documentation and Support
Data Source
URL of a website/blog/article/news
Word document
Powerpoint
Excel/spreadsheet
CSV
insert_drive_file
JSON
picture_as_pdf
PDF
Image
Why MyGPT?

With MyGPT, you can harness the power of advanced natural language processing capabilities to create personalized virtual assistants, chatbots, recommendation systems, and much more.

How MyGPT Works?
1.
INTEGRATE DATA
2.
AUTOMATED TRAINING
3.
GENERATE API
4.
BUILD APPLICATIONS
Competitive Advantage
Features	MyGPT
Ease of Customization	check_circle
Usage Of Own Data	check_circle
Fine-tuning	check_circle
Model Management	check_circle
Ready To Use API	check_circle
Fully Managed Solution	check_circle
Multiple LLM model support	check_circle
Affordable	check_circle
Supported Language Models
gpt-3.5-turbo-instruct
gpt-3.5-turbo
gpt-3.5-turbo-16k
gpt-4
PaLM
Llama 2
Are you ready to start building applications with greater value?
REQUEST A DEMO USE CASES

Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/gpt-flow-platform/#hometop
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Personalized GPT Application Development Platform

An innovative platform that empowers you to train and manage your very own GPT (Generative Pre-Trained Transformer) models, unlocking the potential to build intelligent applications tailored to your specific needs.

REQUEST A DEMO USE CASES

Key Features of MyGPT
Data Ownership and Privacy
Customization and Personalization
Smart Application Development
Easy Integration
Model Management and Versioning
Scalability and Performance
Extensive Documentation and Support
Data Source
URL of a website/blog/article/news
Word document
Powerpoint
Excel/spreadsheet
CSV
insert_drive_file
JSON
picture_as_pdf
PDF
Image
Why MyGPT?

With MyGPT, you can harness the power of advanced natural language processing capabilities to create personalized virtual assistants, chatbots, recommendation systems, and much more.

How MyGPT Works?
1.
INTEGRATE DATA
2.
AUTOMATED TRAINING
3.
GENERATE API
4.
BUILD APPLICATIONS
Competitive Advantage
Features	MyGPT
Ease of Customization	check_circle
Usage Of Own Data	check_circle
Fine-tuning	check_circle
Model Management	check_circle
Ready To Use API	check_circle
Fully Managed Solution	check_circle
Multiple LLM model support	check_circle
Affordable	check_circle
Supported Language Models
gpt-3.5-turbo-instruct
gpt-3.5-turbo
gpt-3.5-turbo-16k
gpt-4
PaLM
Llama 2
Are you ready to start building applications with greater value?
REQUEST A DEMO USE CASES

Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/gptflow-use-case/
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
MyGPT Use Cases

Here are some examples of how MyGPT can be used in different industries.

REQUEST A DEMO
Fashion

1. Product search feature where users can freely enter the design or trend they are looking for.

2. Automated chatbot application that responds to customer inquiries.

3. Feature that allows real-time inquiries about product details and checks delivery status.

Beauty

1. "Beauty Advisor" that facilitates a conversational inquiry about beauty concerns and offers advice from our proprietary GPT.

2. Feature that allows product searches based on individual beauty-related concerns.

Travel

In hotels, we utilize our proprietary GPT to provide a 24-hour virtual concierge that responds to general inquiries about room services and facilities.

Food and beverages

1. Feature that generates original recipes based on user preferences and ingredients they have on hand.

2. Extracting insights from feedback and reviews

3. Capability to propose new product ideas based on market trends and consumer needs.

Medical

An interactive advisor that, when provided with a patient's symptoms or concerns, offers information on potential illnesses and recommended next steps.

Education

By developing an AI assistant for teachers and students, it can respond to individual learning questions and recommend educational resources.

Manufacturing

1. An AI assistant designed for troubleshooting and proposing optimizations for manufacturing lines.

2. Factory staff can input questions about equipment issues or processes, and our proprietary GPT instantly offers solutions and suggestions.

Are you ready to start building applications with greater value?
REQUEST A DEMO

Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/gptflow-use-case/#ja
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
MyGPT Use Cases

Here are some examples of how MyGPT can be used in different industries.

REQUEST A DEMO
Fashion

1. Product search feature where users can freely enter the design or trend they are looking for.

2. Automated chatbot application that responds to customer inquiries.

3. Feature that allows real-time inquiries about product details and checks delivery status.

Beauty

1. "Beauty Advisor" that facilitates a conversational inquiry about beauty concerns and offers advice from our proprietary GPT.

2. Feature that allows product searches based on individual beauty-related concerns.

Travel

In hotels, we utilize our proprietary GPT to provide a 24-hour virtual concierge that responds to general inquiries about room services and facilities.

Food and beverages

1. Feature that generates original recipes based on user preferences and ingredients they have on hand.

2. Extracting insights from feedback and reviews

3. Capability to propose new product ideas based on market trends and consumer needs.

Medical

An interactive advisor that, when provided with a patient's symptoms or concerns, offers information on potential illnesses and recommended next steps.

Education

By developing an AI assistant for teachers and students, it can respond to individual learning questions and recommend educational resources.

Manufacturing

1. An AI assistant designed for troubleshooting and proposing optimizations for manufacturing lines.

2. Factory staff can input questions about equipment issues or processes, and our proprietary GPT instantly offers solutions and suggestions.

Are you ready to start building applications with greater value?
REQUEST A DEMO

Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/gptflow-use-case/#hometop
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
MyGPT Use Cases

Here are some examples of how MyGPT can be used in different industries.

REQUEST A DEMO
Fashion

1. Product search feature where users can freely enter the design or trend they are looking for.

2. Automated chatbot application that responds to customer inquiries.

3. Feature that allows real-time inquiries about product details and checks delivery status.

Beauty

1. "Beauty Advisor" that facilitates a conversational inquiry about beauty concerns and offers advice from our proprietary GPT.

2. Feature that allows product searches based on individual beauty-related concerns.

Travel

In hotels, we utilize our proprietary GPT to provide a 24-hour virtual concierge that responds to general inquiries about room services and facilities.

Food and beverages

1. Feature that generates original recipes based on user preferences and ingredients they have on hand.

2. Extracting insights from feedback and reviews

3. Capability to propose new product ideas based on market trends and consumer needs.

Medical

An interactive advisor that, when provided with a patient's symptoms or concerns, offers information on potential illnesses and recommended next steps.

Education

By developing an AI assistant for teachers and students, it can respond to individual learning questions and recommend educational resources.

Manufacturing

1. An AI assistant designed for troubleshooting and proposing optimizations for manufacturing lines.

2. Factory staff can input questions about equipment issues or processes, and our proprietary GPT instantly offers solutions and suggestions.

Are you ready to start building applications with greater value?
REQUEST A DEMO

Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/gcore-platform/
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Revolutionize your AIOps with our Fully Managed Infrastructure

G-Core is a fully managed, end-to-end automated AIOps solution that ensures a smooth journey for businesses to host, train, deploy, and integrate their machine learning solutions into production environments.

REQUEST A DEMO
Key Features Of G-Core
Fully Managed Solutions



No need to process data, tune machine learning models, think about infrastructure, load balancing, cluster.



Multi-Cloud Infrastructure



G-Core comes with Multi-cloud support. This ensures availability of service due to any interruption in any zones. You can also choose your favorite cloud infrastructure and zones.

Automated Data Pipeline



G-core AI pipeline consists of automated data collection, training, optimum model selection and real time prediction.



24/7 Monitoring



G-core comes with 24/7 monitoring capability. This includes real time CPU, memory usage, running processes, log analysis etc.



3rd Party Integration



G-Core provides various 3rd party integration for training data sources. Besides, it also provides integration support for slack, teams etc.

Designed For Developers



G-Core comes with easy to use APIs. This ensures smooth integration of AI solutions.



Why G-Core ?
Faster Model Development & Integration
Build the best models while we handle the infrastructure.
Reliability & Scalability
Our system boasts 99.5%+ availability, is both scalable and redundant, and offers battle-tested reliability.
How G-Core Works?
At Gigalogy, We Simplify AIOps


Our customers don't need to worry about developing software for machine learning models, deploying them to servers, building data pipelines, or retraining.


Gigalogy's AIOps infrastructure manages each step, ensuring an enjoyable AI journey for our customers.


Competitive Advantage
Features	G-Core	SageMaker
Ease of Customization	check_circle	cancel
Multi-Cloud Infrastructure	check_circle	cancel
Optimizing Resource Usage	check_circle	change_history
Affordable	check_circle	cancel
Automated Data pipeline	check_circle	change_history
Are you ready to start building applications with greater value?
REQUEST A DEMO

Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/gcore-platform/#ja
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Revolutionize your AIOps with our Fully Managed Infrastructure

G-Core is a fully managed, end-to-end automated AIOps solution that ensures a smooth journey for businesses to host, train, deploy, and integrate their machine learning solutions into production environments.

REQUEST A DEMO
Key Features Of G-Core
Fully Managed Solutions



No need to process data, tune machine learning models, think about infrastructure, load balancing, cluster.



Multi-Cloud Infrastructure



G-Core comes with Multi-cloud support. This ensures availability of service due to any interruption in any zones. You can also choose your favorite cloud infrastructure and zones.

Automated Data Pipeline



G-core AI pipeline consists of automated data collection, training, optimum model selection and real time prediction.



24/7 Monitoring



G-core comes with 24/7 monitoring capability. This includes real time CPU, memory usage, running processes, log analysis etc.



3rd Party Integration



G-Core provides various 3rd party integration for training data sources. Besides, it also provides integration support for slack, teams etc.

Designed For Developers



G-Core comes with easy to use APIs. This ensures smooth integration of AI solutions.



Why G-Core ?
Faster Model Development & Integration
Build the best models while we handle the infrastructure.
Reliability & Scalability
Our system boasts 99.5%+ availability, is both scalable and redundant, and offers battle-tested reliability.
How G-Core Works?
At Gigalogy, We Simplify AIOps


Our customers don't need to worry about developing software for machine learning models, deploying them to servers, building data pipelines, or retraining.


Gigalogy's AIOps infrastructure manages each step, ensuring an enjoyable AI journey for our customers.


Competitive Advantage
Features	G-Core	SageMaker
Ease of Customization	check_circle	cancel
Multi-Cloud Infrastructure	check_circle	cancel
Optimizing Resource Usage	check_circle	change_history
Affordable	check_circle	cancel
Automated Data pipeline	check_circle	change_history
Are you ready to start building applications with greater value?
REQUEST A DEMO

Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/gcore-platform/#hometop
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Revolutionize your AIOps with our Fully Managed Infrastructure

G-Core is a fully managed, end-to-end automated AIOps solution that ensures a smooth journey for businesses to host, train, deploy, and integrate their machine learning solutions into production environments.

REQUEST A DEMO
Key Features Of G-Core
Fully Managed Solutions



No need to process data, tune machine learning models, think about infrastructure, load balancing, cluster.



Multi-Cloud Infrastructure



G-Core comes with Multi-cloud support. This ensures availability of service due to any interruption in any zones. You can also choose your favorite cloud infrastructure and zones.

Automated Data Pipeline



G-core AI pipeline consists of automated data collection, training, optimum model selection and real time prediction.



24/7 Monitoring



G-core comes with 24/7 monitoring capability. This includes real time CPU, memory usage, running processes, log analysis etc.



3rd Party Integration



G-Core provides various 3rd party integration for training data sources. Besides, it also provides integration support for slack, teams etc.

Designed For Developers



G-Core comes with easy to use APIs. This ensures smooth integration of AI solutions.



Why G-Core ?
Faster Model Development & Integration
Build the best models while we handle the infrastructure.
Reliability & Scalability
Our system boasts 99.5%+ availability, is both scalable and redundant, and offers battle-tested reliability.
How G-Core Works?
At Gigalogy, We Simplify AIOps


Our customers don't need to worry about developing software for machine learning models, deploying them to servers, building data pipelines, or retraining.


Gigalogy's AIOps infrastructure manages each step, ensuring an enjoyable AI journey for our customers.


Competitive Advantage
Features	G-Core	SageMaker
Ease of Customization	check_circle	cancel
Multi-Cloud Infrastructure	check_circle	cancel
Optimizing Resource Usage	check_circle	change_history
Affordable	check_circle	cancel
Automated Data pipeline	check_circle	change_history
Are you ready to start building applications with greater value?
REQUEST A DEMO

Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/smartads-platform/
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
AI-Driven Programmatic Advertising Management Platform

SmartAds is a programmatic advertising management platform that uses Artificial Intelligence to predict the optimum way of setting up digital campaigns, adjusting budget, measuring performance cross-platform in real-time and ensures optimum ROAS with transparency.

REQUEST A DEMO USE CASES

Key Features Of SmartAds
Predict the optimum budget for a specific platform / segment real time based on your campaign goals
Predict likelihood of user engaging to a creative element / ad
Real time reporting


Complete transparency on each stage of campaign management
Why SmartAds ?
Support With Multiple Goal Settings
AI Based Daily Budget Prediction
Cross Platform Real-Time Reporting
1.
SETUP GOALS & BUDGET
2.
DISTRIBUTE THE BUDGET ON DIFFERENT PLATFORMS
3.
RUN THE CAMPAIGNS ON DIFFERENT PLATFORMS
4.
GATHER ANALYTICS & MEASURE PERFORMANCES
How SmartAds Works?
The value customers receive

0%

Zero human error

90%

Campaign management cost decreased

100%

Transparent performance measurement according to the goals

Supported Platform
Are you ready to start building applications with greater value?
REQUEST A DEMO USE CASES

Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/smartads-platform/#ja
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
AI-Driven Programmatic Advertising Management Platform

SmartAds is a programmatic advertising management platform that uses Artificial Intelligence to predict the optimum way of setting up digital campaigns, adjusting budget, measuring performance cross-platform in real-time and ensures optimum ROAS with transparency.

REQUEST A DEMO USE CASES

Key Features Of SmartAds
Predict the optimum budget for a specific platform / segment real time based on your campaign goals
Predict likelihood of user engaging to a creative element / ad
Real time reporting


Complete transparency on each stage of campaign management
Why SmartAds ?
Support With Multiple Goal Settings
AI Based Daily Budget Prediction
Cross Platform Real-Time Reporting
1.
SETUP GOALS & BUDGET
2.
DISTRIBUTE THE BUDGET ON DIFFERENT PLATFORMS
3.
RUN THE CAMPAIGNS ON DIFFERENT PLATFORMS
4.
GATHER ANALYTICS & MEASURE PERFORMANCES
How SmartAds Works?
The value customers receive

0%

Zero human error

90%

Campaign management cost decreased

100%

Transparent performance measurement according to the goals

Supported Platform
Are you ready to start building applications with greater value?
REQUEST A DEMO USE CASES

Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/smartads-platform/#hometop
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
AI-Driven Programmatic Advertising Management Platform

SmartAds is a programmatic advertising management platform that uses Artificial Intelligence to predict the optimum way of setting up digital campaigns, adjusting budget, measuring performance cross-platform in real-time and ensures optimum ROAS with transparency.

REQUEST A DEMO USE CASES

Key Features Of SmartAds
Predict the optimum budget for a specific platform / segment real time based on your campaign goals
Predict likelihood of user engaging to a creative element / ad
Real time reporting


Complete transparency on each stage of campaign management
Why SmartAds ?
Support With Multiple Goal Settings
AI Based Daily Budget Prediction
Cross Platform Real-Time Reporting
1.
SETUP GOALS & BUDGET
2.
DISTRIBUTE THE BUDGET ON DIFFERENT PLATFORMS
3.
RUN THE CAMPAIGNS ON DIFFERENT PLATFORMS
4.
GATHER ANALYTICS & MEASURE PERFORMANCES
How SmartAds Works?
The value customers receive

0%

Zero human error

90%

Campaign management cost decreased

100%

Transparent performance measurement according to the goals

Supported Platform
Are you ready to start building applications with greater value?
REQUEST A DEMO USE CASES

Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/smartads-use-case/
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
SmartAds Customer Stories

Here are some examples of how customers are using SmartAds in their targeted advertising campaign management.

REQUEST A DEMO
Complete Solution for Maximizing ROAS with AI

Our solution enables customers to run targeted ad campaigns across multiple channels, optimizing ad spend and eliminating human error.

CUSTOMER PROFILE

Manages targeted ad delivery for over 100 brands using proprietary data.

HOW WE IMPROVED CUSTOMER BUSINESS?

1. ZERO human error

2. 90% cost reduction in campaign management

3. Optimization of advertising groups using recommendation engine and maximizing ROAS (Return on Advertising Spend).

Are you ready to start building applications with greater value?
REQUEST A DEMO

Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/smartads-use-case/#ja
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
SmartAds Customer Stories

Here are some examples of how customers are using SmartAds in their targeted advertising campaign management.

REQUEST A DEMO
Complete Solution for Maximizing ROAS with AI

Our solution enables customers to run targeted ad campaigns across multiple channels, optimizing ad spend and eliminating human error.

CUSTOMER PROFILE

Manages targeted ad delivery for over 100 brands using proprietary data.

HOW WE IMPROVED CUSTOMER BUSINESS?

1. ZERO human error

2. 90% cost reduction in campaign management

3. Optimization of advertising groups using recommendation engine and maximizing ROAS (Return on Advertising Spend).

Are you ready to start building applications with greater value?
REQUEST A DEMO

Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/smartads-use-case/#hometop
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
SmartAds Customer Stories

Here are some examples of how customers are using SmartAds in their targeted advertising campaign management.

REQUEST A DEMO
Complete Solution for Maximizing ROAS with AI

Our solution enables customers to run targeted ad campaigns across multiple channels, optimizing ad spend and eliminating human error.

CUSTOMER PROFILE

Manages targeted ad delivery for over 100 brands using proprietary data.

HOW WE IMPROVED CUSTOMER BUSINESS?

1. ZERO human error

2. 90% cost reduction in campaign management

3. Optimization of advertising groups using recommendation engine and maximizing ROAS (Return on Advertising Spend).

Are you ready to start building applications with greater value?
REQUEST A DEMO

Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/about-us/
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Corporate Profile

Gigalogy is a user experience first company building useful and enduring technology products

Jan 17th, 2020 — Gigalogy was born in Tokyo

Jan, 2020 — Gigalogy opened office in Dhaka, Bangladesh

May, 2020 — Released SmartAds: AI driven programmatic advertising delivery management platform
May, 2021 — Alpha release of Gigalogy AI Platform (GAIP)
Feb, 2022 — Released Doozie Token (DZT) to public blockchain
May, 2022 — Beta release of Gigalogy AI Platform (GAIP)
Jun, 2022 — Opened office in Dubai, UAE
Jan, 2023 — Selected as a finalist in the JETRO Silicon Valley pitch competition

Feb, 2023 — Released G-Core, a fully managed infrastructure for simplifying AIOps

May, 2023 — Beta release of personalized GPT application development platform.

Oct, 2023 — Announcement of partnership with CrossCompass & establishment of Pivotal AI Institute.

Head Office - Gigalogy Inc.
23F, 4-1-1 Toranomon, Minato, Tokyo 105-6923


Executives: Mosleh Uddin, CEO
Email: info@gigalogy.com
Phone: +813-4500-7914

We're always looking for talent

Got what it takes to work with us? Great! Send us a link to your resumé or portfolio to become part of our talent pool.

SEE JOB OPENINGS


Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/about-us/#ja
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Corporate Profile

Gigalogy is a user experience first company building useful and enduring technology products

Jan 17th, 2020 — Gigalogy was born in Tokyo

Jan, 2020 — Gigalogy opened office in Dhaka, Bangladesh

May, 2020 — Released SmartAds: AI driven programmatic advertising delivery management platform
May, 2021 — Alpha release of Gigalogy AI Platform (GAIP)
Feb, 2022 — Released Doozie Token (DZT) to public blockchain
May, 2022 — Beta release of Gigalogy AI Platform (GAIP)
Jun, 2022 — Opened office in Dubai, UAE
Jan, 2023 — Selected as a finalist in the JETRO Silicon Valley pitch competition

Feb, 2023 — Released G-Core, a fully managed infrastructure for simplifying AIOps

May, 2023 — Beta release of personalized GPT application development platform.

Oct, 2023 — Announcement of partnership with CrossCompass & establishment of Pivotal AI Institute.

Head Office - Gigalogy Inc.
23F, 4-1-1 Toranomon, Minato, Tokyo 105-6923


Executives: Mosleh Uddin, CEO
Email: info@gigalogy.com
Phone: +813-4500-7914

We're always looking for talent

Got what it takes to work with us? Great! Send us a link to your resumé or portfolio to become part of our talent pool.

SEE JOB OPENINGS


Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/about-us/#hometop
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Corporate Profile

Gigalogy is a user experience first company building useful and enduring technology products

Jan 17th, 2020 — Gigalogy was born in Tokyo

Jan, 2020 — Gigalogy opened office in Dhaka, Bangladesh

May, 2020 — Released SmartAds: AI driven programmatic advertising delivery management platform
May, 2021 — Alpha release of Gigalogy AI Platform (GAIP)
Feb, 2022 — Released Doozie Token (DZT) to public blockchain
May, 2022 — Beta release of Gigalogy AI Platform (GAIP)
Jun, 2022 — Opened office in Dubai, UAE
Jan, 2023 — Selected as a finalist in the JETRO Silicon Valley pitch competition

Feb, 2023 — Released G-Core, a fully managed infrastructure for simplifying AIOps

May, 2023 — Beta release of personalized GPT application development platform.

Oct, 2023 — Announcement of partnership with CrossCompass & establishment of Pivotal AI Institute.

Head Office - Gigalogy Inc.
23F, 4-1-1 Toranomon, Minato, Tokyo 105-6923


Executives: Mosleh Uddin, CEO
Email: info@gigalogy.com
Phone: +813-4500-7914

We're always looking for talent

Got what it takes to work with us? Great! Send us a link to your resumé or portfolio to become part of our talent pool.

SEE JOB OPENINGS


Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/mission/
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Our Mission

Our DNA is reflected in our name. Gigalogy is a contraction of Giga and Analogy. Giga represents a huge number, and analogy, a comparison between one thing to another for explanation. In the world of Artificial Intelligence, there could be billions of patterns that we can not imagine with our mind. Our mission is to make sure these unknown patterns can be transformed into something easy to understand and meaningful for everyone.

User first approach
Innovative solutions
Industry knowledge
Team of professionals
From gut-driven to data driven organization

We are aiming a cultural transition from gut driven, historical precedent based organization to data driven and / or data informed organization for our customers.



Deliver solutions that result in good experience

AI solutions that are able to deliver products and services that are useful, better than the alternatives, are enjoyable and delightful, and result in good experience.

We're always looking for talent

Got what it takes to work with us? Great! Send us a link to your resumé or portfolio to become part of our talent pool.

SEE JOB OPENINGS


Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/mission/#ja
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Our Mission

Our DNA is reflected in our name. Gigalogy is a contraction of Giga and Analogy. Giga represents a huge number, and analogy, a comparison between one thing to another for explanation. In the world of Artificial Intelligence, there could be billions of patterns that we can not imagine with our mind. Our mission is to make sure these unknown patterns can be transformed into something easy to understand and meaningful for everyone.

User first approach
Innovative solutions
Industry knowledge
Team of professionals
From gut-driven to data driven organization

We are aiming a cultural transition from gut driven, historical precedent based organization to data driven and / or data informed organization for our customers.



Deliver solutions that result in good experience

AI solutions that are able to deliver products and services that are useful, better than the alternatives, are enjoyable and delightful, and result in good experience.

We're always looking for talent

Got what it takes to work with us? Great! Send us a link to your resumé or portfolio to become part of our talent pool.

SEE JOB OPENINGS


Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/mission/#hometop
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Our Mission

Our DNA is reflected in our name. Gigalogy is a contraction of Giga and Analogy. Giga represents a huge number, and analogy, a comparison between one thing to another for explanation. In the world of Artificial Intelligence, there could be billions of patterns that we can not imagine with our mind. Our mission is to make sure these unknown patterns can be transformed into something easy to understand and meaningful for everyone.

User first approach
Innovative solutions
Industry knowledge
Team of professionals
From gut-driven to data driven organization

We are aiming a cultural transition from gut driven, historical precedent based organization to data driven and / or data informed organization for our customers.



Deliver solutions that result in good experience

AI solutions that are able to deliver products and services that are useful, better than the alternatives, are enjoyable and delightful, and result in good experience.

We're always looking for talent

Got what it takes to work with us? Great! Send us a link to your resumé or portfolio to become part of our talent pool.

SEE JOB OPENINGS


Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/team/
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Our Team

Our team consists of visionaries, software engineers experienced in developing highly scalable systems, proven track record in building products maximizing user satisfaction.

Tokyo Office
Mosleh Uddin
Chief Executive Officer


Technical leader with experience in Financial Services, Digital Marketing. Worked as a Software Engineer, Product Manager and launched successful B2B SaaS product that generated $5M+ ARR in first 2 years.

 
Moin Uddin
Chief Technology Officer


With 10+ years of experience in software development Moin has worked on building highly scalable systems supporting millions of users in the largest internet company in Japan.

  
Perrine Mairre
Marketing Manager


Passionate about digital marketing & innovation, Perrine previously worked at developing the engagement of mobile learning apps in one of the largest fashion company in the world.

Rawmy Jurshad
Product Manager


6 years of experience, in finance, fintech and consulting. Client-focused approach, continuous improvement advocate.

Dhaka Office
Md Mohiuddin
Country Director, Bangladesh
  
Md Tariqul Islam
HR Manager, UI/UX Engineer
   
Md Rokon Uz Zaman Sumon
Senior Software Engineer
   
Mudassir Zakaria
Senior Software Engineer
   
Joyita Hossain
Software Engineer
  
Abu Nesar Shahin
Software Engineer
   
Farhana Afrin
Software Engineer
   
Saiful Islam
Software Engineer
   
Sabbir Talukdar
Software Engineer
 
Israt Jerin Bristy
Software Engineer
   
Md Khyrul Bashar
Software Engineer
  
Sazzadul Islam
Software Engineer
  
Al-Amin Sarker
Software Engineer
   
Sadia Saman
Software Engineer
  
Omar Hasan
Software Engineer
  
Dipu Miah
Software Engineer
  
Md Soyad Al Rajib
Software Engineer
  
Sakeef Ameer Prodhan
Software Engineer
 
Md Alif Hossain Saurab
Software Engineer
  
Plabon Datta
Software Engineer
  
S. M. Afif Ibne Hayat
Software Engineer
  
Advisors
Masahito Ito
Corporate Strategy & Finance


High level of insight in IPO in addition to overall corporate management, and currently supports corporate growth as an advisor to public companies and startups.

We're always looking for talent

Got what it takes to work with us? Great! Send us a link to your resumé or portfolio to become part of our talent pool.

SEE JOB OPENINGS


Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/team/#ja
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Our Team

Our team consists of visionaries, software engineers experienced in developing highly scalable systems, proven track record in building products maximizing user satisfaction.

Tokyo Office
Mosleh Uddin
Chief Executive Officer


Technical leader with experience in Financial Services, Digital Marketing. Worked as a Software Engineer, Product Manager and launched successful B2B SaaS product that generated $5M+ ARR in first 2 years.

 
Moin Uddin
Chief Technology Officer


With 10+ years of experience in software development Moin has worked on building highly scalable systems supporting millions of users in the largest internet company in Japan.

  
Perrine Mairre
Marketing Manager


Passionate about digital marketing & innovation, Perrine previously worked at developing the engagement of mobile learning apps in one of the largest fashion company in the world.

Rawmy Jurshad
Product Manager


6 years of experience, in finance, fintech and consulting. Client-focused approach, continuous improvement advocate.

Dhaka Office
Md Mohiuddin
Country Director, Bangladesh
  
Md Tariqul Islam
HR Manager, UI/UX Engineer
   
Md Rokon Uz Zaman Sumon
Senior Software Engineer
   
Mudassir Zakaria
Senior Software Engineer
   
Joyita Hossain
Software Engineer
  
Abu Nesar Shahin
Software Engineer
   
Farhana Afrin
Software Engineer
   
Saiful Islam
Software Engineer
   
Sabbir Talukdar
Software Engineer
 
Israt Jerin Bristy
Software Engineer
   
Md Khyrul Bashar
Software Engineer
  
Sazzadul Islam
Software Engineer
  
Al-Amin Sarker
Software Engineer
   
Sadia Saman
Software Engineer
  
Omar Hasan
Software Engineer
  
Dipu Miah
Software Engineer
  
Md Soyad Al Rajib
Software Engineer
  
Sakeef Ameer Prodhan
Software Engineer
 
Md Alif Hossain Saurab
Software Engineer
  
Plabon Datta
Software Engineer
  
S. M. Afif Ibne Hayat
Software Engineer
  
Advisors
Masahito Ito
Corporate Strategy & Finance


High level of insight in IPO in addition to overall corporate management, and currently supports corporate growth as an advisor to public companies and startups.

We're always looking for talent

Got what it takes to work with us? Great! Send us a link to your resumé or portfolio to become part of our talent pool.

SEE JOB OPENINGS


Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/team/#hometop
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Our Team

Our team consists of visionaries, software engineers experienced in developing highly scalable systems, proven track record in building products maximizing user satisfaction.

Tokyo Office
Mosleh Uddin
Chief Executive Officer


Technical leader with experience in Financial Services, Digital Marketing. Worked as a Software Engineer, Product Manager and launched successful B2B SaaS product that generated $5M+ ARR in first 2 years.

 
Moin Uddin
Chief Technology Officer


With 10+ years of experience in software development Moin has worked on building highly scalable systems supporting millions of users in the largest internet company in Japan.

  
Perrine Mairre
Marketing Manager


Passionate about digital marketing & innovation, Perrine previously worked at developing the engagement of mobile learning apps in one of the largest fashion company in the world.

Rawmy Jurshad
Product Manager


6 years of experience, in finance, fintech and consulting. Client-focused approach, continuous improvement advocate.

Dhaka Office
Md Mohiuddin
Country Director, Bangladesh
  
Md Tariqul Islam
HR Manager, UI/UX Engineer
   
Md Rokon Uz Zaman Sumon
Senior Software Engineer
   
Mudassir Zakaria
Senior Software Engineer
   
Joyita Hossain
Software Engineer
  
Abu Nesar Shahin
Software Engineer
   
Farhana Afrin
Software Engineer
   
Saiful Islam
Software Engineer
   
Sabbir Talukdar
Software Engineer
 
Israt Jerin Bristy
Software Engineer
   
Md Khyrul Bashar
Software Engineer
  
Sazzadul Islam
Software Engineer
  
Al-Amin Sarker
Software Engineer
   
Sadia Saman
Software Engineer
  
Omar Hasan
Software Engineer
  
Dipu Miah
Software Engineer
  
Md Soyad Al Rajib
Software Engineer
  
Sakeef Ameer Prodhan
Software Engineer
 
Md Alif Hossain Saurab
Software Engineer
  
Plabon Datta
Software Engineer
  
S. M. Afif Ibne Hayat
Software Engineer
  
Advisors
Masahito Ito
Corporate Strategy & Finance


High level of insight in IPO in addition to overall corporate management, and currently supports corporate growth as an advisor to public companies and startups.

We're always looking for talent

Got what it takes to work with us? Great! Send us a link to your resumé or portfolio to become part of our talent pool.

SEE JOB OPENINGS


Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/career/
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Career

At Gigalogy you will be working with talented, creative, driven individuals who are revolutionizing how technology should improve human experience.

 Culture

We have a problem solving approach, move fast and reward hard work. We love working on projects we are very passionate about. You will have a voice in everything we do here, we will work on the challenges together and find the best solution by supporting each other. 

 

We believe happy employee can create great user experience thus happy customers. Employee satisfaction is at the core of our company culture. 

 Learning

We are committed to build an organization where each member can reach their fullest potential. We have employee learning program where each member can take courses to learn new technologies and try those in different projects. 

Current Openings


Customer Success Manager


SALES

Tokyo, Japan


APPLY



Product Manager


PRODUCT

Tokyo, Japan


APPLY



Solution Consultant


SALES

Tokyo, Japan


APPLY



Marketing Associate


PRODUCT

Tokyo, Japan


APPLY



Software Engineer - PHP


ENGINEERING

Dhaka, Bangladesh


APPLY



Software Engineer - Backend


ENGINEERING

Dhaka, Bangladesh


APPLY



Software Engineer - ML


ENGINEERING

Dhaka, Bangladesh


APPLY



Software Engineer - Frontend


ENGINEERING

Dhaka, Bangladesh


APPLY



Cloud Infrastructure Engineer


ENGINEERING

Dhaka, Bangladesh


APPLY



Software Engineer - Intern


ENGINEERING

Dhaka, Bangladesh


APPLY


Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/career/#ja
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Career

At Gigalogy you will be working with talented, creative, driven individuals who are revolutionizing how technology should improve human experience.

 Culture

We have a problem solving approach, move fast and reward hard work. We love working on projects we are very passionate about. You will have a voice in everything we do here, we will work on the challenges together and find the best solution by supporting each other. 

 

We believe happy employee can create great user experience thus happy customers. Employee satisfaction is at the core of our company culture. 

 Learning

We are committed to build an organization where each member can reach their fullest potential. We have employee learning program where each member can take courses to learn new technologies and try those in different projects. 

Current Openings


Customer Success Manager


SALES

Tokyo, Japan


APPLY



Product Manager


PRODUCT

Tokyo, Japan


APPLY



Solution Consultant


SALES

Tokyo, Japan


APPLY



Marketing Associate


PRODUCT

Tokyo, Japan


APPLY



Software Engineer - PHP


ENGINEERING

Dhaka, Bangladesh


APPLY



Software Engineer - Backend


ENGINEERING

Dhaka, Bangladesh


APPLY



Software Engineer - ML


ENGINEERING

Dhaka, Bangladesh


APPLY



Software Engineer - Frontend


ENGINEERING

Dhaka, Bangladesh


APPLY



Cloud Infrastructure Engineer


ENGINEERING

Dhaka, Bangladesh


APPLY



Software Engineer - Intern


ENGINEERING

Dhaka, Bangladesh


APPLY


Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/career/#hometop
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Career

At Gigalogy you will be working with talented, creative, driven individuals who are revolutionizing how technology should improve human experience.

 Culture

We have a problem solving approach, move fast and reward hard work. We love working on projects we are very passionate about. You will have a voice in everything we do here, we will work on the challenges together and find the best solution by supporting each other. 

 

We believe happy employee can create great user experience thus happy customers. Employee satisfaction is at the core of our company culture. 

 Learning

We are committed to build an organization where each member can reach their fullest potential. We have employee learning program where each member can take courses to learn new technologies and try those in different projects. 

Current Openings


Customer Success Manager


SALES

Tokyo, Japan


APPLY



Product Manager


PRODUCT

Tokyo, Japan


APPLY



Solution Consultant


SALES

Tokyo, Japan


APPLY



Marketing Associate


PRODUCT

Tokyo, Japan


APPLY



Software Engineer - PHP


ENGINEERING

Dhaka, Bangladesh


APPLY



Software Engineer - Backend


ENGINEERING

Dhaka, Bangladesh


APPLY



Software Engineer - ML


ENGINEERING

Dhaka, Bangladesh


APPLY



Software Engineer - Frontend


ENGINEERING

Dhaka, Bangladesh


APPLY



Cloud Infrastructure Engineer


ENGINEERING

Dhaka, Bangladesh


APPLY



Software Engineer - Intern


ENGINEERING

Dhaka, Bangladesh


APPLY


Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/press-room/
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Press Room

Checkout our latest press releases and media coverage.

February 1st 2024

Our CEO participated in startup accelerator X-Hub Tokyo London program, in partnership with JETRO and L-Marks. Our goal for 2024? Forging strategic partnerships and building investor relations in the UK to fuel our growth.
Read More



▶ WATCH NOW
December 20th 2023

"Honored by the incredible opportunity we had to showcase Gigalogy's Personalization platform at Web Summit! On November 16th, our CEO, Mosleh Uddin, took the stage at the Startup Showcase pitch competition, sharing a glimpse into our journey and solutions that strive to make a difference."
Read More

December 14th 2023

Just wrapped up an insightful event with our partner Cross Compass, Ltd., exploring the frontiers of "Generative AI for the Manufacturing Industry." Here's a glimpse into the highlights and key takeaways of yesterday's talk.
Read More



December 13th 2023

We are thrilled to announce that we will be co-hosting an exclusive event with our partner, Cross Compass, Ltd., at our office on Wednesday, December 13th.
Read More

November 30th 2023

Our CEO, Mosleh Uddin, delivered an insightful pitch on stage, unveiling how our personalization platform can propel e-commerce businesses to new heights.
Read More

November 16th 2023

Our CEO, Mosleh Uddin, delivered a quickfire presentation to the audience at the Startup Showcase. The occasion for innovative startups to seize the spotlight,
Read More

November 14th 2023

The final day of Web Summit has arrived! Join us at Startup Showcase where our CEO, Mosleh Uddin, will be pitching on stage for 2 minutes at PITCH 3, 3 PM.
Read More

October 11th 2023

Gigalogy and Cross Compass formed a business partnership and established the Pivotal AI Institute (PAI), a training institution for advanced digital human resources.
Read More

September 13th 2023

Gigalogy hosted a workshop at our new office, exploring the development of personalized GPT applications and the diverse industry applications of MyGPT.
Read More

September 8th 2023

Celebrating our expertise in personalization, Gigalogy showcased our unique GPT solution at the Startup World Cup held at the Grand Hyatt Tokyo.
Read More

▶ WATCH NOW
July 26th 2023

Recently, our CEO, Mosleh Uddin, had an enlightening dialogue with Masahito Ito, President of the Management Strategy Center at "Listing Principles".
Read More

June 28th 2023

Gigalogy organized a session in Globis University on building a personalized student counselor using GPT
Read More



May 29th 2023

Gigalogy organized a joint session with Social Tech Japan Lab from Kyushu University on GPT and how we can use GPT with our own data.
Read More

May 17th 2023

Gigalogy hosted an innovative session on leveraging in-house data in the retail industry.
Read More



January 12th 2023

Gigalogy get selected to participate in the Startup immersion program Silicon valley, 2023
Read More



January 7th 2023

Gigalogy organized AI training workshop for elementary school students at Scratch Cafe
Read More



August 28th 2022

Gigalogy started 「Experience Box」to share about our innovation and technologies to everyone
Read More

August 2022

Gigalogy led seminars at BUET and East Delta University, Bangladesh, discussing AI for digital products.
Read More

April 21st 2022

Gigalogy makes AI accessible for everyone
Read More





Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/press-room/#ja
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Press Room

Checkout our latest press releases and media coverage.

February 1st 2024

Our CEO participated in startup accelerator X-Hub Tokyo London program, in partnership with JETRO and L-Marks. Our goal for 2024? Forging strategic partnerships and building investor relations in the UK to fuel our growth.
Read More



▶ WATCH NOW
December 20th 2023

"Honored by the incredible opportunity we had to showcase Gigalogy's Personalization platform at Web Summit! On November 16th, our CEO, Mosleh Uddin, took the stage at the Startup Showcase pitch competition, sharing a glimpse into our journey and solutions that strive to make a difference."
Read More

December 14th 2023

Just wrapped up an insightful event with our partner Cross Compass, Ltd., exploring the frontiers of "Generative AI for the Manufacturing Industry." Here's a glimpse into the highlights and key takeaways of yesterday's talk.
Read More



December 13th 2023

We are thrilled to announce that we will be co-hosting an exclusive event with our partner, Cross Compass, Ltd., at our office on Wednesday, December 13th.
Read More

November 30th 2023

Our CEO, Mosleh Uddin, delivered an insightful pitch on stage, unveiling how our personalization platform can propel e-commerce businesses to new heights.
Read More

November 16th 2023

Our CEO, Mosleh Uddin, delivered a quickfire presentation to the audience at the Startup Showcase. The occasion for innovative startups to seize the spotlight,
Read More

November 14th 2023

The final day of Web Summit has arrived! Join us at Startup Showcase where our CEO, Mosleh Uddin, will be pitching on stage for 2 minutes at PITCH 3, 3 PM.
Read More

October 11th 2023

Gigalogy and Cross Compass formed a business partnership and established the Pivotal AI Institute (PAI), a training institution for advanced digital human resources.
Read More

September 13th 2023

Gigalogy hosted a workshop at our new office, exploring the development of personalized GPT applications and the diverse industry applications of MyGPT.
Read More

September 8th 2023

Celebrating our expertise in personalization, Gigalogy showcased our unique GPT solution at the Startup World Cup held at the Grand Hyatt Tokyo.
Read More

▶ WATCH NOW
July 26th 2023

Recently, our CEO, Mosleh Uddin, had an enlightening dialogue with Masahito Ito, President of the Management Strategy Center at "Listing Principles".
Read More

June 28th 2023

Gigalogy organized a session in Globis University on building a personalized student counselor using GPT
Read More



May 29th 2023

Gigalogy organized a joint session with Social Tech Japan Lab from Kyushu University on GPT and how we can use GPT with our own data.
Read More

May 17th 2023

Gigalogy hosted an innovative session on leveraging in-house data in the retail industry.
Read More



January 12th 2023

Gigalogy get selected to participate in the Startup immersion program Silicon valley, 2023
Read More



January 7th 2023

Gigalogy organized AI training workshop for elementary school students at Scratch Cafe
Read More



August 28th 2022

Gigalogy started 「Experience Box」to share about our innovation and technologies to everyone
Read More

August 2022

Gigalogy led seminars at BUET and East Delta University, Bangladesh, discussing AI for digital products.
Read More

April 21st 2022

Gigalogy makes AI accessible for everyone
Read More





Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/press-room/#hometop
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Press Room

Checkout our latest press releases and media coverage.

February 1st 2024

Our CEO participated in startup accelerator X-Hub Tokyo London program, in partnership with JETRO and L-Marks. Our goal for 2024? Forging strategic partnerships and building investor relations in the UK to fuel our growth.
Read More



▶ WATCH NOW
December 20th 2023

"Honored by the incredible opportunity we had to showcase Gigalogy's Personalization platform at Web Summit! On November 16th, our CEO, Mosleh Uddin, took the stage at the Startup Showcase pitch competition, sharing a glimpse into our journey and solutions that strive to make a difference."
Read More

December 14th 2023

Just wrapped up an insightful event with our partner Cross Compass, Ltd., exploring the frontiers of "Generative AI for the Manufacturing Industry." Here's a glimpse into the highlights and key takeaways of yesterday's talk.
Read More



December 13th 2023

We are thrilled to announce that we will be co-hosting an exclusive event with our partner, Cross Compass, Ltd., at our office on Wednesday, December 13th.
Read More

November 30th 2023

Our CEO, Mosleh Uddin, delivered an insightful pitch on stage, unveiling how our personalization platform can propel e-commerce businesses to new heights.
Read More

November 16th 2023

Our CEO, Mosleh Uddin, delivered a quickfire presentation to the audience at the Startup Showcase. The occasion for innovative startups to seize the spotlight,
Read More

November 14th 2023

The final day of Web Summit has arrived! Join us at Startup Showcase where our CEO, Mosleh Uddin, will be pitching on stage for 2 minutes at PITCH 3, 3 PM.
Read More

October 11th 2023

Gigalogy and Cross Compass formed a business partnership and established the Pivotal AI Institute (PAI), a training institution for advanced digital human resources.
Read More

September 13th 2023

Gigalogy hosted a workshop at our new office, exploring the development of personalized GPT applications and the diverse industry applications of MyGPT.
Read More

September 8th 2023

Celebrating our expertise in personalization, Gigalogy showcased our unique GPT solution at the Startup World Cup held at the Grand Hyatt Tokyo.
Read More

▶ WATCH NOW
July 26th 2023

Recently, our CEO, Mosleh Uddin, had an enlightening dialogue with Masahito Ito, President of the Management Strategy Center at "Listing Principles".
Read More

June 28th 2023

Gigalogy organized a session in Globis University on building a personalized student counselor using GPT
Read More



May 29th 2023

Gigalogy organized a joint session with Social Tech Japan Lab from Kyushu University on GPT and how we can use GPT with our own data.
Read More

May 17th 2023

Gigalogy hosted an innovative session on leveraging in-house data in the retail industry.
Read More



January 12th 2023

Gigalogy get selected to participate in the Startup immersion program Silicon valley, 2023
Read More



January 7th 2023

Gigalogy organized AI training workshop for elementary school students at Scratch Cafe
Read More



August 28th 2022

Gigalogy started 「Experience Box」to share about our innovation and technologies to everyone
Read More

August 2022

Gigalogy led seminars at BUET and East Delta University, Bangladesh, discussing AI for digital products.
Read More

April 21st 2022

Gigalogy makes AI accessible for everyone
Read More





Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/event/
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Past Events

At Gigalogy, we aim to explore cutting-edge technologies and innovations, connecting with tech enthusiasts willing to get inspired and deep-dive into the latest tech trends. Learn about Artificial Intelligence, Generative AI, LLMs, web3, blockchain, and much more, and explore why these technologies are transforming our daily lives and shaping our future, how to leverage them, and their use cases.

Wed, Sep 13th 2023, 6:30 PM JST
Ep.2 — Create your personalized GPT assistant


DETAILS
Wed, Feb 9th 2022, 6:00 PM JST
Ep.1 — Doozie Token (DZT) - Decentralized personalized reward system for the internet

DETAILS

Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/event/#ja
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Past Events

At Gigalogy, we aim to explore cutting-edge technologies and innovations, connecting with tech enthusiasts willing to get inspired and deep-dive into the latest tech trends. Learn about Artificial Intelligence, Generative AI, LLMs, web3, blockchain, and much more, and explore why these technologies are transforming our daily lives and shaping our future, how to leverage them, and their use cases.

Wed, Sep 13th 2023, 6:30 PM JST
Ep.2 — Create your personalized GPT assistant


DETAILS
Wed, Feb 9th 2022, 6:00 PM JST
Ep.1 — Doozie Token (DZT) - Decentralized personalized reward system for the internet

DETAILS

Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/event/#hometop
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Past Events

At Gigalogy, we aim to explore cutting-edge technologies and innovations, connecting with tech enthusiasts willing to get inspired and deep-dive into the latest tech trends. Learn about Artificial Intelligence, Generative AI, LLMs, web3, blockchain, and much more, and explore why these technologies are transforming our daily lives and shaping our future, how to leverage them, and their use cases.

Wed, Sep 13th 2023, 6:30 PM JST
Ep.2 — Create your personalized GPT assistant


DETAILS
Wed, Feb 9th 2022, 6:00 PM JST
Ep.1 — Doozie Token (DZT) - Decentralized personalized reward system for the internet

DETAILS

Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/request-demo/
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Contact Us

Get started quickly. Integrate our developer friendly APIs with minimum effort.


We support any business model.




Our platform provides entire automated workflow.




Name: 
Company: 
Email Address: 
Phone: 
Interesed in:
Solutions you are looking for
Computer Vision
NLP
Recommendation Engine
Medical Imagery
Purpose
AI model building & integration
Partnership
Both
REQUEST A DEMO

Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/request-demo/#ja
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Contact Us

Get started quickly. Integrate our developer friendly APIs with minimum effort.


We support any business model.




Our platform provides entire automated workflow.




Name: 
Company: 
Email Address: 
Phone: 
Interesed in:
Solutions you are looking for
Computer Vision
NLP
Recommendation Engine
Medical Imagery
Purpose
AI model building & integration
Partnership
Both
REQUEST A DEMO

Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/request-demo/#hometop
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Contact Us

Get started quickly. Integrate our developer friendly APIs with minimum effort.


We support any business model.




Our platform provides entire automated workflow.




Name: 
Company: 
Email Address: 
Phone: 
Interesed in:
Solutions you are looking for
Computer Vision
NLP
Recommendation Engine
Medical Imagery
Purpose
AI model building & integration
Partnership
Both
REQUEST A DEMO

Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/developer/
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
For Developers

Recommender
Documentation

Partner Program



Doozie Token (DZT)



Doozie Token
White Paper

Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/developer/#ja
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
For Developers

Recommender
Documentation

Partner Program



Doozie Token (DZT)



Doozie Token
White Paper

Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/developer/#hometop
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
For Developers

Recommender
Documentation

Partner Program



Doozie Token (DZT)



Doozie Token
White Paper

Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/developer-program/
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Are you a ML Engineer/Data Scientist ?

Host your AI models in our production ready infrastructure and spend your time building the best model.

Build

Contributors can focus on building the best model solving specific problems

Publish

Publish your solution to our ready to use infrastructure

Earn DZT

Earn DZT for successfully publishing your solution. When someone subscribes to your solution you can earn DZT recurrently. Learn More about DZT

What is Doozie Token (DZT) ?

Doozie Token (DZT), a blockchain based personalized reward platform for the internet. With DZT we want to create a harmony among users, contributors and businesses that not only solves the issues existing reward programs fail to address but also maximizes user satisfaction and brand loyalty.

LEARN MORE ABOUT DZT
DZT on Gigalogy AI Platform

DZT provides a fully functional payment & reward management system for Gigalogy AI platform

Become a Developer
Your Name: 
Email Address: 
Let us know in details about what kind of solution you want to build on top of our infrastructure. Please mention the technologies (framework, libraries) requires to build your solutions :
SEND

Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/developer-program/#ja
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Are you a ML Engineer/Data Scientist ?

Host your AI models in our production ready infrastructure and spend your time building the best model.

Build

Contributors can focus on building the best model solving specific problems

Publish

Publish your solution to our ready to use infrastructure

Earn DZT

Earn DZT for successfully publishing your solution. When someone subscribes to your solution you can earn DZT recurrently. Learn More about DZT

What is Doozie Token (DZT) ?

Doozie Token (DZT), a blockchain based personalized reward platform for the internet. With DZT we want to create a harmony among users, contributors and businesses that not only solves the issues existing reward programs fail to address but also maximizes user satisfaction and brand loyalty.

LEARN MORE ABOUT DZT
DZT on Gigalogy AI Platform

DZT provides a fully functional payment & reward management system for Gigalogy AI platform

Become a Developer
Your Name: 
Email Address: 
Let us know in details about what kind of solution you want to build on top of our infrastructure. Please mention the technologies (framework, libraries) requires to build your solutions :
SEND

Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/developer-program/#hometop
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Are you a ML Engineer/Data Scientist ?

Host your AI models in our production ready infrastructure and spend your time building the best model.

Build

Contributors can focus on building the best model solving specific problems

Publish

Publish your solution to our ready to use infrastructure

Earn DZT

Earn DZT for successfully publishing your solution. When someone subscribes to your solution you can earn DZT recurrently. Learn More about DZT

What is Doozie Token (DZT) ?

Doozie Token (DZT), a blockchain based personalized reward platform for the internet. With DZT we want to create a harmony among users, contributors and businesses that not only solves the issues existing reward programs fail to address but also maximizes user satisfaction and brand loyalty.

LEARN MORE ABOUT DZT
DZT on Gigalogy AI Platform

DZT provides a fully functional payment & reward management system for Gigalogy AI platform

Become a Developer
Your Name: 
Email Address: 
Let us know in details about what kind of solution you want to build on top of our infrastructure. Please mention the technologies (framework, libraries) requires to build your solutions :
SEND

Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/privacy-policy/
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Privacy Policy
Last Updated At: September 17, 2023

This Privacy Policy describes Our policies and procedures on the collection, use and disclosure of Your information when You use the Service and tells You about Your privacy rights and how the law protects You.

We use Your Personal data to provide and improve the Service. By using the Service, You agree to the collection and use of information in accordance with this Privacy Policy.

Interpretation and Definitions
Interpretation

The words of which the initial letter is capitalized have meanings defined under the following conditions. The following definitions shall have the same meaning regardless of whether they appear in singular or in plural.

Definitions

For the purposes of this Privacy Policy:

Account means a unique account created for You to access our Service or parts of our Service.
Company (referred to as either "the Company", "We", "Us" or "Our" in this Agreement) refers to Gigalogy Inc., 23F, 4-1-1, Toranomon, Minato, Tokyo 105-6923.
Cookies are small files that are placed on Your computer, mobile device or any other device by a website, containing the details of Your browsing history on that website among its many uses.
Country refers to: Japan
Device means any device that can access the Service such as a computer, a smartphone or a digital tablet.
Personal Data is any information that relates to an identified or identifiable individual.
Service refers to the Websites.
Service Provider means any natural or legal person who processes the data on behalf of the Company. It refers to third-party companies or individuals employed by the Company to facilitate the Service, to provide the Service on behalf of the Company, to perform services related to the Service or to assist the Company in analyzing how the Service is used.
Usage Data refers to data collected automatically, either generated by the use of the Service or from the Service infrastructure itself (for example, the duration of a page visit).
Websites refers to gigalogy.com, doozie.io, doozie.ai.
You means the individual accessing or using the Service, or the company, or other legal entity on behalf of which such individual is accessing or using the Service, as applicable.
Collecting and Using Your Personal Data
Types of Data Collected
Personal Data

While using Our Service, We may ask You to provide Us with certain personally identifiable information that can be used to contact or identify You. Personally identifiable information may include, but is not limited to:

Email address
First name and last name
Phone number
Address, State, Province, ZIP/Postal code, City
Usage Data
Usage Data

Usage Data is collected automatically when using the Service.

Usage Data may include information such as Your Device's Internet Protocol address (e.g. IP address), browser type, browser version, the pages of our Service that You visit, the time and date of Your visit, the time spent on those pages, unique device identifiers and other diagnostic data.

When You access the Service by or through a mobile device, We may collect certain information automatically, including, but not limited to, the type of mobile device You use, Your mobile device unique ID, the IP address of Your mobile device, Your mobile operating system, the type of mobile Internet browser You use, unique device identifiers and other diagnostic data.

We may also collect information that Your browser sends whenever You visit our Service or when You access the Service by or through a mobile device.

Tracking Technologies and Cookies

We use Cookies and similar tracking technologies to track the activity on Our Service and store certain information. Tracking technologies used are beacons, tags, and scripts to collect and track information and to improve and analyze Our Service. The technologies We use may include:

Cookies or Browser Cookies. A cookie is a small file placed on Your Device. You can instruct Your browser to refuse all Cookies or to indicate when a Cookie is being sent. However, if You do not accept Cookies, You may not be able to use some parts of our Service. Unless you have adjusted Your browser setting so that it will refuse Cookies, our Service may use Cookies.
Web Beacons. Certain sections of our Service and our emails may contain small electronic files known as web beacons (also referred to as clear gifs, pixel tags, and single-pixel gifs) that permit the Company, for example, to count users who have visited those pages or opened an email and for other related website statistics (for example, recording the popularity of a certain section and verifying system and server integrity).

Cookies can be "Persistent" or "Session" Cookies. Persistent Cookies remain on Your personal computer or mobile device when You go offline, while Session Cookies are deleted as soon as You close Your web browser.

We use both Session and Persistent Cookies for the purposes set out below:

Necessary / Essential Cookies
Type: Session Cookies
Administered by: Us
Purpose: These Cookies are essential to provide You with services available through the Website and to enable You to use some of its features. They help to authenticate users and prevent fraudulent use of user accounts. Without these Cookies, the services that You have asked for cannot be provided, and We only use these Cookies to provide You with those services.
Cookies Policy / Notice Acceptance Cookies
Type: Persistent Cookies
Administered by: Us
Purpose: These Cookies identify if users have accepted the use of cookies on the Website.
Functionality Cookies
Type: Persistent Cookies
Administered by: Us
Purpose: These Cookies allow us to remember choices You make when You use the Website, such as remembering your login details or language preference. The purpose of these Cookies is to provide You with a more personal experience and to avoid You having to re-enter your preferences every time You use the Website.

For more information about the cookies we use and your choices regarding cookies, please visit our Cookies Policy.

Use of Your Personal Data

The Company may use Personal Data for the following purposes:

To provide and maintain our Service, including to monitor the usage of our Service.
To manage Your Account: to manage Your registration as a user of the Service. The Personal Data You provide can give You access to different functionalities of the Service that are available to You as a registered user.
For the performance of a contract: the development, compliance and undertaking of the purchase contract for the products, items or services You have purchased or of any other contract with Us through the Service.
To contact You: To contact You by email, SMS, or other equivalent forms of electronic communication, such as a mobile application's push notifications regarding updates or informative communications related to the functionalities, products or contracted services, including the security updates, when necessary or reasonable for their implementation.
To provide You with news, special offers and general information about other goods, services and events which we offer that are similar to those that you have already purchased or enquired about unless You have opted not to receive such information.
To manage Your requests: To attend and manage Your requests to Us.
For business transfers: We may use Your information to evaluate or conduct a merger, divestiture, restructuring, reorganization, dissolution, or other sale or transfer of some or all of Our assets, whether as a going concern or as part of bankruptcy, liquidation, or similar proceeding, in which Personal Data held by Us about our Service users is among the assets transferred.
For other purposes: We may use Your information for other purposes, such as data analysis, identifying usage trends, determining the effectiveness of our promotional campaigns and to evaluate and improve our Service, products, services, marketing and your experience.

We may share Your personal information in the following situations:

With Service Providers: We may share Your personal information with Service Providers to monitor and analyze the use of our Service, to contact You.
For business transfers: We may share or transfer Your personal information in connection with, or during negotiations of, any merger, sale of Company assets, financing, or acquisition of all or a portion of Our business to another company.
With Affiliates: We may share Your information with Our affiliates, in which case we will require those affiliates to honor this Privacy Policy. Affiliates include Our parent company and any other subsidiaries, joint venture partners or other companies that We control or that are under common control with Us.
With business partners: We may share Your information with Our business partners to offer You certain products, services or promotions.
With other users: when You share personal information or otherwise interact in the public areas with other users, such information may be viewed by all users and may be publicly distributed outside.
With Your consent: We may disclose Your personal information for any other purpose with Your consent.
Retention of Your Personal Data

The Company will retain Your Personal Data only for as long as is necessary for the purposes set out in this Privacy Policy. We will retain and use Your Personal Data to the extent necessary to comply with our legal obligations (for example, if we are required to retain your data to comply with applicable laws), resolve disputes, and enforce our legal agreements and policies.

The Company will also retain Usage Data for internal analysis purposes. Usage Data is generally retained for a shorter period of time, except when this data is used to strengthen the security or to improve the functionality of Our Service, or We are legally obligated to retain this data for longer time periods.

Transfer of Your Personal Data

Your information, including Personal Data, is processed at the Company's operating offices and in any other places where the parties involved in the processing are located. It means that this information may be transferred to — and maintained on — computers located outside of Your state, province, country or other governmental jurisdiction where the data protection laws may differ than those from Your jurisdiction.

Your consent to this Privacy Policy followed by Your submission of such information represents Your agreement to that transfer.

The Company will take all steps reasonably necessary to ensure that Your data is treated securely and in accordance with this Privacy Policy and no transfer of Your Personal Data will take place to an organization or a country unless there are adequate controls in place including the security of Your data and other personal information.

Disclosure of Your Personal Data
Business Transactions

If the Company is involved in a merger, acquisition or asset sale, Your Personal Data may be transferred. We will provide notice before Your Personal Data is transferred and becomes subject to a different Privacy Policy.

Law enforcement

Under certain circumstances, the Company may be required to disclose Your Personal Data if required to do so by law or in response to valid requests by public authorities (e.g. a court or a government agency).

Other legal requirements

The Company may disclose Your Personal Data in the good faith belief that such action is necessary to:

Comply with a legal obligation
Protect and defend the rights or property of the Company
Prevent or investigate possible wrongdoing in connection with the Service
Protect the personal safety of Users of the Service or the public
Protect against legal liability
Security of Your Personal Data

The security of Your Personal Data is important to Us, but remember that no method of transmission over the Internet, or method of electronic storage is 100% secure. While We strive to use commercially acceptable means to protect Your Personal Data, We cannot guarantee its absolute security.

Children's Privacy

Our Service does not address anyone under the age of 13. We do not knowingly collect personally identifiable information from anyone under the age of 13. If You are a parent or guardian and You are aware that Your child has provided Us with Personal Data, please contact Us. If We become aware that We have collected Personal Data from anyone under the age of 13 without verification of parental consent, We take steps to remove that information from Our servers.

If We need to rely on consent as a legal basis for processing Your information and Your country requires consent from a parent, We may require Your parent's consent before We collect and use that information.

Links to Other Websites

Our Service may contain links to other websites that are not operated by Us. If You click on a third party link, You will be directed to that third party's site. We strongly advise You to review the Privacy Policy of every site You visit.

We have no control over and assume no responsibility for the content, privacy policies or practices of any third party sites or services.

Changes to this Privacy Policy

We may update Our Privacy Policy from time to time. We will notify You of any changes by posting the new Privacy Policy on this page.

We will let You know via email and/or a prominent notice on Our Service, prior to the change becoming effective and update the "Last updated" date at the top of this Privacy Policy.

You are advised to review this Privacy Policy periodically for any changes. Changes to this Privacy Policy are effective when they are posted on this page.

Contact Us

If you have any questions about this Privacy Policy, You can contact us:

By email: info@gigalogy.com

Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/privacy-policy/#ja
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Privacy Policy
Last Updated At: September 17, 2023

This Privacy Policy describes Our policies and procedures on the collection, use and disclosure of Your information when You use the Service and tells You about Your privacy rights and how the law protects You.

We use Your Personal data to provide and improve the Service. By using the Service, You agree to the collection and use of information in accordance with this Privacy Policy.

Interpretation and Definitions
Interpretation

The words of which the initial letter is capitalized have meanings defined under the following conditions. The following definitions shall have the same meaning regardless of whether they appear in singular or in plural.

Definitions

For the purposes of this Privacy Policy:

Account means a unique account created for You to access our Service or parts of our Service.
Company (referred to as either "the Company", "We", "Us" or "Our" in this Agreement) refers to Gigalogy Inc., 23F, 4-1-1, Toranomon, Minato, Tokyo 105-6923.
Cookies are small files that are placed on Your computer, mobile device or any other device by a website, containing the details of Your browsing history on that website among its many uses.
Country refers to: Japan
Device means any device that can access the Service such as a computer, a smartphone or a digital tablet.
Personal Data is any information that relates to an identified or identifiable individual.
Service refers to the Websites.
Service Provider means any natural or legal person who processes the data on behalf of the Company. It refers to third-party companies or individuals employed by the Company to facilitate the Service, to provide the Service on behalf of the Company, to perform services related to the Service or to assist the Company in analyzing how the Service is used.
Usage Data refers to data collected automatically, either generated by the use of the Service or from the Service infrastructure itself (for example, the duration of a page visit).
Websites refers to gigalogy.com, doozie.io, doozie.ai.
You means the individual accessing or using the Service, or the company, or other legal entity on behalf of which such individual is accessing or using the Service, as applicable.
Collecting and Using Your Personal Data
Types of Data Collected
Personal Data

While using Our Service, We may ask You to provide Us with certain personally identifiable information that can be used to contact or identify You. Personally identifiable information may include, but is not limited to:

Email address
First name and last name
Phone number
Address, State, Province, ZIP/Postal code, City
Usage Data
Usage Data

Usage Data is collected automatically when using the Service.

Usage Data may include information such as Your Device's Internet Protocol address (e.g. IP address), browser type, browser version, the pages of our Service that You visit, the time and date of Your visit, the time spent on those pages, unique device identifiers and other diagnostic data.

When You access the Service by or through a mobile device, We may collect certain information automatically, including, but not limited to, the type of mobile device You use, Your mobile device unique ID, the IP address of Your mobile device, Your mobile operating system, the type of mobile Internet browser You use, unique device identifiers and other diagnostic data.

We may also collect information that Your browser sends whenever You visit our Service or when You access the Service by or through a mobile device.

Tracking Technologies and Cookies

We use Cookies and similar tracking technologies to track the activity on Our Service and store certain information. Tracking technologies used are beacons, tags, and scripts to collect and track information and to improve and analyze Our Service. The technologies We use may include:

Cookies or Browser Cookies. A cookie is a small file placed on Your Device. You can instruct Your browser to refuse all Cookies or to indicate when a Cookie is being sent. However, if You do not accept Cookies, You may not be able to use some parts of our Service. Unless you have adjusted Your browser setting so that it will refuse Cookies, our Service may use Cookies.
Web Beacons. Certain sections of our Service and our emails may contain small electronic files known as web beacons (also referred to as clear gifs, pixel tags, and single-pixel gifs) that permit the Company, for example, to count users who have visited those pages or opened an email and for other related website statistics (for example, recording the popularity of a certain section and verifying system and server integrity).

Cookies can be "Persistent" or "Session" Cookies. Persistent Cookies remain on Your personal computer or mobile device when You go offline, while Session Cookies are deleted as soon as You close Your web browser.

We use both Session and Persistent Cookies for the purposes set out below:

Necessary / Essential Cookies
Type: Session Cookies
Administered by: Us
Purpose: These Cookies are essential to provide You with services available through the Website and to enable You to use some of its features. They help to authenticate users and prevent fraudulent use of user accounts. Without these Cookies, the services that You have asked for cannot be provided, and We only use these Cookies to provide You with those services.
Cookies Policy / Notice Acceptance Cookies
Type: Persistent Cookies
Administered by: Us
Purpose: These Cookies identify if users have accepted the use of cookies on the Website.
Functionality Cookies
Type: Persistent Cookies
Administered by: Us
Purpose: These Cookies allow us to remember choices You make when You use the Website, such as remembering your login details or language preference. The purpose of these Cookies is to provide You with a more personal experience and to avoid You having to re-enter your preferences every time You use the Website.

For more information about the cookies we use and your choices regarding cookies, please visit our Cookies Policy.

Use of Your Personal Data

The Company may use Personal Data for the following purposes:

To provide and maintain our Service, including to monitor the usage of our Service.
To manage Your Account: to manage Your registration as a user of the Service. The Personal Data You provide can give You access to different functionalities of the Service that are available to You as a registered user.
For the performance of a contract: the development, compliance and undertaking of the purchase contract for the products, items or services You have purchased or of any other contract with Us through the Service.
To contact You: To contact You by email, SMS, or other equivalent forms of electronic communication, such as a mobile application's push notifications regarding updates or informative communications related to the functionalities, products or contracted services, including the security updates, when necessary or reasonable for their implementation.
To provide You with news, special offers and general information about other goods, services and events which we offer that are similar to those that you have already purchased or enquired about unless You have opted not to receive such information.
To manage Your requests: To attend and manage Your requests to Us.
For business transfers: We may use Your information to evaluate or conduct a merger, divestiture, restructuring, reorganization, dissolution, or other sale or transfer of some or all of Our assets, whether as a going concern or as part of bankruptcy, liquidation, or similar proceeding, in which Personal Data held by Us about our Service users is among the assets transferred.
For other purposes: We may use Your information for other purposes, such as data analysis, identifying usage trends, determining the effectiveness of our promotional campaigns and to evaluate and improve our Service, products, services, marketing and your experience.

We may share Your personal information in the following situations:

With Service Providers: We may share Your personal information with Service Providers to monitor and analyze the use of our Service, to contact You.
For business transfers: We may share or transfer Your personal information in connection with, or during negotiations of, any merger, sale of Company assets, financing, or acquisition of all or a portion of Our business to another company.
With Affiliates: We may share Your information with Our affiliates, in which case we will require those affiliates to honor this Privacy Policy. Affiliates include Our parent company and any other subsidiaries, joint venture partners or other companies that We control or that are under common control with Us.
With business partners: We may share Your information with Our business partners to offer You certain products, services or promotions.
With other users: when You share personal information or otherwise interact in the public areas with other users, such information may be viewed by all users and may be publicly distributed outside.
With Your consent: We may disclose Your personal information for any other purpose with Your consent.
Retention of Your Personal Data

The Company will retain Your Personal Data only for as long as is necessary for the purposes set out in this Privacy Policy. We will retain and use Your Personal Data to the extent necessary to comply with our legal obligations (for example, if we are required to retain your data to comply with applicable laws), resolve disputes, and enforce our legal agreements and policies.

The Company will also retain Usage Data for internal analysis purposes. Usage Data is generally retained for a shorter period of time, except when this data is used to strengthen the security or to improve the functionality of Our Service, or We are legally obligated to retain this data for longer time periods.

Transfer of Your Personal Data

Your information, including Personal Data, is processed at the Company's operating offices and in any other places where the parties involved in the processing are located. It means that this information may be transferred to — and maintained on — computers located outside of Your state, province, country or other governmental jurisdiction where the data protection laws may differ than those from Your jurisdiction.

Your consent to this Privacy Policy followed by Your submission of such information represents Your agreement to that transfer.

The Company will take all steps reasonably necessary to ensure that Your data is treated securely and in accordance with this Privacy Policy and no transfer of Your Personal Data will take place to an organization or a country unless there are adequate controls in place including the security of Your data and other personal information.

Disclosure of Your Personal Data
Business Transactions

If the Company is involved in a merger, acquisition or asset sale, Your Personal Data may be transferred. We will provide notice before Your Personal Data is transferred and becomes subject to a different Privacy Policy.

Law enforcement

Under certain circumstances, the Company may be required to disclose Your Personal Data if required to do so by law or in response to valid requests by public authorities (e.g. a court or a government agency).

Other legal requirements

The Company may disclose Your Personal Data in the good faith belief that such action is necessary to:

Comply with a legal obligation
Protect and defend the rights or property of the Company
Prevent or investigate possible wrongdoing in connection with the Service
Protect the personal safety of Users of the Service or the public
Protect against legal liability
Security of Your Personal Data

The security of Your Personal Data is important to Us, but remember that no method of transmission over the Internet, or method of electronic storage is 100% secure. While We strive to use commercially acceptable means to protect Your Personal Data, We cannot guarantee its absolute security.

Children's Privacy

Our Service does not address anyone under the age of 13. We do not knowingly collect personally identifiable information from anyone under the age of 13. If You are a parent or guardian and You are aware that Your child has provided Us with Personal Data, please contact Us. If We become aware that We have collected Personal Data from anyone under the age of 13 without verification of parental consent, We take steps to remove that information from Our servers.

If We need to rely on consent as a legal basis for processing Your information and Your country requires consent from a parent, We may require Your parent's consent before We collect and use that information.

Links to Other Websites

Our Service may contain links to other websites that are not operated by Us. If You click on a third party link, You will be directed to that third party's site. We strongly advise You to review the Privacy Policy of every site You visit.

We have no control over and assume no responsibility for the content, privacy policies or practices of any third party sites or services.

Changes to this Privacy Policy

We may update Our Privacy Policy from time to time. We will notify You of any changes by posting the new Privacy Policy on this page.

We will let You know via email and/or a prominent notice on Our Service, prior to the change becoming effective and update the "Last updated" date at the top of this Privacy Policy.

You are advised to review this Privacy Policy periodically for any changes. Changes to this Privacy Policy are effective when they are posted on this page.

Contact Us

If you have any questions about this Privacy Policy, You can contact us:

By email: info@gigalogy.com

Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/privacy-policy/#hometop
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Privacy Policy
Last Updated At: September 17, 2023

This Privacy Policy describes Our policies and procedures on the collection, use and disclosure of Your information when You use the Service and tells You about Your privacy rights and how the law protects You.

We use Your Personal data to provide and improve the Service. By using the Service, You agree to the collection and use of information in accordance with this Privacy Policy.

Interpretation and Definitions
Interpretation

The words of which the initial letter is capitalized have meanings defined under the following conditions. The following definitions shall have the same meaning regardless of whether they appear in singular or in plural.

Definitions

For the purposes of this Privacy Policy:

Account means a unique account created for You to access our Service or parts of our Service.
Company (referred to as either "the Company", "We", "Us" or "Our" in this Agreement) refers to Gigalogy Inc., 23F, 4-1-1, Toranomon, Minato, Tokyo 105-6923.
Cookies are small files that are placed on Your computer, mobile device or any other device by a website, containing the details of Your browsing history on that website among its many uses.
Country refers to: Japan
Device means any device that can access the Service such as a computer, a smartphone or a digital tablet.
Personal Data is any information that relates to an identified or identifiable individual.
Service refers to the Websites.
Service Provider means any natural or legal person who processes the data on behalf of the Company. It refers to third-party companies or individuals employed by the Company to facilitate the Service, to provide the Service on behalf of the Company, to perform services related to the Service or to assist the Company in analyzing how the Service is used.
Usage Data refers to data collected automatically, either generated by the use of the Service or from the Service infrastructure itself (for example, the duration of a page visit).
Websites refers to gigalogy.com, doozie.io, doozie.ai.
You means the individual accessing or using the Service, or the company, or other legal entity on behalf of which such individual is accessing or using the Service, as applicable.
Collecting and Using Your Personal Data
Types of Data Collected
Personal Data

While using Our Service, We may ask You to provide Us with certain personally identifiable information that can be used to contact or identify You. Personally identifiable information may include, but is not limited to:

Email address
First name and last name
Phone number
Address, State, Province, ZIP/Postal code, City
Usage Data
Usage Data

Usage Data is collected automatically when using the Service.

Usage Data may include information such as Your Device's Internet Protocol address (e.g. IP address), browser type, browser version, the pages of our Service that You visit, the time and date of Your visit, the time spent on those pages, unique device identifiers and other diagnostic data.

When You access the Service by or through a mobile device, We may collect certain information automatically, including, but not limited to, the type of mobile device You use, Your mobile device unique ID, the IP address of Your mobile device, Your mobile operating system, the type of mobile Internet browser You use, unique device identifiers and other diagnostic data.

We may also collect information that Your browser sends whenever You visit our Service or when You access the Service by or through a mobile device.

Tracking Technologies and Cookies

We use Cookies and similar tracking technologies to track the activity on Our Service and store certain information. Tracking technologies used are beacons, tags, and scripts to collect and track information and to improve and analyze Our Service. The technologies We use may include:

Cookies or Browser Cookies. A cookie is a small file placed on Your Device. You can instruct Your browser to refuse all Cookies or to indicate when a Cookie is being sent. However, if You do not accept Cookies, You may not be able to use some parts of our Service. Unless you have adjusted Your browser setting so that it will refuse Cookies, our Service may use Cookies.
Web Beacons. Certain sections of our Service and our emails may contain small electronic files known as web beacons (also referred to as clear gifs, pixel tags, and single-pixel gifs) that permit the Company, for example, to count users who have visited those pages or opened an email and for other related website statistics (for example, recording the popularity of a certain section and verifying system and server integrity).

Cookies can be "Persistent" or "Session" Cookies. Persistent Cookies remain on Your personal computer or mobile device when You go offline, while Session Cookies are deleted as soon as You close Your web browser.

We use both Session and Persistent Cookies for the purposes set out below:

Necessary / Essential Cookies
Type: Session Cookies
Administered by: Us
Purpose: These Cookies are essential to provide You with services available through the Website and to enable You to use some of its features. They help to authenticate users and prevent fraudulent use of user accounts. Without these Cookies, the services that You have asked for cannot be provided, and We only use these Cookies to provide You with those services.
Cookies Policy / Notice Acceptance Cookies
Type: Persistent Cookies
Administered by: Us
Purpose: These Cookies identify if users have accepted the use of cookies on the Website.
Functionality Cookies
Type: Persistent Cookies
Administered by: Us
Purpose: These Cookies allow us to remember choices You make when You use the Website, such as remembering your login details or language preference. The purpose of these Cookies is to provide You with a more personal experience and to avoid You having to re-enter your preferences every time You use the Website.

For more information about the cookies we use and your choices regarding cookies, please visit our Cookies Policy.

Use of Your Personal Data

The Company may use Personal Data for the following purposes:

To provide and maintain our Service, including to monitor the usage of our Service.
To manage Your Account: to manage Your registration as a user of the Service. The Personal Data You provide can give You access to different functionalities of the Service that are available to You as a registered user.
For the performance of a contract: the development, compliance and undertaking of the purchase contract for the products, items or services You have purchased or of any other contract with Us through the Service.
To contact You: To contact You by email, SMS, or other equivalent forms of electronic communication, such as a mobile application's push notifications regarding updates or informative communications related to the functionalities, products or contracted services, including the security updates, when necessary or reasonable for their implementation.
To provide You with news, special offers and general information about other goods, services and events which we offer that are similar to those that you have already purchased or enquired about unless You have opted not to receive such information.
To manage Your requests: To attend and manage Your requests to Us.
For business transfers: We may use Your information to evaluate or conduct a merger, divestiture, restructuring, reorganization, dissolution, or other sale or transfer of some or all of Our assets, whether as a going concern or as part of bankruptcy, liquidation, or similar proceeding, in which Personal Data held by Us about our Service users is among the assets transferred.
For other purposes: We may use Your information for other purposes, such as data analysis, identifying usage trends, determining the effectiveness of our promotional campaigns and to evaluate and improve our Service, products, services, marketing and your experience.

We may share Your personal information in the following situations:

With Service Providers: We may share Your personal information with Service Providers to monitor and analyze the use of our Service, to contact You.
For business transfers: We may share or transfer Your personal information in connection with, or during negotiations of, any merger, sale of Company assets, financing, or acquisition of all or a portion of Our business to another company.
With Affiliates: We may share Your information with Our affiliates, in which case we will require those affiliates to honor this Privacy Policy. Affiliates include Our parent company and any other subsidiaries, joint venture partners or other companies that We control or that are under common control with Us.
With business partners: We may share Your information with Our business partners to offer You certain products, services or promotions.
With other users: when You share personal information or otherwise interact in the public areas with other users, such information may be viewed by all users and may be publicly distributed outside.
With Your consent: We may disclose Your personal information for any other purpose with Your consent.
Retention of Your Personal Data

The Company will retain Your Personal Data only for as long as is necessary for the purposes set out in this Privacy Policy. We will retain and use Your Personal Data to the extent necessary to comply with our legal obligations (for example, if we are required to retain your data to comply with applicable laws), resolve disputes, and enforce our legal agreements and policies.

The Company will also retain Usage Data for internal analysis purposes. Usage Data is generally retained for a shorter period of time, except when this data is used to strengthen the security or to improve the functionality of Our Service, or We are legally obligated to retain this data for longer time periods.

Transfer of Your Personal Data

Your information, including Personal Data, is processed at the Company's operating offices and in any other places where the parties involved in the processing are located. It means that this information may be transferred to — and maintained on — computers located outside of Your state, province, country or other governmental jurisdiction where the data protection laws may differ than those from Your jurisdiction.

Your consent to this Privacy Policy followed by Your submission of such information represents Your agreement to that transfer.

The Company will take all steps reasonably necessary to ensure that Your data is treated securely and in accordance with this Privacy Policy and no transfer of Your Personal Data will take place to an organization or a country unless there are adequate controls in place including the security of Your data and other personal information.

Disclosure of Your Personal Data
Business Transactions

If the Company is involved in a merger, acquisition or asset sale, Your Personal Data may be transferred. We will provide notice before Your Personal Data is transferred and becomes subject to a different Privacy Policy.

Law enforcement

Under certain circumstances, the Company may be required to disclose Your Personal Data if required to do so by law or in response to valid requests by public authorities (e.g. a court or a government agency).

Other legal requirements

The Company may disclose Your Personal Data in the good faith belief that such action is necessary to:

Comply with a legal obligation
Protect and defend the rights or property of the Company
Prevent or investigate possible wrongdoing in connection with the Service
Protect the personal safety of Users of the Service or the public
Protect against legal liability
Security of Your Personal Data

The security of Your Personal Data is important to Us, but remember that no method of transmission over the Internet, or method of electronic storage is 100% secure. While We strive to use commercially acceptable means to protect Your Personal Data, We cannot guarantee its absolute security.

Children's Privacy

Our Service does not address anyone under the age of 13. We do not knowingly collect personally identifiable information from anyone under the age of 13. If You are a parent or guardian and You are aware that Your child has provided Us with Personal Data, please contact Us. If We become aware that We have collected Personal Data from anyone under the age of 13 without verification of parental consent, We take steps to remove that information from Our servers.

If We need to rely on consent as a legal basis for processing Your information and Your country requires consent from a parent, We may require Your parent's consent before We collect and use that information.

Links to Other Websites

Our Service may contain links to other websites that are not operated by Us. If You click on a third party link, You will be directed to that third party's site. We strongly advise You to review the Privacy Policy of every site You visit.

We have no control over and assume no responsibility for the content, privacy policies or practices of any third party sites or services.

Changes to this Privacy Policy

We may update Our Privacy Policy from time to time. We will notify You of any changes by posting the new Privacy Policy on this page.

We will let You know via email and/or a prominent notice on Our Service, prior to the change becoming effective and update the "Last updated" date at the top of this Privacy Policy.

You are advised to review this Privacy Policy periodically for any changes. Changes to this Privacy Policy are effective when they are posted on this page.

Contact Us

If you have any questions about this Privacy Policy, You can contact us:

By email: info@gigalogy.com

Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/terms-and-conditions/
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Terms and Conditions
Last Updated At: September 17, 2023

Please read these terms and conditions carefully before using Our Service.

Interpretation and Definitions
Interpretation

The words of which the initial letter is capitalized have meanings defined under the following conditions. The following definitions shall have the same meaning regardless of whether they appear in singular or in plural.

Definitions

For the purposes of these Terms and Conditions:

Affiliate means an entity that controls, is controlled by or is under common control with a party, where "control" means ownership of 50% or more of the shares, equity interest or other securities entitled to vote for election of directors or other managing authority.
Country refers to: Japan
Company (referred to as either "the Company", "We", "Us" or "Our" in this Agreement) refers to Gigalogy Inc., 23F, 4-1-1, Toranomon, Minato, Tokyo 105-6923.
Device means any device that can access the Service such as a computer, a cellphone or a digital tablet.
Service refers to the Websites.
Terms and Conditions (also referred as "Terms") mean these Terms and Conditions that form the entire agreement between You and the Company regarding the use of the Service.
Third-party Social Media Service means any services or content (including data, information, products or services) provided by a third-party that may be displayed, included or made available by the Service.
Websites refers to gigalogy.com, doozie.io, doozie.ai
You means the individual accessing or using the Service, or the company, or other legal entity on behalf of which such individual is accessing or using the Service, as applicable.
Acknowledgment

These are the Terms and Conditions governing the use of this Service and the agreement that operates between You and the Company. These Terms and Conditions set out the rights and obligations of all users regarding the use of the Service.

Your access to and use of the Service is conditioned on Your acceptance of and compliance with these Terms and Conditions. These Terms and Conditions apply to all visitors, users and others who access or use the Service.

By accessing or using the Service You agree to be bound by these Terms and Conditions. If You disagree with any part of these Terms and Conditions then You may not access the Service.

Your access to and use of the Service is also conditioned on Your acceptance of and compliance with the Privacy Policy of the Company. Our Privacy Policy describes Our policies and procedures on the collection, use and disclosure of Your personal information when You use the Application or the Website and tells You about Your privacy rights and how the law protects You. Please read Our Privacy Policy carefully before using Our Service.

Links to Other Websites

Our Service may contain links to third-party web sites or services that are not owned or controlled by the Company.

The Company has no control over, and assumes no responsibility for, the content, privacy policies, or practices of any third party web sites or services. You further acknowledge and agree that the Company shall not be responsible or liable, directly or indirectly, for any damage or loss caused or alleged to be caused by or in connection with the use of or reliance on any such content, goods or services available on or through any such web sites or services.

We strongly advise You to read the terms and conditions and privacy policies of any third-party web sites or services that You visit.

Termination

We may terminate or suspend Your access immediately, without prior notice or liability, for any reason whatsoever, including without limitation if You breach these Terms and Conditions.

Upon termination, Your right to use the Service will cease immediately.

Limitation of Liability

Notwithstanding any damages that You might incur, the entire liability of the Company and any of its suppliers under any provision of this Terms and Your exclusive remedy for all of the foregoing shall be limited to the amount actually paid by You through the Service or 100 USD if You haven't purchased anything through the Service.

To the maximum extent permitted by applicable law, in no event shall the Company or its suppliers be liable for any special, incidental, indirect, or consequential damages whatsoever (including, but not limited to, damages for loss of profits, loss of data or other information, for business interruption, for personal injury, loss of privacy arising out of or in any way related to the use of or inability to use the Service, third-party software and/or third-party hardware used with the Service, or otherwise in connection with any provision of this Terms), even if the Company or any supplier has been advised of the possibility of such damages and even if the remedy fails of its essential purpose.

Some states do not allow the exclusion of implied warranties or limitation of liability for incidental or consequential damages, which means that some of the above limitations may not apply. In these states, each party's liability will be limited to the greatest extent permitted by law.

"AS IS" and "AS AVAILABLE" Disclaimer

The Service is provided to You "AS IS" and "AS AVAILABLE" and with all faults and defects without warranty of any kind. To the maximum extent permitted under applicable law, the Company, on its own behalf and on behalf of its Affiliates and its and their respective licensors and service providers, expressly disclaims all warranties, whether express, implied, statutory or otherwise, with respect to the Service, including all implied warranties of merchantability, fitness for a particular purpose, title and non-infringement, and warranties that may arise out of course of dealing, course of performance, usage or trade practice. Without limitation to the foregoing, the Company provides no warranty or undertaking, and makes no representation of any kind that the Service will meet Your requirements, achieve any intended results, be compatible or work with any other software, applications, systems or services, operate without interruption, meet any performance or reliability standards or be error free or that any errors or defects can or will be corrected.

Without limiting the foregoing, neither the Company nor any of the company's provider makes any representation or warranty of any kind, express or implied: (i) as to the operation or availability of the Service, or the information, content, and materials or products included thereon; (ii) that the Service will be uninterrupted or error-free; (iii) as to the accuracy, reliability, or currency of any information or content provided through the Service; or (iv) that the Service, its servers, the content, or e-mails sent from or on behalf of the Company are free of viruses, scripts, trojan horses, worms, malware, timebombs or other harmful components.

Some jurisdictions do not allow the exclusion of certain types of warranties or limitations on applicable statutory rights of a consumer, so some or all of the above exclusions and limitations may not apply to You. But in such a case the exclusions and limitations set forth in this section shall be applied to the greatest extent enforceable under applicable law.

Governing Law

The laws of the Country, excluding its conflicts of law rules, shall govern this Terms and Your use of the Service. Your use of the Application may also be subject to other local, state, national, or international laws.

Disputes Resolution

If You have any concern or dispute about the Service, You agree to first try to resolve the dispute informally by contacting the Company.

For European Union (EU) Users

If You are a European Union consumer, you will benefit from any mandatory provisions of the law of the country in which you are resident in.

United States Legal Compliance

You represent and warrant that (i) You are not located in a country that is subject to the United States government embargo, or that has been designated by the United States government as a "terrorist supporting" country, and (ii) You are not listed on any United States government list of prohibited or restricted parties.

Severability and Waiver
Severability

If any provision of these Terms is held to be unenforceable or invalid, such provision will be changed and interpreted to accomplish the objectives of such provision to the greatest extent possible under applicable law and the remaining provisions will continue in full force and effect.

Waiver

Except as provided herein, the failure to exercise a right or to require performance of an obligation under this Terms shall not effect a party's ability to exercise such right or require such performance at any time thereafter nor shall be the waiver of a breach constitute a waiver of any subsequent breach.

Translation Interpretation

These Terms and Conditions may have been translated if We have made them available to You on our Service. You agree that the original English text shall prevail in the case of a dispute.

Changes to These Terms and Conditions

We reserve the right, at Our sole discretion, to modify or replace these Terms at any time. If a revision is material We will make reasonable efforts to provide at least 30 days' notice prior to any new terms taking effect. What constitutes a material change will be determined at Our sole discretion.

By continuing to access or use Our Service after those revisions become effective, You agree to be bound by the revised terms. If You do not agree to the new terms, in whole or in part, please stop using the website and the Service.

Contact Us

If you have any questions about these Terms and Conditions, You can contact us:

By email: info@gigalogy.com

Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/terms-and-conditions/#ja
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Terms and Conditions
Last Updated At: September 17, 2023

Please read these terms and conditions carefully before using Our Service.

Interpretation and Definitions
Interpretation

The words of which the initial letter is capitalized have meanings defined under the following conditions. The following definitions shall have the same meaning regardless of whether they appear in singular or in plural.

Definitions

For the purposes of these Terms and Conditions:

Affiliate means an entity that controls, is controlled by or is under common control with a party, where "control" means ownership of 50% or more of the shares, equity interest or other securities entitled to vote for election of directors or other managing authority.
Country refers to: Japan
Company (referred to as either "the Company", "We", "Us" or "Our" in this Agreement) refers to Gigalogy Inc., 23F, 4-1-1, Toranomon, Minato, Tokyo 105-6923.
Device means any device that can access the Service such as a computer, a cellphone or a digital tablet.
Service refers to the Websites.
Terms and Conditions (also referred as "Terms") mean these Terms and Conditions that form the entire agreement between You and the Company regarding the use of the Service.
Third-party Social Media Service means any services or content (including data, information, products or services) provided by a third-party that may be displayed, included or made available by the Service.
Websites refers to gigalogy.com, doozie.io, doozie.ai
You means the individual accessing or using the Service, or the company, or other legal entity on behalf of which such individual is accessing or using the Service, as applicable.
Acknowledgment

These are the Terms and Conditions governing the use of this Service and the agreement that operates between You and the Company. These Terms and Conditions set out the rights and obligations of all users regarding the use of the Service.

Your access to and use of the Service is conditioned on Your acceptance of and compliance with these Terms and Conditions. These Terms and Conditions apply to all visitors, users and others who access or use the Service.

By accessing or using the Service You agree to be bound by these Terms and Conditions. If You disagree with any part of these Terms and Conditions then You may not access the Service.

Your access to and use of the Service is also conditioned on Your acceptance of and compliance with the Privacy Policy of the Company. Our Privacy Policy describes Our policies and procedures on the collection, use and disclosure of Your personal information when You use the Application or the Website and tells You about Your privacy rights and how the law protects You. Please read Our Privacy Policy carefully before using Our Service.

Links to Other Websites

Our Service may contain links to third-party web sites or services that are not owned or controlled by the Company.

The Company has no control over, and assumes no responsibility for, the content, privacy policies, or practices of any third party web sites or services. You further acknowledge and agree that the Company shall not be responsible or liable, directly or indirectly, for any damage or loss caused or alleged to be caused by or in connection with the use of or reliance on any such content, goods or services available on or through any such web sites or services.

We strongly advise You to read the terms and conditions and privacy policies of any third-party web sites or services that You visit.

Termination

We may terminate or suspend Your access immediately, without prior notice or liability, for any reason whatsoever, including without limitation if You breach these Terms and Conditions.

Upon termination, Your right to use the Service will cease immediately.

Limitation of Liability

Notwithstanding any damages that You might incur, the entire liability of the Company and any of its suppliers under any provision of this Terms and Your exclusive remedy for all of the foregoing shall be limited to the amount actually paid by You through the Service or 100 USD if You haven't purchased anything through the Service.

To the maximum extent permitted by applicable law, in no event shall the Company or its suppliers be liable for any special, incidental, indirect, or consequential damages whatsoever (including, but not limited to, damages for loss of profits, loss of data or other information, for business interruption, for personal injury, loss of privacy arising out of or in any way related to the use of or inability to use the Service, third-party software and/or third-party hardware used with the Service, or otherwise in connection with any provision of this Terms), even if the Company or any supplier has been advised of the possibility of such damages and even if the remedy fails of its essential purpose.

Some states do not allow the exclusion of implied warranties or limitation of liability for incidental or consequential damages, which means that some of the above limitations may not apply. In these states, each party's liability will be limited to the greatest extent permitted by law.

"AS IS" and "AS AVAILABLE" Disclaimer

The Service is provided to You "AS IS" and "AS AVAILABLE" and with all faults and defects without warranty of any kind. To the maximum extent permitted under applicable law, the Company, on its own behalf and on behalf of its Affiliates and its and their respective licensors and service providers, expressly disclaims all warranties, whether express, implied, statutory or otherwise, with respect to the Service, including all implied warranties of merchantability, fitness for a particular purpose, title and non-infringement, and warranties that may arise out of course of dealing, course of performance, usage or trade practice. Without limitation to the foregoing, the Company provides no warranty or undertaking, and makes no representation of any kind that the Service will meet Your requirements, achieve any intended results, be compatible or work with any other software, applications, systems or services, operate without interruption, meet any performance or reliability standards or be error free or that any errors or defects can or will be corrected.

Without limiting the foregoing, neither the Company nor any of the company's provider makes any representation or warranty of any kind, express or implied: (i) as to the operation or availability of the Service, or the information, content, and materials or products included thereon; (ii) that the Service will be uninterrupted or error-free; (iii) as to the accuracy, reliability, or currency of any information or content provided through the Service; or (iv) that the Service, its servers, the content, or e-mails sent from or on behalf of the Company are free of viruses, scripts, trojan horses, worms, malware, timebombs or other harmful components.

Some jurisdictions do not allow the exclusion of certain types of warranties or limitations on applicable statutory rights of a consumer, so some or all of the above exclusions and limitations may not apply to You. But in such a case the exclusions and limitations set forth in this section shall be applied to the greatest extent enforceable under applicable law.

Governing Law

The laws of the Country, excluding its conflicts of law rules, shall govern this Terms and Your use of the Service. Your use of the Application may also be subject to other local, state, national, or international laws.

Disputes Resolution

If You have any concern or dispute about the Service, You agree to first try to resolve the dispute informally by contacting the Company.

For European Union (EU) Users

If You are a European Union consumer, you will benefit from any mandatory provisions of the law of the country in which you are resident in.

United States Legal Compliance

You represent and warrant that (i) You are not located in a country that is subject to the United States government embargo, or that has been designated by the United States government as a "terrorist supporting" country, and (ii) You are not listed on any United States government list of prohibited or restricted parties.

Severability and Waiver
Severability

If any provision of these Terms is held to be unenforceable or invalid, such provision will be changed and interpreted to accomplish the objectives of such provision to the greatest extent possible under applicable law and the remaining provisions will continue in full force and effect.

Waiver

Except as provided herein, the failure to exercise a right or to require performance of an obligation under this Terms shall not effect a party's ability to exercise such right or require such performance at any time thereafter nor shall be the waiver of a breach constitute a waiver of any subsequent breach.

Translation Interpretation

These Terms and Conditions may have been translated if We have made them available to You on our Service. You agree that the original English text shall prevail in the case of a dispute.

Changes to These Terms and Conditions

We reserve the right, at Our sole discretion, to modify or replace these Terms at any time. If a revision is material We will make reasonable efforts to provide at least 30 days' notice prior to any new terms taking effect. What constitutes a material change will be determined at Our sole discretion.

By continuing to access or use Our Service after those revisions become effective, You agree to be bound by the revised terms. If You do not agree to the new terms, in whole or in part, please stop using the website and the Service.

Contact Us

If you have any questions about these Terms and Conditions, You can contact us:

By email: info@gigalogy.com

Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/terms-and-conditions/#hometop
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Terms and Conditions
Last Updated At: September 17, 2023

Please read these terms and conditions carefully before using Our Service.

Interpretation and Definitions
Interpretation

The words of which the initial letter is capitalized have meanings defined under the following conditions. The following definitions shall have the same meaning regardless of whether they appear in singular or in plural.

Definitions

For the purposes of these Terms and Conditions:

Affiliate means an entity that controls, is controlled by or is under common control with a party, where "control" means ownership of 50% or more of the shares, equity interest or other securities entitled to vote for election of directors or other managing authority.
Country refers to: Japan
Company (referred to as either "the Company", "We", "Us" or "Our" in this Agreement) refers to Gigalogy Inc., 23F, 4-1-1, Toranomon, Minato, Tokyo 105-6923.
Device means any device that can access the Service such as a computer, a cellphone or a digital tablet.
Service refers to the Websites.
Terms and Conditions (also referred as "Terms") mean these Terms and Conditions that form the entire agreement between You and the Company regarding the use of the Service.
Third-party Social Media Service means any services or content (including data, information, products or services) provided by a third-party that may be displayed, included or made available by the Service.
Websites refers to gigalogy.com, doozie.io, doozie.ai
You means the individual accessing or using the Service, or the company, or other legal entity on behalf of which such individual is accessing or using the Service, as applicable.
Acknowledgment

These are the Terms and Conditions governing the use of this Service and the agreement that operates between You and the Company. These Terms and Conditions set out the rights and obligations of all users regarding the use of the Service.

Your access to and use of the Service is conditioned on Your acceptance of and compliance with these Terms and Conditions. These Terms and Conditions apply to all visitors, users and others who access or use the Service.

By accessing or using the Service You agree to be bound by these Terms and Conditions. If You disagree with any part of these Terms and Conditions then You may not access the Service.

Your access to and use of the Service is also conditioned on Your acceptance of and compliance with the Privacy Policy of the Company. Our Privacy Policy describes Our policies and procedures on the collection, use and disclosure of Your personal information when You use the Application or the Website and tells You about Your privacy rights and how the law protects You. Please read Our Privacy Policy carefully before using Our Service.

Links to Other Websites

Our Service may contain links to third-party web sites or services that are not owned or controlled by the Company.

The Company has no control over, and assumes no responsibility for, the content, privacy policies, or practices of any third party web sites or services. You further acknowledge and agree that the Company shall not be responsible or liable, directly or indirectly, for any damage or loss caused or alleged to be caused by or in connection with the use of or reliance on any such content, goods or services available on or through any such web sites or services.

We strongly advise You to read the terms and conditions and privacy policies of any third-party web sites or services that You visit.

Termination

We may terminate or suspend Your access immediately, without prior notice or liability, for any reason whatsoever, including without limitation if You breach these Terms and Conditions.

Upon termination, Your right to use the Service will cease immediately.

Limitation of Liability

Notwithstanding any damages that You might incur, the entire liability of the Company and any of its suppliers under any provision of this Terms and Your exclusive remedy for all of the foregoing shall be limited to the amount actually paid by You through the Service or 100 USD if You haven't purchased anything through the Service.

To the maximum extent permitted by applicable law, in no event shall the Company or its suppliers be liable for any special, incidental, indirect, or consequential damages whatsoever (including, but not limited to, damages for loss of profits, loss of data or other information, for business interruption, for personal injury, loss of privacy arising out of or in any way related to the use of or inability to use the Service, third-party software and/or third-party hardware used with the Service, or otherwise in connection with any provision of this Terms), even if the Company or any supplier has been advised of the possibility of such damages and even if the remedy fails of its essential purpose.

Some states do not allow the exclusion of implied warranties or limitation of liability for incidental or consequential damages, which means that some of the above limitations may not apply. In these states, each party's liability will be limited to the greatest extent permitted by law.

"AS IS" and "AS AVAILABLE" Disclaimer

The Service is provided to You "AS IS" and "AS AVAILABLE" and with all faults and defects without warranty of any kind. To the maximum extent permitted under applicable law, the Company, on its own behalf and on behalf of its Affiliates and its and their respective licensors and service providers, expressly disclaims all warranties, whether express, implied, statutory or otherwise, with respect to the Service, including all implied warranties of merchantability, fitness for a particular purpose, title and non-infringement, and warranties that may arise out of course of dealing, course of performance, usage or trade practice. Without limitation to the foregoing, the Company provides no warranty or undertaking, and makes no representation of any kind that the Service will meet Your requirements, achieve any intended results, be compatible or work with any other software, applications, systems or services, operate without interruption, meet any performance or reliability standards or be error free or that any errors or defects can or will be corrected.

Without limiting the foregoing, neither the Company nor any of the company's provider makes any representation or warranty of any kind, express or implied: (i) as to the operation or availability of the Service, or the information, content, and materials or products included thereon; (ii) that the Service will be uninterrupted or error-free; (iii) as to the accuracy, reliability, or currency of any information or content provided through the Service; or (iv) that the Service, its servers, the content, or e-mails sent from or on behalf of the Company are free of viruses, scripts, trojan horses, worms, malware, timebombs or other harmful components.

Some jurisdictions do not allow the exclusion of certain types of warranties or limitations on applicable statutory rights of a consumer, so some or all of the above exclusions and limitations may not apply to You. But in such a case the exclusions and limitations set forth in this section shall be applied to the greatest extent enforceable under applicable law.

Governing Law

The laws of the Country, excluding its conflicts of law rules, shall govern this Terms and Your use of the Service. Your use of the Application may also be subject to other local, state, national, or international laws.

Disputes Resolution

If You have any concern or dispute about the Service, You agree to first try to resolve the dispute informally by contacting the Company.

For European Union (EU) Users

If You are a European Union consumer, you will benefit from any mandatory provisions of the law of the country in which you are resident in.

United States Legal Compliance

You represent and warrant that (i) You are not located in a country that is subject to the United States government embargo, or that has been designated by the United States government as a "terrorist supporting" country, and (ii) You are not listed on any United States government list of prohibited or restricted parties.

Severability and Waiver
Severability

If any provision of these Terms is held to be unenforceable or invalid, such provision will be changed and interpreted to accomplish the objectives of such provision to the greatest extent possible under applicable law and the remaining provisions will continue in full force and effect.

Waiver

Except as provided herein, the failure to exercise a right or to require performance of an obligation under this Terms shall not effect a party's ability to exercise such right or require such performance at any time thereafter nor shall be the waiver of a breach constitute a waiver of any subsequent breach.

Translation Interpretation

These Terms and Conditions may have been translated if We have made them available to You on our Service. You agree that the original English text shall prevail in the case of a dispute.

Changes to These Terms and Conditions

We reserve the right, at Our sole discretion, to modify or replace these Terms at any time. If a revision is material We will make reasonable efforts to provide at least 30 days' notice prior to any new terms taking effect. What constitutes a material change will be determined at Our sole discretion.

By continuing to access or use Our Service after those revisions become effective, You agree to be bound by the revised terms. If You do not agree to the new terms, in whole or in part, please stop using the website and the Service.

Contact Us

If you have any questions about these Terms and Conditions, You can contact us:

By email: info@gigalogy.com

Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/cookie-policy/
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Cookies Policy
Last Updated At: September 17, 2023

This Cookies Policy explains what Cookies are and how We use them. You should read this policy so You can understand what type of cookies We use, or the information We collect using Cookies and how that information is used.

Cookies do not typically contain any information that personally identifies a user, but personal information that we store about You may be linked to the information stored in and obtained from Cookies. For further information on how We use, store and keep your personal data secure, see our Privacy Policy.

We do not store sensitive personal information, such as mailing addresses, account passwords, etc. in the Cookies We use.

Interpretation and Definitions
Interpretation

The words of which the initial letter is capitalized have meanings defined under the following conditions. The following definitions shall have the same meaning regardless of whether they appear in singular or in plural.

Definitions

For the purposes of this Cookies Policy:

Company (referred to as either "the Company", "We", "Us" or "Our" in this Cookies Policy) refers to Gigalogy Inc., 23F, 4-1-1, Toranomon, Minato, Tokyo 105-6923.
Cookies means small files that are placed on Your computer, mobile device or any other device by a website, containing details of your browsing history on that website among its many uses.
Website refers to gigalogy.com, doozie.io, doozie.ai
You means the individual accessing or using the Website, or a company, or any legal entity on behalf of which such individual is accessing or using the Website, as applicable.
The use of the Cookies
Type of Cookies We Use

Cookies can be "Persistent" or "Session" Cookies. Persistent Cookies remain on your personal computer or mobile device when You go offline, while Session Cookies are deleted as soon as You close your web browser.

We use both session and persistent Cookies for the purposes set out below:

Necessary / Essential Cookies
Type: Session Cookies
Administered by: Us
Purpose: These Cookies are essential to provide You with services available through the Website and to enable You to use some of its features. They help to authenticate users and prevent fraudulent use of user accounts. Without these Cookies, the services that You have asked for cannot be provided, and We only use these Cookies to provide You with those services.
Functionality Cookies
Type: Persistent Cookies
Administered by: Us
Purpose: These Cookies allow us to remember choices You make when You use the Website, such as remembering your login details or language preference. The purpose of these Cookies is to provide You with a more personal experience and to avoid You having to re-enter your preferences every time You use the Website.
Your Choices Regarding Cookies

If You prefer to avoid the use of Cookies on the Website, first You must disable the use of Cookies in your browser and then delete the Cookies saved in your browser associated with this website. You may use this option for preventing the use of Cookies at any time.

If You do not accept Our Cookies, You may experience some inconvenience in your use of the Website and some features may not function properly.

If You'd like to delete Cookies or instruct your web browser to delete or refuse Cookies, please visit the help pages of your web browser.

For the Chrome web browser, please visit this page from Google: https://support.google.com/accounts/answer/32050
For the Internet Explorer web browser, please visit this page from Microsoft: http://support.microsoft.com/kb/278835
For the Firefox web browser, please visit this page from Mozilla: https://support.mozilla.org/en-US/kb/delete-cookies-remove-info-websites-stored
For the Safari web browser, please visit this page from Apple: https://support.apple.com/guide/safari/manage-cookies-and-website-data-sfri11471/mac

For any other web browser, please visit your web browser's official web pages.

Contact Us

If you have any questions about this Cookies Policy, You can contact us:

By email: info@gigalogy.com

Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/cookie-policy/#ja
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Cookies Policy
Last Updated At: September 17, 2023

This Cookies Policy explains what Cookies are and how We use them. You should read this policy so You can understand what type of cookies We use, or the information We collect using Cookies and how that information is used.

Cookies do not typically contain any information that personally identifies a user, but personal information that we store about You may be linked to the information stored in and obtained from Cookies. For further information on how We use, store and keep your personal data secure, see our Privacy Policy.

We do not store sensitive personal information, such as mailing addresses, account passwords, etc. in the Cookies We use.

Interpretation and Definitions
Interpretation

The words of which the initial letter is capitalized have meanings defined under the following conditions. The following definitions shall have the same meaning regardless of whether they appear in singular or in plural.

Definitions

For the purposes of this Cookies Policy:

Company (referred to as either "the Company", "We", "Us" or "Our" in this Cookies Policy) refers to Gigalogy Inc., 23F, 4-1-1, Toranomon, Minato, Tokyo 105-6923.
Cookies means small files that are placed on Your computer, mobile device or any other device by a website, containing details of your browsing history on that website among its many uses.
Website refers to gigalogy.com, doozie.io, doozie.ai
You means the individual accessing or using the Website, or a company, or any legal entity on behalf of which such individual is accessing or using the Website, as applicable.
The use of the Cookies
Type of Cookies We Use

Cookies can be "Persistent" or "Session" Cookies. Persistent Cookies remain on your personal computer or mobile device when You go offline, while Session Cookies are deleted as soon as You close your web browser.

We use both session and persistent Cookies for the purposes set out below:

Necessary / Essential Cookies
Type: Session Cookies
Administered by: Us
Purpose: These Cookies are essential to provide You with services available through the Website and to enable You to use some of its features. They help to authenticate users and prevent fraudulent use of user accounts. Without these Cookies, the services that You have asked for cannot be provided, and We only use these Cookies to provide You with those services.
Functionality Cookies
Type: Persistent Cookies
Administered by: Us
Purpose: These Cookies allow us to remember choices You make when You use the Website, such as remembering your login details or language preference. The purpose of these Cookies is to provide You with a more personal experience and to avoid You having to re-enter your preferences every time You use the Website.
Your Choices Regarding Cookies

If You prefer to avoid the use of Cookies on the Website, first You must disable the use of Cookies in your browser and then delete the Cookies saved in your browser associated with this website. You may use this option for preventing the use of Cookies at any time.

If You do not accept Our Cookies, You may experience some inconvenience in your use of the Website and some features may not function properly.

If You'd like to delete Cookies or instruct your web browser to delete or refuse Cookies, please visit the help pages of your web browser.

For the Chrome web browser, please visit this page from Google: https://support.google.com/accounts/answer/32050
For the Internet Explorer web browser, please visit this page from Microsoft: http://support.microsoft.com/kb/278835
For the Firefox web browser, please visit this page from Mozilla: https://support.mozilla.org/en-US/kb/delete-cookies-remove-info-websites-stored
For the Safari web browser, please visit this page from Apple: https://support.apple.com/guide/safari/manage-cookies-and-website-data-sfri11471/mac

For any other web browser, please visit your web browser's official web pages.

Contact Us

If you have any questions about this Cookies Policy, You can contact us:

By email: info@gigalogy.com

Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/cookie-policy/#hometop
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Cookies Policy
Last Updated At: September 17, 2023

This Cookies Policy explains what Cookies are and how We use them. You should read this policy so You can understand what type of cookies We use, or the information We collect using Cookies and how that information is used.

Cookies do not typically contain any information that personally identifies a user, but personal information that we store about You may be linked to the information stored in and obtained from Cookies. For further information on how We use, store and keep your personal data secure, see our Privacy Policy.

We do not store sensitive personal information, such as mailing addresses, account passwords, etc. in the Cookies We use.

Interpretation and Definitions
Interpretation

The words of which the initial letter is capitalized have meanings defined under the following conditions. The following definitions shall have the same meaning regardless of whether they appear in singular or in plural.

Definitions

For the purposes of this Cookies Policy:

Company (referred to as either "the Company", "We", "Us" or "Our" in this Cookies Policy) refers to Gigalogy Inc., 23F, 4-1-1, Toranomon, Minato, Tokyo 105-6923.
Cookies means small files that are placed on Your computer, mobile device or any other device by a website, containing details of your browsing history on that website among its many uses.
Website refers to gigalogy.com, doozie.io, doozie.ai
You means the individual accessing or using the Website, or a company, or any legal entity on behalf of which such individual is accessing or using the Website, as applicable.
The use of the Cookies
Type of Cookies We Use

Cookies can be "Persistent" or "Session" Cookies. Persistent Cookies remain on your personal computer or mobile device when You go offline, while Session Cookies are deleted as soon as You close your web browser.

We use both session and persistent Cookies for the purposes set out below:

Necessary / Essential Cookies
Type: Session Cookies
Administered by: Us
Purpose: These Cookies are essential to provide You with services available through the Website and to enable You to use some of its features. They help to authenticate users and prevent fraudulent use of user accounts. Without these Cookies, the services that You have asked for cannot be provided, and We only use these Cookies to provide You with those services.
Functionality Cookies
Type: Persistent Cookies
Administered by: Us
Purpose: These Cookies allow us to remember choices You make when You use the Website, such as remembering your login details or language preference. The purpose of these Cookies is to provide You with a more personal experience and to avoid You having to re-enter your preferences every time You use the Website.
Your Choices Regarding Cookies

If You prefer to avoid the use of Cookies on the Website, first You must disable the use of Cookies in your browser and then delete the Cookies saved in your browser associated with this website. You may use this option for preventing the use of Cookies at any time.

If You do not accept Our Cookies, You may experience some inconvenience in your use of the Website and some features may not function properly.

If You'd like to delete Cookies or instruct your web browser to delete or refuse Cookies, please visit the help pages of your web browser.

For the Chrome web browser, please visit this page from Google: https://support.google.com/accounts/answer/32050
For the Internet Explorer web browser, please visit this page from Microsoft: http://support.microsoft.com/kb/278835
For the Firefox web browser, please visit this page from Mozilla: https://support.mozilla.org/en-US/kb/delete-cookies-remove-info-websites-stored
For the Safari web browser, please visit this page from Apple: https://support.apple.com/guide/safari/manage-cookies-and-website-data-sfri11471/mac

For any other web browser, please visit your web browser's official web pages.

Contact Us

If you have any questions about this Cookies Policy, You can contact us:

By email: info@gigalogy.com

Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/commercial-disclosure/
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Commercial Disclosure

特定商取引法に基づく表記

Legal Name : Gigalogy Inc.

Address : 23F, 4-1-1, Toranomon, Minato, Tokyo 105-6923

Phone Number : +813-4500-7914

Email Address : info@gigalogy.com

Head of Operations : Md Mosleh Uddin (CEO)

Additional Fees

While there are no additional fees, please note that applicable taxes will be applied to your subscription charges.

Subscription Details

Payment Period : Your subscription payment will be processed on a monthly basis.

Free Trial : Enjoy a complimentary trial month of our SaaS platform and explore its full features.

Payment Method

Billing Method : Payments are accepted exclusively through bank transfers. Each month, you will receive an email notification when your invoice is ready. After logging into your account on our website, you can check and download your invoice for your records.

We are currently in the process of integrating additional payment services, including "Stripe." Following this, we will be able to facilitate credit card transactions as well.

Exchanges and Refunds

As a SaaS provider, we offer a cancellation policy for your subscription:

Cancellation : You can cancel your subscription anytime. However, once the cancellation is initiated, your access to the project will be immediately revoked. (For the current month, you will be charged proportionally based on the number of days you have utilized the service in the current month.

Refunds : We do not offer refunds for unused portions of a subscription. However, you'll have access to the service for the duration of the billing period you've paid for.

Events

We occasionally host special events for our subscribers. Here are the details:

Application Period : Check our announcements for the specific application period of upcoming events. Please apply within the designated time frame to secure your spot.

Available Quantity : The number of available slots for each event may vary. Be sure to apply early to guarantee your participation.

Support and Contact

Customer Support : If you require assistance or have inquiries, please contact us at info@gigalogy.com

Data Privacy and Security

Data Handling : We treat your data with utmost care and in accordance with our Privacy Policy. Please review this policy to understand how we collect, use, and safeguard your information.

Price

The pricing for our SaaS platform is available on our website, in the list of solutions. Prices are subject to change, and any updates will be communicated in advance.

Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/commercial-disclosure/#ja
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Commercial Disclosure

特定商取引法に基づく表記

Legal Name : Gigalogy Inc.

Address : 23F, 4-1-1, Toranomon, Minato, Tokyo 105-6923

Phone Number : +813-4500-7914

Email Address : info@gigalogy.com

Head of Operations : Md Mosleh Uddin (CEO)

Additional Fees

While there are no additional fees, please note that applicable taxes will be applied to your subscription charges.

Subscription Details

Payment Period : Your subscription payment will be processed on a monthly basis.

Free Trial : Enjoy a complimentary trial month of our SaaS platform and explore its full features.

Payment Method

Billing Method : Payments are accepted exclusively through bank transfers. Each month, you will receive an email notification when your invoice is ready. After logging into your account on our website, you can check and download your invoice for your records.

We are currently in the process of integrating additional payment services, including "Stripe." Following this, we will be able to facilitate credit card transactions as well.

Exchanges and Refunds

As a SaaS provider, we offer a cancellation policy for your subscription:

Cancellation : You can cancel your subscription anytime. However, once the cancellation is initiated, your access to the project will be immediately revoked. (For the current month, you will be charged proportionally based on the number of days you have utilized the service in the current month.

Refunds : We do not offer refunds for unused portions of a subscription. However, you'll have access to the service for the duration of the billing period you've paid for.

Events

We occasionally host special events for our subscribers. Here are the details:

Application Period : Check our announcements for the specific application period of upcoming events. Please apply within the designated time frame to secure your spot.

Available Quantity : The number of available slots for each event may vary. Be sure to apply early to guarantee your participation.

Support and Contact

Customer Support : If you require assistance or have inquiries, please contact us at info@gigalogy.com

Data Privacy and Security

Data Handling : We treat your data with utmost care and in accordance with our Privacy Policy. Please review this policy to understand how we collect, use, and safeguard your information.

Price

The pricing for our SaaS platform is available on our website, in the list of solutions. Prices are subject to change, and any updates will be communicated in advance.

Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/commercial-disclosure/#hometop
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Commercial Disclosure

特定商取引法に基づく表記

Legal Name : Gigalogy Inc.

Address : 23F, 4-1-1, Toranomon, Minato, Tokyo 105-6923

Phone Number : +813-4500-7914

Email Address : info@gigalogy.com

Head of Operations : Md Mosleh Uddin (CEO)

Additional Fees

While there are no additional fees, please note that applicable taxes will be applied to your subscription charges.

Subscription Details

Payment Period : Your subscription payment will be processed on a monthly basis.

Free Trial : Enjoy a complimentary trial month of our SaaS platform and explore its full features.

Payment Method

Billing Method : Payments are accepted exclusively through bank transfers. Each month, you will receive an email notification when your invoice is ready. After logging into your account on our website, you can check and download your invoice for your records.

We are currently in the process of integrating additional payment services, including "Stripe." Following this, we will be able to facilitate credit card transactions as well.

Exchanges and Refunds

As a SaaS provider, we offer a cancellation policy for your subscription:

Cancellation : You can cancel your subscription anytime. However, once the cancellation is initiated, your access to the project will be immediately revoked. (For the current month, you will be charged proportionally based on the number of days you have utilized the service in the current month.

Refunds : We do not offer refunds for unused portions of a subscription. However, you'll have access to the service for the duration of the billing period you've paid for.

Events

We occasionally host special events for our subscribers. Here are the details:

Application Period : Check our announcements for the specific application period of upcoming events. Please apply within the designated time frame to secure your spot.

Available Quantity : The number of available slots for each event may vary. Be sure to apply early to guarantee your participation.

Support and Contact

Customer Support : If you require assistance or have inquiries, please contact us at info@gigalogy.com

Data Privacy and Security

Data Handling : We treat your data with utmost care and in accordance with our Privacy Policy. Please review this policy to understand how we collect, use, and safeguard your information.

Price

The pricing for our SaaS platform is available on our website, in the list of solutions. Prices are subject to change, and any updates will be communicated in advance.

Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/event-details-ep2/
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Ep.2 — Create your personalized GPT assistant
Wed, Sep 13th 2023, 6:30 PM JST

REGISTER
Details

access_timeWed, Sep 13th 2023, 6:30 PM JST (2:30 AM PST) - 1 hour

public Kamiyacho Trust Tower 23F, 4-1-1 Toranomon, Minato-ku, Tokyo

Key Topics

filter_1 How the GPT model works

filter_2 How to build GPT enabled application with own data

filter_3 Prompt engineering and different techniques

filter_4 Demo

Outline

timer Introduction from the host - 5 mins

timer Presentation on the key topics - 35 mins

timer Q & A - 20 mins



About Speaker
“It’s important that we share our ideas with like minded people and execute it together to create the user experience of future.”

Mosleh Uddin
CEO, Gigalogy Inc.

 




Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/event-details-ep2/#ja
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Ep.2 — Create your personalized GPT assistant
Wed, Sep 13th 2023, 6:30 PM JST

REGISTER
Details

access_timeWed, Sep 13th 2023, 6:30 PM JST (2:30 AM PST) - 1 hour

public Kamiyacho Trust Tower 23F, 4-1-1 Toranomon, Minato-ku, Tokyo

Key Topics

filter_1 How the GPT model works

filter_2 How to build GPT enabled application with own data

filter_3 Prompt engineering and different techniques

filter_4 Demo

Outline

timer Introduction from the host - 5 mins

timer Presentation on the key topics - 35 mins

timer Q & A - 20 mins



About Speaker
“It’s important that we share our ideas with like minded people and execute it together to create the user experience of future.”

Mosleh Uddin
CEO, Gigalogy Inc.

 




Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/event-details-ep2/#hometop
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Ep.2 — Create your personalized GPT assistant
Wed, Sep 13th 2023, 6:30 PM JST

REGISTER
Details

access_timeWed, Sep 13th 2023, 6:30 PM JST (2:30 AM PST) - 1 hour

public Kamiyacho Trust Tower 23F, 4-1-1 Toranomon, Minato-ku, Tokyo

Key Topics

filter_1 How the GPT model works

filter_2 How to build GPT enabled application with own data

filter_3 Prompt engineering and different techniques

filter_4 Demo

Outline

timer Introduction from the host - 5 mins

timer Presentation on the key topics - 35 mins

timer Q & A - 20 mins



About Speaker
“It’s important that we share our ideas with like minded people and execute it together to create the user experience of future.”

Mosleh Uddin
CEO, Gigalogy Inc.

 




Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/event-details/8de44707-e1d1-4e2f-a408-dba6697fc861/
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Ep.1 — Doozie Token (DZT) - Decentralized personalized reward system for the internet
Wed, Feb 9th 2022, 6:00 PM JST
 REGISTER
Details

access_timeWed, Feb 9th 2022, 6:00 PM JST (1:00 AM PST) - 1 hour

public Online Event (Zoom). Anyone can Join

Key Topics

filter_1 Doozie Token (DZT): why DZT is born, what is it we are trying to solve and how the user experience will be in the DZT ecosystem

filter_2 DZT Roadmap and milestones

filter_3 DZT on Gigalogy AI Platform

filter_4 DZT for businesses

filter_5 DZT official launch and token sale

Outline

timer Introduction from the host - 5 mins

timer Presentation on the key topics - 35 mins

timer Q & A - 20 mins



Learn More

check_box Learn more about Doozie Token (DZT) from https://www.doozie.io/

check_box Read Doozie Token (DZT) White Paper



About Speaker
“It’s important that we share our ideas with like minded people and execute it together to create the user experience of future. The era of transparency is among us. Transparency is an asset and how we embrace it will shape the future.”

Mosleh Uddin
CEO, Gigalogy Inc.

 


Register

Registration for this event has been closed.




Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/event-details/8de44707-e1d1-4e2f-a408-dba6697fc861/#ja
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Ep.1 — Doozie Token (DZT) - Decentralized personalized reward system for the internet
Wed, Feb 9th 2022, 6:00 PM JST
 REGISTER
Details

access_timeWed, Feb 9th 2022, 6:00 PM JST (1:00 AM PST) - 1 hour

public Online Event (Zoom). Anyone can Join

Key Topics

filter_1 Doozie Token (DZT): why DZT is born, what is it we are trying to solve and how the user experience will be in the DZT ecosystem

filter_2 DZT Roadmap and milestones

filter_3 DZT on Gigalogy AI Platform

filter_4 DZT for businesses

filter_5 DZT official launch and token sale

Outline

timer Introduction from the host - 5 mins

timer Presentation on the key topics - 35 mins

timer Q & A - 20 mins



Learn More

check_box Learn more about Doozie Token (DZT) from https://www.doozie.io/

check_box Read Doozie Token (DZT) White Paper



About Speaker
“It’s important that we share our ideas with like minded people and execute it together to create the user experience of future. The era of transparency is among us. Transparency is an asset and how we embrace it will shape the future.”

Mosleh Uddin
CEO, Gigalogy Inc.

 


Register

Registration for this event has been closed.




Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/event-details/8de44707-e1d1-4e2f-a408-dba6697fc861/#hometop
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Ep.1 — Doozie Token (DZT) - Decentralized personalized reward system for the internet
Wed, Feb 9th 2022, 6:00 PM JST
 REGISTER
Details

access_timeWed, Feb 9th 2022, 6:00 PM JST (1:00 AM PST) - 1 hour

public Online Event (Zoom). Anyone can Join

Key Topics

filter_1 Doozie Token (DZT): why DZT is born, what is it we are trying to solve and how the user experience will be in the DZT ecosystem

filter_2 DZT Roadmap and milestones

filter_3 DZT on Gigalogy AI Platform

filter_4 DZT for businesses

filter_5 DZT official launch and token sale

Outline

timer Introduction from the host - 5 mins

timer Presentation on the key topics - 35 mins

timer Q & A - 20 mins



Learn More

check_box Learn more about Doozie Token (DZT) from https://www.doozie.io/

check_box Read Doozie Token (DZT) White Paper



About Speaker
“It’s important that we share our ideas with like minded people and execute it together to create the user experience of future. The era of transparency is among us. Transparency is an asset and how we embrace it will shape the future.”

Mosleh Uddin
CEO, Gigalogy Inc.

 


Register

Registration for this event has been closed.




Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/event-details/8de44707-e1d1-4e2f-a408-dba6697fc861/#register
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Ep.1 — Doozie Token (DZT) - Decentralized personalized reward system for the internet
Wed, Feb 9th 2022, 6:00 PM JST
 REGISTER
Details

access_timeWed, Feb 9th 2022, 6:00 PM JST (1:00 AM PST) - 1 hour

public Online Event (Zoom). Anyone can Join

Key Topics

filter_1 Doozie Token (DZT): why DZT is born, what is it we are trying to solve and how the user experience will be in the DZT ecosystem

filter_2 DZT Roadmap and milestones

filter_3 DZT on Gigalogy AI Platform

filter_4 DZT for businesses

filter_5 DZT official launch and token sale

Outline

timer Introduction from the host - 5 mins

timer Presentation on the key topics - 35 mins

timer Q & A - 20 mins



Learn More

check_box Learn more about Doozie Token (DZT) from https://www.doozie.io/

check_box Read Doozie Token (DZT) White Paper



About Speaker
“It’s important that we share our ideas with like minded people and execute it together to create the user experience of future. The era of transparency is among us. Transparency is an asset and how we embrace it will shape the future.”

Mosleh Uddin
CEO, Gigalogy Inc.

 


Register

Registration for this event has been closed.




Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://gigalogy.com/#
HOME PRODUCT
Gigalogy Personalizer
Platform
Use Cases
MyGPT
Platform
Use Cases
G-Core
Platform
SmartAds
Platform
Use Cases
 COMPANY
Corporate Profile
Our Mission
Our Team
Career
 NEWS 
Press Room
Events
Experience Box
 CONTACT US  
日本語
Bridging the Gap Between Technology and User Experience

Empowering Businesses to Unlock the Full Potential of AI

GET STARTED
Trusted by
      
Our Products

Our solutions are easy to integrate into web and mobile applications. They are affordable and designed to maximize end user satisfaction, brand loyalty, and business revenue.

Omnichannel Personalization for E-Commerce Businesses

Using our state-of-the-art AI engine, we transform E-Commerce businesses by enhancing product discovery, user engagement, revenue growth, and LTV.

LEARN MORE
Personalized GPT Application Development Platform

An innovative platform that empowers you to train and manage your very own GPT (Generative Pre-trained Transformer) models. Unlock the potential to build intelligent applications tailored to your specific needs.

LEARN MORE
Revolutionize Your AIOps with Our Fully Managed Infrastructure

G-Core is a fully managed, end-to-end automated AIOps solution. It ensures a smooth journey for businesses to host, train, deploy, and integrate their machine learning solutions into production environments.

LEARN MORE
AI-Driven Programmatic Advertising Management Platform

SmartAds is a programmatic advertising management platform that uses Artificial Intelligence to predict the optimum way of setting up digital campaigns, adjusting budget, measuring performance cross-platform in real-time and ensures optimum ROAS with transparency.

LEARN MORE
Why Gigalogy ?

Produce high impact outcomes much more efficiently (time & cost) and with greater value. Build services quickly that transforms data into business impacting decisions.

State of the Art AI Solutions

We provide state-of-the-art AI solutions for various industries.



User-First Approach

For every feature we build, our focus is always on the end-user experience.

Highly Customizable Solutions

Our block module architecture allows for customization according to customer needs in a short period of time.

What's New?
February 1st 2024

Our CEO participated in startup accelerator X-Hub Tokyo London program, in partnership with JETRO and L-Marks. Our goal for 2024? Forging strategic partnerships and building investor relations in the UK to fuel our growth.
Read More



▶ WATCH NOW
December 20th 2023

"Honored by the incredible opportunity we had to showcase Gigalogy's Personalization platform at Web Summit! On November 16th, our CEO, Mosleh Uddin, took the stage at the Startup Showcase pitch competition, sharing a glimpse into our journey and solutions that strive to make a difference."
Read More

December 14th 2023

Just wrapped up an insightful event with our partner Cross Compass, Ltd., exploring the frontiers of "Generative AI for the Manufacturing Industry." Here's a glimpse into the highlights and key takeaways of yesterday's talk.
Read More



December 13th 2023

We are thrilled to announce that we will be co-hosting an exclusive event with our partner, Cross Compass, Ltd., at our office on Wednesday, December 13th.
Read More





November 30th 2023

Our CEO, Mosleh Uddin, delivered an insightful pitch on stage, unveiling how our personalization platform can propel e-commerce businesses to new heights.
Read More

November 16th 2023

Our CEO, Mosleh Uddin, delivered a quickfire presentation to the audience at the Startup Showcase. The occasion for innovative startups to seize the spotlight,
Read More

READ MORE
Experience Box
Episode 3: Becoming an AI Professional

In our previous episodes, we’ve explored the motivations behind venturing into the AI business and the crucial considerations when starting a company. Now, our focus shifts ...
Read More

Episode 2: The Birth of “AI Solutions for Digital Products: Gigalogy AI Platform”

In the second episode of my journey, I found myself pondering a groundbreaking idea as a product manager. Back in 2017, the potential ...
Read More

Episode 1: My Journey to Japan and the Beginnings of My AI Adventure

In the first episode of my story, I want to take you back to the beginning, when my fascination with Artificial Intelligence (AI) first ...
Read More

Introduction to AI-driven Personalized Search Engine

Search engine makes it easy for users to find products and information relevant to their needs. Your application must have a search tool if you want to enhance the user’s ...
Read More

Don’t feel guilty for being a fashion addict anymore

Have you always dreamed of making money during your shopping? It seems your dream has come true ...
Read More



Gigalogy makes AI accessible to everyone

Gigalogy launched “Gigalogy AI Platform (GAIP)”, to dramatically facilitate AI development Gigalogy, a user experience first company ...
Read More

READ MORE
Are you ready to start building applications with greater value?
GET STARTED

Our website use cookies to improve your experience.

OK REJECT
PRODUCT
Gigalogy Personalization
MyGPT
G-Core
SmartAds
Developers
COMPANY
Corporate Profile
Our Mission
Our Team
Careers
PRESS & CONTACT
Request a Demo
Press Room
Events
Experience Box
DEVELOPERS
Partner Program
Recommender - Sandbox
Recommender - Documentation
Recommender - Tutorial
© 2024 Gigalogy Inc. Privacy Policy Terms and Conditions Cookie Policy Commercial Disclosure
  
================================================================================
URL: https://tutorial.gigalogy.com/
Skip to content
Gigalogy Tutorial
Overview
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
MyGPT
API Reference
Release notes
Glossary
Table of contents
Tutorial
API Reference
Overview

The Gigalogy AI platform (GAIP) introduces cutting-edge solutions, designed to craft personalized product offerings. These solutions address specific user needs while propelling business growth. The platform provides solutions for personalization, Custom GPT creation and CV based solution. Within this documentation, you will discover comprehensive guidance on integrating the solutions, understanding its operational framework, and leveraging its capabilities within your application.

Let's have a rundown of the documentation:

Tutorial

To seamlessly integrate your product with our solutions, this section serves as your comprehensive guide. It provides a detailed, step-by-step walkthrough for integrating an API with our solutions. Additionally, you'll gain insights into how the solution function and discover strategies for effectively building your application with it. For an optimal integration process, it is advisable to thoroughly review this section prior to integrating your product.

Get started

API Reference

This section offers developer-friendly API documentation designed to guide you through accessing and utilizing the recommender API effectively.

API Reference

Next
Account and Project creation
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/#overview
Skip to content
Gigalogy Tutorial
Overview
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
MyGPT
API Reference
Release notes
Glossary
Table of contents
Tutorial
API Reference
Overview

The Gigalogy AI platform (GAIP) introduces cutting-edge solutions, designed to craft personalized product offerings. These solutions address specific user needs while propelling business growth. The platform provides solutions for personalization, Custom GPT creation and CV based solution. Within this documentation, you will discover comprehensive guidance on integrating the solutions, understanding its operational framework, and leveraging its capabilities within your application.

Let's have a rundown of the documentation:

Tutorial

To seamlessly integrate your product with our solutions, this section serves as your comprehensive guide. It provides a detailed, step-by-step walkthrough for integrating an API with our solutions. Additionally, you'll gain insights into how the solution function and discover strategies for effectively building your application with it. For an optimal integration process, it is advisable to thoroughly review this section prior to integrating your product.

Get started

API Reference

This section offers developer-friendly API documentation designed to guide you through accessing and utilizing the recommender API effectively.

API Reference

Next
Account and Project creation
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/en/
Gigalogy Tutorial
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
MyGPT
API Reference
Release notes
Glossary
404 - Not found
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/ja/
Gigalogy Tutorial
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
MyGPT
API Reference
Release notes
Glossary
404 - Not found
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/00_Setup_and_training/00_account_project_creation/
Skip to content
Gigalogy Tutorial
Account and Project creation
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
MyGPT
API Reference
Release notes
Glossary
Table of contents
Account creation
Project creation
Account and Project creation
Account creation

Go to platform.gigalogy.com. Click on Get started on the top right and follow the instructions to create an account.

After account creation, you will receive an Email for account verification. Click the link in the Email to complete the account verification.

Note: If you don't see the email, check your spam folder or contact support.

After creating account and logging in, you will see the solutions segments on the left side navigation bar, and detail solutions under those segments.

Project creation

From this page, click on the button Create a project to create your first project.

You will need to fill in the following details:

Project name: Can be anything, recommended to use something easier to track later.

Language: Can be english or Japanese, based on the content of your catalog information

Industry: Select the industry the project is intended for.

Enabled solutions: Select the solutions you want to use.

Next, you will see a confirmation page, check the details and click and your project creation is completed.

In projects page, now you can see the project you just created.

Click on the project to see the project Detail, Settings and Insights page.

If it is your first project, this will be a trial project. The trial period is 90 days. In the project detail page, you can see the susbscription status, and related information. If you wish to end the trial period and convert to standard plan, click the button at the bottom of the page to request the change. Please note this cannot be reversed

If it is not your first project, this will be a standard project. In the project detail page, you can see the susbscription status, and the API rate limits for the project. If you wish to increase the API rate limits, please contact us at support@gigalogy.com.

Previous
Overview
Next
Credentials
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/00_Setup_and_training/00_account_project_creation/#account-creation
Skip to content
Gigalogy Tutorial
Account and Project creation
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
MyGPT
API Reference
Release notes
Glossary
Table of contents
Account creation
Project creation
Account and Project creation
Account creation

Go to platform.gigalogy.com. Click on Get started on the top right and follow the instructions to create an account.

After account creation, you will receive an Email for account verification. Click the link in the Email to complete the account verification.

Note: If you don't see the email, check your spam folder or contact support.

After creating account and logging in, you will see the solutions segments on the left side navigation bar, and detail solutions under those segments.

Project creation

From this page, click on the button Create a project to create your first project.

You will need to fill in the following details:

Project name: Can be anything, recommended to use something easier to track later.

Language: Can be english or Japanese, based on the content of your catalog information

Industry: Select the industry the project is intended for.

Enabled solutions: Select the solutions you want to use.

Next, you will see a confirmation page, check the details and click and your project creation is completed.

In projects page, now you can see the project you just created.

Click on the project to see the project Detail, Settings and Insights page.

If it is your first project, this will be a trial project. The trial period is 90 days. In the project detail page, you can see the susbscription status, and related information. If you wish to end the trial period and convert to standard plan, click the button at the bottom of the page to request the change. Please note this cannot be reversed

If it is not your first project, this will be a standard project. In the project detail page, you can see the susbscription status, and the API rate limits for the project. If you wish to increase the API rate limits, please contact us at support@gigalogy.com.

Previous
Overview
Next
Credentials
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/00_Setup_and_training/00_account_project_creation/#project-creation
Skip to content
Gigalogy Tutorial
Account and Project creation
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
MyGPT
API Reference
Release notes
Glossary
Table of contents
Account creation
Project creation
Account and Project creation
Account creation

Go to platform.gigalogy.com. Click on Get started on the top right and follow the instructions to create an account.

After account creation, you will receive an Email for account verification. Click the link in the Email to complete the account verification.

Note: If you don't see the email, check your spam folder or contact support.

After creating account and logging in, you will see the solutions segments on the left side navigation bar, and detail solutions under those segments.

Project creation

From this page, click on the button Create a project to create your first project.

You will need to fill in the following details:

Project name: Can be anything, recommended to use something easier to track later.

Language: Can be english or Japanese, based on the content of your catalog information

Industry: Select the industry the project is intended for.

Enabled solutions: Select the solutions you want to use.

Next, you will see a confirmation page, check the details and click and your project creation is completed.

In projects page, now you can see the project you just created.

Click on the project to see the project Detail, Settings and Insights page.

If it is your first project, this will be a trial project. The trial period is 90 days. In the project detail page, you can see the susbscription status, and related information. If you wish to end the trial period and convert to standard plan, click the button at the bottom of the page to request the change. Please note this cannot be reversed

If it is not your first project, this will be a standard project. In the project detail page, you can see the susbscription status, and the API rate limits for the project. If you wish to increase the API rate limits, please contact us at support@gigalogy.com.

Previous
Overview
Next
Credentials
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/00_Setup_and_training/01_Credential/
Skip to content
Gigalogy Tutorial
Credentials
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
MyGPT
API Reference
Release notes
Glossary
Table of contents
Create credentials
Credentials

After project is created, you can create credentials for your project. Multiple credentials can be created for a project, depending on your organization's needs.

There are two types of credentials.

Project key and API key: Used for server to server communication.
Client key: Used for client to server communication.

We will dive deeper in the use cases of two types of key in the integration steps.

Note

Please note that Gigalogy does not keep a copy of your API key, if you lose the key, create a new credential and Stop the credential with lost key.

Create credentials

Navigate to your project Settings page. (Got to your project and click on SETTINGS tab).

Click on the blue “Plus” (⊕) button on the right to create credentials. Follow the on-screen instructions to create the credentials. Notice that you will have option to choose the Key Type, as mentioned above. For Client key, you can optionally limit the domain of the request origin for extra security.

Save your credentials carefully.

Now you can start setting up the project with your data, test and integrate the endpoints.

Previous
Account and Project creation
Next
Project setup
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/00_Setup_and_training/01_Credential/#create-credentials
Skip to content
Gigalogy Tutorial
Credentials
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
MyGPT
API Reference
Release notes
Glossary
Table of contents
Create credentials
Credentials

After project is created, you can create credentials for your project. Multiple credentials can be created for a project, depending on your organization's needs.

There are two types of credentials.

Project key and API key: Used for server to server communication.
Client key: Used for client to server communication.

We will dive deeper in the use cases of two types of key in the integration steps.

Note

Please note that Gigalogy does not keep a copy of your API key, if you lose the key, create a new credential and Stop the credential with lost key.

Create credentials

Navigate to your project Settings page. (Got to your project and click on SETTINGS tab).

Click on the blue “Plus” (⊕) button on the right to create credentials. Follow the on-screen instructions to create the credentials. Notice that you will have option to choose the Key Type, as mentioned above. For Client key, you can optionally limit the domain of the request origin for extra security.

Save your credentials carefully.

Now you can start setting up the project with your data, test and integrate the endpoints.

Previous
Account and Project creation
Next
Project setup
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/00_Setup_and_training/project_setup_from_ui/
Skip to content
Gigalogy Tutorial
Project setup
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Table of contents
Project setup from UI
Upload data
Mapping your data
Rank Setting
Setup completion
Project setup

Once the project is created, now it is time to setup the project.

In the coming sections, we will guide you through various steps such as "data mapping" and "creating indexes" (found under the Environment Setup section), "integrating data" (explained in the Integration of Catalogue Information and User Behavior Data section), and "training your data" (in the Training Your Data section). These sections will cover you how to perform these actions by directly using our endpoints from the sandbox.

In this section, we will show you how to complete all these steps directly through our platform UI.

Project setup from UI
Upload data

After creating project, go inside the project. At the top, there will be four tabs DETAILS, SETTINGS, INSIGHTS, SETUP. Click and go to the SETUP. Here you will find a box to upload your data file. Currently we accept CSV files only. Select your CSV file and click upload.

Mapping your data

In the next page, you will see a suggested mapping done for your data. Gigalogy personalization engine relies on specific default keys to operate. To integrate your item catalogue with our solution, it's essential to map you data source keys (such as item name, item description, tags, ingredients, category, etc.) with keys of Gigalogy personalization engine. Our personalizer then can understand your data.

You can update the suggested mapping as you find necessary. This can also be modified later. When satisfied, click continue to proceed to the next step

Rank Setting

In the Rank settings step, you can modify and set the settings for the rank training, which will impact the "trending items" recommendation. If you are not sure about this, we highly recommend to keep it as it is (Default settings). Click continue to proceed to the next step.

Setup completion

In the next page you will see the status of the project setup. If there is any issue, it should give you the reason and you will be asked to restart the process. Please contact us if you fail to resolve the issue at support@gigalogy.com.

If all above steps are completed successfully, your project setup is done.

Next go to the SETTINGS tab, and you will find the section "Train data". Hit the "Train" button for each (Item, image, rank) to train your data. This is recommended to do once when you first setup your project. After this, it will run automatically every 3 hours (Default setting is 3 hours, can be changed based on requirement).

Below you will find the training history with their status. You can update the rank settings and mapper.

If you want to re-upload your data, go to the DATASET tab again to re-upload. This will not replace your old data, only add new data.

Previous
Credentials
Next
Environment setup
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/00_Setup_and_training/project_setup_from_ui/#project-setup-from-ui
Skip to content
Gigalogy Tutorial
Project setup
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Table of contents
Project setup from UI
Upload data
Mapping your data
Rank Setting
Setup completion
Project setup

Once the project is created, now it is time to setup the project.

In the coming sections, we will guide you through various steps such as "data mapping" and "creating indexes" (found under the Environment Setup section), "integrating data" (explained in the Integration of Catalogue Information and User Behavior Data section), and "training your data" (in the Training Your Data section). These sections will cover you how to perform these actions by directly using our endpoints from the sandbox.

In this section, we will show you how to complete all these steps directly through our platform UI.

Project setup from UI
Upload data

After creating project, go inside the project. At the top, there will be four tabs DETAILS, SETTINGS, INSIGHTS, SETUP. Click and go to the SETUP. Here you will find a box to upload your data file. Currently we accept CSV files only. Select your CSV file and click upload.

Mapping your data

In the next page, you will see a suggested mapping done for your data. Gigalogy personalization engine relies on specific default keys to operate. To integrate your item catalogue with our solution, it's essential to map you data source keys (such as item name, item description, tags, ingredients, category, etc.) with keys of Gigalogy personalization engine. Our personalizer then can understand your data.

You can update the suggested mapping as you find necessary. This can also be modified later. When satisfied, click continue to proceed to the next step

Rank Setting

In the Rank settings step, you can modify and set the settings for the rank training, which will impact the "trending items" recommendation. If you are not sure about this, we highly recommend to keep it as it is (Default settings). Click continue to proceed to the next step.

Setup completion

In the next page you will see the status of the project setup. If there is any issue, it should give you the reason and you will be asked to restart the process. Please contact us if you fail to resolve the issue at support@gigalogy.com.

If all above steps are completed successfully, your project setup is done.

Next go to the SETTINGS tab, and you will find the section "Train data". Hit the "Train" button for each (Item, image, rank) to train your data. This is recommended to do once when you first setup your project. After this, it will run automatically every 3 hours (Default setting is 3 hours, can be changed based on requirement).

Below you will find the training history with their status. You can update the rank settings and mapper.

If you want to re-upload your data, go to the DATASET tab again to re-upload. This will not replace your old data, only add new data.

Previous
Credentials
Next
Environment setup
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/00_Setup_and_training/project_setup_from_ui/#upload-data
Skip to content
Gigalogy Tutorial
Project setup
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Table of contents
Project setup from UI
Upload data
Mapping your data
Rank Setting
Setup completion
Project setup

Once the project is created, now it is time to setup the project.

In the coming sections, we will guide you through various steps such as "data mapping" and "creating indexes" (found under the Environment Setup section), "integrating data" (explained in the Integration of Catalogue Information and User Behavior Data section), and "training your data" (in the Training Your Data section). These sections will cover you how to perform these actions by directly using our endpoints from the sandbox.

In this section, we will show you how to complete all these steps directly through our platform UI.

Project setup from UI
Upload data

After creating project, go inside the project. At the top, there will be four tabs DETAILS, SETTINGS, INSIGHTS, SETUP. Click and go to the SETUP. Here you will find a box to upload your data file. Currently we accept CSV files only. Select your CSV file and click upload.

Mapping your data

In the next page, you will see a suggested mapping done for your data. Gigalogy personalization engine relies on specific default keys to operate. To integrate your item catalogue with our solution, it's essential to map you data source keys (such as item name, item description, tags, ingredients, category, etc.) with keys of Gigalogy personalization engine. Our personalizer then can understand your data.

You can update the suggested mapping as you find necessary. This can also be modified later. When satisfied, click continue to proceed to the next step

Rank Setting

In the Rank settings step, you can modify and set the settings for the rank training, which will impact the "trending items" recommendation. If you are not sure about this, we highly recommend to keep it as it is (Default settings). Click continue to proceed to the next step.

Setup completion

In the next page you will see the status of the project setup. If there is any issue, it should give you the reason and you will be asked to restart the process. Please contact us if you fail to resolve the issue at support@gigalogy.com.

If all above steps are completed successfully, your project setup is done.

Next go to the SETTINGS tab, and you will find the section "Train data". Hit the "Train" button for each (Item, image, rank) to train your data. This is recommended to do once when you first setup your project. After this, it will run automatically every 3 hours (Default setting is 3 hours, can be changed based on requirement).

Below you will find the training history with their status. You can update the rank settings and mapper.

If you want to re-upload your data, go to the DATASET tab again to re-upload. This will not replace your old data, only add new data.

Previous
Credentials
Next
Environment setup
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/00_Setup_and_training/project_setup_from_ui/#mapping-your-data
Skip to content
Gigalogy Tutorial
Project setup
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Table of contents
Project setup from UI
Upload data
Mapping your data
Rank Setting
Setup completion
Project setup

Once the project is created, now it is time to setup the project.

In the coming sections, we will guide you through various steps such as "data mapping" and "creating indexes" (found under the Environment Setup section), "integrating data" (explained in the Integration of Catalogue Information and User Behavior Data section), and "training your data" (in the Training Your Data section). These sections will cover you how to perform these actions by directly using our endpoints from the sandbox.

In this section, we will show you how to complete all these steps directly through our platform UI.

Project setup from UI
Upload data

After creating project, go inside the project. At the top, there will be four tabs DETAILS, SETTINGS, INSIGHTS, SETUP. Click and go to the SETUP. Here you will find a box to upload your data file. Currently we accept CSV files only. Select your CSV file and click upload.

Mapping your data

In the next page, you will see a suggested mapping done for your data. Gigalogy personalization engine relies on specific default keys to operate. To integrate your item catalogue with our solution, it's essential to map you data source keys (such as item name, item description, tags, ingredients, category, etc.) with keys of Gigalogy personalization engine. Our personalizer then can understand your data.

You can update the suggested mapping as you find necessary. This can also be modified later. When satisfied, click continue to proceed to the next step

Rank Setting

In the Rank settings step, you can modify and set the settings for the rank training, which will impact the "trending items" recommendation. If you are not sure about this, we highly recommend to keep it as it is (Default settings). Click continue to proceed to the next step.

Setup completion

In the next page you will see the status of the project setup. If there is any issue, it should give you the reason and you will be asked to restart the process. Please contact us if you fail to resolve the issue at support@gigalogy.com.

If all above steps are completed successfully, your project setup is done.

Next go to the SETTINGS tab, and you will find the section "Train data". Hit the "Train" button for each (Item, image, rank) to train your data. This is recommended to do once when you first setup your project. After this, it will run automatically every 3 hours (Default setting is 3 hours, can be changed based on requirement).

Below you will find the training history with their status. You can update the rank settings and mapper.

If you want to re-upload your data, go to the DATASET tab again to re-upload. This will not replace your old data, only add new data.

Previous
Credentials
Next
Environment setup
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/00_Setup_and_training/project_setup_from_ui/#rank-setting
Skip to content
Gigalogy Tutorial
Project setup
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Table of contents
Project setup from UI
Upload data
Mapping your data
Rank Setting
Setup completion
Project setup

Once the project is created, now it is time to setup the project.

In the coming sections, we will guide you through various steps such as "data mapping" and "creating indexes" (found under the Environment Setup section), "integrating data" (explained in the Integration of Catalogue Information and User Behavior Data section), and "training your data" (in the Training Your Data section). These sections will cover you how to perform these actions by directly using our endpoints from the sandbox.

In this section, we will show you how to complete all these steps directly through our platform UI.

Project setup from UI
Upload data

After creating project, go inside the project. At the top, there will be four tabs DETAILS, SETTINGS, INSIGHTS, SETUP. Click and go to the SETUP. Here you will find a box to upload your data file. Currently we accept CSV files only. Select your CSV file and click upload.

Mapping your data

In the next page, you will see a suggested mapping done for your data. Gigalogy personalization engine relies on specific default keys to operate. To integrate your item catalogue with our solution, it's essential to map you data source keys (such as item name, item description, tags, ingredients, category, etc.) with keys of Gigalogy personalization engine. Our personalizer then can understand your data.

You can update the suggested mapping as you find necessary. This can also be modified later. When satisfied, click continue to proceed to the next step

Rank Setting

In the Rank settings step, you can modify and set the settings for the rank training, which will impact the "trending items" recommendation. If you are not sure about this, we highly recommend to keep it as it is (Default settings). Click continue to proceed to the next step.

Setup completion

In the next page you will see the status of the project setup. If there is any issue, it should give you the reason and you will be asked to restart the process. Please contact us if you fail to resolve the issue at support@gigalogy.com.

If all above steps are completed successfully, your project setup is done.

Next go to the SETTINGS tab, and you will find the section "Train data". Hit the "Train" button for each (Item, image, rank) to train your data. This is recommended to do once when you first setup your project. After this, it will run automatically every 3 hours (Default setting is 3 hours, can be changed based on requirement).

Below you will find the training history with their status. You can update the rank settings and mapper.

If you want to re-upload your data, go to the DATASET tab again to re-upload. This will not replace your old data, only add new data.

Previous
Credentials
Next
Environment setup
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/00_Setup_and_training/project_setup_from_ui/#setup-completion
Skip to content
Gigalogy Tutorial
Project setup
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Table of contents
Project setup from UI
Upload data
Mapping your data
Rank Setting
Setup completion
Project setup

Once the project is created, now it is time to setup the project.

In the coming sections, we will guide you through various steps such as "data mapping" and "creating indexes" (found under the Environment Setup section), "integrating data" (explained in the Integration of Catalogue Information and User Behavior Data section), and "training your data" (in the Training Your Data section). These sections will cover you how to perform these actions by directly using our endpoints from the sandbox.

In this section, we will show you how to complete all these steps directly through our platform UI.

Project setup from UI
Upload data

After creating project, go inside the project. At the top, there will be four tabs DETAILS, SETTINGS, INSIGHTS, SETUP. Click and go to the SETUP. Here you will find a box to upload your data file. Currently we accept CSV files only. Select your CSV file and click upload.

Mapping your data

In the next page, you will see a suggested mapping done for your data. Gigalogy personalization engine relies on specific default keys to operate. To integrate your item catalogue with our solution, it's essential to map you data source keys (such as item name, item description, tags, ingredients, category, etc.) with keys of Gigalogy personalization engine. Our personalizer then can understand your data.

You can update the suggested mapping as you find necessary. This can also be modified later. When satisfied, click continue to proceed to the next step

Rank Setting

In the Rank settings step, you can modify and set the settings for the rank training, which will impact the "trending items" recommendation. If you are not sure about this, we highly recommend to keep it as it is (Default settings). Click continue to proceed to the next step.

Setup completion

In the next page you will see the status of the project setup. If there is any issue, it should give you the reason and you will be asked to restart the process. Please contact us if you fail to resolve the issue at support@gigalogy.com.

If all above steps are completed successfully, your project setup is done.

Next go to the SETTINGS tab, and you will find the section "Train data". Hit the "Train" button for each (Item, image, rank) to train your data. This is recommended to do once when you first setup your project. After this, it will run automatically every 3 hours (Default setting is 3 hours, can be changed based on requirement).

Below you will find the training history with their status. You can update the rank settings and mapper.

If you want to re-upload your data, go to the DATASET tab again to re-upload. This will not replace your old data, only add new data.

Previous
Credentials
Next
Environment setup
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/00_Setup_and_training/02_environment_setup/
Skip to content
Gigalogy Tutorial
Environment setup
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Table of contents
Mapping creation
Item Catalogue Mapping
Example of this item mapper creation
Sample Code
User Behavior mapping
Index creation
Create Index
Delete Index
Reindex
Environment setup

To prepare GAIP for your site, there are 2 main steps

Mapping creation
Index creation

Info

These steps can also be done from our platform (GAIP). Refer here for detail.

For this, we will use API endpoints of GAIP listed in our Sandbox

You can also access our sandbox from the project setting page.

Mapping creation

The personalization engine relies on specific default keys to operate effectively. To integrate your item catalogue with our solution, it's essential to align your website's data source keys (such as item name, item description, tags, ingredients, category, etc.) with keys of personalization engine via mapping them. Our personalizer then can understand your data. This is the core part of the personalization system so the schema should be followed properly to successfully map your data.

Item Catalogue Mapping

To create mapping, use endpoints listed under Catalog Mapping in the sandbox.

GET /v1/mappers to get an existing Mapper.
PUT /v1/mappers to update an existing Mapper.
POST /v1/mappers to create a new mapper.

For set up your project mapping we will use POST /v1/mappers. You can find keys, value types, and description with an example request body in the sandbox You can simply replace the values in the example with your item catalogue keys and hit Execute to finish the mapping of your product catalogue Keys with GAIP keys.

After execution, confirm the server response is success.

Example of this item mapper creation

Here, we will use doozie shop as an example E-commerce site.

For an example item from the shop, this is how the data is structured.

{
  "success": true,
  "result": [
    {
      "item_id": "12345",
      "title": "Eco-Friendly Water Bottle",
      "description": "A durable, BPA-free water bottle designed for everyday use. Made from eco-friendly materials, it keeps your drink cold for up to 24 hours. Perfect for staying hydrated on the go.",
      "headline": "Stay Hydrated with Our Eco-Friendly Water Bottle",
      "availability": true,
      "affiliate_rate": 4,
      "price": 2360,
      "currency": "JPY",
      "shop_id": "hworks",
      "shop_name": "スマートビズ-ワイシャツ専門店-",
      "review_count": 2836,
      "review_average": 4.26,
      "genre_id": "206363",
      "brand": null,
      "shop_url": "https://hb.afl.rakuten.co.jp/hgc/g00rgm95.h3cpt446.g00rgm95.h3cpu696/?pc=https%3A%2F%2Fwww.rakuten.co.jp%2Fhworks%2F&m=http%3A%2F%2Fm.rakuten.co.jp%2Fhworks%2F",
      "item_url": "https://hb.afl.rakuten.co.jp/hgc/g00rgm95.h3cpt446.g00rgm95.h3cpu696/?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fhworks%2Fshirt-b0080%2F&m=http%3A%2F%2Fm.rakuten.co.jp%2Fhworks%2Fi%2F10000926%2F",
      "image_urls": [
        "https://thumbnail.image.rakuten.co.jp/@0_mall/hworks/cabinet/001/014/shirt-b0080.jpg",
        "https://thumbnail.image.rakuten.co.jp/@0_mall/hworks/cabinet/001/014/b0080-lineup.jpg",
        "https://thumbnail.image.rakuten.co.jp/@0_mall/hworks/cabinet/banner/coupon202308-shdz_sq.jpg"
      ],
      "tag_ids": [
        1000903,
        1008869,
        1039853,
        1013746
      ],
      "tags": [],
      "shipping_overseas": "",
      "condition": 1,
      "genre_name": null,
      "parent_genre_categories": null,
      "shop_review_count": null,
      "shop_review_average": null,
      "tax_included": true,
      "point_multiplier": 1,
      "best_seller": false,
      "sale_start_time": "",
      "sale_end_time": "",
      "platform": "rakuten"
    }
  ]
}


This shows the keys that doozie shop has for its products. Now we can create a mapping with GAIP keys, and use the POST /v1/mapper endpoint of GAIP. In this endpoint, we will pass the keys of above data source.

Here is an example of a mapper that we built for doozie shop, based on the keys above:

{
  "key_map": {
    "item_id": "item_id",
    "title": "title",
    "second_title": "headline",
    "third_title": "shop_name",
    "fourth_title": "genre_name",
    "availability": "availability",
    "description": "description",
    "image_url": "image_urls",
    "image_url_type": "LIST_STR",
    "item_url": "item_url",
    "price": "price",
    "categories": [
      {
        "name": "genre_id",
        "separator": ""
      }
    ],
    "custom":[],
    "flag": [
      "condition"
    ]
  }
}

Sample Code

You can find sample code for this implementation here

Once the mapper is created, you can use GET /v1/mappers endpoint to see the mapping. You can update any of mapped keys with PUT /v1/mapper endpoint and check the mapper you build from GET /v1/mapper endpoint.

User Behavior mapping

Similar to the item mapping key, there are some default keys for user behavior data.

Note

This step is required If you want to save historical user behavior data through CSV files. If you use our data collection endpoints to collect data from now on, this is not required.

You can find the Endpoints for user mapping under "Historical User Data Collection" section in the Sandbox

To implement this, please follow similar steps as above.

However, in this case please note that there are four sets of endpoints for Browsing history, purchase history, rating history, user detail. You have to create mapper for each if you want to import the data.

Index creation

In this step, you need to create indices. We need multiple indices to run recommender solution successfully. These indices will create the necessary schemas to hold your data.

There are 3 endpoints here

POST /v1/index/create --> Create indices to hold your data

DELETE /v1/index/delete --> Delete indices

POST /v1/reindex --> Creates index with new mappings and settings and create alias for new index

Create Index

Request endpoint

POST /v1/index/create

Simply use your project key and API and click execute to create the indices for your project. Note that this will throw an error if the mapping in the previous step is not done correctly.

After the successful execution all the necessary index will be created and item index will be created in the background. You can check the status of item index creation with a task id from GET /v1/tasks/{task_id} API at the bottom of the page.

Please confirm the task was success.

Delete Index

You can delete an existing index with this endpoint.

Request endpoint

DELETE /v1/index/delete

Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs.

If you Delete any index, please ensure to create the index again, unless you will get error when trying to input data/item catalogue or run training.

Reindex

In Elastic search, reindexing is the process of copying data from one index to another, either within the same cluster or to a different cluster. This can be useful in a variety of situations, such as:

Updating the mapping of an index: If you need to make changes to the mapping of an index, you can create a new index with the updated mapping and then reindex the data from the old index to the new one.

Moving data from one index to another: If you need to move data from one index to another, you can reindex the data from the source index to the destination index.

Updating the data with new data: If you have updated data that you want to add to an index, you can reindex the data with the updated data.

Changing the shard count of an index: If you need to change the number of shards that an index is using, you can reindex the data to a new index with the desired number of shards.

We can use Reindex API to copy data from index to another index.

Request Endpoint:

POST /v1/reindex


Here is an example how to pass mappings and settings in request body:

{
  "index_type": "items",
  "mappings": {
    "settings": {
      "analysis": {
        "char_filter": {
          "normalize": {
            "type": "icu_normalizer",
            "name": "nfkc",
            "mode": "compose"
          }
        },
        "tokenizer": {
          "ja_kuromoji_tokenizer": {
            "mode": "search",
            "type": "kuromoji_tokenizer",
            "discard_compound_token": "true",
            "user_dictionary_rules": []
          },
          "ja_ngram_tokenizer": {
            "type": "ngram",
            "min_gram": 2,
            "max_gram": 3,
            "token_chars": [
              "letter",
              "digit"
            ]
          }
        },
        "filter": {
          "ja_index_synonym": {
            "type": "synonym",
            "lenient": "false",
            "synonyms": []
          }
        },
        "analyzer": {
          "ja_kuromoji_index_analyzer": {
            "type": "custom",
            "char_filter": [
              "normalize"
            ],
            "tokenizer": "ja_kuromoji_tokenizer",
            "filter": [
              "kuromoji_baseform",
              "kuromoji_part_of_speech",
              "ja_index_synonym",
              "cjk_width",
              "ja_stop",
              "kuromoji_stemmer",
              "lowercase"
            ]
          },
          "ja_kuromoji_search_analyzer": {
            "type": "custom",
            "char_filter": [
              "normalize"
            ],
            "tokenizer": "ja_kuromoji_tokenizer",
            "filter": [
              "kuromoji_baseform",
              "kuromoji_part_of_speech",
              "cjk_width",
              "ja_stop",
              "kuromoji_stemmer",
              "lowercase"
            ]
          },
          "ja_ngram_index_analyzer": {
            "type": "custom",
            "char_filter": [
              "normalize"
            ],
            "tokenizer": "ja_ngram_tokenizer",
            "filter": [
              "lowercase"
            ]
          },
          "ja_ngram_search_analyzer": {
            "type": "custom",
            "char_filter": [
              "normalize"
            ],
            "tokenizer": "ja_ngram_tokenizer",
            "filter": [
              "lowercase"
            ]
          }
        }
      }
    },
    "mappings": {
      "properties": {
        "item": {
          "properties": {
            "{title}": {
              "type": "text",
              "search_analyzer": "ja_kuromoji_search_analyzer",
              "analyzer": "ja_kuromoji_index_analyzer",
              "fields": {
                "ngram": {
                  "type": "text",
                  "search_analyzer": "ja_ngram_search_analyzer",
                  "analyzer": "ja_ngram_index_analyzer"
                }
              }
            },
            "{second_title}": {
              "type": "text",
              "search_analyzer": "ja_kuromoji_search_analyzer",
              "analyzer": "ja_kuromoji_index_analyzer",
              "fields": {
                "ngram": {
                  "type": "text",
                  "search_analyzer": "ja_ngram_search_analyzer",
                  "analyzer": "ja_ngram_index_analyzer"
                }
              }
            },
            "{third_title}": {
              "type": "text",
              "search_analyzer": "ja_kuromoji_search_analyzer",
              "analyzer": "ja_kuromoji_index_analyzer",
              "fields": {
                "ngram": {
                  "type": "text",
                  "search_analyzer": "ja_ngram_search_analyzer",
                  "analyzer": "ja_ngram_index_analyzer"
                }
              }
            },
            "{description}": {
              "type": "text",
              "search_analyzer": "ja_kuromoji_search_analyzer",
              "analyzer": "ja_kuromoji_index_analyzer",
              "fields": {
                "ngram": {
                  "type": "text",
                  "search_analyzer": "ja_ngram_search_analyzer",
                  "analyzer": "ja_ngram_index_analyzer"
                }
              }
            },
            "{price}": {
              "type": "float"
            },
            "{availability}": {
              "type": "boolean"
            }
          }
        }
      }
    }
  }
}

Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs. When you define the mappings object, you should use the same keys as in the item mapper that you have built with POST /v1/mapper API.

You might not need analyzers or tokenizers for all indices. You can keep the settings field empty if it is not required. Here is an example,

{
  "index_type": "search",
  "mappings": {
    "settings": {},
    "mappings": {
      "properties": {
        "date": {
          "type": "date"
        }
      }
    }
  }
}

Previous
Project setup
Next
Integration of Catalogue information and user behavior data
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/00_Setup_and_training/02_environment_setup/#mapping-creation
Skip to content
Gigalogy Tutorial
Environment setup
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Table of contents
Mapping creation
Item Catalogue Mapping
Example of this item mapper creation
Sample Code
User Behavior mapping
Index creation
Create Index
Delete Index
Reindex
Environment setup

To prepare GAIP for your site, there are 2 main steps

Mapping creation
Index creation

Info

These steps can also be done from our platform (GAIP). Refer here for detail.

For this, we will use API endpoints of GAIP listed in our Sandbox

You can also access our sandbox from the project setting page.

Mapping creation

The personalization engine relies on specific default keys to operate effectively. To integrate your item catalogue with our solution, it's essential to align your website's data source keys (such as item name, item description, tags, ingredients, category, etc.) with keys of personalization engine via mapping them. Our personalizer then can understand your data. This is the core part of the personalization system so the schema should be followed properly to successfully map your data.

Item Catalogue Mapping

To create mapping, use endpoints listed under Catalog Mapping in the sandbox.

GET /v1/mappers to get an existing Mapper.
PUT /v1/mappers to update an existing Mapper.
POST /v1/mappers to create a new mapper.

For set up your project mapping we will use POST /v1/mappers. You can find keys, value types, and description with an example request body in the sandbox You can simply replace the values in the example with your item catalogue keys and hit Execute to finish the mapping of your product catalogue Keys with GAIP keys.

After execution, confirm the server response is success.

Example of this item mapper creation

Here, we will use doozie shop as an example E-commerce site.

For an example item from the shop, this is how the data is structured.

{
  "success": true,
  "result": [
    {
      "item_id": "12345",
      "title": "Eco-Friendly Water Bottle",
      "description": "A durable, BPA-free water bottle designed for everyday use. Made from eco-friendly materials, it keeps your drink cold for up to 24 hours. Perfect for staying hydrated on the go.",
      "headline": "Stay Hydrated with Our Eco-Friendly Water Bottle",
      "availability": true,
      "affiliate_rate": 4,
      "price": 2360,
      "currency": "JPY",
      "shop_id": "hworks",
      "shop_name": "スマートビズ-ワイシャツ専門店-",
      "review_count": 2836,
      "review_average": 4.26,
      "genre_id": "206363",
      "brand": null,
      "shop_url": "https://hb.afl.rakuten.co.jp/hgc/g00rgm95.h3cpt446.g00rgm95.h3cpu696/?pc=https%3A%2F%2Fwww.rakuten.co.jp%2Fhworks%2F&m=http%3A%2F%2Fm.rakuten.co.jp%2Fhworks%2F",
      "item_url": "https://hb.afl.rakuten.co.jp/hgc/g00rgm95.h3cpt446.g00rgm95.h3cpu696/?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fhworks%2Fshirt-b0080%2F&m=http%3A%2F%2Fm.rakuten.co.jp%2Fhworks%2Fi%2F10000926%2F",
      "image_urls": [
        "https://thumbnail.image.rakuten.co.jp/@0_mall/hworks/cabinet/001/014/shirt-b0080.jpg",
        "https://thumbnail.image.rakuten.co.jp/@0_mall/hworks/cabinet/001/014/b0080-lineup.jpg",
        "https://thumbnail.image.rakuten.co.jp/@0_mall/hworks/cabinet/banner/coupon202308-shdz_sq.jpg"
      ],
      "tag_ids": [
        1000903,
        1008869,
        1039853,
        1013746
      ],
      "tags": [],
      "shipping_overseas": "",
      "condition": 1,
      "genre_name": null,
      "parent_genre_categories": null,
      "shop_review_count": null,
      "shop_review_average": null,
      "tax_included": true,
      "point_multiplier": 1,
      "best_seller": false,
      "sale_start_time": "",
      "sale_end_time": "",
      "platform": "rakuten"
    }
  ]
}


This shows the keys that doozie shop has for its products. Now we can create a mapping with GAIP keys, and use the POST /v1/mapper endpoint of GAIP. In this endpoint, we will pass the keys of above data source.

Here is an example of a mapper that we built for doozie shop, based on the keys above:

{
  "key_map": {
    "item_id": "item_id",
    "title": "title",
    "second_title": "headline",
    "third_title": "shop_name",
    "fourth_title": "genre_name",
    "availability": "availability",
    "description": "description",
    "image_url": "image_urls",
    "image_url_type": "LIST_STR",
    "item_url": "item_url",
    "price": "price",
    "categories": [
      {
        "name": "genre_id",
        "separator": ""
      }
    ],
    "custom":[],
    "flag": [
      "condition"
    ]
  }
}

Sample Code

You can find sample code for this implementation here

Once the mapper is created, you can use GET /v1/mappers endpoint to see the mapping. You can update any of mapped keys with PUT /v1/mapper endpoint and check the mapper you build from GET /v1/mapper endpoint.

User Behavior mapping

Similar to the item mapping key, there are some default keys for user behavior data.

Note

This step is required If you want to save historical user behavior data through CSV files. If you use our data collection endpoints to collect data from now on, this is not required.

You can find the Endpoints for user mapping under "Historical User Data Collection" section in the Sandbox

To implement this, please follow similar steps as above.

However, in this case please note that there are four sets of endpoints for Browsing history, purchase history, rating history, user detail. You have to create mapper for each if you want to import the data.

Index creation

In this step, you need to create indices. We need multiple indices to run recommender solution successfully. These indices will create the necessary schemas to hold your data.

There are 3 endpoints here

POST /v1/index/create --> Create indices to hold your data

DELETE /v1/index/delete --> Delete indices

POST /v1/reindex --> Creates index with new mappings and settings and create alias for new index

Create Index

Request endpoint

POST /v1/index/create

Simply use your project key and API and click execute to create the indices for your project. Note that this will throw an error if the mapping in the previous step is not done correctly.

After the successful execution all the necessary index will be created and item index will be created in the background. You can check the status of item index creation with a task id from GET /v1/tasks/{task_id} API at the bottom of the page.

Please confirm the task was success.

Delete Index

You can delete an existing index with this endpoint.

Request endpoint

DELETE /v1/index/delete

Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs.

If you Delete any index, please ensure to create the index again, unless you will get error when trying to input data/item catalogue or run training.

Reindex

In Elastic search, reindexing is the process of copying data from one index to another, either within the same cluster or to a different cluster. This can be useful in a variety of situations, such as:

Updating the mapping of an index: If you need to make changes to the mapping of an index, you can create a new index with the updated mapping and then reindex the data from the old index to the new one.

Moving data from one index to another: If you need to move data from one index to another, you can reindex the data from the source index to the destination index.

Updating the data with new data: If you have updated data that you want to add to an index, you can reindex the data with the updated data.

Changing the shard count of an index: If you need to change the number of shards that an index is using, you can reindex the data to a new index with the desired number of shards.

We can use Reindex API to copy data from index to another index.

Request Endpoint:

POST /v1/reindex


Here is an example how to pass mappings and settings in request body:

{
  "index_type": "items",
  "mappings": {
    "settings": {
      "analysis": {
        "char_filter": {
          "normalize": {
            "type": "icu_normalizer",
            "name": "nfkc",
            "mode": "compose"
          }
        },
        "tokenizer": {
          "ja_kuromoji_tokenizer": {
            "mode": "search",
            "type": "kuromoji_tokenizer",
            "discard_compound_token": "true",
            "user_dictionary_rules": []
          },
          "ja_ngram_tokenizer": {
            "type": "ngram",
            "min_gram": 2,
            "max_gram": 3,
            "token_chars": [
              "letter",
              "digit"
            ]
          }
        },
        "filter": {
          "ja_index_synonym": {
            "type": "synonym",
            "lenient": "false",
            "synonyms": []
          }
        },
        "analyzer": {
          "ja_kuromoji_index_analyzer": {
            "type": "custom",
            "char_filter": [
              "normalize"
            ],
            "tokenizer": "ja_kuromoji_tokenizer",
            "filter": [
              "kuromoji_baseform",
              "kuromoji_part_of_speech",
              "ja_index_synonym",
              "cjk_width",
              "ja_stop",
              "kuromoji_stemmer",
              "lowercase"
            ]
          },
          "ja_kuromoji_search_analyzer": {
            "type": "custom",
            "char_filter": [
              "normalize"
            ],
            "tokenizer": "ja_kuromoji_tokenizer",
            "filter": [
              "kuromoji_baseform",
              "kuromoji_part_of_speech",
              "cjk_width",
              "ja_stop",
              "kuromoji_stemmer",
              "lowercase"
            ]
          },
          "ja_ngram_index_analyzer": {
            "type": "custom",
            "char_filter": [
              "normalize"
            ],
            "tokenizer": "ja_ngram_tokenizer",
            "filter": [
              "lowercase"
            ]
          },
          "ja_ngram_search_analyzer": {
            "type": "custom",
            "char_filter": [
              "normalize"
            ],
            "tokenizer": "ja_ngram_tokenizer",
            "filter": [
              "lowercase"
            ]
          }
        }
      }
    },
    "mappings": {
      "properties": {
        "item": {
          "properties": {
            "{title}": {
              "type": "text",
              "search_analyzer": "ja_kuromoji_search_analyzer",
              "analyzer": "ja_kuromoji_index_analyzer",
              "fields": {
                "ngram": {
                  "type": "text",
                  "search_analyzer": "ja_ngram_search_analyzer",
                  "analyzer": "ja_ngram_index_analyzer"
                }
              }
            },
            "{second_title}": {
              "type": "text",
              "search_analyzer": "ja_kuromoji_search_analyzer",
              "analyzer": "ja_kuromoji_index_analyzer",
              "fields": {
                "ngram": {
                  "type": "text",
                  "search_analyzer": "ja_ngram_search_analyzer",
                  "analyzer": "ja_ngram_index_analyzer"
                }
              }
            },
            "{third_title}": {
              "type": "text",
              "search_analyzer": "ja_kuromoji_search_analyzer",
              "analyzer": "ja_kuromoji_index_analyzer",
              "fields": {
                "ngram": {
                  "type": "text",
                  "search_analyzer": "ja_ngram_search_analyzer",
                  "analyzer": "ja_ngram_index_analyzer"
                }
              }
            },
            "{description}": {
              "type": "text",
              "search_analyzer": "ja_kuromoji_search_analyzer",
              "analyzer": "ja_kuromoji_index_analyzer",
              "fields": {
                "ngram": {
                  "type": "text",
                  "search_analyzer": "ja_ngram_search_analyzer",
                  "analyzer": "ja_ngram_index_analyzer"
                }
              }
            },
            "{price}": {
              "type": "float"
            },
            "{availability}": {
              "type": "boolean"
            }
          }
        }
      }
    }
  }
}

Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs. When you define the mappings object, you should use the same keys as in the item mapper that you have built with POST /v1/mapper API.

You might not need analyzers or tokenizers for all indices. You can keep the settings field empty if it is not required. Here is an example,

{
  "index_type": "search",
  "mappings": {
    "settings": {},
    "mappings": {
      "properties": {
        "date": {
          "type": "date"
        }
      }
    }
  }
}

Previous
Project setup
Next
Integration of Catalogue information and user behavior data
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/00_Setup_and_training/02_environment_setup/#item-catalogue-mapping
Skip to content
Gigalogy Tutorial
Environment setup
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Table of contents
Mapping creation
Item Catalogue Mapping
Example of this item mapper creation
Sample Code
User Behavior mapping
Index creation
Create Index
Delete Index
Reindex
Environment setup

To prepare GAIP for your site, there are 2 main steps

Mapping creation
Index creation

Info

These steps can also be done from our platform (GAIP). Refer here for detail.

For this, we will use API endpoints of GAIP listed in our Sandbox

You can also access our sandbox from the project setting page.

Mapping creation

The personalization engine relies on specific default keys to operate effectively. To integrate your item catalogue with our solution, it's essential to align your website's data source keys (such as item name, item description, tags, ingredients, category, etc.) with keys of personalization engine via mapping them. Our personalizer then can understand your data. This is the core part of the personalization system so the schema should be followed properly to successfully map your data.

Item Catalogue Mapping

To create mapping, use endpoints listed under Catalog Mapping in the sandbox.

GET /v1/mappers to get an existing Mapper.
PUT /v1/mappers to update an existing Mapper.
POST /v1/mappers to create a new mapper.

For set up your project mapping we will use POST /v1/mappers. You can find keys, value types, and description with an example request body in the sandbox You can simply replace the values in the example with your item catalogue keys and hit Execute to finish the mapping of your product catalogue Keys with GAIP keys.

After execution, confirm the server response is success.

Example of this item mapper creation

Here, we will use doozie shop as an example E-commerce site.

For an example item from the shop, this is how the data is structured.

{
  "success": true,
  "result": [
    {
      "item_id": "12345",
      "title": "Eco-Friendly Water Bottle",
      "description": "A durable, BPA-free water bottle designed for everyday use. Made from eco-friendly materials, it keeps your drink cold for up to 24 hours. Perfect for staying hydrated on the go.",
      "headline": "Stay Hydrated with Our Eco-Friendly Water Bottle",
      "availability": true,
      "affiliate_rate": 4,
      "price": 2360,
      "currency": "JPY",
      "shop_id": "hworks",
      "shop_name": "スマートビズ-ワイシャツ専門店-",
      "review_count": 2836,
      "review_average": 4.26,
      "genre_id": "206363",
      "brand": null,
      "shop_url": "https://hb.afl.rakuten.co.jp/hgc/g00rgm95.h3cpt446.g00rgm95.h3cpu696/?pc=https%3A%2F%2Fwww.rakuten.co.jp%2Fhworks%2F&m=http%3A%2F%2Fm.rakuten.co.jp%2Fhworks%2F",
      "item_url": "https://hb.afl.rakuten.co.jp/hgc/g00rgm95.h3cpt446.g00rgm95.h3cpu696/?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fhworks%2Fshirt-b0080%2F&m=http%3A%2F%2Fm.rakuten.co.jp%2Fhworks%2Fi%2F10000926%2F",
      "image_urls": [
        "https://thumbnail.image.rakuten.co.jp/@0_mall/hworks/cabinet/001/014/shirt-b0080.jpg",
        "https://thumbnail.image.rakuten.co.jp/@0_mall/hworks/cabinet/001/014/b0080-lineup.jpg",
        "https://thumbnail.image.rakuten.co.jp/@0_mall/hworks/cabinet/banner/coupon202308-shdz_sq.jpg"
      ],
      "tag_ids": [
        1000903,
        1008869,
        1039853,
        1013746
      ],
      "tags": [],
      "shipping_overseas": "",
      "condition": 1,
      "genre_name": null,
      "parent_genre_categories": null,
      "shop_review_count": null,
      "shop_review_average": null,
      "tax_included": true,
      "point_multiplier": 1,
      "best_seller": false,
      "sale_start_time": "",
      "sale_end_time": "",
      "platform": "rakuten"
    }
  ]
}


This shows the keys that doozie shop has for its products. Now we can create a mapping with GAIP keys, and use the POST /v1/mapper endpoint of GAIP. In this endpoint, we will pass the keys of above data source.

Here is an example of a mapper that we built for doozie shop, based on the keys above:

{
  "key_map": {
    "item_id": "item_id",
    "title": "title",
    "second_title": "headline",
    "third_title": "shop_name",
    "fourth_title": "genre_name",
    "availability": "availability",
    "description": "description",
    "image_url": "image_urls",
    "image_url_type": "LIST_STR",
    "item_url": "item_url",
    "price": "price",
    "categories": [
      {
        "name": "genre_id",
        "separator": ""
      }
    ],
    "custom":[],
    "flag": [
      "condition"
    ]
  }
}

Sample Code

You can find sample code for this implementation here

Once the mapper is created, you can use GET /v1/mappers endpoint to see the mapping. You can update any of mapped keys with PUT /v1/mapper endpoint and check the mapper you build from GET /v1/mapper endpoint.

User Behavior mapping

Similar to the item mapping key, there are some default keys for user behavior data.

Note

This step is required If you want to save historical user behavior data through CSV files. If you use our data collection endpoints to collect data from now on, this is not required.

You can find the Endpoints for user mapping under "Historical User Data Collection" section in the Sandbox

To implement this, please follow similar steps as above.

However, in this case please note that there are four sets of endpoints for Browsing history, purchase history, rating history, user detail. You have to create mapper for each if you want to import the data.

Index creation

In this step, you need to create indices. We need multiple indices to run recommender solution successfully. These indices will create the necessary schemas to hold your data.

There are 3 endpoints here

POST /v1/index/create --> Create indices to hold your data

DELETE /v1/index/delete --> Delete indices

POST /v1/reindex --> Creates index with new mappings and settings and create alias for new index

Create Index

Request endpoint

POST /v1/index/create

Simply use your project key and API and click execute to create the indices for your project. Note that this will throw an error if the mapping in the previous step is not done correctly.

After the successful execution all the necessary index will be created and item index will be created in the background. You can check the status of item index creation with a task id from GET /v1/tasks/{task_id} API at the bottom of the page.

Please confirm the task was success.

Delete Index

You can delete an existing index with this endpoint.

Request endpoint

DELETE /v1/index/delete

Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs.

If you Delete any index, please ensure to create the index again, unless you will get error when trying to input data/item catalogue or run training.

Reindex

In Elastic search, reindexing is the process of copying data from one index to another, either within the same cluster or to a different cluster. This can be useful in a variety of situations, such as:

Updating the mapping of an index: If you need to make changes to the mapping of an index, you can create a new index with the updated mapping and then reindex the data from the old index to the new one.

Moving data from one index to another: If you need to move data from one index to another, you can reindex the data from the source index to the destination index.

Updating the data with new data: If you have updated data that you want to add to an index, you can reindex the data with the updated data.

Changing the shard count of an index: If you need to change the number of shards that an index is using, you can reindex the data to a new index with the desired number of shards.

We can use Reindex API to copy data from index to another index.

Request Endpoint:

POST /v1/reindex


Here is an example how to pass mappings and settings in request body:

{
  "index_type": "items",
  "mappings": {
    "settings": {
      "analysis": {
        "char_filter": {
          "normalize": {
            "type": "icu_normalizer",
            "name": "nfkc",
            "mode": "compose"
          }
        },
        "tokenizer": {
          "ja_kuromoji_tokenizer": {
            "mode": "search",
            "type": "kuromoji_tokenizer",
            "discard_compound_token": "true",
            "user_dictionary_rules": []
          },
          "ja_ngram_tokenizer": {
            "type": "ngram",
            "min_gram": 2,
            "max_gram": 3,
            "token_chars": [
              "letter",
              "digit"
            ]
          }
        },
        "filter": {
          "ja_index_synonym": {
            "type": "synonym",
            "lenient": "false",
            "synonyms": []
          }
        },
        "analyzer": {
          "ja_kuromoji_index_analyzer": {
            "type": "custom",
            "char_filter": [
              "normalize"
            ],
            "tokenizer": "ja_kuromoji_tokenizer",
            "filter": [
              "kuromoji_baseform",
              "kuromoji_part_of_speech",
              "ja_index_synonym",
              "cjk_width",
              "ja_stop",
              "kuromoji_stemmer",
              "lowercase"
            ]
          },
          "ja_kuromoji_search_analyzer": {
            "type": "custom",
            "char_filter": [
              "normalize"
            ],
            "tokenizer": "ja_kuromoji_tokenizer",
            "filter": [
              "kuromoji_baseform",
              "kuromoji_part_of_speech",
              "cjk_width",
              "ja_stop",
              "kuromoji_stemmer",
              "lowercase"
            ]
          },
          "ja_ngram_index_analyzer": {
            "type": "custom",
            "char_filter": [
              "normalize"
            ],
            "tokenizer": "ja_ngram_tokenizer",
            "filter": [
              "lowercase"
            ]
          },
          "ja_ngram_search_analyzer": {
            "type": "custom",
            "char_filter": [
              "normalize"
            ],
            "tokenizer": "ja_ngram_tokenizer",
            "filter": [
              "lowercase"
            ]
          }
        }
      }
    },
    "mappings": {
      "properties": {
        "item": {
          "properties": {
            "{title}": {
              "type": "text",
              "search_analyzer": "ja_kuromoji_search_analyzer",
              "analyzer": "ja_kuromoji_index_analyzer",
              "fields": {
                "ngram": {
                  "type": "text",
                  "search_analyzer": "ja_ngram_search_analyzer",
                  "analyzer": "ja_ngram_index_analyzer"
                }
              }
            },
            "{second_title}": {
              "type": "text",
              "search_analyzer": "ja_kuromoji_search_analyzer",
              "analyzer": "ja_kuromoji_index_analyzer",
              "fields": {
                "ngram": {
                  "type": "text",
                  "search_analyzer": "ja_ngram_search_analyzer",
                  "analyzer": "ja_ngram_index_analyzer"
                }
              }
            },
            "{third_title}": {
              "type": "text",
              "search_analyzer": "ja_kuromoji_search_analyzer",
              "analyzer": "ja_kuromoji_index_analyzer",
              "fields": {
                "ngram": {
                  "type": "text",
                  "search_analyzer": "ja_ngram_search_analyzer",
                  "analyzer": "ja_ngram_index_analyzer"
                }
              }
            },
            "{description}": {
              "type": "text",
              "search_analyzer": "ja_kuromoji_search_analyzer",
              "analyzer": "ja_kuromoji_index_analyzer",
              "fields": {
                "ngram": {
                  "type": "text",
                  "search_analyzer": "ja_ngram_search_analyzer",
                  "analyzer": "ja_ngram_index_analyzer"
                }
              }
            },
            "{price}": {
              "type": "float"
            },
            "{availability}": {
              "type": "boolean"
            }
          }
        }
      }
    }
  }
}

Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs. When you define the mappings object, you should use the same keys as in the item mapper that you have built with POST /v1/mapper API.

You might not need analyzers or tokenizers for all indices. You can keep the settings field empty if it is not required. Here is an example,

{
  "index_type": "search",
  "mappings": {
    "settings": {},
    "mappings": {
      "properties": {
        "date": {
          "type": "date"
        }
      }
    }
  }
}

Previous
Project setup
Next
Integration of Catalogue information and user behavior data
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/00_Setup_and_training/02_environment_setup/#example-of-this-item-mapper-creation
Skip to content
Gigalogy Tutorial
Environment setup
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Table of contents
Mapping creation
Item Catalogue Mapping
Example of this item mapper creation
Sample Code
User Behavior mapping
Index creation
Create Index
Delete Index
Reindex
Environment setup

To prepare GAIP for your site, there are 2 main steps

Mapping creation
Index creation

Info

These steps can also be done from our platform (GAIP). Refer here for detail.

For this, we will use API endpoints of GAIP listed in our Sandbox

You can also access our sandbox from the project setting page.

Mapping creation

The personalization engine relies on specific default keys to operate effectively. To integrate your item catalogue with our solution, it's essential to align your website's data source keys (such as item name, item description, tags, ingredients, category, etc.) with keys of personalization engine via mapping them. Our personalizer then can understand your data. This is the core part of the personalization system so the schema should be followed properly to successfully map your data.

Item Catalogue Mapping

To create mapping, use endpoints listed under Catalog Mapping in the sandbox.

GET /v1/mappers to get an existing Mapper.
PUT /v1/mappers to update an existing Mapper.
POST /v1/mappers to create a new mapper.

For set up your project mapping we will use POST /v1/mappers. You can find keys, value types, and description with an example request body in the sandbox You can simply replace the values in the example with your item catalogue keys and hit Execute to finish the mapping of your product catalogue Keys with GAIP keys.

After execution, confirm the server response is success.

Example of this item mapper creation

Here, we will use doozie shop as an example E-commerce site.

For an example item from the shop, this is how the data is structured.

{
  "success": true,
  "result": [
    {
      "item_id": "12345",
      "title": "Eco-Friendly Water Bottle",
      "description": "A durable, BPA-free water bottle designed for everyday use. Made from eco-friendly materials, it keeps your drink cold for up to 24 hours. Perfect for staying hydrated on the go.",
      "headline": "Stay Hydrated with Our Eco-Friendly Water Bottle",
      "availability": true,
      "affiliate_rate": 4,
      "price": 2360,
      "currency": "JPY",
      "shop_id": "hworks",
      "shop_name": "スマートビズ-ワイシャツ専門店-",
      "review_count": 2836,
      "review_average": 4.26,
      "genre_id": "206363",
      "brand": null,
      "shop_url": "https://hb.afl.rakuten.co.jp/hgc/g00rgm95.h3cpt446.g00rgm95.h3cpu696/?pc=https%3A%2F%2Fwww.rakuten.co.jp%2Fhworks%2F&m=http%3A%2F%2Fm.rakuten.co.jp%2Fhworks%2F",
      "item_url": "https://hb.afl.rakuten.co.jp/hgc/g00rgm95.h3cpt446.g00rgm95.h3cpu696/?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fhworks%2Fshirt-b0080%2F&m=http%3A%2F%2Fm.rakuten.co.jp%2Fhworks%2Fi%2F10000926%2F",
      "image_urls": [
        "https://thumbnail.image.rakuten.co.jp/@0_mall/hworks/cabinet/001/014/shirt-b0080.jpg",
        "https://thumbnail.image.rakuten.co.jp/@0_mall/hworks/cabinet/001/014/b0080-lineup.jpg",
        "https://thumbnail.image.rakuten.co.jp/@0_mall/hworks/cabinet/banner/coupon202308-shdz_sq.jpg"
      ],
      "tag_ids": [
        1000903,
        1008869,
        1039853,
        1013746
      ],
      "tags": [],
      "shipping_overseas": "",
      "condition": 1,
      "genre_name": null,
      "parent_genre_categories": null,
      "shop_review_count": null,
      "shop_review_average": null,
      "tax_included": true,
      "point_multiplier": 1,
      "best_seller": false,
      "sale_start_time": "",
      "sale_end_time": "",
      "platform": "rakuten"
    }
  ]
}


This shows the keys that doozie shop has for its products. Now we can create a mapping with GAIP keys, and use the POST /v1/mapper endpoint of GAIP. In this endpoint, we will pass the keys of above data source.

Here is an example of a mapper that we built for doozie shop, based on the keys above:

{
  "key_map": {
    "item_id": "item_id",
    "title": "title",
    "second_title": "headline",
    "third_title": "shop_name",
    "fourth_title": "genre_name",
    "availability": "availability",
    "description": "description",
    "image_url": "image_urls",
    "image_url_type": "LIST_STR",
    "item_url": "item_url",
    "price": "price",
    "categories": [
      {
        "name": "genre_id",
        "separator": ""
      }
    ],
    "custom":[],
    "flag": [
      "condition"
    ]
  }
}

Sample Code

You can find sample code for this implementation here

Once the mapper is created, you can use GET /v1/mappers endpoint to see the mapping. You can update any of mapped keys with PUT /v1/mapper endpoint and check the mapper you build from GET /v1/mapper endpoint.

User Behavior mapping

Similar to the item mapping key, there are some default keys for user behavior data.

Note

This step is required If you want to save historical user behavior data through CSV files. If you use our data collection endpoints to collect data from now on, this is not required.

You can find the Endpoints for user mapping under "Historical User Data Collection" section in the Sandbox

To implement this, please follow similar steps as above.

However, in this case please note that there are four sets of endpoints for Browsing history, purchase history, rating history, user detail. You have to create mapper for each if you want to import the data.

Index creation

In this step, you need to create indices. We need multiple indices to run recommender solution successfully. These indices will create the necessary schemas to hold your data.

There are 3 endpoints here

POST /v1/index/create --> Create indices to hold your data

DELETE /v1/index/delete --> Delete indices

POST /v1/reindex --> Creates index with new mappings and settings and create alias for new index

Create Index

Request endpoint

POST /v1/index/create

Simply use your project key and API and click execute to create the indices for your project. Note that this will throw an error if the mapping in the previous step is not done correctly.

After the successful execution all the necessary index will be created and item index will be created in the background. You can check the status of item index creation with a task id from GET /v1/tasks/{task_id} API at the bottom of the page.

Please confirm the task was success.

Delete Index

You can delete an existing index with this endpoint.

Request endpoint

DELETE /v1/index/delete

Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs.

If you Delete any index, please ensure to create the index again, unless you will get error when trying to input data/item catalogue or run training.

Reindex

In Elastic search, reindexing is the process of copying data from one index to another, either within the same cluster or to a different cluster. This can be useful in a variety of situations, such as:

Updating the mapping of an index: If you need to make changes to the mapping of an index, you can create a new index with the updated mapping and then reindex the data from the old index to the new one.

Moving data from one index to another: If you need to move data from one index to another, you can reindex the data from the source index to the destination index.

Updating the data with new data: If you have updated data that you want to add to an index, you can reindex the data with the updated data.

Changing the shard count of an index: If you need to change the number of shards that an index is using, you can reindex the data to a new index with the desired number of shards.

We can use Reindex API to copy data from index to another index.

Request Endpoint:

POST /v1/reindex


Here is an example how to pass mappings and settings in request body:

{
  "index_type": "items",
  "mappings": {
    "settings": {
      "analysis": {
        "char_filter": {
          "normalize": {
            "type": "icu_normalizer",
            "name": "nfkc",
            "mode": "compose"
          }
        },
        "tokenizer": {
          "ja_kuromoji_tokenizer": {
            "mode": "search",
            "type": "kuromoji_tokenizer",
            "discard_compound_token": "true",
            "user_dictionary_rules": []
          },
          "ja_ngram_tokenizer": {
            "type": "ngram",
            "min_gram": 2,
            "max_gram": 3,
            "token_chars": [
              "letter",
              "digit"
            ]
          }
        },
        "filter": {
          "ja_index_synonym": {
            "type": "synonym",
            "lenient": "false",
            "synonyms": []
          }
        },
        "analyzer": {
          "ja_kuromoji_index_analyzer": {
            "type": "custom",
            "char_filter": [
              "normalize"
            ],
            "tokenizer": "ja_kuromoji_tokenizer",
            "filter": [
              "kuromoji_baseform",
              "kuromoji_part_of_speech",
              "ja_index_synonym",
              "cjk_width",
              "ja_stop",
              "kuromoji_stemmer",
              "lowercase"
            ]
          },
          "ja_kuromoji_search_analyzer": {
            "type": "custom",
            "char_filter": [
              "normalize"
            ],
            "tokenizer": "ja_kuromoji_tokenizer",
            "filter": [
              "kuromoji_baseform",
              "kuromoji_part_of_speech",
              "cjk_width",
              "ja_stop",
              "kuromoji_stemmer",
              "lowercase"
            ]
          },
          "ja_ngram_index_analyzer": {
            "type": "custom",
            "char_filter": [
              "normalize"
            ],
            "tokenizer": "ja_ngram_tokenizer",
            "filter": [
              "lowercase"
            ]
          },
          "ja_ngram_search_analyzer": {
            "type": "custom",
            "char_filter": [
              "normalize"
            ],
            "tokenizer": "ja_ngram_tokenizer",
            "filter": [
              "lowercase"
            ]
          }
        }
      }
    },
    "mappings": {
      "properties": {
        "item": {
          "properties": {
            "{title}": {
              "type": "text",
              "search_analyzer": "ja_kuromoji_search_analyzer",
              "analyzer": "ja_kuromoji_index_analyzer",
              "fields": {
                "ngram": {
                  "type": "text",
                  "search_analyzer": "ja_ngram_search_analyzer",
                  "analyzer": "ja_ngram_index_analyzer"
                }
              }
            },
            "{second_title}": {
              "type": "text",
              "search_analyzer": "ja_kuromoji_search_analyzer",
              "analyzer": "ja_kuromoji_index_analyzer",
              "fields": {
                "ngram": {
                  "type": "text",
                  "search_analyzer": "ja_ngram_search_analyzer",
                  "analyzer": "ja_ngram_index_analyzer"
                }
              }
            },
            "{third_title}": {
              "type": "text",
              "search_analyzer": "ja_kuromoji_search_analyzer",
              "analyzer": "ja_kuromoji_index_analyzer",
              "fields": {
                "ngram": {
                  "type": "text",
                  "search_analyzer": "ja_ngram_search_analyzer",
                  "analyzer": "ja_ngram_index_analyzer"
                }
              }
            },
            "{description}": {
              "type": "text",
              "search_analyzer": "ja_kuromoji_search_analyzer",
              "analyzer": "ja_kuromoji_index_analyzer",
              "fields": {
                "ngram": {
                  "type": "text",
                  "search_analyzer": "ja_ngram_search_analyzer",
                  "analyzer": "ja_ngram_index_analyzer"
                }
              }
            },
            "{price}": {
              "type": "float"
            },
            "{availability}": {
              "type": "boolean"
            }
          }
        }
      }
    }
  }
}

Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs. When you define the mappings object, you should use the same keys as in the item mapper that you have built with POST /v1/mapper API.

You might not need analyzers or tokenizers for all indices. You can keep the settings field empty if it is not required. Here is an example,

{
  "index_type": "search",
  "mappings": {
    "settings": {},
    "mappings": {
      "properties": {
        "date": {
          "type": "date"
        }
      }
    }
  }
}

Previous
Project setup
Next
Integration of Catalogue information and user behavior data
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/00_Setup_and_training/02_environment_setup/#sample-code
Skip to content
Gigalogy Tutorial
Environment setup
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Table of contents
Mapping creation
Item Catalogue Mapping
Example of this item mapper creation
Sample Code
User Behavior mapping
Index creation
Create Index
Delete Index
Reindex
Environment setup

To prepare GAIP for your site, there are 2 main steps

Mapping creation
Index creation

Info

These steps can also be done from our platform (GAIP). Refer here for detail.

For this, we will use API endpoints of GAIP listed in our Sandbox

You can also access our sandbox from the project setting page.

Mapping creation

The personalization engine relies on specific default keys to operate effectively. To integrate your item catalogue with our solution, it's essential to align your website's data source keys (such as item name, item description, tags, ingredients, category, etc.) with keys of personalization engine via mapping them. Our personalizer then can understand your data. This is the core part of the personalization system so the schema should be followed properly to successfully map your data.

Item Catalogue Mapping

To create mapping, use endpoints listed under Catalog Mapping in the sandbox.

GET /v1/mappers to get an existing Mapper.
PUT /v1/mappers to update an existing Mapper.
POST /v1/mappers to create a new mapper.

For set up your project mapping we will use POST /v1/mappers. You can find keys, value types, and description with an example request body in the sandbox You can simply replace the values in the example with your item catalogue keys and hit Execute to finish the mapping of your product catalogue Keys with GAIP keys.

After execution, confirm the server response is success.

Example of this item mapper creation

Here, we will use doozie shop as an example E-commerce site.

For an example item from the shop, this is how the data is structured.

{
  "success": true,
  "result": [
    {
      "item_id": "12345",
      "title": "Eco-Friendly Water Bottle",
      "description": "A durable, BPA-free water bottle designed for everyday use. Made from eco-friendly materials, it keeps your drink cold for up to 24 hours. Perfect for staying hydrated on the go.",
      "headline": "Stay Hydrated with Our Eco-Friendly Water Bottle",
      "availability": true,
      "affiliate_rate": 4,
      "price": 2360,
      "currency": "JPY",
      "shop_id": "hworks",
      "shop_name": "スマートビズ-ワイシャツ専門店-",
      "review_count": 2836,
      "review_average": 4.26,
      "genre_id": "206363",
      "brand": null,
      "shop_url": "https://hb.afl.rakuten.co.jp/hgc/g00rgm95.h3cpt446.g00rgm95.h3cpu696/?pc=https%3A%2F%2Fwww.rakuten.co.jp%2Fhworks%2F&m=http%3A%2F%2Fm.rakuten.co.jp%2Fhworks%2F",
      "item_url": "https://hb.afl.rakuten.co.jp/hgc/g00rgm95.h3cpt446.g00rgm95.h3cpu696/?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fhworks%2Fshirt-b0080%2F&m=http%3A%2F%2Fm.rakuten.co.jp%2Fhworks%2Fi%2F10000926%2F",
      "image_urls": [
        "https://thumbnail.image.rakuten.co.jp/@0_mall/hworks/cabinet/001/014/shirt-b0080.jpg",
        "https://thumbnail.image.rakuten.co.jp/@0_mall/hworks/cabinet/001/014/b0080-lineup.jpg",
        "https://thumbnail.image.rakuten.co.jp/@0_mall/hworks/cabinet/banner/coupon202308-shdz_sq.jpg"
      ],
      "tag_ids": [
        1000903,
        1008869,
        1039853,
        1013746
      ],
      "tags": [],
      "shipping_overseas": "",
      "condition": 1,
      "genre_name": null,
      "parent_genre_categories": null,
      "shop_review_count": null,
      "shop_review_average": null,
      "tax_included": true,
      "point_multiplier": 1,
      "best_seller": false,
      "sale_start_time": "",
      "sale_end_time": "",
      "platform": "rakuten"
    }
  ]
}


This shows the keys that doozie shop has for its products. Now we can create a mapping with GAIP keys, and use the POST /v1/mapper endpoint of GAIP. In this endpoint, we will pass the keys of above data source.

Here is an example of a mapper that we built for doozie shop, based on the keys above:

{
  "key_map": {
    "item_id": "item_id",
    "title": "title",
    "second_title": "headline",
    "third_title": "shop_name",
    "fourth_title": "genre_name",
    "availability": "availability",
    "description": "description",
    "image_url": "image_urls",
    "image_url_type": "LIST_STR",
    "item_url": "item_url",
    "price": "price",
    "categories": [
      {
        "name": "genre_id",
        "separator": ""
      }
    ],
    "custom":[],
    "flag": [
      "condition"
    ]
  }
}

Sample Code

You can find sample code for this implementation here

Once the mapper is created, you can use GET /v1/mappers endpoint to see the mapping. You can update any of mapped keys with PUT /v1/mapper endpoint and check the mapper you build from GET /v1/mapper endpoint.

User Behavior mapping

Similar to the item mapping key, there are some default keys for user behavior data.

Note

This step is required If you want to save historical user behavior data through CSV files. If you use our data collection endpoints to collect data from now on, this is not required.

You can find the Endpoints for user mapping under "Historical User Data Collection" section in the Sandbox

To implement this, please follow similar steps as above.

However, in this case please note that there are four sets of endpoints for Browsing history, purchase history, rating history, user detail. You have to create mapper for each if you want to import the data.

Index creation

In this step, you need to create indices. We need multiple indices to run recommender solution successfully. These indices will create the necessary schemas to hold your data.

There are 3 endpoints here

POST /v1/index/create --> Create indices to hold your data

DELETE /v1/index/delete --> Delete indices

POST /v1/reindex --> Creates index with new mappings and settings and create alias for new index

Create Index

Request endpoint

POST /v1/index/create

Simply use your project key and API and click execute to create the indices for your project. Note that this will throw an error if the mapping in the previous step is not done correctly.

After the successful execution all the necessary index will be created and item index will be created in the background. You can check the status of item index creation with a task id from GET /v1/tasks/{task_id} API at the bottom of the page.

Please confirm the task was success.

Delete Index

You can delete an existing index with this endpoint.

Request endpoint

DELETE /v1/index/delete

Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs.

If you Delete any index, please ensure to create the index again, unless you will get error when trying to input data/item catalogue or run training.

Reindex

In Elastic search, reindexing is the process of copying data from one index to another, either within the same cluster or to a different cluster. This can be useful in a variety of situations, such as:

Updating the mapping of an index: If you need to make changes to the mapping of an index, you can create a new index with the updated mapping and then reindex the data from the old index to the new one.

Moving data from one index to another: If you need to move data from one index to another, you can reindex the data from the source index to the destination index.

Updating the data with new data: If you have updated data that you want to add to an index, you can reindex the data with the updated data.

Changing the shard count of an index: If you need to change the number of shards that an index is using, you can reindex the data to a new index with the desired number of shards.

We can use Reindex API to copy data from index to another index.

Request Endpoint:

POST /v1/reindex


Here is an example how to pass mappings and settings in request body:

{
  "index_type": "items",
  "mappings": {
    "settings": {
      "analysis": {
        "char_filter": {
          "normalize": {
            "type": "icu_normalizer",
            "name": "nfkc",
            "mode": "compose"
          }
        },
        "tokenizer": {
          "ja_kuromoji_tokenizer": {
            "mode": "search",
            "type": "kuromoji_tokenizer",
            "discard_compound_token": "true",
            "user_dictionary_rules": []
          },
          "ja_ngram_tokenizer": {
            "type": "ngram",
            "min_gram": 2,
            "max_gram": 3,
            "token_chars": [
              "letter",
              "digit"
            ]
          }
        },
        "filter": {
          "ja_index_synonym": {
            "type": "synonym",
            "lenient": "false",
            "synonyms": []
          }
        },
        "analyzer": {
          "ja_kuromoji_index_analyzer": {
            "type": "custom",
            "char_filter": [
              "normalize"
            ],
            "tokenizer": "ja_kuromoji_tokenizer",
            "filter": [
              "kuromoji_baseform",
              "kuromoji_part_of_speech",
              "ja_index_synonym",
              "cjk_width",
              "ja_stop",
              "kuromoji_stemmer",
              "lowercase"
            ]
          },
          "ja_kuromoji_search_analyzer": {
            "type": "custom",
            "char_filter": [
              "normalize"
            ],
            "tokenizer": "ja_kuromoji_tokenizer",
            "filter": [
              "kuromoji_baseform",
              "kuromoji_part_of_speech",
              "cjk_width",
              "ja_stop",
              "kuromoji_stemmer",
              "lowercase"
            ]
          },
          "ja_ngram_index_analyzer": {
            "type": "custom",
            "char_filter": [
              "normalize"
            ],
            "tokenizer": "ja_ngram_tokenizer",
            "filter": [
              "lowercase"
            ]
          },
          "ja_ngram_search_analyzer": {
            "type": "custom",
            "char_filter": [
              "normalize"
            ],
            "tokenizer": "ja_ngram_tokenizer",
            "filter": [
              "lowercase"
            ]
          }
        }
      }
    },
    "mappings": {
      "properties": {
        "item": {
          "properties": {
            "{title}": {
              "type": "text",
              "search_analyzer": "ja_kuromoji_search_analyzer",
              "analyzer": "ja_kuromoji_index_analyzer",
              "fields": {
                "ngram": {
                  "type": "text",
                  "search_analyzer": "ja_ngram_search_analyzer",
                  "analyzer": "ja_ngram_index_analyzer"
                }
              }
            },
            "{second_title}": {
              "type": "text",
              "search_analyzer": "ja_kuromoji_search_analyzer",
              "analyzer": "ja_kuromoji_index_analyzer",
              "fields": {
                "ngram": {
                  "type": "text",
                  "search_analyzer": "ja_ngram_search_analyzer",
                  "analyzer": "ja_ngram_index_analyzer"
                }
              }
            },
            "{third_title}": {
              "type": "text",
              "search_analyzer": "ja_kuromoji_search_analyzer",
              "analyzer": "ja_kuromoji_index_analyzer",
              "fields": {
                "ngram": {
                  "type": "text",
                  "search_analyzer": "ja_ngram_search_analyzer",
                  "analyzer": "ja_ngram_index_analyzer"
                }
              }
            },
            "{description}": {
              "type": "text",
              "search_analyzer": "ja_kuromoji_search_analyzer",
              "analyzer": "ja_kuromoji_index_analyzer",
              "fields": {
                "ngram": {
                  "type": "text",
                  "search_analyzer": "ja_ngram_search_analyzer",
                  "analyzer": "ja_ngram_index_analyzer"
                }
              }
            },
            "{price}": {
              "type": "float"
            },
            "{availability}": {
              "type": "boolean"
            }
          }
        }
      }
    }
  }
}

Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs. When you define the mappings object, you should use the same keys as in the item mapper that you have built with POST /v1/mapper API.

You might not need analyzers or tokenizers for all indices. You can keep the settings field empty if it is not required. Here is an example,

{
  "index_type": "search",
  "mappings": {
    "settings": {},
    "mappings": {
      "properties": {
        "date": {
          "type": "date"
        }
      }
    }
  }
}

Previous
Project setup
Next
Integration of Catalogue information and user behavior data
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/00_Setup_and_training/02_environment_setup/#user-behavior-mapping
Skip to content
Gigalogy Tutorial
Environment setup
English
Japanese
Type to start searching
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Table of contents
Mapping creation
Item Catalogue Mapping
Example of this item mapper creation
Sample Code
User Behavior mapping
Index creation
Create Index
Delete Index
Reindex
Environment setup

To prepare GAIP for your site, there are 2 main steps

Mapping creation
Index creation

Info

These steps can also be done from our platform (GAIP). Refer here for detail.

For this, we will use API endpoints of GAIP listed in our Sandbox

You can also access our sandbox from the project setting page.

Mapping creation

The personalization engine relies on specific default keys to operate effectively. To integrate your item catalogue with our solution, it's essential to align your website's data source keys (such as item name, item description, tags, ingredients, category, etc.) with keys of personalization engine via mapping them. Our personalizer then can understand your data. This is the core part of the personalization system so the schema should be followed properly to successfully map your data.

Item Catalogue Mapping

To create mapping, use endpoints listed under Catalog Mapping in the sandbox.

GET /v1/mappers to get an existing Mapper.
PUT /v1/mappers to update an existing Mapper.
POST /v1/mappers to create a new mapper.

For set up your project mapping we will use POST /v1/mappers. You can find keys, value types, and description with an example request body in the sandbox You can simply replace the values in the example with your item catalogue keys and hit Execute to finish the mapping of your product catalogue Keys with GAIP keys.

After execution, confirm the server response is success.

Example of this item mapper creation

Here, we will use doozie shop as an example E-commerce site.

For an example item from the shop, this is how the data is structured.

{
  "success": true,
  "result": [
    {
      "item_id": "12345",
      "title": "Eco-Friendly Water Bottle",
      "description": "A durable, BPA-free water bottle designed for everyday use. Made from eco-friendly materials, it keeps your drink cold for up to 24 hours. Perfect for staying hydrated on the go.",
      "headline": "Stay Hydrated with Our Eco-Friendly Water Bottle",
      "availability": true,
      "affiliate_rate": 4,
      "price": 2360,
      "currency": "JPY",
      "shop_id": "hworks",
      "shop_name": "スマートビズ-ワイシャツ専門店-",
      "review_count": 2836,
      "review_average": 4.26,
      "genre_id": "206363",
      "brand": null,
      "shop_url": "https://hb.afl.rakuten.co.jp/hgc/g00rgm95.h3cpt446.g00rgm95.h3cpu696/?pc=https%3A%2F%2Fwww.rakuten.co.jp%2Fhworks%2F&m=http%3A%2F%2Fm.rakuten.co.jp%2Fhworks%2F",
      "item_url": "https://hb.afl.rakuten.co.jp/hgc/g00rgm95.h3cpt446.g00rgm95.h3cpu696/?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fhworks%2Fshirt-b0080%2F&m=http%3A%2F%2Fm.rakuten.co.jp%2Fhworks%2Fi%2F10000926%2F",
      "image_urls": [
        "https://thumbnail.image.rakuten.co.jp/@0_mall/hworks/cabinet/001/014/shirt-b0080.jpg",
        "https://thumbnail.image.rakuten.co.jp/@0_mall/hworks/cabinet/001/014/b0080-lineup.jpg",
        "https://thumbnail.image.rakuten.co.jp/@0_mall/hworks/cabinet/banner/coupon202308-shdz_sq.jpg"
      ],
      "tag_ids": [
        1000903,
        1008869,
        1039853,
        1013746
      ],
      "tags": [],
      "shipping_overseas": "",
      "condition": 1,
      "genre_name": null,
      "parent_genre_categories": null,
      "shop_review_count": null,
      "shop_review_average": null,
      "tax_included": true,
      "point_multiplier": 1,
      "best_seller": false,
      "sale_start_time": "",
      "sale_end_time": "",
      "platform": "rakuten"
    }
  ]
}


This shows the keys that doozie shop has for its products. Now we can create a mapping with GAIP keys, and use the POST /v1/mapper endpoint of GAIP. In this endpoint, we will pass the keys of above data source.

Here is an example of a mapper that we built for doozie shop, based on the keys above:

{
  "key_map": {
    "item_id": "item_id",
    "title": "title",
    "second_title": "headline",
    "third_title": "shop_name",
    "fourth_title": "genre_name",
    "availability": "availability",
    "description": "description",
    "image_url": "image_urls",
    "image_url_type": "LIST_STR",
    "item_url": "item_url",
    "price": "price",
    "categories": [
      {
        "name": "genre_id",
        "separator": ""
      }
    ],
    "custom":[],
    "flag": [
      "condition"
    ]
  }
}

Sample Code

You can find sample code for this implementation here

Once the mapper is created, you can use GET /v1/mappers endpoint to see the mapping. You can update any of mapped keys with PUT /v1/mapper endpoint and check the mapper you build from GET /v1/mapper endpoint.

User Behavior mapping

Similar to the item mapping key, there are some default keys for user behavior data.

Note

This step is required If you want to save historical user behavior data through CSV files. If you use our data collection endpoints to collect data from now on, this is not required.

You can find the Endpoints for user mapping under "Historical User Data Collection" section in the Sandbox

To implement this, please follow similar steps as above.

However, in this case please note that there are four sets of endpoints for Browsing history, purchase history, rating history, user detail. You have to create mapper for each if you want to import the data.

Index creation

In this step, you need to create indices. We need multiple indices to run recommender solution successfully. These indices will create the necessary schemas to hold your data.

There are 3 endpoints here

POST /v1/index/create --> Create indices to hold your data

DELETE /v1/index/delete --> Delete indices

POST /v1/reindex --> Creates index with new mappings and settings and create alias for new index

Create Index

Request endpoint

POST /v1/index/create

Simply use your project key and API and click execute to create the indices for your project. Note that this will throw an error if the mapping in the previous step is not done correctly.

After the successful execution all the necessary index will be created and item index will be created in the background. You can check the status of item index creation with a task id from GET /v1/tasks/{task_id} API at the bottom of the page.

Please confirm the task was success.

Delete Index

You can delete an existing index with this endpoint.

Request endpoint

DELETE /v1/index/delete

Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs.

If you Delete any index, please ensure to create the index again, unless you will get error when trying to input data/item catalogue or run training.

Reindex

In Elastic search, reindexing is the process of copying data from one index to another, either within the same cluster or to a different cluster. This can be useful in a variety of situations, such as:

Updating the mapping of an index: If you need to make changes to the mapping of an index, you can create a new index with the updated mapping and then reindex the data from the old index to the new one.

Moving data from one index to another: If you need to move data from one index to another, you can reindex the data from the source index to the destination index.

Updating the data with new data: If you have updated data that you want to add to an index, you can reindex the data with the updated data.

Changing the shard count of an index: If you need to change the number of shards that an index is using, you can reindex the data to a new index with the desired number of shards.

We can use Reindex API to copy data from index to another index.

Request Endpoint:

POST /v1/reindex


Here is an example how to pass mappings and settings in request body:

{
  "index_type": "items",
  "mappings": {
    "settings": {
      "analysis": {
        "char_filter": {
          "normalize": {
            "type": "icu_normalizer",
            "name": "nfkc",
            "mode": "compose"
          }
        },
        "tokenizer": {
          "ja_kuromoji_tokenizer": {
            "mode": "search",
            "type": "kuromoji_tokenizer",
            "discard_compound_token": "true",
            "user_dictionary_rules": []
          },
          "ja_ngram_tokenizer": {
            "type": "ngram",
            "min_gram": 2,
            "max_gram": 3,
            "token_chars": [
              "letter",
              "digit"
            ]
          }
        },
        "filter": {
          "ja_index_synonym": {
            "type": "synonym",
            "lenient": "false",
            "synonyms": []
          }
        },
        "analyzer": {
          "ja_kuromoji_index_analyzer": {
            "type": "custom",
            "char_filter": [
              "normalize"
            ],
            "tokenizer": "ja_kuromoji_tokenizer",
            "filter": [
              "kuromoji_baseform",
              "kuromoji_part_of_speech",
              "ja_index_synonym",
              "cjk_width",
              "ja_stop",
              "kuromoji_stemmer",
              "lowercase"
            ]
          },
          "ja_kuromoji_search_analyzer": {
            "type": "custom",
            "char_filter": [
              "normalize"
            ],
            "tokenizer": "ja_kuromoji_tokenizer",
            "filter": [
              "kuromoji_baseform",
              "kuromoji_part_of_speech",
              "cjk_width",
              "ja_stop",
              "kuromoji_stemmer",
              "lowercase"
            ]
          },
          "ja_ngram_index_analyzer": {
            "type": "custom",
            "char_filter": [
              "normalize"
            ],
            "tokenizer": "ja_ngram_tokenizer",
            "filter": [
              "lowercase"
            ]
          },
          "ja_ngram_search_analyzer": {
            "type": "custom",
            "char_filter": [
              "normalize"
            ],
            "tokenizer": "ja_ngram_tokenizer",
            "filter": [
              "lowercase"
            ]
          }
        }
      }
    },
    "mappings": {
      "properties": {
        "item": {
          "properties": {
            "{title}": {
              "type": "text",
              "search_analyzer": "ja_kuromoji_search_analyzer",
              "analyzer": "ja_kuromoji_index_analyzer",
              "fields": {
                "ngram": {
                  "type": "text",
                  "search_analyzer": "ja_ngram_search_analyzer",
                  "analyzer": "ja_ngram_index_analyzer"
                }
              }
            },
            "{second_title}": {
              "type": "text",
              "search_analyzer": "ja_kuromoji_search_analyzer",
              "analyzer": "ja_kuromoji_index_analyzer",
              "fields": {
                "ngram": {
                  "type": "text",
                  "search_analyzer": "ja_ngram_search_analyzer",
                  "analyzer": "ja_ngram_index_analyzer"
                }
              }
            },
            "{third_title}": {
              "type": "text",
              "search_analyzer": "ja_kuromoji_search_analyzer",
              "analyzer": "ja_kuromoji_index_analyzer",
              "fields": {
                "ngram": {
                  "type": "text",
                  "search_analyzer": "ja_ngram_search_analyzer",
                  "analyzer": "ja_ngram_index_analyzer"
                }
              }
            },
            "{description}": {
              "type": "text",
              "search_analyzer": "ja_kuromoji_search_analyzer",
              "analyzer": "ja_kuromoji_index_analyzer",
              "fields": {
                "ngram": {
                  "type": "text",
                  "search_analyzer": "ja_ngram_search_analyzer",
                  "analyzer": "ja_ngram_index_analyzer"
                }
              }
            },
            "{price}": {
              "type": "float"
            },
            "{availability}": {
              "type": "boolean"
            }
          }
        }
      }
    }
  }
}

Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs. When you define the mappings object, you should use the same keys as in the item mapper that you have built with POST /v1/mapper API.

You might not need analyzers or tokenizers for all indices. You can keep the settings field empty if it is not required. Here is an example,

{
  "index_type": "search",
  "mappings": {
    "settings": {},
    "mappings": {
      "properties": {
        "date": {
          "type": "date"
        }
      }
    }
  }
}

Previous
Project setup
Next
Integration of Catalogue information and user behavior data
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/00_Setup_and_training/02_environment_setup/#index-creation
Skip to content
Gigalogy Tutorial
Environment setup
English
Japanese
Type to start searching
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Table of contents
Mapping creation
Item Catalogue Mapping
Example of this item mapper creation
Sample Code
User Behavior mapping
Index creation
Create Index
Delete Index
Reindex
Environment setup

To prepare GAIP for your site, there are 2 main steps

Mapping creation
Index creation

Info

These steps can also be done from our platform (GAIP). Refer here for detail.

For this, we will use API endpoints of GAIP listed in our Sandbox

You can also access our sandbox from the project setting page.

Mapping creation

The personalization engine relies on specific default keys to operate effectively. To integrate your item catalogue with our solution, it's essential to align your website's data source keys (such as item name, item description, tags, ingredients, category, etc.) with keys of personalization engine via mapping them. Our personalizer then can understand your data. This is the core part of the personalization system so the schema should be followed properly to successfully map your data.

Item Catalogue Mapping

To create mapping, use endpoints listed under Catalog Mapping in the sandbox.

GET /v1/mappers to get an existing Mapper.
PUT /v1/mappers to update an existing Mapper.
POST /v1/mappers to create a new mapper.

For set up your project mapping we will use POST /v1/mappers. You can find keys, value types, and description with an example request body in the sandbox You can simply replace the values in the example with your item catalogue keys and hit Execute to finish the mapping of your product catalogue Keys with GAIP keys.

After execution, confirm the server response is success.

Example of this item mapper creation

Here, we will use doozie shop as an example E-commerce site.

For an example item from the shop, this is how the data is structured.

{
  "success": true,
  "result": [
    {
      "item_id": "12345",
      "title": "Eco-Friendly Water Bottle",
      "description": "A durable, BPA-free water bottle designed for everyday use. Made from eco-friendly materials, it keeps your drink cold for up to 24 hours. Perfect for staying hydrated on the go.",
      "headline": "Stay Hydrated with Our Eco-Friendly Water Bottle",
      "availability": true,
      "affiliate_rate": 4,
      "price": 2360,
      "currency": "JPY",
      "shop_id": "hworks",
      "shop_name": "スマートビズ-ワイシャツ専門店-",
      "review_count": 2836,
      "review_average": 4.26,
      "genre_id": "206363",
      "brand": null,
      "shop_url": "https://hb.afl.rakuten.co.jp/hgc/g00rgm95.h3cpt446.g00rgm95.h3cpu696/?pc=https%3A%2F%2Fwww.rakuten.co.jp%2Fhworks%2F&m=http%3A%2F%2Fm.rakuten.co.jp%2Fhworks%2F",
      "item_url": "https://hb.afl.rakuten.co.jp/hgc/g00rgm95.h3cpt446.g00rgm95.h3cpu696/?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fhworks%2Fshirt-b0080%2F&m=http%3A%2F%2Fm.rakuten.co.jp%2Fhworks%2Fi%2F10000926%2F",
      "image_urls": [
        "https://thumbnail.image.rakuten.co.jp/@0_mall/hworks/cabinet/001/014/shirt-b0080.jpg",
        "https://thumbnail.image.rakuten.co.jp/@0_mall/hworks/cabinet/001/014/b0080-lineup.jpg",
        "https://thumbnail.image.rakuten.co.jp/@0_mall/hworks/cabinet/banner/coupon202308-shdz_sq.jpg"
      ],
      "tag_ids": [
        1000903,
        1008869,
        1039853,
        1013746
      ],
      "tags": [],
      "shipping_overseas": "",
      "condition": 1,
      "genre_name": null,
      "parent_genre_categories": null,
      "shop_review_count": null,
      "shop_review_average": null,
      "tax_included": true,
      "point_multiplier": 1,
      "best_seller": false,
      "sale_start_time": "",
      "sale_end_time": "",
      "platform": "rakuten"
    }
  ]
}


This shows the keys that doozie shop has for its products. Now we can create a mapping with GAIP keys, and use the POST /v1/mapper endpoint of GAIP. In this endpoint, we will pass the keys of above data source.

Here is an example of a mapper that we built for doozie shop, based on the keys above:

{
  "key_map": {
    "item_id": "item_id",
    "title": "title",
    "second_title": "headline",
    "third_title": "shop_name",
    "fourth_title": "genre_name",
    "availability": "availability",
    "description": "description",
    "image_url": "image_urls",
    "image_url_type": "LIST_STR",
    "item_url": "item_url",
    "price": "price",
    "categories": [
      {
        "name": "genre_id",
        "separator": ""
      }
    ],
    "custom":[],
    "flag": [
      "condition"
    ]
  }
}

Sample Code

You can find sample code for this implementation here

Once the mapper is created, you can use GET /v1/mappers endpoint to see the mapping. You can update any of mapped keys with PUT /v1/mapper endpoint and check the mapper you build from GET /v1/mapper endpoint.

User Behavior mapping

Similar to the item mapping key, there are some default keys for user behavior data.

Note

This step is required If you want to save historical user behavior data through CSV files. If you use our data collection endpoints to collect data from now on, this is not required.

You can find the Endpoints for user mapping under "Historical User Data Collection" section in the Sandbox

To implement this, please follow similar steps as above.

However, in this case please note that there are four sets of endpoints for Browsing history, purchase history, rating history, user detail. You have to create mapper for each if you want to import the data.

Index creation

In this step, you need to create indices. We need multiple indices to run recommender solution successfully. These indices will create the necessary schemas to hold your data.

There are 3 endpoints here

POST /v1/index/create --> Create indices to hold your data

DELETE /v1/index/delete --> Delete indices

POST /v1/reindex --> Creates index with new mappings and settings and create alias for new index

Create Index

Request endpoint

POST /v1/index/create

Simply use your project key and API and click execute to create the indices for your project. Note that this will throw an error if the mapping in the previous step is not done correctly.

After the successful execution all the necessary index will be created and item index will be created in the background. You can check the status of item index creation with a task id from GET /v1/tasks/{task_id} API at the bottom of the page.

Please confirm the task was success.

Delete Index

You can delete an existing index with this endpoint.

Request endpoint

DELETE /v1/index/delete

Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs.

If you Delete any index, please ensure to create the index again, unless you will get error when trying to input data/item catalogue or run training.

Reindex

In Elastic search, reindexing is the process of copying data from one index to another, either within the same cluster or to a different cluster. This can be useful in a variety of situations, such as:

Updating the mapping of an index: If you need to make changes to the mapping of an index, you can create a new index with the updated mapping and then reindex the data from the old index to the new one.

Moving data from one index to another: If you need to move data from one index to another, you can reindex the data from the source index to the destination index.

Updating the data with new data: If you have updated data that you want to add to an index, you can reindex the data with the updated data.

Changing the shard count of an index: If you need to change the number of shards that an index is using, you can reindex the data to a new index with the desired number of shards.

We can use Reindex API to copy data from index to another index.

Request Endpoint:

POST /v1/reindex


Here is an example how to pass mappings and settings in request body:

{
  "index_type": "items",
  "mappings": {
    "settings": {
      "analysis": {
        "char_filter": {
          "normalize": {
            "type": "icu_normalizer",
            "name": "nfkc",
            "mode": "compose"
          }
        },
        "tokenizer": {
          "ja_kuromoji_tokenizer": {
            "mode": "search",
            "type": "kuromoji_tokenizer",
            "discard_compound_token": "true",
            "user_dictionary_rules": []
          },
          "ja_ngram_tokenizer": {
            "type": "ngram",
            "min_gram": 2,
            "max_gram": 3,
            "token_chars": [
              "letter",
              "digit"
            ]
          }
        },
        "filter": {
          "ja_index_synonym": {
            "type": "synonym",
            "lenient": "false",
            "synonyms": []
          }
        },
        "analyzer": {
          "ja_kuromoji_index_analyzer": {
            "type": "custom",
            "char_filter": [
              "normalize"
            ],
            "tokenizer": "ja_kuromoji_tokenizer",
            "filter": [
              "kuromoji_baseform",
              "kuromoji_part_of_speech",
              "ja_index_synonym",
              "cjk_width",
              "ja_stop",
              "kuromoji_stemmer",
              "lowercase"
            ]
          },
          "ja_kuromoji_search_analyzer": {
            "type": "custom",
            "char_filter": [
              "normalize"
            ],
            "tokenizer": "ja_kuromoji_tokenizer",
            "filter": [
              "kuromoji_baseform",
              "kuromoji_part_of_speech",
              "cjk_width",
              "ja_stop",
              "kuromoji_stemmer",
              "lowercase"
            ]
          },
          "ja_ngram_index_analyzer": {
            "type": "custom",
            "char_filter": [
              "normalize"
            ],
            "tokenizer": "ja_ngram_tokenizer",
            "filter": [
              "lowercase"
            ]
          },
          "ja_ngram_search_analyzer": {
            "type": "custom",
            "char_filter": [
              "normalize"
            ],
            "tokenizer": "ja_ngram_tokenizer",
            "filter": [
              "lowercase"
            ]
          }
        }
      }
    },
    "mappings": {
      "properties": {
        "item": {
          "properties": {
            "{title}": {
              "type": "text",
              "search_analyzer": "ja_kuromoji_search_analyzer",
              "analyzer": "ja_kuromoji_index_analyzer",
              "fields": {
                "ngram": {
                  "type": "text",
                  "search_analyzer": "ja_ngram_search_analyzer",
                  "analyzer": "ja_ngram_index_analyzer"
                }
              }
            },
            "{second_title}": {
              "type": "text",
              "search_analyzer": "ja_kuromoji_search_analyzer",
              "analyzer": "ja_kuromoji_index_analyzer",
              "fields": {
                "ngram": {
                  "type": "text",
                  "search_analyzer": "ja_ngram_search_analyzer",
                  "analyzer": "ja_ngram_index_analyzer"
                }
              }
            },
            "{third_title}": {
              "type": "text",
              "search_analyzer": "ja_kuromoji_search_analyzer",
              "analyzer": "ja_kuromoji_index_analyzer",
              "fields": {
                "ngram": {
                  "type": "text",
                  "search_analyzer": "ja_ngram_search_analyzer",
                  "analyzer": "ja_ngram_index_analyzer"
                }
              }
            },
            "{description}": {
              "type": "text",
              "search_analyzer": "ja_kuromoji_search_analyzer",
              "analyzer": "ja_kuromoji_index_analyzer",
              "fields": {
                "ngram": {
                  "type": "text",
                  "search_analyzer": "ja_ngram_search_analyzer",
                  "analyzer": "ja_ngram_index_analyzer"
                }
              }
            },
            "{price}": {
              "type": "float"
            },
            "{availability}": {
              "type": "boolean"
            }
          }
        }
      }
    }
  }
}

Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs. When you define the mappings object, you should use the same keys as in the item mapper that you have built with POST /v1/mapper API.

You might not need analyzers or tokenizers for all indices. You can keep the settings field empty if it is not required. Here is an example,

{
  "index_type": "search",
  "mappings": {
    "settings": {},
    "mappings": {
      "properties": {
        "date": {
          "type": "date"
        }
      }
    }
  }
}

Previous
Project setup
Next
Integration of Catalogue information and user behavior data
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/00_Setup_and_training/02_environment_setup/#create-index
Skip to content
Gigalogy Tutorial
Environment setup
English
Japanese
Type to start searching
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Table of contents
Mapping creation
Item Catalogue Mapping
Example of this item mapper creation
Sample Code
User Behavior mapping
Index creation
Create Index
Delete Index
Reindex
Environment setup

To prepare GAIP for your site, there are 2 main steps

Mapping creation
Index creation

Info

These steps can also be done from our platform (GAIP). Refer here for detail.

For this, we will use API endpoints of GAIP listed in our Sandbox

You can also access our sandbox from the project setting page.

Mapping creation

The personalization engine relies on specific default keys to operate effectively. To integrate your item catalogue with our solution, it's essential to align your website's data source keys (such as item name, item description, tags, ingredients, category, etc.) with keys of personalization engine via mapping them. Our personalizer then can understand your data. This is the core part of the personalization system so the schema should be followed properly to successfully map your data.

Item Catalogue Mapping

To create mapping, use endpoints listed under Catalog Mapping in the sandbox.

GET /v1/mappers to get an existing Mapper.
PUT /v1/mappers to update an existing Mapper.
POST /v1/mappers to create a new mapper.

For set up your project mapping we will use POST /v1/mappers. You can find keys, value types, and description with an example request body in the sandbox You can simply replace the values in the example with your item catalogue keys and hit Execute to finish the mapping of your product catalogue Keys with GAIP keys.

After execution, confirm the server response is success.

Example of this item mapper creation

Here, we will use doozie shop as an example E-commerce site.

For an example item from the shop, this is how the data is structured.

{
  "success": true,
  "result": [
    {
      "item_id": "12345",
      "title": "Eco-Friendly Water Bottle",
      "description": "A durable, BPA-free water bottle designed for everyday use. Made from eco-friendly materials, it keeps your drink cold for up to 24 hours. Perfect for staying hydrated on the go.",
      "headline": "Stay Hydrated with Our Eco-Friendly Water Bottle",
      "availability": true,
      "affiliate_rate": 4,
      "price": 2360,
      "currency": "JPY",
      "shop_id": "hworks",
      "shop_name": "スマートビズ-ワイシャツ専門店-",
      "review_count": 2836,
      "review_average": 4.26,
      "genre_id": "206363",
      "brand": null,
      "shop_url": "https://hb.afl.rakuten.co.jp/hgc/g00rgm95.h3cpt446.g00rgm95.h3cpu696/?pc=https%3A%2F%2Fwww.rakuten.co.jp%2Fhworks%2F&m=http%3A%2F%2Fm.rakuten.co.jp%2Fhworks%2F",
      "item_url": "https://hb.afl.rakuten.co.jp/hgc/g00rgm95.h3cpt446.g00rgm95.h3cpu696/?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fhworks%2Fshirt-b0080%2F&m=http%3A%2F%2Fm.rakuten.co.jp%2Fhworks%2Fi%2F10000926%2F",
      "image_urls": [
        "https://thumbnail.image.rakuten.co.jp/@0_mall/hworks/cabinet/001/014/shirt-b0080.jpg",
        "https://thumbnail.image.rakuten.co.jp/@0_mall/hworks/cabinet/001/014/b0080-lineup.jpg",
        "https://thumbnail.image.rakuten.co.jp/@0_mall/hworks/cabinet/banner/coupon202308-shdz_sq.jpg"
      ],
      "tag_ids": [
        1000903,
        1008869,
        1039853,
        1013746
      ],
      "tags": [],
      "shipping_overseas": "",
      "condition": 1,
      "genre_name": null,
      "parent_genre_categories": null,
      "shop_review_count": null,
      "shop_review_average": null,
      "tax_included": true,
      "point_multiplier": 1,
      "best_seller": false,
      "sale_start_time": "",
      "sale_end_time": "",
      "platform": "rakuten"
    }
  ]
}


This shows the keys that doozie shop has for its products. Now we can create a mapping with GAIP keys, and use the POST /v1/mapper endpoint of GAIP. In this endpoint, we will pass the keys of above data source.

Here is an example of a mapper that we built for doozie shop, based on the keys above:

{
  "key_map": {
    "item_id": "item_id",
    "title": "title",
    "second_title": "headline",
    "third_title": "shop_name",
    "fourth_title": "genre_name",
    "availability": "availability",
    "description": "description",
    "image_url": "image_urls",
    "image_url_type": "LIST_STR",
    "item_url": "item_url",
    "price": "price",
    "categories": [
      {
        "name": "genre_id",
        "separator": ""
      }
    ],
    "custom":[],
    "flag": [
      "condition"
    ]
  }
}

Sample Code

You can find sample code for this implementation here

Once the mapper is created, you can use GET /v1/mappers endpoint to see the mapping. You can update any of mapped keys with PUT /v1/mapper endpoint and check the mapper you build from GET /v1/mapper endpoint.

User Behavior mapping

Similar to the item mapping key, there are some default keys for user behavior data.

Note

This step is required If you want to save historical user behavior data through CSV files. If you use our data collection endpoints to collect data from now on, this is not required.

You can find the Endpoints for user mapping under "Historical User Data Collection" section in the Sandbox

To implement this, please follow similar steps as above.

However, in this case please note that there are four sets of endpoints for Browsing history, purchase history, rating history, user detail. You have to create mapper for each if you want to import the data.

Index creation

In this step, you need to create indices. We need multiple indices to run recommender solution successfully. These indices will create the necessary schemas to hold your data.

There are 3 endpoints here

POST /v1/index/create --> Create indices to hold your data

DELETE /v1/index/delete --> Delete indices

POST /v1/reindex --> Creates index with new mappings and settings and create alias for new index

Create Index

Request endpoint

POST /v1/index/create

Simply use your project key and API and click execute to create the indices for your project. Note that this will throw an error if the mapping in the previous step is not done correctly.

After the successful execution all the necessary index will be created and item index will be created in the background. You can check the status of item index creation with a task id from GET /v1/tasks/{task_id} API at the bottom of the page.

Please confirm the task was success.

Delete Index

You can delete an existing index with this endpoint.

Request endpoint

DELETE /v1/index/delete

Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs.

If you Delete any index, please ensure to create the index again, unless you will get error when trying to input data/item catalogue or run training.

Reindex

In Elastic search, reindexing is the process of copying data from one index to another, either within the same cluster or to a different cluster. This can be useful in a variety of situations, such as:

Updating the mapping of an index: If you need to make changes to the mapping of an index, you can create a new index with the updated mapping and then reindex the data from the old index to the new one.

Moving data from one index to another: If you need to move data from one index to another, you can reindex the data from the source index to the destination index.

Updating the data with new data: If you have updated data that you want to add to an index, you can reindex the data with the updated data.

Changing the shard count of an index: If you need to change the number of shards that an index is using, you can reindex the data to a new index with the desired number of shards.

We can use Reindex API to copy data from index to another index.

Request Endpoint:

POST /v1/reindex


Here is an example how to pass mappings and settings in request body:

{
  "index_type": "items",
  "mappings": {
    "settings": {
      "analysis": {
        "char_filter": {
          "normalize": {
            "type": "icu_normalizer",
            "name": "nfkc",
            "mode": "compose"
          }
        },
        "tokenizer": {
          "ja_kuromoji_tokenizer": {
            "mode": "search",
            "type": "kuromoji_tokenizer",
            "discard_compound_token": "true",
            "user_dictionary_rules": []
          },
          "ja_ngram_tokenizer": {
            "type": "ngram",
            "min_gram": 2,
            "max_gram": 3,
            "token_chars": [
              "letter",
              "digit"
            ]
          }
        },
        "filter": {
          "ja_index_synonym": {
            "type": "synonym",
            "lenient": "false",
            "synonyms": []
          }
        },
        "analyzer": {
          "ja_kuromoji_index_analyzer": {
            "type": "custom",
            "char_filter": [
              "normalize"
            ],
            "tokenizer": "ja_kuromoji_tokenizer",
            "filter": [
              "kuromoji_baseform",
              "kuromoji_part_of_speech",
              "ja_index_synonym",
              "cjk_width",
              "ja_stop",
              "kuromoji_stemmer",
              "lowercase"
            ]
          },
          "ja_kuromoji_search_analyzer": {
            "type": "custom",
            "char_filter": [
              "normalize"
            ],
            "tokenizer": "ja_kuromoji_tokenizer",
            "filter": [
              "kuromoji_baseform",
              "kuromoji_part_of_speech",
              "cjk_width",
              "ja_stop",
              "kuromoji_stemmer",
              "lowercase"
            ]
          },
          "ja_ngram_index_analyzer": {
            "type": "custom",
            "char_filter": [
              "normalize"
            ],
            "tokenizer": "ja_ngram_tokenizer",
            "filter": [
              "lowercase"
            ]
          },
          "ja_ngram_search_analyzer": {
            "type": "custom",
            "char_filter": [
              "normalize"
            ],
            "tokenizer": "ja_ngram_tokenizer",
            "filter": [
              "lowercase"
            ]
          }
        }
      }
    },
    "mappings": {
      "properties": {
        "item": {
          "properties": {
            "{title}": {
              "type": "text",
              "search_analyzer": "ja_kuromoji_search_analyzer",
              "analyzer": "ja_kuromoji_index_analyzer",
              "fields": {
                "ngram": {
                  "type": "text",
                  "search_analyzer": "ja_ngram_search_analyzer",
                  "analyzer": "ja_ngram_index_analyzer"
                }
              }
            },
            "{second_title}": {
              "type": "text",
              "search_analyzer": "ja_kuromoji_search_analyzer",
              "analyzer": "ja_kuromoji_index_analyzer",
              "fields": {
                "ngram": {
                  "type": "text",
                  "search_analyzer": "ja_ngram_search_analyzer",
                  "analyzer": "ja_ngram_index_analyzer"
                }
              }
            },
            "{third_title}": {
              "type": "text",
              "search_analyzer": "ja_kuromoji_search_analyzer",
              "analyzer": "ja_kuromoji_index_analyzer",
              "fields": {
                "ngram": {
                  "type": "text",
                  "search_analyzer": "ja_ngram_search_analyzer",
                  "analyzer": "ja_ngram_index_analyzer"
                }
              }
            },
            "{description}": {
              "type": "text",
              "search_analyzer": "ja_kuromoji_search_analyzer",
              "analyzer": "ja_kuromoji_index_analyzer",
              "fields": {
                "ngram": {
                  "type": "text",
                  "search_analyzer": "ja_ngram_search_analyzer",
                  "analyzer": "ja_ngram_index_analyzer"
                }
              }
            },
            "{price}": {
              "type": "float"
            },
            "{availability}": {
              "type": "boolean"
            }
          }
        }
      }
    }
  }
}

Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs. When you define the mappings object, you should use the same keys as in the item mapper that you have built with POST /v1/mapper API.

You might not need analyzers or tokenizers for all indices. You can keep the settings field empty if it is not required. Here is an example,

{
  "index_type": "search",
  "mappings": {
    "settings": {},
    "mappings": {
      "properties": {
        "date": {
          "type": "date"
        }
      }
    }
  }
}

Previous
Project setup
Next
Integration of Catalogue information and user behavior data
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/00_Setup_and_training/02_environment_setup/#delete-index
Skip to content
Gigalogy Tutorial
Environment setup
English
Japanese
Type to start searching
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Table of contents
Mapping creation
Item Catalogue Mapping
Example of this item mapper creation
Sample Code
User Behavior mapping
Index creation
Create Index
Delete Index
Reindex
Environment setup

To prepare GAIP for your site, there are 2 main steps

Mapping creation
Index creation

Info

These steps can also be done from our platform (GAIP). Refer here for detail.

For this, we will use API endpoints of GAIP listed in our Sandbox

You can also access our sandbox from the project setting page.

Mapping creation

The personalization engine relies on specific default keys to operate effectively. To integrate your item catalogue with our solution, it's essential to align your website's data source keys (such as item name, item description, tags, ingredients, category, etc.) with keys of personalization engine via mapping them. Our personalizer then can understand your data. This is the core part of the personalization system so the schema should be followed properly to successfully map your data.

Item Catalogue Mapping

To create mapping, use endpoints listed under Catalog Mapping in the sandbox.

GET /v1/mappers to get an existing Mapper.
PUT /v1/mappers to update an existing Mapper.
POST /v1/mappers to create a new mapper.

For set up your project mapping we will use POST /v1/mappers. You can find keys, value types, and description with an example request body in the sandbox You can simply replace the values in the example with your item catalogue keys and hit Execute to finish the mapping of your product catalogue Keys with GAIP keys.

After execution, confirm the server response is success.

Example of this item mapper creation

Here, we will use doozie shop as an example E-commerce site.

For an example item from the shop, this is how the data is structured.

{
  "success": true,
  "result": [
    {
      "item_id": "12345",
      "title": "Eco-Friendly Water Bottle",
      "description": "A durable, BPA-free water bottle designed for everyday use. Made from eco-friendly materials, it keeps your drink cold for up to 24 hours. Perfect for staying hydrated on the go.",
      "headline": "Stay Hydrated with Our Eco-Friendly Water Bottle",
      "availability": true,
      "affiliate_rate": 4,
      "price": 2360,
      "currency": "JPY",
      "shop_id": "hworks",
      "shop_name": "スマートビズ-ワイシャツ専門店-",
      "review_count": 2836,
      "review_average": 4.26,
      "genre_id": "206363",
      "brand": null,
      "shop_url": "https://hb.afl.rakuten.co.jp/hgc/g00rgm95.h3cpt446.g00rgm95.h3cpu696/?pc=https%3A%2F%2Fwww.rakuten.co.jp%2Fhworks%2F&m=http%3A%2F%2Fm.rakuten.co.jp%2Fhworks%2F",
      "item_url": "https://hb.afl.rakuten.co.jp/hgc/g00rgm95.h3cpt446.g00rgm95.h3cpu696/?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fhworks%2Fshirt-b0080%2F&m=http%3A%2F%2Fm.rakuten.co.jp%2Fhworks%2Fi%2F10000926%2F",
      "image_urls": [
        "https://thumbnail.image.rakuten.co.jp/@0_mall/hworks/cabinet/001/014/shirt-b0080.jpg",
        "https://thumbnail.image.rakuten.co.jp/@0_mall/hworks/cabinet/001/014/b0080-lineup.jpg",
        "https://thumbnail.image.rakuten.co.jp/@0_mall/hworks/cabinet/banner/coupon202308-shdz_sq.jpg"
      ],
      "tag_ids": [
        1000903,
        1008869,
        1039853,
        1013746
      ],
      "tags": [],
      "shipping_overseas": "",
      "condition": 1,
      "genre_name": null,
      "parent_genre_categories": null,
      "shop_review_count": null,
      "shop_review_average": null,
      "tax_included": true,
      "point_multiplier": 1,
      "best_seller": false,
      "sale_start_time": "",
      "sale_end_time": "",
      "platform": "rakuten"
    }
  ]
}


This shows the keys that doozie shop has for its products. Now we can create a mapping with GAIP keys, and use the POST /v1/mapper endpoint of GAIP. In this endpoint, we will pass the keys of above data source.

Here is an example of a mapper that we built for doozie shop, based on the keys above:

{
  "key_map": {
    "item_id": "item_id",
    "title": "title",
    "second_title": "headline",
    "third_title": "shop_name",
    "fourth_title": "genre_name",
    "availability": "availability",
    "description": "description",
    "image_url": "image_urls",
    "image_url_type": "LIST_STR",
    "item_url": "item_url",
    "price": "price",
    "categories": [
      {
        "name": "genre_id",
        "separator": ""
      }
    ],
    "custom":[],
    "flag": [
      "condition"
    ]
  }
}

Sample Code

You can find sample code for this implementation here

Once the mapper is created, you can use GET /v1/mappers endpoint to see the mapping. You can update any of mapped keys with PUT /v1/mapper endpoint and check the mapper you build from GET /v1/mapper endpoint.

User Behavior mapping

Similar to the item mapping key, there are some default keys for user behavior data.

Note

This step is required If you want to save historical user behavior data through CSV files. If you use our data collection endpoints to collect data from now on, this is not required.

You can find the Endpoints for user mapping under "Historical User Data Collection" section in the Sandbox

To implement this, please follow similar steps as above.

However, in this case please note that there are four sets of endpoints for Browsing history, purchase history, rating history, user detail. You have to create mapper for each if you want to import the data.

Index creation

In this step, you need to create indices. We need multiple indices to run recommender solution successfully. These indices will create the necessary schemas to hold your data.

There are 3 endpoints here

POST /v1/index/create --> Create indices to hold your data

DELETE /v1/index/delete --> Delete indices

POST /v1/reindex --> Creates index with new mappings and settings and create alias for new index

Create Index

Request endpoint

POST /v1/index/create

Simply use your project key and API and click execute to create the indices for your project. Note that this will throw an error if the mapping in the previous step is not done correctly.

After the successful execution all the necessary index will be created and item index will be created in the background. You can check the status of item index creation with a task id from GET /v1/tasks/{task_id} API at the bottom of the page.

Please confirm the task was success.

Delete Index

You can delete an existing index with this endpoint.

Request endpoint

DELETE /v1/index/delete

Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs.

If you Delete any index, please ensure to create the index again, unless you will get error when trying to input data/item catalogue or run training.

Reindex

In Elastic search, reindexing is the process of copying data from one index to another, either within the same cluster or to a different cluster. This can be useful in a variety of situations, such as:

Updating the mapping of an index: If you need to make changes to the mapping of an index, you can create a new index with the updated mapping and then reindex the data from the old index to the new one.

Moving data from one index to another: If you need to move data from one index to another, you can reindex the data from the source index to the destination index.

Updating the data with new data: If you have updated data that you want to add to an index, you can reindex the data with the updated data.

Changing the shard count of an index: If you need to change the number of shards that an index is using, you can reindex the data to a new index with the desired number of shards.

We can use Reindex API to copy data from index to another index.

Request Endpoint:

POST /v1/reindex


Here is an example how to pass mappings and settings in request body:

{
  "index_type": "items",
  "mappings": {
    "settings": {
      "analysis": {
        "char_filter": {
          "normalize": {
            "type": "icu_normalizer",
            "name": "nfkc",
            "mode": "compose"
          }
        },
        "tokenizer": {
          "ja_kuromoji_tokenizer": {
            "mode": "search",
            "type": "kuromoji_tokenizer",
            "discard_compound_token": "true",
            "user_dictionary_rules": []
          },
          "ja_ngram_tokenizer": {
            "type": "ngram",
            "min_gram": 2,
            "max_gram": 3,
            "token_chars": [
              "letter",
              "digit"
            ]
          }
        },
        "filter": {
          "ja_index_synonym": {
            "type": "synonym",
            "lenient": "false",
            "synonyms": []
          }
        },
        "analyzer": {
          "ja_kuromoji_index_analyzer": {
            "type": "custom",
            "char_filter": [
              "normalize"
            ],
            "tokenizer": "ja_kuromoji_tokenizer",
            "filter": [
              "kuromoji_baseform",
              "kuromoji_part_of_speech",
              "ja_index_synonym",
              "cjk_width",
              "ja_stop",
              "kuromoji_stemmer",
              "lowercase"
            ]
          },
          "ja_kuromoji_search_analyzer": {
            "type": "custom",
            "char_filter": [
              "normalize"
            ],
            "tokenizer": "ja_kuromoji_tokenizer",
            "filter": [
              "kuromoji_baseform",
              "kuromoji_part_of_speech",
              "cjk_width",
              "ja_stop",
              "kuromoji_stemmer",
              "lowercase"
            ]
          },
          "ja_ngram_index_analyzer": {
            "type": "custom",
            "char_filter": [
              "normalize"
            ],
            "tokenizer": "ja_ngram_tokenizer",
            "filter": [
              "lowercase"
            ]
          },
          "ja_ngram_search_analyzer": {
            "type": "custom",
            "char_filter": [
              "normalize"
            ],
            "tokenizer": "ja_ngram_tokenizer",
            "filter": [
              "lowercase"
            ]
          }
        }
      }
    },
    "mappings": {
      "properties": {
        "item": {
          "properties": {
            "{title}": {
              "type": "text",
              "search_analyzer": "ja_kuromoji_search_analyzer",
              "analyzer": "ja_kuromoji_index_analyzer",
              "fields": {
                "ngram": {
                  "type": "text",
                  "search_analyzer": "ja_ngram_search_analyzer",
                  "analyzer": "ja_ngram_index_analyzer"
                }
              }
            },
            "{second_title}": {
              "type": "text",
              "search_analyzer": "ja_kuromoji_search_analyzer",
              "analyzer": "ja_kuromoji_index_analyzer",
              "fields": {
                "ngram": {
                  "type": "text",
                  "search_analyzer": "ja_ngram_search_analyzer",
                  "analyzer": "ja_ngram_index_analyzer"
                }
              }
            },
            "{third_title}": {
              "type": "text",
              "search_analyzer": "ja_kuromoji_search_analyzer",
              "analyzer": "ja_kuromoji_index_analyzer",
              "fields": {
                "ngram": {
                  "type": "text",
                  "search_analyzer": "ja_ngram_search_analyzer",
                  "analyzer": "ja_ngram_index_analyzer"
                }
              }
            },
            "{description}": {
              "type": "text",
              "search_analyzer": "ja_kuromoji_search_analyzer",
              "analyzer": "ja_kuromoji_index_analyzer",
              "fields": {
                "ngram": {
                  "type": "text",
                  "search_analyzer": "ja_ngram_search_analyzer",
                  "analyzer": "ja_ngram_index_analyzer"
                }
              }
            },
            "{price}": {
              "type": "float"
            },
            "{availability}": {
              "type": "boolean"
            }
          }
        }
      }
    }
  }
}

Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs. When you define the mappings object, you should use the same keys as in the item mapper that you have built with POST /v1/mapper API.

You might not need analyzers or tokenizers for all indices. You can keep the settings field empty if it is not required. Here is an example,

{
  "index_type": "search",
  "mappings": {
    "settings": {},
    "mappings": {
      "properties": {
        "date": {
          "type": "date"
        }
      }
    }
  }
}

Previous
Project setup
Next
Integration of Catalogue information and user behavior data
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/00_Setup_and_training/02_environment_setup/#reindex
Skip to content
Gigalogy Tutorial
Environment setup
English
Japanese
Type to start searching
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Table of contents
Mapping creation
Item Catalogue Mapping
Example of this item mapper creation
Sample Code
User Behavior mapping
Index creation
Create Index
Delete Index
Reindex
Environment setup

To prepare GAIP for your site, there are 2 main steps

Mapping creation
Index creation

Info

These steps can also be done from our platform (GAIP). Refer here for detail.

For this, we will use API endpoints of GAIP listed in our Sandbox

You can also access our sandbox from the project setting page.

Mapping creation

The personalization engine relies on specific default keys to operate effectively. To integrate your item catalogue with our solution, it's essential to align your website's data source keys (such as item name, item description, tags, ingredients, category, etc.) with keys of personalization engine via mapping them. Our personalizer then can understand your data. This is the core part of the personalization system so the schema should be followed properly to successfully map your data.

Item Catalogue Mapping

To create mapping, use endpoints listed under Catalog Mapping in the sandbox.

GET /v1/mappers to get an existing Mapper.
PUT /v1/mappers to update an existing Mapper.
POST /v1/mappers to create a new mapper.

For set up your project mapping we will use POST /v1/mappers. You can find keys, value types, and description with an example request body in the sandbox You can simply replace the values in the example with your item catalogue keys and hit Execute to finish the mapping of your product catalogue Keys with GAIP keys.

After execution, confirm the server response is success.

Example of this item mapper creation

Here, we will use doozie shop as an example E-commerce site.

For an example item from the shop, this is how the data is structured.

{
  "success": true,
  "result": [
    {
      "item_id": "12345",
      "title": "Eco-Friendly Water Bottle",
      "description": "A durable, BPA-free water bottle designed for everyday use. Made from eco-friendly materials, it keeps your drink cold for up to 24 hours. Perfect for staying hydrated on the go.",
      "headline": "Stay Hydrated with Our Eco-Friendly Water Bottle",
      "availability": true,
      "affiliate_rate": 4,
      "price": 2360,
      "currency": "JPY",
      "shop_id": "hworks",
      "shop_name": "スマートビズ-ワイシャツ専門店-",
      "review_count": 2836,
      "review_average": 4.26,
      "genre_id": "206363",
      "brand": null,
      "shop_url": "https://hb.afl.rakuten.co.jp/hgc/g00rgm95.h3cpt446.g00rgm95.h3cpu696/?pc=https%3A%2F%2Fwww.rakuten.co.jp%2Fhworks%2F&m=http%3A%2F%2Fm.rakuten.co.jp%2Fhworks%2F",
      "item_url": "https://hb.afl.rakuten.co.jp/hgc/g00rgm95.h3cpt446.g00rgm95.h3cpu696/?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fhworks%2Fshirt-b0080%2F&m=http%3A%2F%2Fm.rakuten.co.jp%2Fhworks%2Fi%2F10000926%2F",
      "image_urls": [
        "https://thumbnail.image.rakuten.co.jp/@0_mall/hworks/cabinet/001/014/shirt-b0080.jpg",
        "https://thumbnail.image.rakuten.co.jp/@0_mall/hworks/cabinet/001/014/b0080-lineup.jpg",
        "https://thumbnail.image.rakuten.co.jp/@0_mall/hworks/cabinet/banner/coupon202308-shdz_sq.jpg"
      ],
      "tag_ids": [
        1000903,
        1008869,
        1039853,
        1013746
      ],
      "tags": [],
      "shipping_overseas": "",
      "condition": 1,
      "genre_name": null,
      "parent_genre_categories": null,
      "shop_review_count": null,
      "shop_review_average": null,
      "tax_included": true,
      "point_multiplier": 1,
      "best_seller": false,
      "sale_start_time": "",
      "sale_end_time": "",
      "platform": "rakuten"
    }
  ]
}


This shows the keys that doozie shop has for its products. Now we can create a mapping with GAIP keys, and use the POST /v1/mapper endpoint of GAIP. In this endpoint, we will pass the keys of above data source.

Here is an example of a mapper that we built for doozie shop, based on the keys above:

{
  "key_map": {
    "item_id": "item_id",
    "title": "title",
    "second_title": "headline",
    "third_title": "shop_name",
    "fourth_title": "genre_name",
    "availability": "availability",
    "description": "description",
    "image_url": "image_urls",
    "image_url_type": "LIST_STR",
    "item_url": "item_url",
    "price": "price",
    "categories": [
      {
        "name": "genre_id",
        "separator": ""
      }
    ],
    "custom":[],
    "flag": [
      "condition"
    ]
  }
}

Sample Code

You can find sample code for this implementation here

Once the mapper is created, you can use GET /v1/mappers endpoint to see the mapping. You can update any of mapped keys with PUT /v1/mapper endpoint and check the mapper you build from GET /v1/mapper endpoint.

User Behavior mapping

Similar to the item mapping key, there are some default keys for user behavior data.

Note

This step is required If you want to save historical user behavior data through CSV files. If you use our data collection endpoints to collect data from now on, this is not required.

You can find the Endpoints for user mapping under "Historical User Data Collection" section in the Sandbox

To implement this, please follow similar steps as above.

However, in this case please note that there are four sets of endpoints for Browsing history, purchase history, rating history, user detail. You have to create mapper for each if you want to import the data.

Index creation

In this step, you need to create indices. We need multiple indices to run recommender solution successfully. These indices will create the necessary schemas to hold your data.

There are 3 endpoints here

POST /v1/index/create --> Create indices to hold your data

DELETE /v1/index/delete --> Delete indices

POST /v1/reindex --> Creates index with new mappings and settings and create alias for new index

Create Index

Request endpoint

POST /v1/index/create

Simply use your project key and API and click execute to create the indices for your project. Note that this will throw an error if the mapping in the previous step is not done correctly.

After the successful execution all the necessary index will be created and item index will be created in the background. You can check the status of item index creation with a task id from GET /v1/tasks/{task_id} API at the bottom of the page.

Please confirm the task was success.

Delete Index

You can delete an existing index with this endpoint.

Request endpoint

DELETE /v1/index/delete

Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs.

If you Delete any index, please ensure to create the index again, unless you will get error when trying to input data/item catalogue or run training.

Reindex

In Elastic search, reindexing is the process of copying data from one index to another, either within the same cluster or to a different cluster. This can be useful in a variety of situations, such as:

Updating the mapping of an index: If you need to make changes to the mapping of an index, you can create a new index with the updated mapping and then reindex the data from the old index to the new one.

Moving data from one index to another: If you need to move data from one index to another, you can reindex the data from the source index to the destination index.

Updating the data with new data: If you have updated data that you want to add to an index, you can reindex the data with the updated data.

Changing the shard count of an index: If you need to change the number of shards that an index is using, you can reindex the data to a new index with the desired number of shards.

We can use Reindex API to copy data from index to another index.

Request Endpoint:

POST /v1/reindex


Here is an example how to pass mappings and settings in request body:

{
  "index_type": "items",
  "mappings": {
    "settings": {
      "analysis": {
        "char_filter": {
          "normalize": {
            "type": "icu_normalizer",
            "name": "nfkc",
            "mode": "compose"
          }
        },
        "tokenizer": {
          "ja_kuromoji_tokenizer": {
            "mode": "search",
            "type": "kuromoji_tokenizer",
            "discard_compound_token": "true",
            "user_dictionary_rules": []
          },
          "ja_ngram_tokenizer": {
            "type": "ngram",
            "min_gram": 2,
            "max_gram": 3,
            "token_chars": [
              "letter",
              "digit"
            ]
          }
        },
        "filter": {
          "ja_index_synonym": {
            "type": "synonym",
            "lenient": "false",
            "synonyms": []
          }
        },
        "analyzer": {
          "ja_kuromoji_index_analyzer": {
            "type": "custom",
            "char_filter": [
              "normalize"
            ],
            "tokenizer": "ja_kuromoji_tokenizer",
            "filter": [
              "kuromoji_baseform",
              "kuromoji_part_of_speech",
              "ja_index_synonym",
              "cjk_width",
              "ja_stop",
              "kuromoji_stemmer",
              "lowercase"
            ]
          },
          "ja_kuromoji_search_analyzer": {
            "type": "custom",
            "char_filter": [
              "normalize"
            ],
            "tokenizer": "ja_kuromoji_tokenizer",
            "filter": [
              "kuromoji_baseform",
              "kuromoji_part_of_speech",
              "cjk_width",
              "ja_stop",
              "kuromoji_stemmer",
              "lowercase"
            ]
          },
          "ja_ngram_index_analyzer": {
            "type": "custom",
            "char_filter": [
              "normalize"
            ],
            "tokenizer": "ja_ngram_tokenizer",
            "filter": [
              "lowercase"
            ]
          },
          "ja_ngram_search_analyzer": {
            "type": "custom",
            "char_filter": [
              "normalize"
            ],
            "tokenizer": "ja_ngram_tokenizer",
            "filter": [
              "lowercase"
            ]
          }
        }
      }
    },
    "mappings": {
      "properties": {
        "item": {
          "properties": {
            "{title}": {
              "type": "text",
              "search_analyzer": "ja_kuromoji_search_analyzer",
              "analyzer": "ja_kuromoji_index_analyzer",
              "fields": {
                "ngram": {
                  "type": "text",
                  "search_analyzer": "ja_ngram_search_analyzer",
                  "analyzer": "ja_ngram_index_analyzer"
                }
              }
            },
            "{second_title}": {
              "type": "text",
              "search_analyzer": "ja_kuromoji_search_analyzer",
              "analyzer": "ja_kuromoji_index_analyzer",
              "fields": {
                "ngram": {
                  "type": "text",
                  "search_analyzer": "ja_ngram_search_analyzer",
                  "analyzer": "ja_ngram_index_analyzer"
                }
              }
            },
            "{third_title}": {
              "type": "text",
              "search_analyzer": "ja_kuromoji_search_analyzer",
              "analyzer": "ja_kuromoji_index_analyzer",
              "fields": {
                "ngram": {
                  "type": "text",
                  "search_analyzer": "ja_ngram_search_analyzer",
                  "analyzer": "ja_ngram_index_analyzer"
                }
              }
            },
            "{description}": {
              "type": "text",
              "search_analyzer": "ja_kuromoji_search_analyzer",
              "analyzer": "ja_kuromoji_index_analyzer",
              "fields": {
                "ngram": {
                  "type": "text",
                  "search_analyzer": "ja_ngram_search_analyzer",
                  "analyzer": "ja_ngram_index_analyzer"
                }
              }
            },
            "{price}": {
              "type": "float"
            },
            "{availability}": {
              "type": "boolean"
            }
          }
        }
      }
    }
  }
}

Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs. When you define the mappings object, you should use the same keys as in the item mapper that you have built with POST /v1/mapper API.

You might not need analyzers or tokenizers for all indices. You can keep the settings field empty if it is not required. Here is an example,

{
  "index_type": "search",
  "mappings": {
    "settings": {},
    "mappings": {
      "properties": {
        "date": {
          "type": "date"
        }
      }
    }
  }
}

Previous
Project setup
Next
Integration of Catalogue information and user behavior data
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/00_Setup_and_training/03_Data_integration_%26_user_behavior_collection/
Skip to content
Gigalogy Tutorial
Integration of Catalogue information and user behavior data
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Table of contents
Catalogue information integration.
Uploading data using a file
Fetch item from external API
Search Items in GAIP after import
User behavior data collection integration
Comparison of each approach.
Google Tag manager
Generating user ID
Collecting and sending user browsing data
Collecting and sending user purchase data
Collecting and sending user rating data
Collecting and sending user data
Server to server integration
User information
Product browse
Product purchase
Product rating
Client to server integration
Import user behavior data
Integration of Catalogue information and user behavior data

This tutorial will cover how to integrate your catalogue information into GAIP and how to set up user behavior tracking and integrate with GAIP.

Catalogue information integration.

Prerequisite: Mapping creation and the index creation is done.

Info

This step can also be done from our platform (GAIP). Refer here for detail.

There are two ways to import your catalogue information into GAIP.

Upload you catalogue information as a CSV or JSON file using endpoint POST /v1/item/save.
Fetch data from your API (or any external API) using endpoint POST /v1/item/save/remote.
Uploading data using a file

For uploading the data using a CSV file or JSON file, please use the POST /v1/item/save endpoint. Simply upload the file and confirm the server response is success. Confirm the task was successful using the GET/v1/tasks/{task_id} endpoint.

Info

This will throw an error and task will fail, if the keys during the Mapping creation step does not match with the keys in the file, OR if the indices were not created succesfully.

Fetch item from external API

To fetch data from external API, use the POST /v1/item/save/remote endpoint. The key and value types and an example request body for the endpoint can be found here in our sandbox.

After hitting either of the endpoint above to import your data into GAIP, you will get a task ID in the response. Use this task ID and hit the /v1/tasks/{task_id} endpoint to confirm the operation was successful. In case it fails, you can also find the details there. For API documentation, please refer <>

Search Items in GAIP after import

You can search items by passing list of item ids fromPOST /v1/items/search endpoint. This endpoint will return searched items with item details.

It is recommended to use this endpoint to confirm that the item catalogue is successfully imported into your project.

User behavior data collection integration

GAIP can collect different user behavior related information to optimize the recommendation for the user. Types of data collected are listed below with their endpoints.

Data type	Endpoint
Product browsing: When user browse products.	/v1/items/browse or /v1/items/browse/client
Product Purchase: When user purchase a product with its quantity.	/v1/items/purchase or /v1/items/purchase/client
Rating: When a user rates a product.	/v1/items/rating or /v1/items/rating/client
User: User information such as age, gender and other customized attributes depending on your website.	/v1/users or /v1/users/client

You will find these endpoints listed in our Sandbox under section "User Data Collection". Please check the required parameters, value types and example request bodies for all the endpoints there.

There are 3 ways to integrate user behavior data collection with GAIP

Google Tag Manager
Server to server integration
Client to server integration

You can also bulk upload user behavior data from the past. For that, please refer to Import user behavior data section.

Comparison of each approach.
Approach	GTM	Server to Server	Client to Server
Description	Use Google Tag Manager (GTM) to collect data (User behavior) from your website and send it to GAIP via endpoint.	The data is captured in the backend server of your application and then sent to GAIP via endpoint.	The data is directly sent from your front end (Client side) to GAIP via endpoint.
Pros	Easy to implement, Minimum coding required, Flexible configuration	More secure, Data integrity, Controlled environment	Real-time data, Less server dependency
Cons	Limited customization, need to have basic knowledge about GTM, Dependency on third-party service, Might not work for certain browsers and plugins like AdBlockers	More complex to set up, potential latency, maintenance required	Less secure, Potential for inconsistent data, dependency on client-side behavior

Below we will show the implementation of each approach.

BE ADVISED: The following is a general guideline, and it may vary across different websites, contingent upon the specific implementation of your website.

Google Tag manager

Prerequisite: Your website must have GTM setup. If you do not have GTM setup, you can easily do the setup by following the guidelines here.

If you are not familiar with basic GTM concepts, such as Tags, Triggers and Variables, please familiarize yourself first with these concepts before proceeding with this approach. You can find more resources related to this here.

Generating user ID

In our sandbox, Notice that in the user data collection endpoints, every endpoint has a parameter called user_id, and member_id. These are vital to identify each user so that you can personalize their experience. user_id is generated by GAIP for each user of your site. The endpoint to generate and user_id is GET /v1/users/generate/id. You can generate the user_id using GTM using below code. This code can be used with every Tag, which checks if there is a user_id and creates one if there is none.

// Function to get or generate 'gaip_user_id' using a function expression
var getGaipUser = function() {
  return new Promise(function(resolve, reject) {
    if (gaipUser !== null) {
      resolve(gaipUser);
    } else {
      var idHeaders = new Headers();
      idHeaders.append("project-key", "{{ YOUR_PROJECT_KEY_HERE }}");
      idHeaders.append("api-key", "{{ YOUR_API_KEY_HERE }}");
      fetch("https://api.recommender.gigalogy.com/v1/users/generate/id", { headers: idHeaders })
      .then(function(response) {
        return response.json();
      })
      .then(function(data) {
        localStorage.setItem('gaip_user_id', data.detail.response);
        resolve(data.detail.response);
      })
      .catch(reject);
    }
  });
};


member_id can be set by you depending on how your site identifies unique users such as user ID, phone number, email address etc.

Collecting and sending user browsing data

Set up a variable to capture the product name/title/ID, when the user goes a product details page or clicks on a product to enlarge it or open a pop-up etc.

Set up a trigger so that the tag would fire when the user goes browses an item (Go to product detail page or quick view options etc.).

Create a custom HTML Tag with the above trigger and variable and put the below code in the tag.

Collecting and sending user purchase data

Set up a variable to capture the all the purchase detail, when the user makes a purchase. This could be from the purchase confirmation page etc.

Set up a trigger so that the tag would fire when the user make the purchase.

Create a custom HTML Tag with the above trigger to send the information to endpoint POST /v1/purchase or POST /v1/purchase/client

Collecting and sending user rating data

Setup variables to capture the product name/title/ID and the rating, when the user rates an item positively or negatively. We can also consider an item is positively rated when user adds the item to wishlist.

Set up a trigger for the tag to fire when the user rates a product.

Create a custom HTML Tag with the above trigger and variables to send the information to the endpoint POST /v1/rating or POST /v1/rating/client

Collecting and sending user data

Setup variable to capture the user information.

For this, the trigger could be setup up when the user logs or update their information.

Create a custom HTML Tag with the above trigger and variables to send the information to the endpoint POST /v1/user or POST /v1/user/client

Server to server integration

For server to server integration, you will need to generate Project key and API as mentioned in the credentials section.

User information

The below request path, takes user information, such as name, age, gender, address and saves them in the gaip database.

POST /v1/user


Here is an example request body

{
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "user_info": {
    "address": "string",
    "gender": "integer --> 1 for male or 2 for female or 3 for others",
    "age": 25,
    "user_type": [
      {
        "key_name1": "value1_value2",
        "separator": "_"
      },
      {
        "key_name2": "value3"
      }
    ]
  }
}

You can find the sample code for implementation here

Product browse

You can use the below endpoint to capture user browsing information and save them in GAIP database

POST /v1/items/browse


It takes user_id and item_id as required parameters.

Here is an example value of the request body

  {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "item_id": "1000764491"
  }


You can find sample code here

Product purchase

You can use the below endpoint to capture user's product purchase information and save them in GAIP database

POST /v1/purchase

It takes user_id, item_list which includes item_id, price, quantity for a specific item as required parameters.

Here is an example request body

  {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "item_list": [
      {
        "item_id": "1000757666",
        "price": 5000,
        "quantity": 1
      },
      {
        "item_id": "1000764491",
        "price": 400,
        "quantity": 7
      }
    ]
  }


You a find sample code for this implementation here

Product rating

You can use the below endpoint to capture user's product rating information and save them in GAIP database

POST /v1/rating


It takes user_id, item_id, and rating for the specific item as required parameters.

Here is a sample request body

{
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "item_id": "1000764491",
  "rating": "1"
}


You can find the sample code for this implementation here

If you want to save your data with bulk upload you can use above-mentioned endpoint.

Client to server integration

For client to server integration, you will need to generate client key as described in the Credentials sections. Once the client key is ready, you can directly send the request from your client side to GAIP, using the client key provided.

Note that while generating client key, you can add whitelisted domains, which whitelists the request origin. This is recommended to enhance security.

The rest of the implementation method is same as server to server integration.

Import user behavior data

Similar to data integration, all 4 kinds of user information (browse, purchase, rating, user) can be bulk uploaded. This could be useful if you already have this information from the past and want to import it into GAIP.

To import user behavior and user information in bulk, first you need to create mapper to match the keys with GAIP.

To create the mapper, the endpoints with the example request bodies can be found here in the gigalogy recommender page. You can also find the sample codes for mapper creation here in the API documentation page

Next we will use the below 4 endpoints to upload each category of data in bulk

Request path for product browsing history: POST /v1/items/browse/save
Request path for purchase history: POST /v1/items/purchase/save
Request path for rating history: POST /v1/items/rating/save
Request path to upload user information in bulk: POST /v1/users/save

You can find these endpoints with the example request bodies here. The sample code can be found here in the API documentation page

Previous
Environment setup
Next
Training your data
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/00_Setup_and_training/03_Data_integration_%26_user_behavior_collection/#integration-of-catalogue-information-and-user-behavior-data
Skip to content
Gigalogy Tutorial
Integration of Catalogue information and user behavior data
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Table of contents
Catalogue information integration.
Uploading data using a file
Fetch item from external API
Search Items in GAIP after import
User behavior data collection integration
Comparison of each approach.
Google Tag manager
Generating user ID
Collecting and sending user browsing data
Collecting and sending user purchase data
Collecting and sending user rating data
Collecting and sending user data
Server to server integration
User information
Product browse
Product purchase
Product rating
Client to server integration
Import user behavior data
Integration of Catalogue information and user behavior data

This tutorial will cover how to integrate your catalogue information into GAIP and how to set up user behavior tracking and integrate with GAIP.

Catalogue information integration.

Prerequisite: Mapping creation and the index creation is done.

Info

This step can also be done from our platform (GAIP). Refer here for detail.

There are two ways to import your catalogue information into GAIP.

Upload you catalogue information as a CSV or JSON file using endpoint POST /v1/item/save.
Fetch data from your API (or any external API) using endpoint POST /v1/item/save/remote.
Uploading data using a file

For uploading the data using a CSV file or JSON file, please use the POST /v1/item/save endpoint. Simply upload the file and confirm the server response is success. Confirm the task was successful using the GET/v1/tasks/{task_id} endpoint.

Info

This will throw an error and task will fail, if the keys during the Mapping creation step does not match with the keys in the file, OR if the indices were not created succesfully.

Fetch item from external API

To fetch data from external API, use the POST /v1/item/save/remote endpoint. The key and value types and an example request body for the endpoint can be found here in our sandbox.

After hitting either of the endpoint above to import your data into GAIP, you will get a task ID in the response. Use this task ID and hit the /v1/tasks/{task_id} endpoint to confirm the operation was successful. In case it fails, you can also find the details there. For API documentation, please refer <>

Search Items in GAIP after import

You can search items by passing list of item ids fromPOST /v1/items/search endpoint. This endpoint will return searched items with item details.

It is recommended to use this endpoint to confirm that the item catalogue is successfully imported into your project.

User behavior data collection integration

GAIP can collect different user behavior related information to optimize the recommendation for the user. Types of data collected are listed below with their endpoints.

Data type	Endpoint
Product browsing: When user browse products.	/v1/items/browse or /v1/items/browse/client
Product Purchase: When user purchase a product with its quantity.	/v1/items/purchase or /v1/items/purchase/client
Rating: When a user rates a product.	/v1/items/rating or /v1/items/rating/client
User: User information such as age, gender and other customized attributes depending on your website.	/v1/users or /v1/users/client

You will find these endpoints listed in our Sandbox under section "User Data Collection". Please check the required parameters, value types and example request bodies for all the endpoints there.

There are 3 ways to integrate user behavior data collection with GAIP

Google Tag Manager
Server to server integration
Client to server integration

You can also bulk upload user behavior data from the past. For that, please refer to Import user behavior data section.

Comparison of each approach.
Approach	GTM	Server to Server	Client to Server
Description	Use Google Tag Manager (GTM) to collect data (User behavior) from your website and send it to GAIP via endpoint.	The data is captured in the backend server of your application and then sent to GAIP via endpoint.	The data is directly sent from your front end (Client side) to GAIP via endpoint.
Pros	Easy to implement, Minimum coding required, Flexible configuration	More secure, Data integrity, Controlled environment	Real-time data, Less server dependency
Cons	Limited customization, need to have basic knowledge about GTM, Dependency on third-party service, Might not work for certain browsers and plugins like AdBlockers	More complex to set up, potential latency, maintenance required	Less secure, Potential for inconsistent data, dependency on client-side behavior

Below we will show the implementation of each approach.

BE ADVISED: The following is a general guideline, and it may vary across different websites, contingent upon the specific implementation of your website.

Google Tag manager

Prerequisite: Your website must have GTM setup. If you do not have GTM setup, you can easily do the setup by following the guidelines here.

If you are not familiar with basic GTM concepts, such as Tags, Triggers and Variables, please familiarize yourself first with these concepts before proceeding with this approach. You can find more resources related to this here.

Generating user ID

In our sandbox, Notice that in the user data collection endpoints, every endpoint has a parameter called user_id, and member_id. These are vital to identify each user so that you can personalize their experience. user_id is generated by GAIP for each user of your site. The endpoint to generate and user_id is GET /v1/users/generate/id. You can generate the user_id using GTM using below code. This code can be used with every Tag, which checks if there is a user_id and creates one if there is none.

// Function to get or generate 'gaip_user_id' using a function expression
var getGaipUser = function() {
  return new Promise(function(resolve, reject) {
    if (gaipUser !== null) {
      resolve(gaipUser);
    } else {
      var idHeaders = new Headers();
      idHeaders.append("project-key", "{{ YOUR_PROJECT_KEY_HERE }}");
      idHeaders.append("api-key", "{{ YOUR_API_KEY_HERE }}");
      fetch("https://api.recommender.gigalogy.com/v1/users/generate/id", { headers: idHeaders })
      .then(function(response) {
        return response.json();
      })
      .then(function(data) {
        localStorage.setItem('gaip_user_id', data.detail.response);
        resolve(data.detail.response);
      })
      .catch(reject);
    }
  });
};


member_id can be set by you depending on how your site identifies unique users such as user ID, phone number, email address etc.

Collecting and sending user browsing data

Set up a variable to capture the product name/title/ID, when the user goes a product details page or clicks on a product to enlarge it or open a pop-up etc.

Set up a trigger so that the tag would fire when the user goes browses an item (Go to product detail page or quick view options etc.).

Create a custom HTML Tag with the above trigger and variable and put the below code in the tag.

Collecting and sending user purchase data

Set up a variable to capture the all the purchase detail, when the user makes a purchase. This could be from the purchase confirmation page etc.

Set up a trigger so that the tag would fire when the user make the purchase.

Create a custom HTML Tag with the above trigger to send the information to endpoint POST /v1/purchase or POST /v1/purchase/client

Collecting and sending user rating data

Setup variables to capture the product name/title/ID and the rating, when the user rates an item positively or negatively. We can also consider an item is positively rated when user adds the item to wishlist.

Set up a trigger for the tag to fire when the user rates a product.

Create a custom HTML Tag with the above trigger and variables to send the information to the endpoint POST /v1/rating or POST /v1/rating/client

Collecting and sending user data

Setup variable to capture the user information.

For this, the trigger could be setup up when the user logs or update their information.

Create a custom HTML Tag with the above trigger and variables to send the information to the endpoint POST /v1/user or POST /v1/user/client

Server to server integration

For server to server integration, you will need to generate Project key and API as mentioned in the credentials section.

User information

The below request path, takes user information, such as name, age, gender, address and saves them in the gaip database.

POST /v1/user


Here is an example request body

{
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "user_info": {
    "address": "string",
    "gender": "integer --> 1 for male or 2 for female or 3 for others",
    "age": 25,
    "user_type": [
      {
        "key_name1": "value1_value2",
        "separator": "_"
      },
      {
        "key_name2": "value3"
      }
    ]
  }
}

You can find the sample code for implementation here

Product browse

You can use the below endpoint to capture user browsing information and save them in GAIP database

POST /v1/items/browse


It takes user_id and item_id as required parameters.

Here is an example value of the request body

  {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "item_id": "1000764491"
  }


You can find sample code here

Product purchase

You can use the below endpoint to capture user's product purchase information and save them in GAIP database

POST /v1/purchase

It takes user_id, item_list which includes item_id, price, quantity for a specific item as required parameters.

Here is an example request body

  {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "item_list": [
      {
        "item_id": "1000757666",
        "price": 5000,
        "quantity": 1
      },
      {
        "item_id": "1000764491",
        "price": 400,
        "quantity": 7
      }
    ]
  }


You a find sample code for this implementation here

Product rating

You can use the below endpoint to capture user's product rating information and save them in GAIP database

POST /v1/rating


It takes user_id, item_id, and rating for the specific item as required parameters.

Here is a sample request body

{
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "item_id": "1000764491",
  "rating": "1"
}


You can find the sample code for this implementation here

If you want to save your data with bulk upload you can use above-mentioned endpoint.

Client to server integration

For client to server integration, you will need to generate client key as described in the Credentials sections. Once the client key is ready, you can directly send the request from your client side to GAIP, using the client key provided.

Note that while generating client key, you can add whitelisted domains, which whitelists the request origin. This is recommended to enhance security.

The rest of the implementation method is same as server to server integration.

Import user behavior data

Similar to data integration, all 4 kinds of user information (browse, purchase, rating, user) can be bulk uploaded. This could be useful if you already have this information from the past and want to import it into GAIP.

To import user behavior and user information in bulk, first you need to create mapper to match the keys with GAIP.

To create the mapper, the endpoints with the example request bodies can be found here in the gigalogy recommender page. You can also find the sample codes for mapper creation here in the API documentation page

Next we will use the below 4 endpoints to upload each category of data in bulk

Request path for product browsing history: POST /v1/items/browse/save
Request path for purchase history: POST /v1/items/purchase/save
Request path for rating history: POST /v1/items/rating/save
Request path to upload user information in bulk: POST /v1/users/save

You can find these endpoints with the example request bodies here. The sample code can be found here in the API documentation page

Previous
Environment setup
Next
Training your data
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/00_Setup_and_training/03_Data_integration_%26_user_behavior_collection/#catalogue-information-integration
Skip to content
Gigalogy Tutorial
Integration of Catalogue information and user behavior data
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Table of contents
Catalogue information integration.
Uploading data using a file
Fetch item from external API
Search Items in GAIP after import
User behavior data collection integration
Comparison of each approach.
Google Tag manager
Generating user ID
Collecting and sending user browsing data
Collecting and sending user purchase data
Collecting and sending user rating data
Collecting and sending user data
Server to server integration
User information
Product browse
Product purchase
Product rating
Client to server integration
Import user behavior data
Integration of Catalogue information and user behavior data

This tutorial will cover how to integrate your catalogue information into GAIP and how to set up user behavior tracking and integrate with GAIP.

Catalogue information integration.

Prerequisite: Mapping creation and the index creation is done.

Info

This step can also be done from our platform (GAIP). Refer here for detail.

There are two ways to import your catalogue information into GAIP.

Upload you catalogue information as a CSV or JSON file using endpoint POST /v1/item/save.
Fetch data from your API (or any external API) using endpoint POST /v1/item/save/remote.
Uploading data using a file

For uploading the data using a CSV file or JSON file, please use the POST /v1/item/save endpoint. Simply upload the file and confirm the server response is success. Confirm the task was successful using the GET/v1/tasks/{task_id} endpoint.

Info

This will throw an error and task will fail, if the keys during the Mapping creation step does not match with the keys in the file, OR if the indices were not created succesfully.

Fetch item from external API

To fetch data from external API, use the POST /v1/item/save/remote endpoint. The key and value types and an example request body for the endpoint can be found here in our sandbox.

After hitting either of the endpoint above to import your data into GAIP, you will get a task ID in the response. Use this task ID and hit the /v1/tasks/{task_id} endpoint to confirm the operation was successful. In case it fails, you can also find the details there. For API documentation, please refer <>

Search Items in GAIP after import

You can search items by passing list of item ids fromPOST /v1/items/search endpoint. This endpoint will return searched items with item details.

It is recommended to use this endpoint to confirm that the item catalogue is successfully imported into your project.

User behavior data collection integration

GAIP can collect different user behavior related information to optimize the recommendation for the user. Types of data collected are listed below with their endpoints.

Data type	Endpoint
Product browsing: When user browse products.	/v1/items/browse or /v1/items/browse/client
Product Purchase: When user purchase a product with its quantity.	/v1/items/purchase or /v1/items/purchase/client
Rating: When a user rates a product.	/v1/items/rating or /v1/items/rating/client
User: User information such as age, gender and other customized attributes depending on your website.	/v1/users or /v1/users/client

You will find these endpoints listed in our Sandbox under section "User Data Collection". Please check the required parameters, value types and example request bodies for all the endpoints there.

There are 3 ways to integrate user behavior data collection with GAIP

Google Tag Manager
Server to server integration
Client to server integration

You can also bulk upload user behavior data from the past. For that, please refer to Import user behavior data section.

Comparison of each approach.
Approach	GTM	Server to Server	Client to Server
Description	Use Google Tag Manager (GTM) to collect data (User behavior) from your website and send it to GAIP via endpoint.	The data is captured in the backend server of your application and then sent to GAIP via endpoint.	The data is directly sent from your front end (Client side) to GAIP via endpoint.
Pros	Easy to implement, Minimum coding required, Flexible configuration	More secure, Data integrity, Controlled environment	Real-time data, Less server dependency
Cons	Limited customization, need to have basic knowledge about GTM, Dependency on third-party service, Might not work for certain browsers and plugins like AdBlockers	More complex to set up, potential latency, maintenance required	Less secure, Potential for inconsistent data, dependency on client-side behavior

Below we will show the implementation of each approach.

BE ADVISED: The following is a general guideline, and it may vary across different websites, contingent upon the specific implementation of your website.

Google Tag manager

Prerequisite: Your website must have GTM setup. If you do not have GTM setup, you can easily do the setup by following the guidelines here.

If you are not familiar with basic GTM concepts, such as Tags, Triggers and Variables, please familiarize yourself first with these concepts before proceeding with this approach. You can find more resources related to this here.

Generating user ID

In our sandbox, Notice that in the user data collection endpoints, every endpoint has a parameter called user_id, and member_id. These are vital to identify each user so that you can personalize their experience. user_id is generated by GAIP for each user of your site. The endpoint to generate and user_id is GET /v1/users/generate/id. You can generate the user_id using GTM using below code. This code can be used with every Tag, which checks if there is a user_id and creates one if there is none.

// Function to get or generate 'gaip_user_id' using a function expression
var getGaipUser = function() {
  return new Promise(function(resolve, reject) {
    if (gaipUser !== null) {
      resolve(gaipUser);
    } else {
      var idHeaders = new Headers();
      idHeaders.append("project-key", "{{ YOUR_PROJECT_KEY_HERE }}");
      idHeaders.append("api-key", "{{ YOUR_API_KEY_HERE }}");
      fetch("https://api.recommender.gigalogy.com/v1/users/generate/id", { headers: idHeaders })
      .then(function(response) {
        return response.json();
      })
      .then(function(data) {
        localStorage.setItem('gaip_user_id', data.detail.response);
        resolve(data.detail.response);
      })
      .catch(reject);
    }
  });
};


member_id can be set by you depending on how your site identifies unique users such as user ID, phone number, email address etc.

Collecting and sending user browsing data

Set up a variable to capture the product name/title/ID, when the user goes a product details page or clicks on a product to enlarge it or open a pop-up etc.

Set up a trigger so that the tag would fire when the user goes browses an item (Go to product detail page or quick view options etc.).

Create a custom HTML Tag with the above trigger and variable and put the below code in the tag.

Collecting and sending user purchase data

Set up a variable to capture the all the purchase detail, when the user makes a purchase. This could be from the purchase confirmation page etc.

Set up a trigger so that the tag would fire when the user make the purchase.

Create a custom HTML Tag with the above trigger to send the information to endpoint POST /v1/purchase or POST /v1/purchase/client

Collecting and sending user rating data

Setup variables to capture the product name/title/ID and the rating, when the user rates an item positively or negatively. We can also consider an item is positively rated when user adds the item to wishlist.

Set up a trigger for the tag to fire when the user rates a product.

Create a custom HTML Tag with the above trigger and variables to send the information to the endpoint POST /v1/rating or POST /v1/rating/client

Collecting and sending user data

Setup variable to capture the user information.

For this, the trigger could be setup up when the user logs or update their information.

Create a custom HTML Tag with the above trigger and variables to send the information to the endpoint POST /v1/user or POST /v1/user/client

Server to server integration

For server to server integration, you will need to generate Project key and API as mentioned in the credentials section.

User information

The below request path, takes user information, such as name, age, gender, address and saves them in the gaip database.

POST /v1/user


Here is an example request body

{
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "user_info": {
    "address": "string",
    "gender": "integer --> 1 for male or 2 for female or 3 for others",
    "age": 25,
    "user_type": [
      {
        "key_name1": "value1_value2",
        "separator": "_"
      },
      {
        "key_name2": "value3"
      }
    ]
  }
}

You can find the sample code for implementation here

Product browse

You can use the below endpoint to capture user browsing information and save them in GAIP database

POST /v1/items/browse


It takes user_id and item_id as required parameters.

Here is an example value of the request body

  {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "item_id": "1000764491"
  }


You can find sample code here

Product purchase

You can use the below endpoint to capture user's product purchase information and save them in GAIP database

POST /v1/purchase

It takes user_id, item_list which includes item_id, price, quantity for a specific item as required parameters.

Here is an example request body

  {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "item_list": [
      {
        "item_id": "1000757666",
        "price": 5000,
        "quantity": 1
      },
      {
        "item_id": "1000764491",
        "price": 400,
        "quantity": 7
      }
    ]
  }


You a find sample code for this implementation here

Product rating

You can use the below endpoint to capture user's product rating information and save them in GAIP database

POST /v1/rating


It takes user_id, item_id, and rating for the specific item as required parameters.

Here is a sample request body

{
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "item_id": "1000764491",
  "rating": "1"
}


You can find the sample code for this implementation here

If you want to save your data with bulk upload you can use above-mentioned endpoint.

Client to server integration

For client to server integration, you will need to generate client key as described in the Credentials sections. Once the client key is ready, you can directly send the request from your client side to GAIP, using the client key provided.

Note that while generating client key, you can add whitelisted domains, which whitelists the request origin. This is recommended to enhance security.

The rest of the implementation method is same as server to server integration.

Import user behavior data

Similar to data integration, all 4 kinds of user information (browse, purchase, rating, user) can be bulk uploaded. This could be useful if you already have this information from the past and want to import it into GAIP.

To import user behavior and user information in bulk, first you need to create mapper to match the keys with GAIP.

To create the mapper, the endpoints with the example request bodies can be found here in the gigalogy recommender page. You can also find the sample codes for mapper creation here in the API documentation page

Next we will use the below 4 endpoints to upload each category of data in bulk

Request path for product browsing history: POST /v1/items/browse/save
Request path for purchase history: POST /v1/items/purchase/save
Request path for rating history: POST /v1/items/rating/save
Request path to upload user information in bulk: POST /v1/users/save

You can find these endpoints with the example request bodies here. The sample code can be found here in the API documentation page

Previous
Environment setup
Next
Training your data
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/00_Setup_and_training/03_Data_integration_%26_user_behavior_collection/#uploading-data-using-a-file
Skip to content
Gigalogy Tutorial
Integration of Catalogue information and user behavior data
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Table of contents
Catalogue information integration.
Uploading data using a file
Fetch item from external API
Search Items in GAIP after import
User behavior data collection integration
Comparison of each approach.
Google Tag manager
Generating user ID
Collecting and sending user browsing data
Collecting and sending user purchase data
Collecting and sending user rating data
Collecting and sending user data
Server to server integration
User information
Product browse
Product purchase
Product rating
Client to server integration
Import user behavior data
Integration of Catalogue information and user behavior data

This tutorial will cover how to integrate your catalogue information into GAIP and how to set up user behavior tracking and integrate with GAIP.

Catalogue information integration.

Prerequisite: Mapping creation and the index creation is done.

Info

This step can also be done from our platform (GAIP). Refer here for detail.

There are two ways to import your catalogue information into GAIP.

Upload you catalogue information as a CSV or JSON file using endpoint POST /v1/item/save.
Fetch data from your API (or any external API) using endpoint POST /v1/item/save/remote.
Uploading data using a file

For uploading the data using a CSV file or JSON file, please use the POST /v1/item/save endpoint. Simply upload the file and confirm the server response is success. Confirm the task was successful using the GET/v1/tasks/{task_id} endpoint.

Info

This will throw an error and task will fail, if the keys during the Mapping creation step does not match with the keys in the file, OR if the indices were not created succesfully.

Fetch item from external API

To fetch data from external API, use the POST /v1/item/save/remote endpoint. The key and value types and an example request body for the endpoint can be found here in our sandbox.

After hitting either of the endpoint above to import your data into GAIP, you will get a task ID in the response. Use this task ID and hit the /v1/tasks/{task_id} endpoint to confirm the operation was successful. In case it fails, you can also find the details there. For API documentation, please refer <>

Search Items in GAIP after import

You can search items by passing list of item ids fromPOST /v1/items/search endpoint. This endpoint will return searched items with item details.

It is recommended to use this endpoint to confirm that the item catalogue is successfully imported into your project.

User behavior data collection integration

GAIP can collect different user behavior related information to optimize the recommendation for the user. Types of data collected are listed below with their endpoints.

Data type	Endpoint
Product browsing: When user browse products.	/v1/items/browse or /v1/items/browse/client
Product Purchase: When user purchase a product with its quantity.	/v1/items/purchase or /v1/items/purchase/client
Rating: When a user rates a product.	/v1/items/rating or /v1/items/rating/client
User: User information such as age, gender and other customized attributes depending on your website.	/v1/users or /v1/users/client

You will find these endpoints listed in our Sandbox under section "User Data Collection". Please check the required parameters, value types and example request bodies for all the endpoints there.

There are 3 ways to integrate user behavior data collection with GAIP

Google Tag Manager
Server to server integration
Client to server integration

You can also bulk upload user behavior data from the past. For that, please refer to Import user behavior data section.

Comparison of each approach.
Approach	GTM	Server to Server	Client to Server
Description	Use Google Tag Manager (GTM) to collect data (User behavior) from your website and send it to GAIP via endpoint.	The data is captured in the backend server of your application and then sent to GAIP via endpoint.	The data is directly sent from your front end (Client side) to GAIP via endpoint.
Pros	Easy to implement, Minimum coding required, Flexible configuration	More secure, Data integrity, Controlled environment	Real-time data, Less server dependency
Cons	Limited customization, need to have basic knowledge about GTM, Dependency on third-party service, Might not work for certain browsers and plugins like AdBlockers	More complex to set up, potential latency, maintenance required	Less secure, Potential for inconsistent data, dependency on client-side behavior

Below we will show the implementation of each approach.

BE ADVISED: The following is a general guideline, and it may vary across different websites, contingent upon the specific implementation of your website.

Google Tag manager

Prerequisite: Your website must have GTM setup. If you do not have GTM setup, you can easily do the setup by following the guidelines here.

If you are not familiar with basic GTM concepts, such as Tags, Triggers and Variables, please familiarize yourself first with these concepts before proceeding with this approach. You can find more resources related to this here.

Generating user ID

In our sandbox, Notice that in the user data collection endpoints, every endpoint has a parameter called user_id, and member_id. These are vital to identify each user so that you can personalize their experience. user_id is generated by GAIP for each user of your site. The endpoint to generate and user_id is GET /v1/users/generate/id. You can generate the user_id using GTM using below code. This code can be used with every Tag, which checks if there is a user_id and creates one if there is none.

// Function to get or generate 'gaip_user_id' using a function expression
var getGaipUser = function() {
  return new Promise(function(resolve, reject) {
    if (gaipUser !== null) {
      resolve(gaipUser);
    } else {
      var idHeaders = new Headers();
      idHeaders.append("project-key", "{{ YOUR_PROJECT_KEY_HERE }}");
      idHeaders.append("api-key", "{{ YOUR_API_KEY_HERE }}");
      fetch("https://api.recommender.gigalogy.com/v1/users/generate/id", { headers: idHeaders })
      .then(function(response) {
        return response.json();
      })
      .then(function(data) {
        localStorage.setItem('gaip_user_id', data.detail.response);
        resolve(data.detail.response);
      })
      .catch(reject);
    }
  });
};


member_id can be set by you depending on how your site identifies unique users such as user ID, phone number, email address etc.

Collecting and sending user browsing data

Set up a variable to capture the product name/title/ID, when the user goes a product details page or clicks on a product to enlarge it or open a pop-up etc.

Set up a trigger so that the tag would fire when the user goes browses an item (Go to product detail page or quick view options etc.).

Create a custom HTML Tag with the above trigger and variable and put the below code in the tag.

Collecting and sending user purchase data

Set up a variable to capture the all the purchase detail, when the user makes a purchase. This could be from the purchase confirmation page etc.

Set up a trigger so that the tag would fire when the user make the purchase.

Create a custom HTML Tag with the above trigger to send the information to endpoint POST /v1/purchase or POST /v1/purchase/client

Collecting and sending user rating data

Setup variables to capture the product name/title/ID and the rating, when the user rates an item positively or negatively. We can also consider an item is positively rated when user adds the item to wishlist.

Set up a trigger for the tag to fire when the user rates a product.

Create a custom HTML Tag with the above trigger and variables to send the information to the endpoint POST /v1/rating or POST /v1/rating/client

Collecting and sending user data

Setup variable to capture the user information.

For this, the trigger could be setup up when the user logs or update their information.

Create a custom HTML Tag with the above trigger and variables to send the information to the endpoint POST /v1/user or POST /v1/user/client

Server to server integration

For server to server integration, you will need to generate Project key and API as mentioned in the credentials section.

User information

The below request path, takes user information, such as name, age, gender, address and saves them in the gaip database.

POST /v1/user


Here is an example request body

{
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "user_info": {
    "address": "string",
    "gender": "integer --> 1 for male or 2 for female or 3 for others",
    "age": 25,
    "user_type": [
      {
        "key_name1": "value1_value2",
        "separator": "_"
      },
      {
        "key_name2": "value3"
      }
    ]
  }
}

You can find the sample code for implementation here

Product browse

You can use the below endpoint to capture user browsing information and save them in GAIP database

POST /v1/items/browse


It takes user_id and item_id as required parameters.

Here is an example value of the request body

  {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "item_id": "1000764491"
  }


You can find sample code here

Product purchase

You can use the below endpoint to capture user's product purchase information and save them in GAIP database

POST /v1/purchase

It takes user_id, item_list which includes item_id, price, quantity for a specific item as required parameters.

Here is an example request body

  {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "item_list": [
      {
        "item_id": "1000757666",
        "price": 5000,
        "quantity": 1
      },
      {
        "item_id": "1000764491",
        "price": 400,
        "quantity": 7
      }
    ]
  }


You a find sample code for this implementation here

Product rating

You can use the below endpoint to capture user's product rating information and save them in GAIP database

POST /v1/rating


It takes user_id, item_id, and rating for the specific item as required parameters.

Here is a sample request body

{
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "item_id": "1000764491",
  "rating": "1"
}


You can find the sample code for this implementation here

If you want to save your data with bulk upload you can use above-mentioned endpoint.

Client to server integration

For client to server integration, you will need to generate client key as described in the Credentials sections. Once the client key is ready, you can directly send the request from your client side to GAIP, using the client key provided.

Note that while generating client key, you can add whitelisted domains, which whitelists the request origin. This is recommended to enhance security.

The rest of the implementation method is same as server to server integration.

Import user behavior data

Similar to data integration, all 4 kinds of user information (browse, purchase, rating, user) can be bulk uploaded. This could be useful if you already have this information from the past and want to import it into GAIP.

To import user behavior and user information in bulk, first you need to create mapper to match the keys with GAIP.

To create the mapper, the endpoints with the example request bodies can be found here in the gigalogy recommender page. You can also find the sample codes for mapper creation here in the API documentation page

Next we will use the below 4 endpoints to upload each category of data in bulk

Request path for product browsing history: POST /v1/items/browse/save
Request path for purchase history: POST /v1/items/purchase/save
Request path for rating history: POST /v1/items/rating/save
Request path to upload user information in bulk: POST /v1/users/save

You can find these endpoints with the example request bodies here. The sample code can be found here in the API documentation page

Previous
Environment setup
Next
Training your data
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/00_Setup_and_training/03_Data_integration_%26_user_behavior_collection/#fetch-item-from-external-api
Skip to content
Gigalogy Tutorial
Integration of Catalogue information and user behavior data
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Table of contents
Catalogue information integration.
Uploading data using a file
Fetch item from external API
Search Items in GAIP after import
User behavior data collection integration
Comparison of each approach.
Google Tag manager
Generating user ID
Collecting and sending user browsing data
Collecting and sending user purchase data
Collecting and sending user rating data
Collecting and sending user data
Server to server integration
User information
Product browse
Product purchase
Product rating
Client to server integration
Import user behavior data
Integration of Catalogue information and user behavior data

This tutorial will cover how to integrate your catalogue information into GAIP and how to set up user behavior tracking and integrate with GAIP.

Catalogue information integration.

Prerequisite: Mapping creation and the index creation is done.

Info

This step can also be done from our platform (GAIP). Refer here for detail.

There are two ways to import your catalogue information into GAIP.

Upload you catalogue information as a CSV or JSON file using endpoint POST /v1/item/save.
Fetch data from your API (or any external API) using endpoint POST /v1/item/save/remote.
Uploading data using a file

For uploading the data using a CSV file or JSON file, please use the POST /v1/item/save endpoint. Simply upload the file and confirm the server response is success. Confirm the task was successful using the GET/v1/tasks/{task_id} endpoint.

Info

This will throw an error and task will fail, if the keys during the Mapping creation step does not match with the keys in the file, OR if the indices were not created succesfully.

Fetch item from external API

To fetch data from external API, use the POST /v1/item/save/remote endpoint. The key and value types and an example request body for the endpoint can be found here in our sandbox.

After hitting either of the endpoint above to import your data into GAIP, you will get a task ID in the response. Use this task ID and hit the /v1/tasks/{task_id} endpoint to confirm the operation was successful. In case it fails, you can also find the details there. For API documentation, please refer <>

Search Items in GAIP after import

You can search items by passing list of item ids fromPOST /v1/items/search endpoint. This endpoint will return searched items with item details.

It is recommended to use this endpoint to confirm that the item catalogue is successfully imported into your project.

User behavior data collection integration

GAIP can collect different user behavior related information to optimize the recommendation for the user. Types of data collected are listed below with their endpoints.

Data type	Endpoint
Product browsing: When user browse products.	/v1/items/browse or /v1/items/browse/client
Product Purchase: When user purchase a product with its quantity.	/v1/items/purchase or /v1/items/purchase/client
Rating: When a user rates a product.	/v1/items/rating or /v1/items/rating/client
User: User information such as age, gender and other customized attributes depending on your website.	/v1/users or /v1/users/client

You will find these endpoints listed in our Sandbox under section "User Data Collection". Please check the required parameters, value types and example request bodies for all the endpoints there.

There are 3 ways to integrate user behavior data collection with GAIP

Google Tag Manager
Server to server integration
Client to server integration

You can also bulk upload user behavior data from the past. For that, please refer to Import user behavior data section.

Comparison of each approach.
Approach	GTM	Server to Server	Client to Server
Description	Use Google Tag Manager (GTM) to collect data (User behavior) from your website and send it to GAIP via endpoint.	The data is captured in the backend server of your application and then sent to GAIP via endpoint.	The data is directly sent from your front end (Client side) to GAIP via endpoint.
Pros	Easy to implement, Minimum coding required, Flexible configuration	More secure, Data integrity, Controlled environment	Real-time data, Less server dependency
Cons	Limited customization, need to have basic knowledge about GTM, Dependency on third-party service, Might not work for certain browsers and plugins like AdBlockers	More complex to set up, potential latency, maintenance required	Less secure, Potential for inconsistent data, dependency on client-side behavior

Below we will show the implementation of each approach.

BE ADVISED: The following is a general guideline, and it may vary across different websites, contingent upon the specific implementation of your website.

Google Tag manager

Prerequisite: Your website must have GTM setup. If you do not have GTM setup, you can easily do the setup by following the guidelines here.

If you are not familiar with basic GTM concepts, such as Tags, Triggers and Variables, please familiarize yourself first with these concepts before proceeding with this approach. You can find more resources related to this here.

Generating user ID

In our sandbox, Notice that in the user data collection endpoints, every endpoint has a parameter called user_id, and member_id. These are vital to identify each user so that you can personalize their experience. user_id is generated by GAIP for each user of your site. The endpoint to generate and user_id is GET /v1/users/generate/id. You can generate the user_id using GTM using below code. This code can be used with every Tag, which checks if there is a user_id and creates one if there is none.

// Function to get or generate 'gaip_user_id' using a function expression
var getGaipUser = function() {
  return new Promise(function(resolve, reject) {
    if (gaipUser !== null) {
      resolve(gaipUser);
    } else {
      var idHeaders = new Headers();
      idHeaders.append("project-key", "{{ YOUR_PROJECT_KEY_HERE }}");
      idHeaders.append("api-key", "{{ YOUR_API_KEY_HERE }}");
      fetch("https://api.recommender.gigalogy.com/v1/users/generate/id", { headers: idHeaders })
      .then(function(response) {
        return response.json();
      })
      .then(function(data) {
        localStorage.setItem('gaip_user_id', data.detail.response);
        resolve(data.detail.response);
      })
      .catch(reject);
    }
  });
};


member_id can be set by you depending on how your site identifies unique users such as user ID, phone number, email address etc.

Collecting and sending user browsing data

Set up a variable to capture the product name/title/ID, when the user goes a product details page or clicks on a product to enlarge it or open a pop-up etc.

Set up a trigger so that the tag would fire when the user goes browses an item (Go to product detail page or quick view options etc.).

Create a custom HTML Tag with the above trigger and variable and put the below code in the tag.

Collecting and sending user purchase data

Set up a variable to capture the all the purchase detail, when the user makes a purchase. This could be from the purchase confirmation page etc.

Set up a trigger so that the tag would fire when the user make the purchase.

Create a custom HTML Tag with the above trigger to send the information to endpoint POST /v1/purchase or POST /v1/purchase/client

Collecting and sending user rating data

Setup variables to capture the product name/title/ID and the rating, when the user rates an item positively or negatively. We can also consider an item is positively rated when user adds the item to wishlist.

Set up a trigger for the tag to fire when the user rates a product.

Create a custom HTML Tag with the above trigger and variables to send the information to the endpoint POST /v1/rating or POST /v1/rating/client

Collecting and sending user data

Setup variable to capture the user information.

For this, the trigger could be setup up when the user logs or update their information.

Create a custom HTML Tag with the above trigger and variables to send the information to the endpoint POST /v1/user or POST /v1/user/client

Server to server integration

For server to server integration, you will need to generate Project key and API as mentioned in the credentials section.

User information

The below request path, takes user information, such as name, age, gender, address and saves them in the gaip database.

POST /v1/user


Here is an example request body

{
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "user_info": {
    "address": "string",
    "gender": "integer --> 1 for male or 2 for female or 3 for others",
    "age": 25,
    "user_type": [
      {
        "key_name1": "value1_value2",
        "separator": "_"
      },
      {
        "key_name2": "value3"
      }
    ]
  }
}

You can find the sample code for implementation here

Product browse

You can use the below endpoint to capture user browsing information and save them in GAIP database

POST /v1/items/browse


It takes user_id and item_id as required parameters.

Here is an example value of the request body

  {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "item_id": "1000764491"
  }


You can find sample code here

Product purchase

You can use the below endpoint to capture user's product purchase information and save them in GAIP database

POST /v1/purchase

It takes user_id, item_list which includes item_id, price, quantity for a specific item as required parameters.

Here is an example request body

  {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "item_list": [
      {
        "item_id": "1000757666",
        "price": 5000,
        "quantity": 1
      },
      {
        "item_id": "1000764491",
        "price": 400,
        "quantity": 7
      }
    ]
  }


You a find sample code for this implementation here

Product rating

You can use the below endpoint to capture user's product rating information and save them in GAIP database

POST /v1/rating


It takes user_id, item_id, and rating for the specific item as required parameters.

Here is a sample request body

{
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "item_id": "1000764491",
  "rating": "1"
}


You can find the sample code for this implementation here

If you want to save your data with bulk upload you can use above-mentioned endpoint.

Client to server integration

For client to server integration, you will need to generate client key as described in the Credentials sections. Once the client key is ready, you can directly send the request from your client side to GAIP, using the client key provided.

Note that while generating client key, you can add whitelisted domains, which whitelists the request origin. This is recommended to enhance security.

The rest of the implementation method is same as server to server integration.

Import user behavior data

Similar to data integration, all 4 kinds of user information (browse, purchase, rating, user) can be bulk uploaded. This could be useful if you already have this information from the past and want to import it into GAIP.

To import user behavior and user information in bulk, first you need to create mapper to match the keys with GAIP.

To create the mapper, the endpoints with the example request bodies can be found here in the gigalogy recommender page. You can also find the sample codes for mapper creation here in the API documentation page

Next we will use the below 4 endpoints to upload each category of data in bulk

Request path for product browsing history: POST /v1/items/browse/save
Request path for purchase history: POST /v1/items/purchase/save
Request path for rating history: POST /v1/items/rating/save
Request path to upload user information in bulk: POST /v1/users/save

You can find these endpoints with the example request bodies here. The sample code can be found here in the API documentation page

Previous
Environment setup
Next
Training your data
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/00_Setup_and_training/03_Data_integration_%26_user_behavior_collection/#search-items-in-gaip-after-import
Skip to content
Gigalogy Tutorial
Integration of Catalogue information and user behavior data
English
Japanese
Type to start searching
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Table of contents
Catalogue information integration.
Uploading data using a file
Fetch item from external API
Search Items in GAIP after import
User behavior data collection integration
Comparison of each approach.
Google Tag manager
Generating user ID
Collecting and sending user browsing data
Collecting and sending user purchase data
Collecting and sending user rating data
Collecting and sending user data
Server to server integration
User information
Product browse
Product purchase
Product rating
Client to server integration
Import user behavior data
Integration of Catalogue information and user behavior data

This tutorial will cover how to integrate your catalogue information into GAIP and how to set up user behavior tracking and integrate with GAIP.

Catalogue information integration.

Prerequisite: Mapping creation and the index creation is done.

Info

This step can also be done from our platform (GAIP). Refer here for detail.

There are two ways to import your catalogue information into GAIP.

Upload you catalogue information as a CSV or JSON file using endpoint POST /v1/item/save.
Fetch data from your API (or any external API) using endpoint POST /v1/item/save/remote.
Uploading data using a file

For uploading the data using a CSV file or JSON file, please use the POST /v1/item/save endpoint. Simply upload the file and confirm the server response is success. Confirm the task was successful using the GET/v1/tasks/{task_id} endpoint.

Info

This will throw an error and task will fail, if the keys during the Mapping creation step does not match with the keys in the file, OR if the indices were not created succesfully.

Fetch item from external API

To fetch data from external API, use the POST /v1/item/save/remote endpoint. The key and value types and an example request body for the endpoint can be found here in our sandbox.

After hitting either of the endpoint above to import your data into GAIP, you will get a task ID in the response. Use this task ID and hit the /v1/tasks/{task_id} endpoint to confirm the operation was successful. In case it fails, you can also find the details there. For API documentation, please refer <>

Search Items in GAIP after import

You can search items by passing list of item ids fromPOST /v1/items/search endpoint. This endpoint will return searched items with item details.

It is recommended to use this endpoint to confirm that the item catalogue is successfully imported into your project.

User behavior data collection integration

GAIP can collect different user behavior related information to optimize the recommendation for the user. Types of data collected are listed below with their endpoints.

Data type	Endpoint
Product browsing: When user browse products.	/v1/items/browse or /v1/items/browse/client
Product Purchase: When user purchase a product with its quantity.	/v1/items/purchase or /v1/items/purchase/client
Rating: When a user rates a product.	/v1/items/rating or /v1/items/rating/client
User: User information such as age, gender and other customized attributes depending on your website.	/v1/users or /v1/users/client

You will find these endpoints listed in our Sandbox under section "User Data Collection". Please check the required parameters, value types and example request bodies for all the endpoints there.

There are 3 ways to integrate user behavior data collection with GAIP

Google Tag Manager
Server to server integration
Client to server integration

You can also bulk upload user behavior data from the past. For that, please refer to Import user behavior data section.

Comparison of each approach.
Approach	GTM	Server to Server	Client to Server
Description	Use Google Tag Manager (GTM) to collect data (User behavior) from your website and send it to GAIP via endpoint.	The data is captured in the backend server of your application and then sent to GAIP via endpoint.	The data is directly sent from your front end (Client side) to GAIP via endpoint.
Pros	Easy to implement, Minimum coding required, Flexible configuration	More secure, Data integrity, Controlled environment	Real-time data, Less server dependency
Cons	Limited customization, need to have basic knowledge about GTM, Dependency on third-party service, Might not work for certain browsers and plugins like AdBlockers	More complex to set up, potential latency, maintenance required	Less secure, Potential for inconsistent data, dependency on client-side behavior

Below we will show the implementation of each approach.

BE ADVISED: The following is a general guideline, and it may vary across different websites, contingent upon the specific implementation of your website.

Google Tag manager

Prerequisite: Your website must have GTM setup. If you do not have GTM setup, you can easily do the setup by following the guidelines here.

If you are not familiar with basic GTM concepts, such as Tags, Triggers and Variables, please familiarize yourself first with these concepts before proceeding with this approach. You can find more resources related to this here.

Generating user ID

In our sandbox, Notice that in the user data collection endpoints, every endpoint has a parameter called user_id, and member_id. These are vital to identify each user so that you can personalize their experience. user_id is generated by GAIP for each user of your site. The endpoint to generate and user_id is GET /v1/users/generate/id. You can generate the user_id using GTM using below code. This code can be used with every Tag, which checks if there is a user_id and creates one if there is none.

// Function to get or generate 'gaip_user_id' using a function expression
var getGaipUser = function() {
  return new Promise(function(resolve, reject) {
    if (gaipUser !== null) {
      resolve(gaipUser);
    } else {
      var idHeaders = new Headers();
      idHeaders.append("project-key", "{{ YOUR_PROJECT_KEY_HERE }}");
      idHeaders.append("api-key", "{{ YOUR_API_KEY_HERE }}");
      fetch("https://api.recommender.gigalogy.com/v1/users/generate/id", { headers: idHeaders })
      .then(function(response) {
        return response.json();
      })
      .then(function(data) {
        localStorage.setItem('gaip_user_id', data.detail.response);
        resolve(data.detail.response);
      })
      .catch(reject);
    }
  });
};


member_id can be set by you depending on how your site identifies unique users such as user ID, phone number, email address etc.

Collecting and sending user browsing data

Set up a variable to capture the product name/title/ID, when the user goes a product details page or clicks on a product to enlarge it or open a pop-up etc.

Set up a trigger so that the tag would fire when the user goes browses an item (Go to product detail page or quick view options etc.).

Create a custom HTML Tag with the above trigger and variable and put the below code in the tag.

Collecting and sending user purchase data

Set up a variable to capture the all the purchase detail, when the user makes a purchase. This could be from the purchase confirmation page etc.

Set up a trigger so that the tag would fire when the user make the purchase.

Create a custom HTML Tag with the above trigger to send the information to endpoint POST /v1/purchase or POST /v1/purchase/client

Collecting and sending user rating data

Setup variables to capture the product name/title/ID and the rating, when the user rates an item positively or negatively. We can also consider an item is positively rated when user adds the item to wishlist.

Set up a trigger for the tag to fire when the user rates a product.

Create a custom HTML Tag with the above trigger and variables to send the information to the endpoint POST /v1/rating or POST /v1/rating/client

Collecting and sending user data

Setup variable to capture the user information.

For this, the trigger could be setup up when the user logs or update their information.

Create a custom HTML Tag with the above trigger and variables to send the information to the endpoint POST /v1/user or POST /v1/user/client

Server to server integration

For server to server integration, you will need to generate Project key and API as mentioned in the credentials section.

User information

The below request path, takes user information, such as name, age, gender, address and saves them in the gaip database.

POST /v1/user


Here is an example request body

{
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "user_info": {
    "address": "string",
    "gender": "integer --> 1 for male or 2 for female or 3 for others",
    "age": 25,
    "user_type": [
      {
        "key_name1": "value1_value2",
        "separator": "_"
      },
      {
        "key_name2": "value3"
      }
    ]
  }
}

You can find the sample code for implementation here

Product browse

You can use the below endpoint to capture user browsing information and save them in GAIP database

POST /v1/items/browse


It takes user_id and item_id as required parameters.

Here is an example value of the request body

  {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "item_id": "1000764491"
  }


You can find sample code here

Product purchase

You can use the below endpoint to capture user's product purchase information and save them in GAIP database

POST /v1/purchase

It takes user_id, item_list which includes item_id, price, quantity for a specific item as required parameters.

Here is an example request body

  {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "item_list": [
      {
        "item_id": "1000757666",
        "price": 5000,
        "quantity": 1
      },
      {
        "item_id": "1000764491",
        "price": 400,
        "quantity": 7
      }
    ]
  }


You a find sample code for this implementation here

Product rating

You can use the below endpoint to capture user's product rating information and save them in GAIP database

POST /v1/rating


It takes user_id, item_id, and rating for the specific item as required parameters.

Here is a sample request body

{
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "item_id": "1000764491",
  "rating": "1"
}


You can find the sample code for this implementation here

If you want to save your data with bulk upload you can use above-mentioned endpoint.

Client to server integration

For client to server integration, you will need to generate client key as described in the Credentials sections. Once the client key is ready, you can directly send the request from your client side to GAIP, using the client key provided.

Note that while generating client key, you can add whitelisted domains, which whitelists the request origin. This is recommended to enhance security.

The rest of the implementation method is same as server to server integration.

Import user behavior data

Similar to data integration, all 4 kinds of user information (browse, purchase, rating, user) can be bulk uploaded. This could be useful if you already have this information from the past and want to import it into GAIP.

To import user behavior and user information in bulk, first you need to create mapper to match the keys with GAIP.

To create the mapper, the endpoints with the example request bodies can be found here in the gigalogy recommender page. You can also find the sample codes for mapper creation here in the API documentation page

Next we will use the below 4 endpoints to upload each category of data in bulk

Request path for product browsing history: POST /v1/items/browse/save
Request path for purchase history: POST /v1/items/purchase/save
Request path for rating history: POST /v1/items/rating/save
Request path to upload user information in bulk: POST /v1/users/save

You can find these endpoints with the example request bodies here. The sample code can be found here in the API documentation page

Previous
Environment setup
Next
Training your data
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/00_Setup_and_training/03_Data_integration_%26_user_behavior_collection/#user-behavior-data-collection-integration
Skip to content
Gigalogy Tutorial
Integration of Catalogue information and user behavior data
English
Japanese
Type to start searching
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Table of contents
Catalogue information integration.
Uploading data using a file
Fetch item from external API
Search Items in GAIP after import
User behavior data collection integration
Comparison of each approach.
Google Tag manager
Generating user ID
Collecting and sending user browsing data
Collecting and sending user purchase data
Collecting and sending user rating data
Collecting and sending user data
Server to server integration
User information
Product browse
Product purchase
Product rating
Client to server integration
Import user behavior data
Integration of Catalogue information and user behavior data

This tutorial will cover how to integrate your catalogue information into GAIP and how to set up user behavior tracking and integrate with GAIP.

Catalogue information integration.

Prerequisite: Mapping creation and the index creation is done.

Info

This step can also be done from our platform (GAIP). Refer here for detail.

There are two ways to import your catalogue information into GAIP.

Upload you catalogue information as a CSV or JSON file using endpoint POST /v1/item/save.
Fetch data from your API (or any external API) using endpoint POST /v1/item/save/remote.
Uploading data using a file

For uploading the data using a CSV file or JSON file, please use the POST /v1/item/save endpoint. Simply upload the file and confirm the server response is success. Confirm the task was successful using the GET/v1/tasks/{task_id} endpoint.

Info

This will throw an error and task will fail, if the keys during the Mapping creation step does not match with the keys in the file, OR if the indices were not created succesfully.

Fetch item from external API

To fetch data from external API, use the POST /v1/item/save/remote endpoint. The key and value types and an example request body for the endpoint can be found here in our sandbox.

After hitting either of the endpoint above to import your data into GAIP, you will get a task ID in the response. Use this task ID and hit the /v1/tasks/{task_id} endpoint to confirm the operation was successful. In case it fails, you can also find the details there. For API documentation, please refer <>

Search Items in GAIP after import

You can search items by passing list of item ids fromPOST /v1/items/search endpoint. This endpoint will return searched items with item details.

It is recommended to use this endpoint to confirm that the item catalogue is successfully imported into your project.

User behavior data collection integration

GAIP can collect different user behavior related information to optimize the recommendation for the user. Types of data collected are listed below with their endpoints.

Data type	Endpoint
Product browsing: When user browse products.	/v1/items/browse or /v1/items/browse/client
Product Purchase: When user purchase a product with its quantity.	/v1/items/purchase or /v1/items/purchase/client
Rating: When a user rates a product.	/v1/items/rating or /v1/items/rating/client
User: User information such as age, gender and other customized attributes depending on your website.	/v1/users or /v1/users/client

You will find these endpoints listed in our Sandbox under section "User Data Collection". Please check the required parameters, value types and example request bodies for all the endpoints there.

There are 3 ways to integrate user behavior data collection with GAIP

Google Tag Manager
Server to server integration
Client to server integration

You can also bulk upload user behavior data from the past. For that, please refer to Import user behavior data section.

Comparison of each approach.
Approach	GTM	Server to Server	Client to Server
Description	Use Google Tag Manager (GTM) to collect data (User behavior) from your website and send it to GAIP via endpoint.	The data is captured in the backend server of your application and then sent to GAIP via endpoint.	The data is directly sent from your front end (Client side) to GAIP via endpoint.
Pros	Easy to implement, Minimum coding required, Flexible configuration	More secure, Data integrity, Controlled environment	Real-time data, Less server dependency
Cons	Limited customization, need to have basic knowledge about GTM, Dependency on third-party service, Might not work for certain browsers and plugins like AdBlockers	More complex to set up, potential latency, maintenance required	Less secure, Potential for inconsistent data, dependency on client-side behavior

Below we will show the implementation of each approach.

BE ADVISED: The following is a general guideline, and it may vary across different websites, contingent upon the specific implementation of your website.

Google Tag manager

Prerequisite: Your website must have GTM setup. If you do not have GTM setup, you can easily do the setup by following the guidelines here.

If you are not familiar with basic GTM concepts, such as Tags, Triggers and Variables, please familiarize yourself first with these concepts before proceeding with this approach. You can find more resources related to this here.

Generating user ID

In our sandbox, Notice that in the user data collection endpoints, every endpoint has a parameter called user_id, and member_id. These are vital to identify each user so that you can personalize their experience. user_id is generated by GAIP for each user of your site. The endpoint to generate and user_id is GET /v1/users/generate/id. You can generate the user_id using GTM using below code. This code can be used with every Tag, which checks if there is a user_id and creates one if there is none.

// Function to get or generate 'gaip_user_id' using a function expression
var getGaipUser = function() {
  return new Promise(function(resolve, reject) {
    if (gaipUser !== null) {
      resolve(gaipUser);
    } else {
      var idHeaders = new Headers();
      idHeaders.append("project-key", "{{ YOUR_PROJECT_KEY_HERE }}");
      idHeaders.append("api-key", "{{ YOUR_API_KEY_HERE }}");
      fetch("https://api.recommender.gigalogy.com/v1/users/generate/id", { headers: idHeaders })
      .then(function(response) {
        return response.json();
      })
      .then(function(data) {
        localStorage.setItem('gaip_user_id', data.detail.response);
        resolve(data.detail.response);
      })
      .catch(reject);
    }
  });
};


member_id can be set by you depending on how your site identifies unique users such as user ID, phone number, email address etc.

Collecting and sending user browsing data

Set up a variable to capture the product name/title/ID, when the user goes a product details page or clicks on a product to enlarge it or open a pop-up etc.

Set up a trigger so that the tag would fire when the user goes browses an item (Go to product detail page or quick view options etc.).

Create a custom HTML Tag with the above trigger and variable and put the below code in the tag.

Collecting and sending user purchase data

Set up a variable to capture the all the purchase detail, when the user makes a purchase. This could be from the purchase confirmation page etc.

Set up a trigger so that the tag would fire when the user make the purchase.

Create a custom HTML Tag with the above trigger to send the information to endpoint POST /v1/purchase or POST /v1/purchase/client

Collecting and sending user rating data

Setup variables to capture the product name/title/ID and the rating, when the user rates an item positively or negatively. We can also consider an item is positively rated when user adds the item to wishlist.

Set up a trigger for the tag to fire when the user rates a product.

Create a custom HTML Tag with the above trigger and variables to send the information to the endpoint POST /v1/rating or POST /v1/rating/client

Collecting and sending user data

Setup variable to capture the user information.

For this, the trigger could be setup up when the user logs or update their information.

Create a custom HTML Tag with the above trigger and variables to send the information to the endpoint POST /v1/user or POST /v1/user/client

Server to server integration

For server to server integration, you will need to generate Project key and API as mentioned in the credentials section.

User information

The below request path, takes user information, such as name, age, gender, address and saves them in the gaip database.

POST /v1/user


Here is an example request body

{
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "user_info": {
    "address": "string",
    "gender": "integer --> 1 for male or 2 for female or 3 for others",
    "age": 25,
    "user_type": [
      {
        "key_name1": "value1_value2",
        "separator": "_"
      },
      {
        "key_name2": "value3"
      }
    ]
  }
}

You can find the sample code for implementation here

Product browse

You can use the below endpoint to capture user browsing information and save them in GAIP database

POST /v1/items/browse


It takes user_id and item_id as required parameters.

Here is an example value of the request body

  {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "item_id": "1000764491"
  }


You can find sample code here

Product purchase

You can use the below endpoint to capture user's product purchase information and save them in GAIP database

POST /v1/purchase

It takes user_id, item_list which includes item_id, price, quantity for a specific item as required parameters.

Here is an example request body

  {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "item_list": [
      {
        "item_id": "1000757666",
        "price": 5000,
        "quantity": 1
      },
      {
        "item_id": "1000764491",
        "price": 400,
        "quantity": 7
      }
    ]
  }


You a find sample code for this implementation here

Product rating

You can use the below endpoint to capture user's product rating information and save them in GAIP database

POST /v1/rating


It takes user_id, item_id, and rating for the specific item as required parameters.

Here is a sample request body

{
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "item_id": "1000764491",
  "rating": "1"
}


You can find the sample code for this implementation here

If you want to save your data with bulk upload you can use above-mentioned endpoint.

Client to server integration

For client to server integration, you will need to generate client key as described in the Credentials sections. Once the client key is ready, you can directly send the request from your client side to GAIP, using the client key provided.

Note that while generating client key, you can add whitelisted domains, which whitelists the request origin. This is recommended to enhance security.

The rest of the implementation method is same as server to server integration.

Import user behavior data

Similar to data integration, all 4 kinds of user information (browse, purchase, rating, user) can be bulk uploaded. This could be useful if you already have this information from the past and want to import it into GAIP.

To import user behavior and user information in bulk, first you need to create mapper to match the keys with GAIP.

To create the mapper, the endpoints with the example request bodies can be found here in the gigalogy recommender page. You can also find the sample codes for mapper creation here in the API documentation page

Next we will use the below 4 endpoints to upload each category of data in bulk

Request path for product browsing history: POST /v1/items/browse/save
Request path for purchase history: POST /v1/items/purchase/save
Request path for rating history: POST /v1/items/rating/save
Request path to upload user information in bulk: POST /v1/users/save

You can find these endpoints with the example request bodies here. The sample code can be found here in the API documentation page

Previous
Environment setup
Next
Training your data
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/00_Setup_and_training/03_Data_integration_%26_user_behavior_collection/#comparison-of-each-approach
Skip to content
Gigalogy Tutorial
Integration of Catalogue information and user behavior data
English
Japanese
Type to start searching
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Table of contents
Catalogue information integration.
Uploading data using a file
Fetch item from external API
Search Items in GAIP after import
User behavior data collection integration
Comparison of each approach.
Google Tag manager
Generating user ID
Collecting and sending user browsing data
Collecting and sending user purchase data
Collecting and sending user rating data
Collecting and sending user data
Server to server integration
User information
Product browse
Product purchase
Product rating
Client to server integration
Import user behavior data
Integration of Catalogue information and user behavior data

This tutorial will cover how to integrate your catalogue information into GAIP and how to set up user behavior tracking and integrate with GAIP.

Catalogue information integration.

Prerequisite: Mapping creation and the index creation is done.

Info

This step can also be done from our platform (GAIP). Refer here for detail.

There are two ways to import your catalogue information into GAIP.

Upload you catalogue information as a CSV or JSON file using endpoint POST /v1/item/save.
Fetch data from your API (or any external API) using endpoint POST /v1/item/save/remote.
Uploading data using a file

For uploading the data using a CSV file or JSON file, please use the POST /v1/item/save endpoint. Simply upload the file and confirm the server response is success. Confirm the task was successful using the GET/v1/tasks/{task_id} endpoint.

Info

This will throw an error and task will fail, if the keys during the Mapping creation step does not match with the keys in the file, OR if the indices were not created succesfully.

Fetch item from external API

To fetch data from external API, use the POST /v1/item/save/remote endpoint. The key and value types and an example request body for the endpoint can be found here in our sandbox.

After hitting either of the endpoint above to import your data into GAIP, you will get a task ID in the response. Use this task ID and hit the /v1/tasks/{task_id} endpoint to confirm the operation was successful. In case it fails, you can also find the details there. For API documentation, please refer <>

Search Items in GAIP after import

You can search items by passing list of item ids fromPOST /v1/items/search endpoint. This endpoint will return searched items with item details.

It is recommended to use this endpoint to confirm that the item catalogue is successfully imported into your project.

User behavior data collection integration

GAIP can collect different user behavior related information to optimize the recommendation for the user. Types of data collected are listed below with their endpoints.

Data type	Endpoint
Product browsing: When user browse products.	/v1/items/browse or /v1/items/browse/client
Product Purchase: When user purchase a product with its quantity.	/v1/items/purchase or /v1/items/purchase/client
Rating: When a user rates a product.	/v1/items/rating or /v1/items/rating/client
User: User information such as age, gender and other customized attributes depending on your website.	/v1/users or /v1/users/client

You will find these endpoints listed in our Sandbox under section "User Data Collection". Please check the required parameters, value types and example request bodies for all the endpoints there.

There are 3 ways to integrate user behavior data collection with GAIP

Google Tag Manager
Server to server integration
Client to server integration

You can also bulk upload user behavior data from the past. For that, please refer to Import user behavior data section.

Comparison of each approach.
Approach	GTM	Server to Server	Client to Server
Description	Use Google Tag Manager (GTM) to collect data (User behavior) from your website and send it to GAIP via endpoint.	The data is captured in the backend server of your application and then sent to GAIP via endpoint.	The data is directly sent from your front end (Client side) to GAIP via endpoint.
Pros	Easy to implement, Minimum coding required, Flexible configuration	More secure, Data integrity, Controlled environment	Real-time data, Less server dependency
Cons	Limited customization, need to have basic knowledge about GTM, Dependency on third-party service, Might not work for certain browsers and plugins like AdBlockers	More complex to set up, potential latency, maintenance required	Less secure, Potential for inconsistent data, dependency on client-side behavior

Below we will show the implementation of each approach.

BE ADVISED: The following is a general guideline, and it may vary across different websites, contingent upon the specific implementation of your website.

Google Tag manager

Prerequisite: Your website must have GTM setup. If you do not have GTM setup, you can easily do the setup by following the guidelines here.

If you are not familiar with basic GTM concepts, such as Tags, Triggers and Variables, please familiarize yourself first with these concepts before proceeding with this approach. You can find more resources related to this here.

Generating user ID

In our sandbox, Notice that in the user data collection endpoints, every endpoint has a parameter called user_id, and member_id. These are vital to identify each user so that you can personalize their experience. user_id is generated by GAIP for each user of your site. The endpoint to generate and user_id is GET /v1/users/generate/id. You can generate the user_id using GTM using below code. This code can be used with every Tag, which checks if there is a user_id and creates one if there is none.

// Function to get or generate 'gaip_user_id' using a function expression
var getGaipUser = function() {
  return new Promise(function(resolve, reject) {
    if (gaipUser !== null) {
      resolve(gaipUser);
    } else {
      var idHeaders = new Headers();
      idHeaders.append("project-key", "{{ YOUR_PROJECT_KEY_HERE }}");
      idHeaders.append("api-key", "{{ YOUR_API_KEY_HERE }}");
      fetch("https://api.recommender.gigalogy.com/v1/users/generate/id", { headers: idHeaders })
      .then(function(response) {
        return response.json();
      })
      .then(function(data) {
        localStorage.setItem('gaip_user_id', data.detail.response);
        resolve(data.detail.response);
      })
      .catch(reject);
    }
  });
};


member_id can be set by you depending on how your site identifies unique users such as user ID, phone number, email address etc.

Collecting and sending user browsing data

Set up a variable to capture the product name/title/ID, when the user goes a product details page or clicks on a product to enlarge it or open a pop-up etc.

Set up a trigger so that the tag would fire when the user goes browses an item (Go to product detail page or quick view options etc.).

Create a custom HTML Tag with the above trigger and variable and put the below code in the tag.

Collecting and sending user purchase data

Set up a variable to capture the all the purchase detail, when the user makes a purchase. This could be from the purchase confirmation page etc.

Set up a trigger so that the tag would fire when the user make the purchase.

Create a custom HTML Tag with the above trigger to send the information to endpoint POST /v1/purchase or POST /v1/purchase/client

Collecting and sending user rating data

Setup variables to capture the product name/title/ID and the rating, when the user rates an item positively or negatively. We can also consider an item is positively rated when user adds the item to wishlist.

Set up a trigger for the tag to fire when the user rates a product.

Create a custom HTML Tag with the above trigger and variables to send the information to the endpoint POST /v1/rating or POST /v1/rating/client

Collecting and sending user data

Setup variable to capture the user information.

For this, the trigger could be setup up when the user logs or update their information.

Create a custom HTML Tag with the above trigger and variables to send the information to the endpoint POST /v1/user or POST /v1/user/client

Server to server integration

For server to server integration, you will need to generate Project key and API as mentioned in the credentials section.

User information

The below request path, takes user information, such as name, age, gender, address and saves them in the gaip database.

POST /v1/user


Here is an example request body

{
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "user_info": {
    "address": "string",
    "gender": "integer --> 1 for male or 2 for female or 3 for others",
    "age": 25,
    "user_type": [
      {
        "key_name1": "value1_value2",
        "separator": "_"
      },
      {
        "key_name2": "value3"
      }
    ]
  }
}

You can find the sample code for implementation here

Product browse

You can use the below endpoint to capture user browsing information and save them in GAIP database

POST /v1/items/browse


It takes user_id and item_id as required parameters.

Here is an example value of the request body

  {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "item_id": "1000764491"
  }


You can find sample code here

Product purchase

You can use the below endpoint to capture user's product purchase information and save them in GAIP database

POST /v1/purchase

It takes user_id, item_list which includes item_id, price, quantity for a specific item as required parameters.

Here is an example request body

  {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "item_list": [
      {
        "item_id": "1000757666",
        "price": 5000,
        "quantity": 1
      },
      {
        "item_id": "1000764491",
        "price": 400,
        "quantity": 7
      }
    ]
  }


You a find sample code for this implementation here

Product rating

You can use the below endpoint to capture user's product rating information and save them in GAIP database

POST /v1/rating


It takes user_id, item_id, and rating for the specific item as required parameters.

Here is a sample request body

{
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "item_id": "1000764491",
  "rating": "1"
}


You can find the sample code for this implementation here

If you want to save your data with bulk upload you can use above-mentioned endpoint.

Client to server integration

For client to server integration, you will need to generate client key as described in the Credentials sections. Once the client key is ready, you can directly send the request from your client side to GAIP, using the client key provided.

Note that while generating client key, you can add whitelisted domains, which whitelists the request origin. This is recommended to enhance security.

The rest of the implementation method is same as server to server integration.

Import user behavior data

Similar to data integration, all 4 kinds of user information (browse, purchase, rating, user) can be bulk uploaded. This could be useful if you already have this information from the past and want to import it into GAIP.

To import user behavior and user information in bulk, first you need to create mapper to match the keys with GAIP.

To create the mapper, the endpoints with the example request bodies can be found here in the gigalogy recommender page. You can also find the sample codes for mapper creation here in the API documentation page

Next we will use the below 4 endpoints to upload each category of data in bulk

Request path for product browsing history: POST /v1/items/browse/save
Request path for purchase history: POST /v1/items/purchase/save
Request path for rating history: POST /v1/items/rating/save
Request path to upload user information in bulk: POST /v1/users/save

You can find these endpoints with the example request bodies here. The sample code can be found here in the API documentation page

Previous
Environment setup
Next
Training your data
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/00_Setup_and_training/03_Data_integration_%26_user_behavior_collection/#google-tag-manager
Skip to content
Gigalogy Tutorial
Integration of Catalogue information and user behavior data
English
Japanese
Type to start searching
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Table of contents
Catalogue information integration.
Uploading data using a file
Fetch item from external API
Search Items in GAIP after import
User behavior data collection integration
Comparison of each approach.
Google Tag manager
Generating user ID
Collecting and sending user browsing data
Collecting and sending user purchase data
Collecting and sending user rating data
Collecting and sending user data
Server to server integration
User information
Product browse
Product purchase
Product rating
Client to server integration
Import user behavior data
Integration of Catalogue information and user behavior data

This tutorial will cover how to integrate your catalogue information into GAIP and how to set up user behavior tracking and integrate with GAIP.

Catalogue information integration.

Prerequisite: Mapping creation and the index creation is done.

Info

This step can also be done from our platform (GAIP). Refer here for detail.

There are two ways to import your catalogue information into GAIP.

Upload you catalogue information as a CSV or JSON file using endpoint POST /v1/item/save.
Fetch data from your API (or any external API) using endpoint POST /v1/item/save/remote.
Uploading data using a file

For uploading the data using a CSV file or JSON file, please use the POST /v1/item/save endpoint. Simply upload the file and confirm the server response is success. Confirm the task was successful using the GET/v1/tasks/{task_id} endpoint.

Info

This will throw an error and task will fail, if the keys during the Mapping creation step does not match with the keys in the file, OR if the indices were not created succesfully.

Fetch item from external API

To fetch data from external API, use the POST /v1/item/save/remote endpoint. The key and value types and an example request body for the endpoint can be found here in our sandbox.

After hitting either of the endpoint above to import your data into GAIP, you will get a task ID in the response. Use this task ID and hit the /v1/tasks/{task_id} endpoint to confirm the operation was successful. In case it fails, you can also find the details there. For API documentation, please refer <>

Search Items in GAIP after import

You can search items by passing list of item ids fromPOST /v1/items/search endpoint. This endpoint will return searched items with item details.

It is recommended to use this endpoint to confirm that the item catalogue is successfully imported into your project.

User behavior data collection integration

GAIP can collect different user behavior related information to optimize the recommendation for the user. Types of data collected are listed below with their endpoints.

Data type	Endpoint
Product browsing: When user browse products.	/v1/items/browse or /v1/items/browse/client
Product Purchase: When user purchase a product with its quantity.	/v1/items/purchase or /v1/items/purchase/client
Rating: When a user rates a product.	/v1/items/rating or /v1/items/rating/client
User: User information such as age, gender and other customized attributes depending on your website.	/v1/users or /v1/users/client

You will find these endpoints listed in our Sandbox under section "User Data Collection". Please check the required parameters, value types and example request bodies for all the endpoints there.

There are 3 ways to integrate user behavior data collection with GAIP

Google Tag Manager
Server to server integration
Client to server integration

You can also bulk upload user behavior data from the past. For that, please refer to Import user behavior data section.

Comparison of each approach.
Approach	GTM	Server to Server	Client to Server
Description	Use Google Tag Manager (GTM) to collect data (User behavior) from your website and send it to GAIP via endpoint.	The data is captured in the backend server of your application and then sent to GAIP via endpoint.	The data is directly sent from your front end (Client side) to GAIP via endpoint.
Pros	Easy to implement, Minimum coding required, Flexible configuration	More secure, Data integrity, Controlled environment	Real-time data, Less server dependency
Cons	Limited customization, need to have basic knowledge about GTM, Dependency on third-party service, Might not work for certain browsers and plugins like AdBlockers	More complex to set up, potential latency, maintenance required	Less secure, Potential for inconsistent data, dependency on client-side behavior

Below we will show the implementation of each approach.

BE ADVISED: The following is a general guideline, and it may vary across different websites, contingent upon the specific implementation of your website.

Google Tag manager

Prerequisite: Your website must have GTM setup. If you do not have GTM setup, you can easily do the setup by following the guidelines here.

If you are not familiar with basic GTM concepts, such as Tags, Triggers and Variables, please familiarize yourself first with these concepts before proceeding with this approach. You can find more resources related to this here.

Generating user ID

In our sandbox, Notice that in the user data collection endpoints, every endpoint has a parameter called user_id, and member_id. These are vital to identify each user so that you can personalize their experience. user_id is generated by GAIP for each user of your site. The endpoint to generate and user_id is GET /v1/users/generate/id. You can generate the user_id using GTM using below code. This code can be used with every Tag, which checks if there is a user_id and creates one if there is none.

// Function to get or generate 'gaip_user_id' using a function expression
var getGaipUser = function() {
  return new Promise(function(resolve, reject) {
    if (gaipUser !== null) {
      resolve(gaipUser);
    } else {
      var idHeaders = new Headers();
      idHeaders.append("project-key", "{{ YOUR_PROJECT_KEY_HERE }}");
      idHeaders.append("api-key", "{{ YOUR_API_KEY_HERE }}");
      fetch("https://api.recommender.gigalogy.com/v1/users/generate/id", { headers: idHeaders })
      .then(function(response) {
        return response.json();
      })
      .then(function(data) {
        localStorage.setItem('gaip_user_id', data.detail.response);
        resolve(data.detail.response);
      })
      .catch(reject);
    }
  });
};


member_id can be set by you depending on how your site identifies unique users such as user ID, phone number, email address etc.

Collecting and sending user browsing data

Set up a variable to capture the product name/title/ID, when the user goes a product details page or clicks on a product to enlarge it or open a pop-up etc.

Set up a trigger so that the tag would fire when the user goes browses an item (Go to product detail page or quick view options etc.).

Create a custom HTML Tag with the above trigger and variable and put the below code in the tag.

Collecting and sending user purchase data

Set up a variable to capture the all the purchase detail, when the user makes a purchase. This could be from the purchase confirmation page etc.

Set up a trigger so that the tag would fire when the user make the purchase.

Create a custom HTML Tag with the above trigger to send the information to endpoint POST /v1/purchase or POST /v1/purchase/client

Collecting and sending user rating data

Setup variables to capture the product name/title/ID and the rating, when the user rates an item positively or negatively. We can also consider an item is positively rated when user adds the item to wishlist.

Set up a trigger for the tag to fire when the user rates a product.

Create a custom HTML Tag with the above trigger and variables to send the information to the endpoint POST /v1/rating or POST /v1/rating/client

Collecting and sending user data

Setup variable to capture the user information.

For this, the trigger could be setup up when the user logs or update their information.

Create a custom HTML Tag with the above trigger and variables to send the information to the endpoint POST /v1/user or POST /v1/user/client

Server to server integration

For server to server integration, you will need to generate Project key and API as mentioned in the credentials section.

User information

The below request path, takes user information, such as name, age, gender, address and saves them in the gaip database.

POST /v1/user


Here is an example request body

{
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "user_info": {
    "address": "string",
    "gender": "integer --> 1 for male or 2 for female or 3 for others",
    "age": 25,
    "user_type": [
      {
        "key_name1": "value1_value2",
        "separator": "_"
      },
      {
        "key_name2": "value3"
      }
    ]
  }
}

You can find the sample code for implementation here

Product browse

You can use the below endpoint to capture user browsing information and save them in GAIP database

POST /v1/items/browse


It takes user_id and item_id as required parameters.

Here is an example value of the request body

  {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "item_id": "1000764491"
  }


You can find sample code here

Product purchase

You can use the below endpoint to capture user's product purchase information and save them in GAIP database

POST /v1/purchase

It takes user_id, item_list which includes item_id, price, quantity for a specific item as required parameters.

Here is an example request body

  {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "item_list": [
      {
        "item_id": "1000757666",
        "price": 5000,
        "quantity": 1
      },
      {
        "item_id": "1000764491",
        "price": 400,
        "quantity": 7
      }
    ]
  }


You a find sample code for this implementation here

Product rating

You can use the below endpoint to capture user's product rating information and save them in GAIP database

POST /v1/rating


It takes user_id, item_id, and rating for the specific item as required parameters.

Here is a sample request body

{
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "item_id": "1000764491",
  "rating": "1"
}


You can find the sample code for this implementation here

If you want to save your data with bulk upload you can use above-mentioned endpoint.

Client to server integration

For client to server integration, you will need to generate client key as described in the Credentials sections. Once the client key is ready, you can directly send the request from your client side to GAIP, using the client key provided.

Note that while generating client key, you can add whitelisted domains, which whitelists the request origin. This is recommended to enhance security.

The rest of the implementation method is same as server to server integration.

Import user behavior data

Similar to data integration, all 4 kinds of user information (browse, purchase, rating, user) can be bulk uploaded. This could be useful if you already have this information from the past and want to import it into GAIP.

To import user behavior and user information in bulk, first you need to create mapper to match the keys with GAIP.

To create the mapper, the endpoints with the example request bodies can be found here in the gigalogy recommender page. You can also find the sample codes for mapper creation here in the API documentation page

Next we will use the below 4 endpoints to upload each category of data in bulk

Request path for product browsing history: POST /v1/items/browse/save
Request path for purchase history: POST /v1/items/purchase/save
Request path for rating history: POST /v1/items/rating/save
Request path to upload user information in bulk: POST /v1/users/save

You can find these endpoints with the example request bodies here. The sample code can be found here in the API documentation page

Previous
Environment setup
Next
Training your data
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/00_Setup_and_training/03_Data_integration_%26_user_behavior_collection/#generating-user-id
Skip to content
Gigalogy Tutorial
Integration of Catalogue information and user behavior data
English
Japanese
Type to start searching
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Table of contents
Catalogue information integration.
Uploading data using a file
Fetch item from external API
Search Items in GAIP after import
User behavior data collection integration
Comparison of each approach.
Google Tag manager
Generating user ID
Collecting and sending user browsing data
Collecting and sending user purchase data
Collecting and sending user rating data
Collecting and sending user data
Server to server integration
User information
Product browse
Product purchase
Product rating
Client to server integration
Import user behavior data
Integration of Catalogue information and user behavior data

This tutorial will cover how to integrate your catalogue information into GAIP and how to set up user behavior tracking and integrate with GAIP.

Catalogue information integration.

Prerequisite: Mapping creation and the index creation is done.

Info

This step can also be done from our platform (GAIP). Refer here for detail.

There are two ways to import your catalogue information into GAIP.

Upload you catalogue information as a CSV or JSON file using endpoint POST /v1/item/save.
Fetch data from your API (or any external API) using endpoint POST /v1/item/save/remote.
Uploading data using a file

For uploading the data using a CSV file or JSON file, please use the POST /v1/item/save endpoint. Simply upload the file and confirm the server response is success. Confirm the task was successful using the GET/v1/tasks/{task_id} endpoint.

Info

This will throw an error and task will fail, if the keys during the Mapping creation step does not match with the keys in the file, OR if the indices were not created succesfully.

Fetch item from external API

To fetch data from external API, use the POST /v1/item/save/remote endpoint. The key and value types and an example request body for the endpoint can be found here in our sandbox.

After hitting either of the endpoint above to import your data into GAIP, you will get a task ID in the response. Use this task ID and hit the /v1/tasks/{task_id} endpoint to confirm the operation was successful. In case it fails, you can also find the details there. For API documentation, please refer <>

Search Items in GAIP after import

You can search items by passing list of item ids fromPOST /v1/items/search endpoint. This endpoint will return searched items with item details.

It is recommended to use this endpoint to confirm that the item catalogue is successfully imported into your project.

User behavior data collection integration

GAIP can collect different user behavior related information to optimize the recommendation for the user. Types of data collected are listed below with their endpoints.

Data type	Endpoint
Product browsing: When user browse products.	/v1/items/browse or /v1/items/browse/client
Product Purchase: When user purchase a product with its quantity.	/v1/items/purchase or /v1/items/purchase/client
Rating: When a user rates a product.	/v1/items/rating or /v1/items/rating/client
User: User information such as age, gender and other customized attributes depending on your website.	/v1/users or /v1/users/client

You will find these endpoints listed in our Sandbox under section "User Data Collection". Please check the required parameters, value types and example request bodies for all the endpoints there.

There are 3 ways to integrate user behavior data collection with GAIP

Google Tag Manager
Server to server integration
Client to server integration

You can also bulk upload user behavior data from the past. For that, please refer to Import user behavior data section.

Comparison of each approach.
Approach	GTM	Server to Server	Client to Server
Description	Use Google Tag Manager (GTM) to collect data (User behavior) from your website and send it to GAIP via endpoint.	The data is captured in the backend server of your application and then sent to GAIP via endpoint.	The data is directly sent from your front end (Client side) to GAIP via endpoint.
Pros	Easy to implement, Minimum coding required, Flexible configuration	More secure, Data integrity, Controlled environment	Real-time data, Less server dependency
Cons	Limited customization, need to have basic knowledge about GTM, Dependency on third-party service, Might not work for certain browsers and plugins like AdBlockers	More complex to set up, potential latency, maintenance required	Less secure, Potential for inconsistent data, dependency on client-side behavior

Below we will show the implementation of each approach.

BE ADVISED: The following is a general guideline, and it may vary across different websites, contingent upon the specific implementation of your website.

Google Tag manager

Prerequisite: Your website must have GTM setup. If you do not have GTM setup, you can easily do the setup by following the guidelines here.

If you are not familiar with basic GTM concepts, such as Tags, Triggers and Variables, please familiarize yourself first with these concepts before proceeding with this approach. You can find more resources related to this here.

Generating user ID

In our sandbox, Notice that in the user data collection endpoints, every endpoint has a parameter called user_id, and member_id. These are vital to identify each user so that you can personalize their experience. user_id is generated by GAIP for each user of your site. The endpoint to generate and user_id is GET /v1/users/generate/id. You can generate the user_id using GTM using below code. This code can be used with every Tag, which checks if there is a user_id and creates one if there is none.

// Function to get or generate 'gaip_user_id' using a function expression
var getGaipUser = function() {
  return new Promise(function(resolve, reject) {
    if (gaipUser !== null) {
      resolve(gaipUser);
    } else {
      var idHeaders = new Headers();
      idHeaders.append("project-key", "{{ YOUR_PROJECT_KEY_HERE }}");
      idHeaders.append("api-key", "{{ YOUR_API_KEY_HERE }}");
      fetch("https://api.recommender.gigalogy.com/v1/users/generate/id", { headers: idHeaders })
      .then(function(response) {
        return response.json();
      })
      .then(function(data) {
        localStorage.setItem('gaip_user_id', data.detail.response);
        resolve(data.detail.response);
      })
      .catch(reject);
    }
  });
};


member_id can be set by you depending on how your site identifies unique users such as user ID, phone number, email address etc.

Collecting and sending user browsing data

Set up a variable to capture the product name/title/ID, when the user goes a product details page or clicks on a product to enlarge it or open a pop-up etc.

Set up a trigger so that the tag would fire when the user goes browses an item (Go to product detail page or quick view options etc.).

Create a custom HTML Tag with the above trigger and variable and put the below code in the tag.

Collecting and sending user purchase data

Set up a variable to capture the all the purchase detail, when the user makes a purchase. This could be from the purchase confirmation page etc.

Set up a trigger so that the tag would fire when the user make the purchase.

Create a custom HTML Tag with the above trigger to send the information to endpoint POST /v1/purchase or POST /v1/purchase/client

Collecting and sending user rating data

Setup variables to capture the product name/title/ID and the rating, when the user rates an item positively or negatively. We can also consider an item is positively rated when user adds the item to wishlist.

Set up a trigger for the tag to fire when the user rates a product.

Create a custom HTML Tag with the above trigger and variables to send the information to the endpoint POST /v1/rating or POST /v1/rating/client

Collecting and sending user data

Setup variable to capture the user information.

For this, the trigger could be setup up when the user logs or update their information.

Create a custom HTML Tag with the above trigger and variables to send the information to the endpoint POST /v1/user or POST /v1/user/client

Server to server integration

For server to server integration, you will need to generate Project key and API as mentioned in the credentials section.

User information

The below request path, takes user information, such as name, age, gender, address and saves them in the gaip database.

POST /v1/user


Here is an example request body

{
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "user_info": {
    "address": "string",
    "gender": "integer --> 1 for male or 2 for female or 3 for others",
    "age": 25,
    "user_type": [
      {
        "key_name1": "value1_value2",
        "separator": "_"
      },
      {
        "key_name2": "value3"
      }
    ]
  }
}

You can find the sample code for implementation here

Product browse

You can use the below endpoint to capture user browsing information and save them in GAIP database

POST /v1/items/browse


It takes user_id and item_id as required parameters.

Here is an example value of the request body

  {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "item_id": "1000764491"
  }


You can find sample code here

Product purchase

You can use the below endpoint to capture user's product purchase information and save them in GAIP database

POST /v1/purchase

It takes user_id, item_list which includes item_id, price, quantity for a specific item as required parameters.

Here is an example request body

  {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "item_list": [
      {
        "item_id": "1000757666",
        "price": 5000,
        "quantity": 1
      },
      {
        "item_id": "1000764491",
        "price": 400,
        "quantity": 7
      }
    ]
  }


You a find sample code for this implementation here

Product rating

You can use the below endpoint to capture user's product rating information and save them in GAIP database

POST /v1/rating


It takes user_id, item_id, and rating for the specific item as required parameters.

Here is a sample request body

{
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "item_id": "1000764491",
  "rating": "1"
}


You can find the sample code for this implementation here

If you want to save your data with bulk upload you can use above-mentioned endpoint.

Client to server integration

For client to server integration, you will need to generate client key as described in the Credentials sections. Once the client key is ready, you can directly send the request from your client side to GAIP, using the client key provided.

Note that while generating client key, you can add whitelisted domains, which whitelists the request origin. This is recommended to enhance security.

The rest of the implementation method is same as server to server integration.

Import user behavior data

Similar to data integration, all 4 kinds of user information (browse, purchase, rating, user) can be bulk uploaded. This could be useful if you already have this information from the past and want to import it into GAIP.

To import user behavior and user information in bulk, first you need to create mapper to match the keys with GAIP.

To create the mapper, the endpoints with the example request bodies can be found here in the gigalogy recommender page. You can also find the sample codes for mapper creation here in the API documentation page

Next we will use the below 4 endpoints to upload each category of data in bulk

Request path for product browsing history: POST /v1/items/browse/save
Request path for purchase history: POST /v1/items/purchase/save
Request path for rating history: POST /v1/items/rating/save
Request path to upload user information in bulk: POST /v1/users/save

You can find these endpoints with the example request bodies here. The sample code can be found here in the API documentation page

Previous
Environment setup
Next
Training your data
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/00_Setup_and_training/03_Data_integration_%26_user_behavior_collection/#collecting-and-sending-user-browsing-data
Skip to content
Gigalogy Tutorial
Integration of Catalogue information and user behavior data
English
Japanese
Type to start searching
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Table of contents
Catalogue information integration.
Uploading data using a file
Fetch item from external API
Search Items in GAIP after import
User behavior data collection integration
Comparison of each approach.
Google Tag manager
Generating user ID
Collecting and sending user browsing data
Collecting and sending user purchase data
Collecting and sending user rating data
Collecting and sending user data
Server to server integration
User information
Product browse
Product purchase
Product rating
Client to server integration
Import user behavior data
Integration of Catalogue information and user behavior data

This tutorial will cover how to integrate your catalogue information into GAIP and how to set up user behavior tracking and integrate with GAIP.

Catalogue information integration.

Prerequisite: Mapping creation and the index creation is done.

Info

This step can also be done from our platform (GAIP). Refer here for detail.

There are two ways to import your catalogue information into GAIP.

Upload you catalogue information as a CSV or JSON file using endpoint POST /v1/item/save.
Fetch data from your API (or any external API) using endpoint POST /v1/item/save/remote.
Uploading data using a file

For uploading the data using a CSV file or JSON file, please use the POST /v1/item/save endpoint. Simply upload the file and confirm the server response is success. Confirm the task was successful using the GET/v1/tasks/{task_id} endpoint.

Info

This will throw an error and task will fail, if the keys during the Mapping creation step does not match with the keys in the file, OR if the indices were not created succesfully.

Fetch item from external API

To fetch data from external API, use the POST /v1/item/save/remote endpoint. The key and value types and an example request body for the endpoint can be found here in our sandbox.

After hitting either of the endpoint above to import your data into GAIP, you will get a task ID in the response. Use this task ID and hit the /v1/tasks/{task_id} endpoint to confirm the operation was successful. In case it fails, you can also find the details there. For API documentation, please refer <>

Search Items in GAIP after import

You can search items by passing list of item ids fromPOST /v1/items/search endpoint. This endpoint will return searched items with item details.

It is recommended to use this endpoint to confirm that the item catalogue is successfully imported into your project.

User behavior data collection integration

GAIP can collect different user behavior related information to optimize the recommendation for the user. Types of data collected are listed below with their endpoints.

Data type	Endpoint
Product browsing: When user browse products.	/v1/items/browse or /v1/items/browse/client
Product Purchase: When user purchase a product with its quantity.	/v1/items/purchase or /v1/items/purchase/client
Rating: When a user rates a product.	/v1/items/rating or /v1/items/rating/client
User: User information such as age, gender and other customized attributes depending on your website.	/v1/users or /v1/users/client

You will find these endpoints listed in our Sandbox under section "User Data Collection". Please check the required parameters, value types and example request bodies for all the endpoints there.

There are 3 ways to integrate user behavior data collection with GAIP

Google Tag Manager
Server to server integration
Client to server integration

You can also bulk upload user behavior data from the past. For that, please refer to Import user behavior data section.

Comparison of each approach.
Approach	GTM	Server to Server	Client to Server
Description	Use Google Tag Manager (GTM) to collect data (User behavior) from your website and send it to GAIP via endpoint.	The data is captured in the backend server of your application and then sent to GAIP via endpoint.	The data is directly sent from your front end (Client side) to GAIP via endpoint.
Pros	Easy to implement, Minimum coding required, Flexible configuration	More secure, Data integrity, Controlled environment	Real-time data, Less server dependency
Cons	Limited customization, need to have basic knowledge about GTM, Dependency on third-party service, Might not work for certain browsers and plugins like AdBlockers	More complex to set up, potential latency, maintenance required	Less secure, Potential for inconsistent data, dependency on client-side behavior

Below we will show the implementation of each approach.

BE ADVISED: The following is a general guideline, and it may vary across different websites, contingent upon the specific implementation of your website.

Google Tag manager

Prerequisite: Your website must have GTM setup. If you do not have GTM setup, you can easily do the setup by following the guidelines here.

If you are not familiar with basic GTM concepts, such as Tags, Triggers and Variables, please familiarize yourself first with these concepts before proceeding with this approach. You can find more resources related to this here.

Generating user ID

In our sandbox, Notice that in the user data collection endpoints, every endpoint has a parameter called user_id, and member_id. These are vital to identify each user so that you can personalize their experience. user_id is generated by GAIP for each user of your site. The endpoint to generate and user_id is GET /v1/users/generate/id. You can generate the user_id using GTM using below code. This code can be used with every Tag, which checks if there is a user_id and creates one if there is none.

// Function to get or generate 'gaip_user_id' using a function expression
var getGaipUser = function() {
  return new Promise(function(resolve, reject) {
    if (gaipUser !== null) {
      resolve(gaipUser);
    } else {
      var idHeaders = new Headers();
      idHeaders.append("project-key", "{{ YOUR_PROJECT_KEY_HERE }}");
      idHeaders.append("api-key", "{{ YOUR_API_KEY_HERE }}");
      fetch("https://api.recommender.gigalogy.com/v1/users/generate/id", { headers: idHeaders })
      .then(function(response) {
        return response.json();
      })
      .then(function(data) {
        localStorage.setItem('gaip_user_id', data.detail.response);
        resolve(data.detail.response);
      })
      .catch(reject);
    }
  });
};


member_id can be set by you depending on how your site identifies unique users such as user ID, phone number, email address etc.

Collecting and sending user browsing data

Set up a variable to capture the product name/title/ID, when the user goes a product details page or clicks on a product to enlarge it or open a pop-up etc.

Set up a trigger so that the tag would fire when the user goes browses an item (Go to product detail page or quick view options etc.).

Create a custom HTML Tag with the above trigger and variable and put the below code in the tag.

Collecting and sending user purchase data

Set up a variable to capture the all the purchase detail, when the user makes a purchase. This could be from the purchase confirmation page etc.

Set up a trigger so that the tag would fire when the user make the purchase.

Create a custom HTML Tag with the above trigger to send the information to endpoint POST /v1/purchase or POST /v1/purchase/client

Collecting and sending user rating data

Setup variables to capture the product name/title/ID and the rating, when the user rates an item positively or negatively. We can also consider an item is positively rated when user adds the item to wishlist.

Set up a trigger for the tag to fire when the user rates a product.

Create a custom HTML Tag with the above trigger and variables to send the information to the endpoint POST /v1/rating or POST /v1/rating/client

Collecting and sending user data

Setup variable to capture the user information.

For this, the trigger could be setup up when the user logs or update their information.

Create a custom HTML Tag with the above trigger and variables to send the information to the endpoint POST /v1/user or POST /v1/user/client

Server to server integration

For server to server integration, you will need to generate Project key and API as mentioned in the credentials section.

User information

The below request path, takes user information, such as name, age, gender, address and saves them in the gaip database.

POST /v1/user


Here is an example request body

{
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "user_info": {
    "address": "string",
    "gender": "integer --> 1 for male or 2 for female or 3 for others",
    "age": 25,
    "user_type": [
      {
        "key_name1": "value1_value2",
        "separator": "_"
      },
      {
        "key_name2": "value3"
      }
    ]
  }
}

You can find the sample code for implementation here

Product browse

You can use the below endpoint to capture user browsing information and save them in GAIP database

POST /v1/items/browse


It takes user_id and item_id as required parameters.

Here is an example value of the request body

  {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "item_id": "1000764491"
  }


You can find sample code here

Product purchase

You can use the below endpoint to capture user's product purchase information and save them in GAIP database

POST /v1/purchase

It takes user_id, item_list which includes item_id, price, quantity for a specific item as required parameters.

Here is an example request body

  {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "item_list": [
      {
        "item_id": "1000757666",
        "price": 5000,
        "quantity": 1
      },
      {
        "item_id": "1000764491",
        "price": 400,
        "quantity": 7
      }
    ]
  }


You a find sample code for this implementation here

Product rating

You can use the below endpoint to capture user's product rating information and save them in GAIP database

POST /v1/rating


It takes user_id, item_id, and rating for the specific item as required parameters.

Here is a sample request body

{
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "item_id": "1000764491",
  "rating": "1"
}


You can find the sample code for this implementation here

If you want to save your data with bulk upload you can use above-mentioned endpoint.

Client to server integration

For client to server integration, you will need to generate client key as described in the Credentials sections. Once the client key is ready, you can directly send the request from your client side to GAIP, using the client key provided.

Note that while generating client key, you can add whitelisted domains, which whitelists the request origin. This is recommended to enhance security.

The rest of the implementation method is same as server to server integration.

Import user behavior data

Similar to data integration, all 4 kinds of user information (browse, purchase, rating, user) can be bulk uploaded. This could be useful if you already have this information from the past and want to import it into GAIP.

To import user behavior and user information in bulk, first you need to create mapper to match the keys with GAIP.

To create the mapper, the endpoints with the example request bodies can be found here in the gigalogy recommender page. You can also find the sample codes for mapper creation here in the API documentation page

Next we will use the below 4 endpoints to upload each category of data in bulk

Request path for product browsing history: POST /v1/items/browse/save
Request path for purchase history: POST /v1/items/purchase/save
Request path for rating history: POST /v1/items/rating/save
Request path to upload user information in bulk: POST /v1/users/save

You can find these endpoints with the example request bodies here. The sample code can be found here in the API documentation page

Previous
Environment setup
Next
Training your data
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/00_Setup_and_training/03_Data_integration_%26_user_behavior_collection/#collecting-and-sending-user-purchase-data
Skip to content
Gigalogy Tutorial
Integration of Catalogue information and user behavior data
English
Japanese
Type to start searching
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Table of contents
Catalogue information integration.
Uploading data using a file
Fetch item from external API
Search Items in GAIP after import
User behavior data collection integration
Comparison of each approach.
Google Tag manager
Generating user ID
Collecting and sending user browsing data
Collecting and sending user purchase data
Collecting and sending user rating data
Collecting and sending user data
Server to server integration
User information
Product browse
Product purchase
Product rating
Client to server integration
Import user behavior data
Integration of Catalogue information and user behavior data

This tutorial will cover how to integrate your catalogue information into GAIP and how to set up user behavior tracking and integrate with GAIP.

Catalogue information integration.

Prerequisite: Mapping creation and the index creation is done.

Info

This step can also be done from our platform (GAIP). Refer here for detail.

There are two ways to import your catalogue information into GAIP.

Upload you catalogue information as a CSV or JSON file using endpoint POST /v1/item/save.
Fetch data from your API (or any external API) using endpoint POST /v1/item/save/remote.
Uploading data using a file

For uploading the data using a CSV file or JSON file, please use the POST /v1/item/save endpoint. Simply upload the file and confirm the server response is success. Confirm the task was successful using the GET/v1/tasks/{task_id} endpoint.

Info

This will throw an error and task will fail, if the keys during the Mapping creation step does not match with the keys in the file, OR if the indices were not created succesfully.

Fetch item from external API

To fetch data from external API, use the POST /v1/item/save/remote endpoint. The key and value types and an example request body for the endpoint can be found here in our sandbox.

After hitting either of the endpoint above to import your data into GAIP, you will get a task ID in the response. Use this task ID and hit the /v1/tasks/{task_id} endpoint to confirm the operation was successful. In case it fails, you can also find the details there. For API documentation, please refer <>

Search Items in GAIP after import

You can search items by passing list of item ids fromPOST /v1/items/search endpoint. This endpoint will return searched items with item details.

It is recommended to use this endpoint to confirm that the item catalogue is successfully imported into your project.

User behavior data collection integration

GAIP can collect different user behavior related information to optimize the recommendation for the user. Types of data collected are listed below with their endpoints.

Data type	Endpoint
Product browsing: When user browse products.	/v1/items/browse or /v1/items/browse/client
Product Purchase: When user purchase a product with its quantity.	/v1/items/purchase or /v1/items/purchase/client
Rating: When a user rates a product.	/v1/items/rating or /v1/items/rating/client
User: User information such as age, gender and other customized attributes depending on your website.	/v1/users or /v1/users/client

You will find these endpoints listed in our Sandbox under section "User Data Collection". Please check the required parameters, value types and example request bodies for all the endpoints there.

There are 3 ways to integrate user behavior data collection with GAIP

Google Tag Manager
Server to server integration
Client to server integration

You can also bulk upload user behavior data from the past. For that, please refer to Import user behavior data section.

Comparison of each approach.
Approach	GTM	Server to Server	Client to Server
Description	Use Google Tag Manager (GTM) to collect data (User behavior) from your website and send it to GAIP via endpoint.	The data is captured in the backend server of your application and then sent to GAIP via endpoint.	The data is directly sent from your front end (Client side) to GAIP via endpoint.
Pros	Easy to implement, Minimum coding required, Flexible configuration	More secure, Data integrity, Controlled environment	Real-time data, Less server dependency
Cons	Limited customization, need to have basic knowledge about GTM, Dependency on third-party service, Might not work for certain browsers and plugins like AdBlockers	More complex to set up, potential latency, maintenance required	Less secure, Potential for inconsistent data, dependency on client-side behavior

Below we will show the implementation of each approach.

BE ADVISED: The following is a general guideline, and it may vary across different websites, contingent upon the specific implementation of your website.

Google Tag manager

Prerequisite: Your website must have GTM setup. If you do not have GTM setup, you can easily do the setup by following the guidelines here.

If you are not familiar with basic GTM concepts, such as Tags, Triggers and Variables, please familiarize yourself first with these concepts before proceeding with this approach. You can find more resources related to this here.

Generating user ID

In our sandbox, Notice that in the user data collection endpoints, every endpoint has a parameter called user_id, and member_id. These are vital to identify each user so that you can personalize their experience. user_id is generated by GAIP for each user of your site. The endpoint to generate and user_id is GET /v1/users/generate/id. You can generate the user_id using GTM using below code. This code can be used with every Tag, which checks if there is a user_id and creates one if there is none.

// Function to get or generate 'gaip_user_id' using a function expression
var getGaipUser = function() {
  return new Promise(function(resolve, reject) {
    if (gaipUser !== null) {
      resolve(gaipUser);
    } else {
      var idHeaders = new Headers();
      idHeaders.append("project-key", "{{ YOUR_PROJECT_KEY_HERE }}");
      idHeaders.append("api-key", "{{ YOUR_API_KEY_HERE }}");
      fetch("https://api.recommender.gigalogy.com/v1/users/generate/id", { headers: idHeaders })
      .then(function(response) {
        return response.json();
      })
      .then(function(data) {
        localStorage.setItem('gaip_user_id', data.detail.response);
        resolve(data.detail.response);
      })
      .catch(reject);
    }
  });
};


member_id can be set by you depending on how your site identifies unique users such as user ID, phone number, email address etc.

Collecting and sending user browsing data

Set up a variable to capture the product name/title/ID, when the user goes a product details page or clicks on a product to enlarge it or open a pop-up etc.

Set up a trigger so that the tag would fire when the user goes browses an item (Go to product detail page or quick view options etc.).

Create a custom HTML Tag with the above trigger and variable and put the below code in the tag.

Collecting and sending user purchase data

Set up a variable to capture the all the purchase detail, when the user makes a purchase. This could be from the purchase confirmation page etc.

Set up a trigger so that the tag would fire when the user make the purchase.

Create a custom HTML Tag with the above trigger to send the information to endpoint POST /v1/purchase or POST /v1/purchase/client

Collecting and sending user rating data

Setup variables to capture the product name/title/ID and the rating, when the user rates an item positively or negatively. We can also consider an item is positively rated when user adds the item to wishlist.

Set up a trigger for the tag to fire when the user rates a product.

Create a custom HTML Tag with the above trigger and variables to send the information to the endpoint POST /v1/rating or POST /v1/rating/client

Collecting and sending user data

Setup variable to capture the user information.

For this, the trigger could be setup up when the user logs or update their information.

Create a custom HTML Tag with the above trigger and variables to send the information to the endpoint POST /v1/user or POST /v1/user/client

Server to server integration

For server to server integration, you will need to generate Project key and API as mentioned in the credentials section.

User information

The below request path, takes user information, such as name, age, gender, address and saves them in the gaip database.

POST /v1/user


Here is an example request body

{
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "user_info": {
    "address": "string",
    "gender": "integer --> 1 for male or 2 for female or 3 for others",
    "age": 25,
    "user_type": [
      {
        "key_name1": "value1_value2",
        "separator": "_"
      },
      {
        "key_name2": "value3"
      }
    ]
  }
}

You can find the sample code for implementation here

Product browse

You can use the below endpoint to capture user browsing information and save them in GAIP database

POST /v1/items/browse


It takes user_id and item_id as required parameters.

Here is an example value of the request body

  {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "item_id": "1000764491"
  }


You can find sample code here

Product purchase

You can use the below endpoint to capture user's product purchase information and save them in GAIP database

POST /v1/purchase

It takes user_id, item_list which includes item_id, price, quantity for a specific item as required parameters.

Here is an example request body

  {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "item_list": [
      {
        "item_id": "1000757666",
        "price": 5000,
        "quantity": 1
      },
      {
        "item_id": "1000764491",
        "price": 400,
        "quantity": 7
      }
    ]
  }


You a find sample code for this implementation here

Product rating

You can use the below endpoint to capture user's product rating information and save them in GAIP database

POST /v1/rating


It takes user_id, item_id, and rating for the specific item as required parameters.

Here is a sample request body

{
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "item_id": "1000764491",
  "rating": "1"
}


You can find the sample code for this implementation here

If you want to save your data with bulk upload you can use above-mentioned endpoint.

Client to server integration

For client to server integration, you will need to generate client key as described in the Credentials sections. Once the client key is ready, you can directly send the request from your client side to GAIP, using the client key provided.

Note that while generating client key, you can add whitelisted domains, which whitelists the request origin. This is recommended to enhance security.

The rest of the implementation method is same as server to server integration.

Import user behavior data

Similar to data integration, all 4 kinds of user information (browse, purchase, rating, user) can be bulk uploaded. This could be useful if you already have this information from the past and want to import it into GAIP.

To import user behavior and user information in bulk, first you need to create mapper to match the keys with GAIP.

To create the mapper, the endpoints with the example request bodies can be found here in the gigalogy recommender page. You can also find the sample codes for mapper creation here in the API documentation page

Next we will use the below 4 endpoints to upload each category of data in bulk

Request path for product browsing history: POST /v1/items/browse/save
Request path for purchase history: POST /v1/items/purchase/save
Request path for rating history: POST /v1/items/rating/save
Request path to upload user information in bulk: POST /v1/users/save

You can find these endpoints with the example request bodies here. The sample code can be found here in the API documentation page

Previous
Environment setup
Next
Training your data
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/00_Setup_and_training/03_Data_integration_%26_user_behavior_collection/#collecting-and-sending-user-rating-data
Skip to content
Gigalogy Tutorial
Integration of Catalogue information and user behavior data
English
Japanese
Type to start searching
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Table of contents
Catalogue information integration.
Uploading data using a file
Fetch item from external API
Search Items in GAIP after import
User behavior data collection integration
Comparison of each approach.
Google Tag manager
Generating user ID
Collecting and sending user browsing data
Collecting and sending user purchase data
Collecting and sending user rating data
Collecting and sending user data
Server to server integration
User information
Product browse
Product purchase
Product rating
Client to server integration
Import user behavior data
Integration of Catalogue information and user behavior data

This tutorial will cover how to integrate your catalogue information into GAIP and how to set up user behavior tracking and integrate with GAIP.

Catalogue information integration.

Prerequisite: Mapping creation and the index creation is done.

Info

This step can also be done from our platform (GAIP). Refer here for detail.

There are two ways to import your catalogue information into GAIP.

Upload you catalogue information as a CSV or JSON file using endpoint POST /v1/item/save.
Fetch data from your API (or any external API) using endpoint POST /v1/item/save/remote.
Uploading data using a file

For uploading the data using a CSV file or JSON file, please use the POST /v1/item/save endpoint. Simply upload the file and confirm the server response is success. Confirm the task was successful using the GET/v1/tasks/{task_id} endpoint.

Info

This will throw an error and task will fail, if the keys during the Mapping creation step does not match with the keys in the file, OR if the indices were not created succesfully.

Fetch item from external API

To fetch data from external API, use the POST /v1/item/save/remote endpoint. The key and value types and an example request body for the endpoint can be found here in our sandbox.

After hitting either of the endpoint above to import your data into GAIP, you will get a task ID in the response. Use this task ID and hit the /v1/tasks/{task_id} endpoint to confirm the operation was successful. In case it fails, you can also find the details there. For API documentation, please refer <>

Search Items in GAIP after import

You can search items by passing list of item ids fromPOST /v1/items/search endpoint. This endpoint will return searched items with item details.

It is recommended to use this endpoint to confirm that the item catalogue is successfully imported into your project.

User behavior data collection integration

GAIP can collect different user behavior related information to optimize the recommendation for the user. Types of data collected are listed below with their endpoints.

Data type	Endpoint
Product browsing: When user browse products.	/v1/items/browse or /v1/items/browse/client
Product Purchase: When user purchase a product with its quantity.	/v1/items/purchase or /v1/items/purchase/client
Rating: When a user rates a product.	/v1/items/rating or /v1/items/rating/client
User: User information such as age, gender and other customized attributes depending on your website.	/v1/users or /v1/users/client

You will find these endpoints listed in our Sandbox under section "User Data Collection". Please check the required parameters, value types and example request bodies for all the endpoints there.

There are 3 ways to integrate user behavior data collection with GAIP

Google Tag Manager
Server to server integration
Client to server integration

You can also bulk upload user behavior data from the past. For that, please refer to Import user behavior data section.

Comparison of each approach.
Approach	GTM	Server to Server	Client to Server
Description	Use Google Tag Manager (GTM) to collect data (User behavior) from your website and send it to GAIP via endpoint.	The data is captured in the backend server of your application and then sent to GAIP via endpoint.	The data is directly sent from your front end (Client side) to GAIP via endpoint.
Pros	Easy to implement, Minimum coding required, Flexible configuration	More secure, Data integrity, Controlled environment	Real-time data, Less server dependency
Cons	Limited customization, need to have basic knowledge about GTM, Dependency on third-party service, Might not work for certain browsers and plugins like AdBlockers	More complex to set up, potential latency, maintenance required	Less secure, Potential for inconsistent data, dependency on client-side behavior

Below we will show the implementation of each approach.

BE ADVISED: The following is a general guideline, and it may vary across different websites, contingent upon the specific implementation of your website.

Google Tag manager

Prerequisite: Your website must have GTM setup. If you do not have GTM setup, you can easily do the setup by following the guidelines here.

If you are not familiar with basic GTM concepts, such as Tags, Triggers and Variables, please familiarize yourself first with these concepts before proceeding with this approach. You can find more resources related to this here.

Generating user ID

In our sandbox, Notice that in the user data collection endpoints, every endpoint has a parameter called user_id, and member_id. These are vital to identify each user so that you can personalize their experience. user_id is generated by GAIP for each user of your site. The endpoint to generate and user_id is GET /v1/users/generate/id. You can generate the user_id using GTM using below code. This code can be used with every Tag, which checks if there is a user_id and creates one if there is none.

// Function to get or generate 'gaip_user_id' using a function expression
var getGaipUser = function() {
  return new Promise(function(resolve, reject) {
    if (gaipUser !== null) {
      resolve(gaipUser);
    } else {
      var idHeaders = new Headers();
      idHeaders.append("project-key", "{{ YOUR_PROJECT_KEY_HERE }}");
      idHeaders.append("api-key", "{{ YOUR_API_KEY_HERE }}");
      fetch("https://api.recommender.gigalogy.com/v1/users/generate/id", { headers: idHeaders })
      .then(function(response) {
        return response.json();
      })
      .then(function(data) {
        localStorage.setItem('gaip_user_id', data.detail.response);
        resolve(data.detail.response);
      })
      .catch(reject);
    }
  });
};


member_id can be set by you depending on how your site identifies unique users such as user ID, phone number, email address etc.

Collecting and sending user browsing data

Set up a variable to capture the product name/title/ID, when the user goes a product details page or clicks on a product to enlarge it or open a pop-up etc.

Set up a trigger so that the tag would fire when the user goes browses an item (Go to product detail page or quick view options etc.).

Create a custom HTML Tag with the above trigger and variable and put the below code in the tag.

Collecting and sending user purchase data

Set up a variable to capture the all the purchase detail, when the user makes a purchase. This could be from the purchase confirmation page etc.

Set up a trigger so that the tag would fire when the user make the purchase.

Create a custom HTML Tag with the above trigger to send the information to endpoint POST /v1/purchase or POST /v1/purchase/client

Collecting and sending user rating data

Setup variables to capture the product name/title/ID and the rating, when the user rates an item positively or negatively. We can also consider an item is positively rated when user adds the item to wishlist.

Set up a trigger for the tag to fire when the user rates a product.

Create a custom HTML Tag with the above trigger and variables to send the information to the endpoint POST /v1/rating or POST /v1/rating/client

Collecting and sending user data

Setup variable to capture the user information.

For this, the trigger could be setup up when the user logs or update their information.

Create a custom HTML Tag with the above trigger and variables to send the information to the endpoint POST /v1/user or POST /v1/user/client

Server to server integration

For server to server integration, you will need to generate Project key and API as mentioned in the credentials section.

User information

The below request path, takes user information, such as name, age, gender, address and saves them in the gaip database.

POST /v1/user


Here is an example request body

{
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "user_info": {
    "address": "string",
    "gender": "integer --> 1 for male or 2 for female or 3 for others",
    "age": 25,
    "user_type": [
      {
        "key_name1": "value1_value2",
        "separator": "_"
      },
      {
        "key_name2": "value3"
      }
    ]
  }
}

You can find the sample code for implementation here

Product browse

You can use the below endpoint to capture user browsing information and save them in GAIP database

POST /v1/items/browse


It takes user_id and item_id as required parameters.

Here is an example value of the request body

  {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "item_id": "1000764491"
  }


You can find sample code here

Product purchase

You can use the below endpoint to capture user's product purchase information and save them in GAIP database

POST /v1/purchase

It takes user_id, item_list which includes item_id, price, quantity for a specific item as required parameters.

Here is an example request body

  {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "item_list": [
      {
        "item_id": "1000757666",
        "price": 5000,
        "quantity": 1
      },
      {
        "item_id": "1000764491",
        "price": 400,
        "quantity": 7
      }
    ]
  }


You a find sample code for this implementation here

Product rating

You can use the below endpoint to capture user's product rating information and save them in GAIP database

POST /v1/rating


It takes user_id, item_id, and rating for the specific item as required parameters.

Here is a sample request body

{
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "item_id": "1000764491",
  "rating": "1"
}


You can find the sample code for this implementation here

If you want to save your data with bulk upload you can use above-mentioned endpoint.

Client to server integration

For client to server integration, you will need to generate client key as described in the Credentials sections. Once the client key is ready, you can directly send the request from your client side to GAIP, using the client key provided.

Note that while generating client key, you can add whitelisted domains, which whitelists the request origin. This is recommended to enhance security.

The rest of the implementation method is same as server to server integration.

Import user behavior data

Similar to data integration, all 4 kinds of user information (browse, purchase, rating, user) can be bulk uploaded. This could be useful if you already have this information from the past and want to import it into GAIP.

To import user behavior and user information in bulk, first you need to create mapper to match the keys with GAIP.

To create the mapper, the endpoints with the example request bodies can be found here in the gigalogy recommender page. You can also find the sample codes for mapper creation here in the API documentation page

Next we will use the below 4 endpoints to upload each category of data in bulk

Request path for product browsing history: POST /v1/items/browse/save
Request path for purchase history: POST /v1/items/purchase/save
Request path for rating history: POST /v1/items/rating/save
Request path to upload user information in bulk: POST /v1/users/save

You can find these endpoints with the example request bodies here. The sample code can be found here in the API documentation page

Previous
Environment setup
Next
Training your data
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/00_Setup_and_training/03_Data_integration_%26_user_behavior_collection/#collecting-and-sending-user-data
Skip to content
Gigalogy Tutorial
Integration of Catalogue information and user behavior data
English
Japanese
Type to start searching
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Table of contents
Catalogue information integration.
Uploading data using a file
Fetch item from external API
Search Items in GAIP after import
User behavior data collection integration
Comparison of each approach.
Google Tag manager
Generating user ID
Collecting and sending user browsing data
Collecting and sending user purchase data
Collecting and sending user rating data
Collecting and sending user data
Server to server integration
User information
Product browse
Product purchase
Product rating
Client to server integration
Import user behavior data
Integration of Catalogue information and user behavior data

This tutorial will cover how to integrate your catalogue information into GAIP and how to set up user behavior tracking and integrate with GAIP.

Catalogue information integration.

Prerequisite: Mapping creation and the index creation is done.

Info

This step can also be done from our platform (GAIP). Refer here for detail.

There are two ways to import your catalogue information into GAIP.

Upload you catalogue information as a CSV or JSON file using endpoint POST /v1/item/save.
Fetch data from your API (or any external API) using endpoint POST /v1/item/save/remote.
Uploading data using a file

For uploading the data using a CSV file or JSON file, please use the POST /v1/item/save endpoint. Simply upload the file and confirm the server response is success. Confirm the task was successful using the GET/v1/tasks/{task_id} endpoint.

Info

This will throw an error and task will fail, if the keys during the Mapping creation step does not match with the keys in the file, OR if the indices were not created succesfully.

Fetch item from external API

To fetch data from external API, use the POST /v1/item/save/remote endpoint. The key and value types and an example request body for the endpoint can be found here in our sandbox.

After hitting either of the endpoint above to import your data into GAIP, you will get a task ID in the response. Use this task ID and hit the /v1/tasks/{task_id} endpoint to confirm the operation was successful. In case it fails, you can also find the details there. For API documentation, please refer <>

Search Items in GAIP after import

You can search items by passing list of item ids fromPOST /v1/items/search endpoint. This endpoint will return searched items with item details.

It is recommended to use this endpoint to confirm that the item catalogue is successfully imported into your project.

User behavior data collection integration

GAIP can collect different user behavior related information to optimize the recommendation for the user. Types of data collected are listed below with their endpoints.

Data type	Endpoint
Product browsing: When user browse products.	/v1/items/browse or /v1/items/browse/client
Product Purchase: When user purchase a product with its quantity.	/v1/items/purchase or /v1/items/purchase/client
Rating: When a user rates a product.	/v1/items/rating or /v1/items/rating/client
User: User information such as age, gender and other customized attributes depending on your website.	/v1/users or /v1/users/client

You will find these endpoints listed in our Sandbox under section "User Data Collection". Please check the required parameters, value types and example request bodies for all the endpoints there.

There are 3 ways to integrate user behavior data collection with GAIP

Google Tag Manager
Server to server integration
Client to server integration

You can also bulk upload user behavior data from the past. For that, please refer to Import user behavior data section.

Comparison of each approach.
Approach	GTM	Server to Server	Client to Server
Description	Use Google Tag Manager (GTM) to collect data (User behavior) from your website and send it to GAIP via endpoint.	The data is captured in the backend server of your application and then sent to GAIP via endpoint.	The data is directly sent from your front end (Client side) to GAIP via endpoint.
Pros	Easy to implement, Minimum coding required, Flexible configuration	More secure, Data integrity, Controlled environment	Real-time data, Less server dependency
Cons	Limited customization, need to have basic knowledge about GTM, Dependency on third-party service, Might not work for certain browsers and plugins like AdBlockers	More complex to set up, potential latency, maintenance required	Less secure, Potential for inconsistent data, dependency on client-side behavior

Below we will show the implementation of each approach.

BE ADVISED: The following is a general guideline, and it may vary across different websites, contingent upon the specific implementation of your website.

Google Tag manager

Prerequisite: Your website must have GTM setup. If you do not have GTM setup, you can easily do the setup by following the guidelines here.

If you are not familiar with basic GTM concepts, such as Tags, Triggers and Variables, please familiarize yourself first with these concepts before proceeding with this approach. You can find more resources related to this here.

Generating user ID

In our sandbox, Notice that in the user data collection endpoints, every endpoint has a parameter called user_id, and member_id. These are vital to identify each user so that you can personalize their experience. user_id is generated by GAIP for each user of your site. The endpoint to generate and user_id is GET /v1/users/generate/id. You can generate the user_id using GTM using below code. This code can be used with every Tag, which checks if there is a user_id and creates one if there is none.

// Function to get or generate 'gaip_user_id' using a function expression
var getGaipUser = function() {
  return new Promise(function(resolve, reject) {
    if (gaipUser !== null) {
      resolve(gaipUser);
    } else {
      var idHeaders = new Headers();
      idHeaders.append("project-key", "{{ YOUR_PROJECT_KEY_HERE }}");
      idHeaders.append("api-key", "{{ YOUR_API_KEY_HERE }}");
      fetch("https://api.recommender.gigalogy.com/v1/users/generate/id", { headers: idHeaders })
      .then(function(response) {
        return response.json();
      })
      .then(function(data) {
        localStorage.setItem('gaip_user_id', data.detail.response);
        resolve(data.detail.response);
      })
      .catch(reject);
    }
  });
};


member_id can be set by you depending on how your site identifies unique users such as user ID, phone number, email address etc.

Collecting and sending user browsing data

Set up a variable to capture the product name/title/ID, when the user goes a product details page or clicks on a product to enlarge it or open a pop-up etc.

Set up a trigger so that the tag would fire when the user goes browses an item (Go to product detail page or quick view options etc.).

Create a custom HTML Tag with the above trigger and variable and put the below code in the tag.

Collecting and sending user purchase data

Set up a variable to capture the all the purchase detail, when the user makes a purchase. This could be from the purchase confirmation page etc.

Set up a trigger so that the tag would fire when the user make the purchase.

Create a custom HTML Tag with the above trigger to send the information to endpoint POST /v1/purchase or POST /v1/purchase/client

Collecting and sending user rating data

Setup variables to capture the product name/title/ID and the rating, when the user rates an item positively or negatively. We can also consider an item is positively rated when user adds the item to wishlist.

Set up a trigger for the tag to fire when the user rates a product.

Create a custom HTML Tag with the above trigger and variables to send the information to the endpoint POST /v1/rating or POST /v1/rating/client

Collecting and sending user data

Setup variable to capture the user information.

For this, the trigger could be setup up when the user logs or update their information.

Create a custom HTML Tag with the above trigger and variables to send the information to the endpoint POST /v1/user or POST /v1/user/client

Server to server integration

For server to server integration, you will need to generate Project key and API as mentioned in the credentials section.

User information

The below request path, takes user information, such as name, age, gender, address and saves them in the gaip database.

POST /v1/user


Here is an example request body

{
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "user_info": {
    "address": "string",
    "gender": "integer --> 1 for male or 2 for female or 3 for others",
    "age": 25,
    "user_type": [
      {
        "key_name1": "value1_value2",
        "separator": "_"
      },
      {
        "key_name2": "value3"
      }
    ]
  }
}

You can find the sample code for implementation here

Product browse

You can use the below endpoint to capture user browsing information and save them in GAIP database

POST /v1/items/browse


It takes user_id and item_id as required parameters.

Here is an example value of the request body

  {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "item_id": "1000764491"
  }


You can find sample code here

Product purchase

You can use the below endpoint to capture user's product purchase information and save them in GAIP database

POST /v1/purchase

It takes user_id, item_list which includes item_id, price, quantity for a specific item as required parameters.

Here is an example request body

  {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "item_list": [
      {
        "item_id": "1000757666",
        "price": 5000,
        "quantity": 1
      },
      {
        "item_id": "1000764491",
        "price": 400,
        "quantity": 7
      }
    ]
  }


You a find sample code for this implementation here

Product rating

You can use the below endpoint to capture user's product rating information and save them in GAIP database

POST /v1/rating


It takes user_id, item_id, and rating for the specific item as required parameters.

Here is a sample request body

{
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "item_id": "1000764491",
  "rating": "1"
}


You can find the sample code for this implementation here

If you want to save your data with bulk upload you can use above-mentioned endpoint.

Client to server integration

For client to server integration, you will need to generate client key as described in the Credentials sections. Once the client key is ready, you can directly send the request from your client side to GAIP, using the client key provided.

Note that while generating client key, you can add whitelisted domains, which whitelists the request origin. This is recommended to enhance security.

The rest of the implementation method is same as server to server integration.

Import user behavior data

Similar to data integration, all 4 kinds of user information (browse, purchase, rating, user) can be bulk uploaded. This could be useful if you already have this information from the past and want to import it into GAIP.

To import user behavior and user information in bulk, first you need to create mapper to match the keys with GAIP.

To create the mapper, the endpoints with the example request bodies can be found here in the gigalogy recommender page. You can also find the sample codes for mapper creation here in the API documentation page

Next we will use the below 4 endpoints to upload each category of data in bulk

Request path for product browsing history: POST /v1/items/browse/save
Request path for purchase history: POST /v1/items/purchase/save
Request path for rating history: POST /v1/items/rating/save
Request path to upload user information in bulk: POST /v1/users/save

You can find these endpoints with the example request bodies here. The sample code can be found here in the API documentation page

Previous
Environment setup
Next
Training your data
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/00_Setup_and_training/03_Data_integration_%26_user_behavior_collection/#server-to-server-integration
Skip to content
Gigalogy Tutorial
Integration of Catalogue information and user behavior data
English
Japanese
Type to start searching
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Table of contents
Catalogue information integration.
Uploading data using a file
Fetch item from external API
Search Items in GAIP after import
User behavior data collection integration
Comparison of each approach.
Google Tag manager
Generating user ID
Collecting and sending user browsing data
Collecting and sending user purchase data
Collecting and sending user rating data
Collecting and sending user data
Server to server integration
User information
Product browse
Product purchase
Product rating
Client to server integration
Import user behavior data
Integration of Catalogue information and user behavior data

This tutorial will cover how to integrate your catalogue information into GAIP and how to set up user behavior tracking and integrate with GAIP.

Catalogue information integration.

Prerequisite: Mapping creation and the index creation is done.

Info

This step can also be done from our platform (GAIP). Refer here for detail.

There are two ways to import your catalogue information into GAIP.

Upload you catalogue information as a CSV or JSON file using endpoint POST /v1/item/save.
Fetch data from your API (or any external API) using endpoint POST /v1/item/save/remote.
Uploading data using a file

For uploading the data using a CSV file or JSON file, please use the POST /v1/item/save endpoint. Simply upload the file and confirm the server response is success. Confirm the task was successful using the GET/v1/tasks/{task_id} endpoint.

Info

This will throw an error and task will fail, if the keys during the Mapping creation step does not match with the keys in the file, OR if the indices were not created succesfully.

Fetch item from external API

To fetch data from external API, use the POST /v1/item/save/remote endpoint. The key and value types and an example request body for the endpoint can be found here in our sandbox.

After hitting either of the endpoint above to import your data into GAIP, you will get a task ID in the response. Use this task ID and hit the /v1/tasks/{task_id} endpoint to confirm the operation was successful. In case it fails, you can also find the details there. For API documentation, please refer <>

Search Items in GAIP after import

You can search items by passing list of item ids fromPOST /v1/items/search endpoint. This endpoint will return searched items with item details.

It is recommended to use this endpoint to confirm that the item catalogue is successfully imported into your project.

User behavior data collection integration

GAIP can collect different user behavior related information to optimize the recommendation for the user. Types of data collected are listed below with their endpoints.

Data type	Endpoint
Product browsing: When user browse products.	/v1/items/browse or /v1/items/browse/client
Product Purchase: When user purchase a product with its quantity.	/v1/items/purchase or /v1/items/purchase/client
Rating: When a user rates a product.	/v1/items/rating or /v1/items/rating/client
User: User information such as age, gender and other customized attributes depending on your website.	/v1/users or /v1/users/client

You will find these endpoints listed in our Sandbox under section "User Data Collection". Please check the required parameters, value types and example request bodies for all the endpoints there.

There are 3 ways to integrate user behavior data collection with GAIP

Google Tag Manager
Server to server integration
Client to server integration

You can also bulk upload user behavior data from the past. For that, please refer to Import user behavior data section.

Comparison of each approach.
Approach	GTM	Server to Server	Client to Server
Description	Use Google Tag Manager (GTM) to collect data (User behavior) from your website and send it to GAIP via endpoint.	The data is captured in the backend server of your application and then sent to GAIP via endpoint.	The data is directly sent from your front end (Client side) to GAIP via endpoint.
Pros	Easy to implement, Minimum coding required, Flexible configuration	More secure, Data integrity, Controlled environment	Real-time data, Less server dependency
Cons	Limited customization, need to have basic knowledge about GTM, Dependency on third-party service, Might not work for certain browsers and plugins like AdBlockers	More complex to set up, potential latency, maintenance required	Less secure, Potential for inconsistent data, dependency on client-side behavior

Below we will show the implementation of each approach.

BE ADVISED: The following is a general guideline, and it may vary across different websites, contingent upon the specific implementation of your website.

Google Tag manager

Prerequisite: Your website must have GTM setup. If you do not have GTM setup, you can easily do the setup by following the guidelines here.

If you are not familiar with basic GTM concepts, such as Tags, Triggers and Variables, please familiarize yourself first with these concepts before proceeding with this approach. You can find more resources related to this here.

Generating user ID

In our sandbox, Notice that in the user data collection endpoints, every endpoint has a parameter called user_id, and member_id. These are vital to identify each user so that you can personalize their experience. user_id is generated by GAIP for each user of your site. The endpoint to generate and user_id is GET /v1/users/generate/id. You can generate the user_id using GTM using below code. This code can be used with every Tag, which checks if there is a user_id and creates one if there is none.

// Function to get or generate 'gaip_user_id' using a function expression
var getGaipUser = function() {
  return new Promise(function(resolve, reject) {
    if (gaipUser !== null) {
      resolve(gaipUser);
    } else {
      var idHeaders = new Headers();
      idHeaders.append("project-key", "{{ YOUR_PROJECT_KEY_HERE }}");
      idHeaders.append("api-key", "{{ YOUR_API_KEY_HERE }}");
      fetch("https://api.recommender.gigalogy.com/v1/users/generate/id", { headers: idHeaders })
      .then(function(response) {
        return response.json();
      })
      .then(function(data) {
        localStorage.setItem('gaip_user_id', data.detail.response);
        resolve(data.detail.response);
      })
      .catch(reject);
    }
  });
};


member_id can be set by you depending on how your site identifies unique users such as user ID, phone number, email address etc.

Collecting and sending user browsing data

Set up a variable to capture the product name/title/ID, when the user goes a product details page or clicks on a product to enlarge it or open a pop-up etc.

Set up a trigger so that the tag would fire when the user goes browses an item (Go to product detail page or quick view options etc.).

Create a custom HTML Tag with the above trigger and variable and put the below code in the tag.

Collecting and sending user purchase data

Set up a variable to capture the all the purchase detail, when the user makes a purchase. This could be from the purchase confirmation page etc.

Set up a trigger so that the tag would fire when the user make the purchase.

Create a custom HTML Tag with the above trigger to send the information to endpoint POST /v1/purchase or POST /v1/purchase/client

Collecting and sending user rating data

Setup variables to capture the product name/title/ID and the rating, when the user rates an item positively or negatively. We can also consider an item is positively rated when user adds the item to wishlist.

Set up a trigger for the tag to fire when the user rates a product.

Create a custom HTML Tag with the above trigger and variables to send the information to the endpoint POST /v1/rating or POST /v1/rating/client

Collecting and sending user data

Setup variable to capture the user information.

For this, the trigger could be setup up when the user logs or update their information.

Create a custom HTML Tag with the above trigger and variables to send the information to the endpoint POST /v1/user or POST /v1/user/client

Server to server integration

For server to server integration, you will need to generate Project key and API as mentioned in the credentials section.

User information

The below request path, takes user information, such as name, age, gender, address and saves them in the gaip database.

POST /v1/user


Here is an example request body

{
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "user_info": {
    "address": "string",
    "gender": "integer --> 1 for male or 2 for female or 3 for others",
    "age": 25,
    "user_type": [
      {
        "key_name1": "value1_value2",
        "separator": "_"
      },
      {
        "key_name2": "value3"
      }
    ]
  }
}

You can find the sample code for implementation here

Product browse

You can use the below endpoint to capture user browsing information and save them in GAIP database

POST /v1/items/browse


It takes user_id and item_id as required parameters.

Here is an example value of the request body

  {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "item_id": "1000764491"
  }


You can find sample code here

Product purchase

You can use the below endpoint to capture user's product purchase information and save them in GAIP database

POST /v1/purchase

It takes user_id, item_list which includes item_id, price, quantity for a specific item as required parameters.

Here is an example request body

  {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "item_list": [
      {
        "item_id": "1000757666",
        "price": 5000,
        "quantity": 1
      },
      {
        "item_id": "1000764491",
        "price": 400,
        "quantity": 7
      }
    ]
  }


You a find sample code for this implementation here

Product rating

You can use the below endpoint to capture user's product rating information and save them in GAIP database

POST /v1/rating


It takes user_id, item_id, and rating for the specific item as required parameters.

Here is a sample request body

{
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "item_id": "1000764491",
  "rating": "1"
}


You can find the sample code for this implementation here

If you want to save your data with bulk upload you can use above-mentioned endpoint.

Client to server integration

For client to server integration, you will need to generate client key as described in the Credentials sections. Once the client key is ready, you can directly send the request from your client side to GAIP, using the client key provided.

Note that while generating client key, you can add whitelisted domains, which whitelists the request origin. This is recommended to enhance security.

The rest of the implementation method is same as server to server integration.

Import user behavior data

Similar to data integration, all 4 kinds of user information (browse, purchase, rating, user) can be bulk uploaded. This could be useful if you already have this information from the past and want to import it into GAIP.

To import user behavior and user information in bulk, first you need to create mapper to match the keys with GAIP.

To create the mapper, the endpoints with the example request bodies can be found here in the gigalogy recommender page. You can also find the sample codes for mapper creation here in the API documentation page

Next we will use the below 4 endpoints to upload each category of data in bulk

Request path for product browsing history: POST /v1/items/browse/save
Request path for purchase history: POST /v1/items/purchase/save
Request path for rating history: POST /v1/items/rating/save
Request path to upload user information in bulk: POST /v1/users/save

You can find these endpoints with the example request bodies here. The sample code can be found here in the API documentation page

Previous
Environment setup
Next
Training your data
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/00_Setup_and_training/03_Data_integration_%26_user_behavior_collection/#user-information
Skip to content
Gigalogy Tutorial
Integration of Catalogue information and user behavior data
English
Japanese
Type to start searching
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Table of contents
Catalogue information integration.
Uploading data using a file
Fetch item from external API
Search Items in GAIP after import
User behavior data collection integration
Comparison of each approach.
Google Tag manager
Generating user ID
Collecting and sending user browsing data
Collecting and sending user purchase data
Collecting and sending user rating data
Collecting and sending user data
Server to server integration
User information
Product browse
Product purchase
Product rating
Client to server integration
Import user behavior data
Integration of Catalogue information and user behavior data

This tutorial will cover how to integrate your catalogue information into GAIP and how to set up user behavior tracking and integrate with GAIP.

Catalogue information integration.

Prerequisite: Mapping creation and the index creation is done.

Info

This step can also be done from our platform (GAIP). Refer here for detail.

There are two ways to import your catalogue information into GAIP.

Upload you catalogue information as a CSV or JSON file using endpoint POST /v1/item/save.
Fetch data from your API (or any external API) using endpoint POST /v1/item/save/remote.
Uploading data using a file

For uploading the data using a CSV file or JSON file, please use the POST /v1/item/save endpoint. Simply upload the file and confirm the server response is success. Confirm the task was successful using the GET/v1/tasks/{task_id} endpoint.

Info

This will throw an error and task will fail, if the keys during the Mapping creation step does not match with the keys in the file, OR if the indices were not created succesfully.

Fetch item from external API

To fetch data from external API, use the POST /v1/item/save/remote endpoint. The key and value types and an example request body for the endpoint can be found here in our sandbox.

After hitting either of the endpoint above to import your data into GAIP, you will get a task ID in the response. Use this task ID and hit the /v1/tasks/{task_id} endpoint to confirm the operation was successful. In case it fails, you can also find the details there. For API documentation, please refer <>

Search Items in GAIP after import

You can search items by passing list of item ids fromPOST /v1/items/search endpoint. This endpoint will return searched items with item details.

It is recommended to use this endpoint to confirm that the item catalogue is successfully imported into your project.

User behavior data collection integration

GAIP can collect different user behavior related information to optimize the recommendation for the user. Types of data collected are listed below with their endpoints.

Data type	Endpoint
Product browsing: When user browse products.	/v1/items/browse or /v1/items/browse/client
Product Purchase: When user purchase a product with its quantity.	/v1/items/purchase or /v1/items/purchase/client
Rating: When a user rates a product.	/v1/items/rating or /v1/items/rating/client
User: User information such as age, gender and other customized attributes depending on your website.	/v1/users or /v1/users/client

You will find these endpoints listed in our Sandbox under section "User Data Collection". Please check the required parameters, value types and example request bodies for all the endpoints there.

There are 3 ways to integrate user behavior data collection with GAIP

Google Tag Manager
Server to server integration
Client to server integration

You can also bulk upload user behavior data from the past. For that, please refer to Import user behavior data section.

Comparison of each approach.
Approach	GTM	Server to Server	Client to Server
Description	Use Google Tag Manager (GTM) to collect data (User behavior) from your website and send it to GAIP via endpoint.	The data is captured in the backend server of your application and then sent to GAIP via endpoint.	The data is directly sent from your front end (Client side) to GAIP via endpoint.
Pros	Easy to implement, Minimum coding required, Flexible configuration	More secure, Data integrity, Controlled environment	Real-time data, Less server dependency
Cons	Limited customization, need to have basic knowledge about GTM, Dependency on third-party service, Might not work for certain browsers and plugins like AdBlockers	More complex to set up, potential latency, maintenance required	Less secure, Potential for inconsistent data, dependency on client-side behavior

Below we will show the implementation of each approach.

BE ADVISED: The following is a general guideline, and it may vary across different websites, contingent upon the specific implementation of your website.

Google Tag manager

Prerequisite: Your website must have GTM setup. If you do not have GTM setup, you can easily do the setup by following the guidelines here.

If you are not familiar with basic GTM concepts, such as Tags, Triggers and Variables, please familiarize yourself first with these concepts before proceeding with this approach. You can find more resources related to this here.

Generating user ID

In our sandbox, Notice that in the user data collection endpoints, every endpoint has a parameter called user_id, and member_id. These are vital to identify each user so that you can personalize their experience. user_id is generated by GAIP for each user of your site. The endpoint to generate and user_id is GET /v1/users/generate/id. You can generate the user_id using GTM using below code. This code can be used with every Tag, which checks if there is a user_id and creates one if there is none.

// Function to get or generate 'gaip_user_id' using a function expression
var getGaipUser = function() {
  return new Promise(function(resolve, reject) {
    if (gaipUser !== null) {
      resolve(gaipUser);
    } else {
      var idHeaders = new Headers();
      idHeaders.append("project-key", "{{ YOUR_PROJECT_KEY_HERE }}");
      idHeaders.append("api-key", "{{ YOUR_API_KEY_HERE }}");
      fetch("https://api.recommender.gigalogy.com/v1/users/generate/id", { headers: idHeaders })
      .then(function(response) {
        return response.json();
      })
      .then(function(data) {
        localStorage.setItem('gaip_user_id', data.detail.response);
        resolve(data.detail.response);
      })
      .catch(reject);
    }
  });
};


member_id can be set by you depending on how your site identifies unique users such as user ID, phone number, email address etc.

Collecting and sending user browsing data

Set up a variable to capture the product name/title/ID, when the user goes a product details page or clicks on a product to enlarge it or open a pop-up etc.

Set up a trigger so that the tag would fire when the user goes browses an item (Go to product detail page or quick view options etc.).

Create a custom HTML Tag with the above trigger and variable and put the below code in the tag.

Collecting and sending user purchase data

Set up a variable to capture the all the purchase detail, when the user makes a purchase. This could be from the purchase confirmation page etc.

Set up a trigger so that the tag would fire when the user make the purchase.

Create a custom HTML Tag with the above trigger to send the information to endpoint POST /v1/purchase or POST /v1/purchase/client

Collecting and sending user rating data

Setup variables to capture the product name/title/ID and the rating, when the user rates an item positively or negatively. We can also consider an item is positively rated when user adds the item to wishlist.

Set up a trigger for the tag to fire when the user rates a product.

Create a custom HTML Tag with the above trigger and variables to send the information to the endpoint POST /v1/rating or POST /v1/rating/client

Collecting and sending user data

Setup variable to capture the user information.

For this, the trigger could be setup up when the user logs or update their information.

Create a custom HTML Tag with the above trigger and variables to send the information to the endpoint POST /v1/user or POST /v1/user/client

Server to server integration

For server to server integration, you will need to generate Project key and API as mentioned in the credentials section.

User information

The below request path, takes user information, such as name, age, gender, address and saves them in the gaip database.

POST /v1/user


Here is an example request body

{
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "user_info": {
    "address": "string",
    "gender": "integer --> 1 for male or 2 for female or 3 for others",
    "age": 25,
    "user_type": [
      {
        "key_name1": "value1_value2",
        "separator": "_"
      },
      {
        "key_name2": "value3"
      }
    ]
  }
}

You can find the sample code for implementation here

Product browse

You can use the below endpoint to capture user browsing information and save them in GAIP database

POST /v1/items/browse


It takes user_id and item_id as required parameters.

Here is an example value of the request body

  {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "item_id": "1000764491"
  }


You can find sample code here

Product purchase

You can use the below endpoint to capture user's product purchase information and save them in GAIP database

POST /v1/purchase

It takes user_id, item_list which includes item_id, price, quantity for a specific item as required parameters.

Here is an example request body

  {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "item_list": [
      {
        "item_id": "1000757666",
        "price": 5000,
        "quantity": 1
      },
      {
        "item_id": "1000764491",
        "price": 400,
        "quantity": 7
      }
    ]
  }


You a find sample code for this implementation here

Product rating

You can use the below endpoint to capture user's product rating information and save them in GAIP database

POST /v1/rating


It takes user_id, item_id, and rating for the specific item as required parameters.

Here is a sample request body

{
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "item_id": "1000764491",
  "rating": "1"
}


You can find the sample code for this implementation here

If you want to save your data with bulk upload you can use above-mentioned endpoint.

Client to server integration

For client to server integration, you will need to generate client key as described in the Credentials sections. Once the client key is ready, you can directly send the request from your client side to GAIP, using the client key provided.

Note that while generating client key, you can add whitelisted domains, which whitelists the request origin. This is recommended to enhance security.

The rest of the implementation method is same as server to server integration.

Import user behavior data

Similar to data integration, all 4 kinds of user information (browse, purchase, rating, user) can be bulk uploaded. This could be useful if you already have this information from the past and want to import it into GAIP.

To import user behavior and user information in bulk, first you need to create mapper to match the keys with GAIP.

To create the mapper, the endpoints with the example request bodies can be found here in the gigalogy recommender page. You can also find the sample codes for mapper creation here in the API documentation page

Next we will use the below 4 endpoints to upload each category of data in bulk

Request path for product browsing history: POST /v1/items/browse/save
Request path for purchase history: POST /v1/items/purchase/save
Request path for rating history: POST /v1/items/rating/save
Request path to upload user information in bulk: POST /v1/users/save

You can find these endpoints with the example request bodies here. The sample code can be found here in the API documentation page

Previous
Environment setup
Next
Training your data
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/00_Setup_and_training/03_Data_integration_%26_user_behavior_collection/#product-browse
Skip to content
Gigalogy Tutorial
Integration of Catalogue information and user behavior data
English
Japanese
Type to start searching
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Table of contents
Catalogue information integration.
Uploading data using a file
Fetch item from external API
Search Items in GAIP after import
User behavior data collection integration
Comparison of each approach.
Google Tag manager
Generating user ID
Collecting and sending user browsing data
Collecting and sending user purchase data
Collecting and sending user rating data
Collecting and sending user data
Server to server integration
User information
Product browse
Product purchase
Product rating
Client to server integration
Import user behavior data
Integration of Catalogue information and user behavior data

This tutorial will cover how to integrate your catalogue information into GAIP and how to set up user behavior tracking and integrate with GAIP.

Catalogue information integration.

Prerequisite: Mapping creation and the index creation is done.

Info

This step can also be done from our platform (GAIP). Refer here for detail.

There are two ways to import your catalogue information into GAIP.

Upload you catalogue information as a CSV or JSON file using endpoint POST /v1/item/save.
Fetch data from your API (or any external API) using endpoint POST /v1/item/save/remote.
Uploading data using a file

For uploading the data using a CSV file or JSON file, please use the POST /v1/item/save endpoint. Simply upload the file and confirm the server response is success. Confirm the task was successful using the GET/v1/tasks/{task_id} endpoint.

Info

This will throw an error and task will fail, if the keys during the Mapping creation step does not match with the keys in the file, OR if the indices were not created succesfully.

Fetch item from external API

To fetch data from external API, use the POST /v1/item/save/remote endpoint. The key and value types and an example request body for the endpoint can be found here in our sandbox.

After hitting either of the endpoint above to import your data into GAIP, you will get a task ID in the response. Use this task ID and hit the /v1/tasks/{task_id} endpoint to confirm the operation was successful. In case it fails, you can also find the details there. For API documentation, please refer <>

Search Items in GAIP after import

You can search items by passing list of item ids fromPOST /v1/items/search endpoint. This endpoint will return searched items with item details.

It is recommended to use this endpoint to confirm that the item catalogue is successfully imported into your project.

User behavior data collection integration

GAIP can collect different user behavior related information to optimize the recommendation for the user. Types of data collected are listed below with their endpoints.

Data type	Endpoint
Product browsing: When user browse products.	/v1/items/browse or /v1/items/browse/client
Product Purchase: When user purchase a product with its quantity.	/v1/items/purchase or /v1/items/purchase/client
Rating: When a user rates a product.	/v1/items/rating or /v1/items/rating/client
User: User information such as age, gender and other customized attributes depending on your website.	/v1/users or /v1/users/client

You will find these endpoints listed in our Sandbox under section "User Data Collection". Please check the required parameters, value types and example request bodies for all the endpoints there.

There are 3 ways to integrate user behavior data collection with GAIP

Google Tag Manager
Server to server integration
Client to server integration

You can also bulk upload user behavior data from the past. For that, please refer to Import user behavior data section.

Comparison of each approach.
Approach	GTM	Server to Server	Client to Server
Description	Use Google Tag Manager (GTM) to collect data (User behavior) from your website and send it to GAIP via endpoint.	The data is captured in the backend server of your application and then sent to GAIP via endpoint.	The data is directly sent from your front end (Client side) to GAIP via endpoint.
Pros	Easy to implement, Minimum coding required, Flexible configuration	More secure, Data integrity, Controlled environment	Real-time data, Less server dependency
Cons	Limited customization, need to have basic knowledge about GTM, Dependency on third-party service, Might not work for certain browsers and plugins like AdBlockers	More complex to set up, potential latency, maintenance required	Less secure, Potential for inconsistent data, dependency on client-side behavior

Below we will show the implementation of each approach.

BE ADVISED: The following is a general guideline, and it may vary across different websites, contingent upon the specific implementation of your website.

Google Tag manager

Prerequisite: Your website must have GTM setup. If you do not have GTM setup, you can easily do the setup by following the guidelines here.

If you are not familiar with basic GTM concepts, such as Tags, Triggers and Variables, please familiarize yourself first with these concepts before proceeding with this approach. You can find more resources related to this here.

Generating user ID

In our sandbox, Notice that in the user data collection endpoints, every endpoint has a parameter called user_id, and member_id. These are vital to identify each user so that you can personalize their experience. user_id is generated by GAIP for each user of your site. The endpoint to generate and user_id is GET /v1/users/generate/id. You can generate the user_id using GTM using below code. This code can be used with every Tag, which checks if there is a user_id and creates one if there is none.

// Function to get or generate 'gaip_user_id' using a function expression
var getGaipUser = function() {
  return new Promise(function(resolve, reject) {
    if (gaipUser !== null) {
      resolve(gaipUser);
    } else {
      var idHeaders = new Headers();
      idHeaders.append("project-key", "{{ YOUR_PROJECT_KEY_HERE }}");
      idHeaders.append("api-key", "{{ YOUR_API_KEY_HERE }}");
      fetch("https://api.recommender.gigalogy.com/v1/users/generate/id", { headers: idHeaders })
      .then(function(response) {
        return response.json();
      })
      .then(function(data) {
        localStorage.setItem('gaip_user_id', data.detail.response);
        resolve(data.detail.response);
      })
      .catch(reject);
    }
  });
};


member_id can be set by you depending on how your site identifies unique users such as user ID, phone number, email address etc.

Collecting and sending user browsing data

Set up a variable to capture the product name/title/ID, when the user goes a product details page or clicks on a product to enlarge it or open a pop-up etc.

Set up a trigger so that the tag would fire when the user goes browses an item (Go to product detail page or quick view options etc.).

Create a custom HTML Tag with the above trigger and variable and put the below code in the tag.

Collecting and sending user purchase data

Set up a variable to capture the all the purchase detail, when the user makes a purchase. This could be from the purchase confirmation page etc.

Set up a trigger so that the tag would fire when the user make the purchase.

Create a custom HTML Tag with the above trigger to send the information to endpoint POST /v1/purchase or POST /v1/purchase/client

Collecting and sending user rating data

Setup variables to capture the product name/title/ID and the rating, when the user rates an item positively or negatively. We can also consider an item is positively rated when user adds the item to wishlist.

Set up a trigger for the tag to fire when the user rates a product.

Create a custom HTML Tag with the above trigger and variables to send the information to the endpoint POST /v1/rating or POST /v1/rating/client

Collecting and sending user data

Setup variable to capture the user information.

For this, the trigger could be setup up when the user logs or update their information.

Create a custom HTML Tag with the above trigger and variables to send the information to the endpoint POST /v1/user or POST /v1/user/client

Server to server integration

For server to server integration, you will need to generate Project key and API as mentioned in the credentials section.

User information

The below request path, takes user information, such as name, age, gender, address and saves them in the gaip database.

POST /v1/user


Here is an example request body

{
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "user_info": {
    "address": "string",
    "gender": "integer --> 1 for male or 2 for female or 3 for others",
    "age": 25,
    "user_type": [
      {
        "key_name1": "value1_value2",
        "separator": "_"
      },
      {
        "key_name2": "value3"
      }
    ]
  }
}

You can find the sample code for implementation here

Product browse

You can use the below endpoint to capture user browsing information and save them in GAIP database

POST /v1/items/browse


It takes user_id and item_id as required parameters.

Here is an example value of the request body

  {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "item_id": "1000764491"
  }


You can find sample code here

Product purchase

You can use the below endpoint to capture user's product purchase information and save them in GAIP database

POST /v1/purchase

It takes user_id, item_list which includes item_id, price, quantity for a specific item as required parameters.

Here is an example request body

  {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "item_list": [
      {
        "item_id": "1000757666",
        "price": 5000,
        "quantity": 1
      },
      {
        "item_id": "1000764491",
        "price": 400,
        "quantity": 7
      }
    ]
  }


You a find sample code for this implementation here

Product rating

You can use the below endpoint to capture user's product rating information and save them in GAIP database

POST /v1/rating


It takes user_id, item_id, and rating for the specific item as required parameters.

Here is a sample request body

{
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "item_id": "1000764491",
  "rating": "1"
}


You can find the sample code for this implementation here

If you want to save your data with bulk upload you can use above-mentioned endpoint.

Client to server integration

For client to server integration, you will need to generate client key as described in the Credentials sections. Once the client key is ready, you can directly send the request from your client side to GAIP, using the client key provided.

Note that while generating client key, you can add whitelisted domains, which whitelists the request origin. This is recommended to enhance security.

The rest of the implementation method is same as server to server integration.

Import user behavior data

Similar to data integration, all 4 kinds of user information (browse, purchase, rating, user) can be bulk uploaded. This could be useful if you already have this information from the past and want to import it into GAIP.

To import user behavior and user information in bulk, first you need to create mapper to match the keys with GAIP.

To create the mapper, the endpoints with the example request bodies can be found here in the gigalogy recommender page. You can also find the sample codes for mapper creation here in the API documentation page

Next we will use the below 4 endpoints to upload each category of data in bulk

Request path for product browsing history: POST /v1/items/browse/save
Request path for purchase history: POST /v1/items/purchase/save
Request path for rating history: POST /v1/items/rating/save
Request path to upload user information in bulk: POST /v1/users/save

You can find these endpoints with the example request bodies here. The sample code can be found here in the API documentation page

Previous
Environment setup
Next
Training your data
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/00_Setup_and_training/03_Data_integration_%26_user_behavior_collection/#product-purchase
Skip to content
Gigalogy Tutorial
Integration of Catalogue information and user behavior data
English
Japanese
Type to start searching
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Table of contents
Catalogue information integration.
Uploading data using a file
Fetch item from external API
Search Items in GAIP after import
User behavior data collection integration
Comparison of each approach.
Google Tag manager
Generating user ID
Collecting and sending user browsing data
Collecting and sending user purchase data
Collecting and sending user rating data
Collecting and sending user data
Server to server integration
User information
Product browse
Product purchase
Product rating
Client to server integration
Import user behavior data
Integration of Catalogue information and user behavior data

This tutorial will cover how to integrate your catalogue information into GAIP and how to set up user behavior tracking and integrate with GAIP.

Catalogue information integration.

Prerequisite: Mapping creation and the index creation is done.

Info

This step can also be done from our platform (GAIP). Refer here for detail.

There are two ways to import your catalogue information into GAIP.

Upload you catalogue information as a CSV or JSON file using endpoint POST /v1/item/save.
Fetch data from your API (or any external API) using endpoint POST /v1/item/save/remote.
Uploading data using a file

For uploading the data using a CSV file or JSON file, please use the POST /v1/item/save endpoint. Simply upload the file and confirm the server response is success. Confirm the task was successful using the GET/v1/tasks/{task_id} endpoint.

Info

This will throw an error and task will fail, if the keys during the Mapping creation step does not match with the keys in the file, OR if the indices were not created succesfully.

Fetch item from external API

To fetch data from external API, use the POST /v1/item/save/remote endpoint. The key and value types and an example request body for the endpoint can be found here in our sandbox.

After hitting either of the endpoint above to import your data into GAIP, you will get a task ID in the response. Use this task ID and hit the /v1/tasks/{task_id} endpoint to confirm the operation was successful. In case it fails, you can also find the details there. For API documentation, please refer <>

Search Items in GAIP after import

You can search items by passing list of item ids fromPOST /v1/items/search endpoint. This endpoint will return searched items with item details.

It is recommended to use this endpoint to confirm that the item catalogue is successfully imported into your project.

User behavior data collection integration

GAIP can collect different user behavior related information to optimize the recommendation for the user. Types of data collected are listed below with their endpoints.

Data type	Endpoint
Product browsing: When user browse products.	/v1/items/browse or /v1/items/browse/client
Product Purchase: When user purchase a product with its quantity.	/v1/items/purchase or /v1/items/purchase/client
Rating: When a user rates a product.	/v1/items/rating or /v1/items/rating/client
User: User information such as age, gender and other customized attributes depending on your website.	/v1/users or /v1/users/client

You will find these endpoints listed in our Sandbox under section "User Data Collection". Please check the required parameters, value types and example request bodies for all the endpoints there.

There are 3 ways to integrate user behavior data collection with GAIP

Google Tag Manager
Server to server integration
Client to server integration

You can also bulk upload user behavior data from the past. For that, please refer to Import user behavior data section.

Comparison of each approach.
Approach	GTM	Server to Server	Client to Server
Description	Use Google Tag Manager (GTM) to collect data (User behavior) from your website and send it to GAIP via endpoint.	The data is captured in the backend server of your application and then sent to GAIP via endpoint.	The data is directly sent from your front end (Client side) to GAIP via endpoint.
Pros	Easy to implement, Minimum coding required, Flexible configuration	More secure, Data integrity, Controlled environment	Real-time data, Less server dependency
Cons	Limited customization, need to have basic knowledge about GTM, Dependency on third-party service, Might not work for certain browsers and plugins like AdBlockers	More complex to set up, potential latency, maintenance required	Less secure, Potential for inconsistent data, dependency on client-side behavior

Below we will show the implementation of each approach.

BE ADVISED: The following is a general guideline, and it may vary across different websites, contingent upon the specific implementation of your website.

Google Tag manager

Prerequisite: Your website must have GTM setup. If you do not have GTM setup, you can easily do the setup by following the guidelines here.

If you are not familiar with basic GTM concepts, such as Tags, Triggers and Variables, please familiarize yourself first with these concepts before proceeding with this approach. You can find more resources related to this here.

Generating user ID

In our sandbox, Notice that in the user data collection endpoints, every endpoint has a parameter called user_id, and member_id. These are vital to identify each user so that you can personalize their experience. user_id is generated by GAIP for each user of your site. The endpoint to generate and user_id is GET /v1/users/generate/id. You can generate the user_id using GTM using below code. This code can be used with every Tag, which checks if there is a user_id and creates one if there is none.

// Function to get or generate 'gaip_user_id' using a function expression
var getGaipUser = function() {
  return new Promise(function(resolve, reject) {
    if (gaipUser !== null) {
      resolve(gaipUser);
    } else {
      var idHeaders = new Headers();
      idHeaders.append("project-key", "{{ YOUR_PROJECT_KEY_HERE }}");
      idHeaders.append("api-key", "{{ YOUR_API_KEY_HERE }}");
      fetch("https://api.recommender.gigalogy.com/v1/users/generate/id", { headers: idHeaders })
      .then(function(response) {
        return response.json();
      })
      .then(function(data) {
        localStorage.setItem('gaip_user_id', data.detail.response);
        resolve(data.detail.response);
      })
      .catch(reject);
    }
  });
};


member_id can be set by you depending on how your site identifies unique users such as user ID, phone number, email address etc.

Collecting and sending user browsing data

Set up a variable to capture the product name/title/ID, when the user goes a product details page or clicks on a product to enlarge it or open a pop-up etc.

Set up a trigger so that the tag would fire when the user goes browses an item (Go to product detail page or quick view options etc.).

Create a custom HTML Tag with the above trigger and variable and put the below code in the tag.

Collecting and sending user purchase data

Set up a variable to capture the all the purchase detail, when the user makes a purchase. This could be from the purchase confirmation page etc.

Set up a trigger so that the tag would fire when the user make the purchase.

Create a custom HTML Tag with the above trigger to send the information to endpoint POST /v1/purchase or POST /v1/purchase/client

Collecting and sending user rating data

Setup variables to capture the product name/title/ID and the rating, when the user rates an item positively or negatively. We can also consider an item is positively rated when user adds the item to wishlist.

Set up a trigger for the tag to fire when the user rates a product.

Create a custom HTML Tag with the above trigger and variables to send the information to the endpoint POST /v1/rating or POST /v1/rating/client

Collecting and sending user data

Setup variable to capture the user information.

For this, the trigger could be setup up when the user logs or update their information.

Create a custom HTML Tag with the above trigger and variables to send the information to the endpoint POST /v1/user or POST /v1/user/client

Server to server integration

For server to server integration, you will need to generate Project key and API as mentioned in the credentials section.

User information

The below request path, takes user information, such as name, age, gender, address and saves them in the gaip database.

POST /v1/user


Here is an example request body

{
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "user_info": {
    "address": "string",
    "gender": "integer --> 1 for male or 2 for female or 3 for others",
    "age": 25,
    "user_type": [
      {
        "key_name1": "value1_value2",
        "separator": "_"
      },
      {
        "key_name2": "value3"
      }
    ]
  }
}

You can find the sample code for implementation here

Product browse

You can use the below endpoint to capture user browsing information and save them in GAIP database

POST /v1/items/browse


It takes user_id and item_id as required parameters.

Here is an example value of the request body

  {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "item_id": "1000764491"
  }


You can find sample code here

Product purchase

You can use the below endpoint to capture user's product purchase information and save them in GAIP database

POST /v1/purchase

It takes user_id, item_list which includes item_id, price, quantity for a specific item as required parameters.

Here is an example request body

  {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "item_list": [
      {
        "item_id": "1000757666",
        "price": 5000,
        "quantity": 1
      },
      {
        "item_id": "1000764491",
        "price": 400,
        "quantity": 7
      }
    ]
  }


You a find sample code for this implementation here

Product rating

You can use the below endpoint to capture user's product rating information and save them in GAIP database

POST /v1/rating


It takes user_id, item_id, and rating for the specific item as required parameters.

Here is a sample request body

{
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "item_id": "1000764491",
  "rating": "1"
}


You can find the sample code for this implementation here

If you want to save your data with bulk upload you can use above-mentioned endpoint.

Client to server integration

For client to server integration, you will need to generate client key as described in the Credentials sections. Once the client key is ready, you can directly send the request from your client side to GAIP, using the client key provided.

Note that while generating client key, you can add whitelisted domains, which whitelists the request origin. This is recommended to enhance security.

The rest of the implementation method is same as server to server integration.

Import user behavior data

Similar to data integration, all 4 kinds of user information (browse, purchase, rating, user) can be bulk uploaded. This could be useful if you already have this information from the past and want to import it into GAIP.

To import user behavior and user information in bulk, first you need to create mapper to match the keys with GAIP.

To create the mapper, the endpoints with the example request bodies can be found here in the gigalogy recommender page. You can also find the sample codes for mapper creation here in the API documentation page

Next we will use the below 4 endpoints to upload each category of data in bulk

Request path for product browsing history: POST /v1/items/browse/save
Request path for purchase history: POST /v1/items/purchase/save
Request path for rating history: POST /v1/items/rating/save
Request path to upload user information in bulk: POST /v1/users/save

You can find these endpoints with the example request bodies here. The sample code can be found here in the API documentation page

Previous
Environment setup
Next
Training your data
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/00_Setup_and_training/03_Data_integration_%26_user_behavior_collection/#product-rating
Skip to content
Gigalogy Tutorial
Integration of Catalogue information and user behavior data
English
Japanese
Type to start searching
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Table of contents
Catalogue information integration.
Uploading data using a file
Fetch item from external API
Search Items in GAIP after import
User behavior data collection integration
Comparison of each approach.
Google Tag manager
Generating user ID
Collecting and sending user browsing data
Collecting and sending user purchase data
Collecting and sending user rating data
Collecting and sending user data
Server to server integration
User information
Product browse
Product purchase
Product rating
Client to server integration
Import user behavior data
Integration of Catalogue information and user behavior data

This tutorial will cover how to integrate your catalogue information into GAIP and how to set up user behavior tracking and integrate with GAIP.

Catalogue information integration.

Prerequisite: Mapping creation and the index creation is done.

Info

This step can also be done from our platform (GAIP). Refer here for detail.

There are two ways to import your catalogue information into GAIP.

Upload you catalogue information as a CSV or JSON file using endpoint POST /v1/item/save.
Fetch data from your API (or any external API) using endpoint POST /v1/item/save/remote.
Uploading data using a file

For uploading the data using a CSV file or JSON file, please use the POST /v1/item/save endpoint. Simply upload the file and confirm the server response is success. Confirm the task was successful using the GET/v1/tasks/{task_id} endpoint.

Info

This will throw an error and task will fail, if the keys during the Mapping creation step does not match with the keys in the file, OR if the indices were not created succesfully.

Fetch item from external API

To fetch data from external API, use the POST /v1/item/save/remote endpoint. The key and value types and an example request body for the endpoint can be found here in our sandbox.

After hitting either of the endpoint above to import your data into GAIP, you will get a task ID in the response. Use this task ID and hit the /v1/tasks/{task_id} endpoint to confirm the operation was successful. In case it fails, you can also find the details there. For API documentation, please refer <>

Search Items in GAIP after import

You can search items by passing list of item ids fromPOST /v1/items/search endpoint. This endpoint will return searched items with item details.

It is recommended to use this endpoint to confirm that the item catalogue is successfully imported into your project.

User behavior data collection integration

GAIP can collect different user behavior related information to optimize the recommendation for the user. Types of data collected are listed below with their endpoints.

Data type	Endpoint
Product browsing: When user browse products.	/v1/items/browse or /v1/items/browse/client
Product Purchase: When user purchase a product with its quantity.	/v1/items/purchase or /v1/items/purchase/client
Rating: When a user rates a product.	/v1/items/rating or /v1/items/rating/client
User: User information such as age, gender and other customized attributes depending on your website.	/v1/users or /v1/users/client

You will find these endpoints listed in our Sandbox under section "User Data Collection". Please check the required parameters, value types and example request bodies for all the endpoints there.

There are 3 ways to integrate user behavior data collection with GAIP

Google Tag Manager
Server to server integration
Client to server integration

You can also bulk upload user behavior data from the past. For that, please refer to Import user behavior data section.

Comparison of each approach.
Approach	GTM	Server to Server	Client to Server
Description	Use Google Tag Manager (GTM) to collect data (User behavior) from your website and send it to GAIP via endpoint.	The data is captured in the backend server of your application and then sent to GAIP via endpoint.	The data is directly sent from your front end (Client side) to GAIP via endpoint.
Pros	Easy to implement, Minimum coding required, Flexible configuration	More secure, Data integrity, Controlled environment	Real-time data, Less server dependency
Cons	Limited customization, need to have basic knowledge about GTM, Dependency on third-party service, Might not work for certain browsers and plugins like AdBlockers	More complex to set up, potential latency, maintenance required	Less secure, Potential for inconsistent data, dependency on client-side behavior

Below we will show the implementation of each approach.

BE ADVISED: The following is a general guideline, and it may vary across different websites, contingent upon the specific implementation of your website.

Google Tag manager

Prerequisite: Your website must have GTM setup. If you do not have GTM setup, you can easily do the setup by following the guidelines here.

If you are not familiar with basic GTM concepts, such as Tags, Triggers and Variables, please familiarize yourself first with these concepts before proceeding with this approach. You can find more resources related to this here.

Generating user ID

In our sandbox, Notice that in the user data collection endpoints, every endpoint has a parameter called user_id, and member_id. These are vital to identify each user so that you can personalize their experience. user_id is generated by GAIP for each user of your site. The endpoint to generate and user_id is GET /v1/users/generate/id. You can generate the user_id using GTM using below code. This code can be used with every Tag, which checks if there is a user_id and creates one if there is none.

// Function to get or generate 'gaip_user_id' using a function expression
var getGaipUser = function() {
  return new Promise(function(resolve, reject) {
    if (gaipUser !== null) {
      resolve(gaipUser);
    } else {
      var idHeaders = new Headers();
      idHeaders.append("project-key", "{{ YOUR_PROJECT_KEY_HERE }}");
      idHeaders.append("api-key", "{{ YOUR_API_KEY_HERE }}");
      fetch("https://api.recommender.gigalogy.com/v1/users/generate/id", { headers: idHeaders })
      .then(function(response) {
        return response.json();
      })
      .then(function(data) {
        localStorage.setItem('gaip_user_id', data.detail.response);
        resolve(data.detail.response);
      })
      .catch(reject);
    }
  });
};


member_id can be set by you depending on how your site identifies unique users such as user ID, phone number, email address etc.

Collecting and sending user browsing data

Set up a variable to capture the product name/title/ID, when the user goes a product details page or clicks on a product to enlarge it or open a pop-up etc.

Set up a trigger so that the tag would fire when the user goes browses an item (Go to product detail page or quick view options etc.).

Create a custom HTML Tag with the above trigger and variable and put the below code in the tag.

Collecting and sending user purchase data

Set up a variable to capture the all the purchase detail, when the user makes a purchase. This could be from the purchase confirmation page etc.

Set up a trigger so that the tag would fire when the user make the purchase.

Create a custom HTML Tag with the above trigger to send the information to endpoint POST /v1/purchase or POST /v1/purchase/client

Collecting and sending user rating data

Setup variables to capture the product name/title/ID and the rating, when the user rates an item positively or negatively. We can also consider an item is positively rated when user adds the item to wishlist.

Set up a trigger for the tag to fire when the user rates a product.

Create a custom HTML Tag with the above trigger and variables to send the information to the endpoint POST /v1/rating or POST /v1/rating/client

Collecting and sending user data

Setup variable to capture the user information.

For this, the trigger could be setup up when the user logs or update their information.

Create a custom HTML Tag with the above trigger and variables to send the information to the endpoint POST /v1/user or POST /v1/user/client

Server to server integration

For server to server integration, you will need to generate Project key and API as mentioned in the credentials section.

User information

The below request path, takes user information, such as name, age, gender, address and saves them in the gaip database.

POST /v1/user


Here is an example request body

{
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "user_info": {
    "address": "string",
    "gender": "integer --> 1 for male or 2 for female or 3 for others",
    "age": 25,
    "user_type": [
      {
        "key_name1": "value1_value2",
        "separator": "_"
      },
      {
        "key_name2": "value3"
      }
    ]
  }
}

You can find the sample code for implementation here

Product browse

You can use the below endpoint to capture user browsing information and save them in GAIP database

POST /v1/items/browse


It takes user_id and item_id as required parameters.

Here is an example value of the request body

  {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "item_id": "1000764491"
  }


You can find sample code here

Product purchase

You can use the below endpoint to capture user's product purchase information and save them in GAIP database

POST /v1/purchase

It takes user_id, item_list which includes item_id, price, quantity for a specific item as required parameters.

Here is an example request body

  {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "item_list": [
      {
        "item_id": "1000757666",
        "price": 5000,
        "quantity": 1
      },
      {
        "item_id": "1000764491",
        "price": 400,
        "quantity": 7
      }
    ]
  }


You a find sample code for this implementation here

Product rating

You can use the below endpoint to capture user's product rating information and save them in GAIP database

POST /v1/rating


It takes user_id, item_id, and rating for the specific item as required parameters.

Here is a sample request body

{
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "item_id": "1000764491",
  "rating": "1"
}


You can find the sample code for this implementation here

If you want to save your data with bulk upload you can use above-mentioned endpoint.

Client to server integration

For client to server integration, you will need to generate client key as described in the Credentials sections. Once the client key is ready, you can directly send the request from your client side to GAIP, using the client key provided.

Note that while generating client key, you can add whitelisted domains, which whitelists the request origin. This is recommended to enhance security.

The rest of the implementation method is same as server to server integration.

Import user behavior data

Similar to data integration, all 4 kinds of user information (browse, purchase, rating, user) can be bulk uploaded. This could be useful if you already have this information from the past and want to import it into GAIP.

To import user behavior and user information in bulk, first you need to create mapper to match the keys with GAIP.

To create the mapper, the endpoints with the example request bodies can be found here in the gigalogy recommender page. You can also find the sample codes for mapper creation here in the API documentation page

Next we will use the below 4 endpoints to upload each category of data in bulk

Request path for product browsing history: POST /v1/items/browse/save
Request path for purchase history: POST /v1/items/purchase/save
Request path for rating history: POST /v1/items/rating/save
Request path to upload user information in bulk: POST /v1/users/save

You can find these endpoints with the example request bodies here. The sample code can be found here in the API documentation page

Previous
Environment setup
Next
Training your data
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/00_Setup_and_training/03_Data_integration_%26_user_behavior_collection/#client-to-server-integration
Skip to content
Gigalogy Tutorial
Integration of Catalogue information and user behavior data
English
Japanese
Type to start searching
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Table of contents
Catalogue information integration.
Uploading data using a file
Fetch item from external API
Search Items in GAIP after import
User behavior data collection integration
Comparison of each approach.
Google Tag manager
Generating user ID
Collecting and sending user browsing data
Collecting and sending user purchase data
Collecting and sending user rating data
Collecting and sending user data
Server to server integration
User information
Product browse
Product purchase
Product rating
Client to server integration
Import user behavior data
Integration of Catalogue information and user behavior data

This tutorial will cover how to integrate your catalogue information into GAIP and how to set up user behavior tracking and integrate with GAIP.

Catalogue information integration.

Prerequisite: Mapping creation and the index creation is done.

Info

This step can also be done from our platform (GAIP). Refer here for detail.

There are two ways to import your catalogue information into GAIP.

Upload you catalogue information as a CSV or JSON file using endpoint POST /v1/item/save.
Fetch data from your API (or any external API) using endpoint POST /v1/item/save/remote.
Uploading data using a file

For uploading the data using a CSV file or JSON file, please use the POST /v1/item/save endpoint. Simply upload the file and confirm the server response is success. Confirm the task was successful using the GET/v1/tasks/{task_id} endpoint.

Info

This will throw an error and task will fail, if the keys during the Mapping creation step does not match with the keys in the file, OR if the indices were not created succesfully.

Fetch item from external API

To fetch data from external API, use the POST /v1/item/save/remote endpoint. The key and value types and an example request body for the endpoint can be found here in our sandbox.

After hitting either of the endpoint above to import your data into GAIP, you will get a task ID in the response. Use this task ID and hit the /v1/tasks/{task_id} endpoint to confirm the operation was successful. In case it fails, you can also find the details there. For API documentation, please refer <>

Search Items in GAIP after import

You can search items by passing list of item ids fromPOST /v1/items/search endpoint. This endpoint will return searched items with item details.

It is recommended to use this endpoint to confirm that the item catalogue is successfully imported into your project.

User behavior data collection integration

GAIP can collect different user behavior related information to optimize the recommendation for the user. Types of data collected are listed below with their endpoints.

Data type	Endpoint
Product browsing: When user browse products.	/v1/items/browse or /v1/items/browse/client
Product Purchase: When user purchase a product with its quantity.	/v1/items/purchase or /v1/items/purchase/client
Rating: When a user rates a product.	/v1/items/rating or /v1/items/rating/client
User: User information such as age, gender and other customized attributes depending on your website.	/v1/users or /v1/users/client

You will find these endpoints listed in our Sandbox under section "User Data Collection". Please check the required parameters, value types and example request bodies for all the endpoints there.

There are 3 ways to integrate user behavior data collection with GAIP

Google Tag Manager
Server to server integration
Client to server integration

You can also bulk upload user behavior data from the past. For that, please refer to Import user behavior data section.

Comparison of each approach.
Approach	GTM	Server to Server	Client to Server
Description	Use Google Tag Manager (GTM) to collect data (User behavior) from your website and send it to GAIP via endpoint.	The data is captured in the backend server of your application and then sent to GAIP via endpoint.	The data is directly sent from your front end (Client side) to GAIP via endpoint.
Pros	Easy to implement, Minimum coding required, Flexible configuration	More secure, Data integrity, Controlled environment	Real-time data, Less server dependency
Cons	Limited customization, need to have basic knowledge about GTM, Dependency on third-party service, Might not work for certain browsers and plugins like AdBlockers	More complex to set up, potential latency, maintenance required	Less secure, Potential for inconsistent data, dependency on client-side behavior

Below we will show the implementation of each approach.

BE ADVISED: The following is a general guideline, and it may vary across different websites, contingent upon the specific implementation of your website.

Google Tag manager

Prerequisite: Your website must have GTM setup. If you do not have GTM setup, you can easily do the setup by following the guidelines here.

If you are not familiar with basic GTM concepts, such as Tags, Triggers and Variables, please familiarize yourself first with these concepts before proceeding with this approach. You can find more resources related to this here.

Generating user ID

In our sandbox, Notice that in the user data collection endpoints, every endpoint has a parameter called user_id, and member_id. These are vital to identify each user so that you can personalize their experience. user_id is generated by GAIP for each user of your site. The endpoint to generate and user_id is GET /v1/users/generate/id. You can generate the user_id using GTM using below code. This code can be used with every Tag, which checks if there is a user_id and creates one if there is none.

// Function to get or generate 'gaip_user_id' using a function expression
var getGaipUser = function() {
  return new Promise(function(resolve, reject) {
    if (gaipUser !== null) {
      resolve(gaipUser);
    } else {
      var idHeaders = new Headers();
      idHeaders.append("project-key", "{{ YOUR_PROJECT_KEY_HERE }}");
      idHeaders.append("api-key", "{{ YOUR_API_KEY_HERE }}");
      fetch("https://api.recommender.gigalogy.com/v1/users/generate/id", { headers: idHeaders })
      .then(function(response) {
        return response.json();
      })
      .then(function(data) {
        localStorage.setItem('gaip_user_id', data.detail.response);
        resolve(data.detail.response);
      })
      .catch(reject);
    }
  });
};


member_id can be set by you depending on how your site identifies unique users such as user ID, phone number, email address etc.

Collecting and sending user browsing data

Set up a variable to capture the product name/title/ID, when the user goes a product details page or clicks on a product to enlarge it or open a pop-up etc.

Set up a trigger so that the tag would fire when the user goes browses an item (Go to product detail page or quick view options etc.).

Create a custom HTML Tag with the above trigger and variable and put the below code in the tag.

Collecting and sending user purchase data

Set up a variable to capture the all the purchase detail, when the user makes a purchase. This could be from the purchase confirmation page etc.

Set up a trigger so that the tag would fire when the user make the purchase.

Create a custom HTML Tag with the above trigger to send the information to endpoint POST /v1/purchase or POST /v1/purchase/client

Collecting and sending user rating data

Setup variables to capture the product name/title/ID and the rating, when the user rates an item positively or negatively. We can also consider an item is positively rated when user adds the item to wishlist.

Set up a trigger for the tag to fire when the user rates a product.

Create a custom HTML Tag with the above trigger and variables to send the information to the endpoint POST /v1/rating or POST /v1/rating/client

Collecting and sending user data

Setup variable to capture the user information.

For this, the trigger could be setup up when the user logs or update their information.

Create a custom HTML Tag with the above trigger and variables to send the information to the endpoint POST /v1/user or POST /v1/user/client

Server to server integration

For server to server integration, you will need to generate Project key and API as mentioned in the credentials section.

User information

The below request path, takes user information, such as name, age, gender, address and saves them in the gaip database.

POST /v1/user


Here is an example request body

{
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "user_info": {
    "address": "string",
    "gender": "integer --> 1 for male or 2 for female or 3 for others",
    "age": 25,
    "user_type": [
      {
        "key_name1": "value1_value2",
        "separator": "_"
      },
      {
        "key_name2": "value3"
      }
    ]
  }
}

You can find the sample code for implementation here

Product browse

You can use the below endpoint to capture user browsing information and save them in GAIP database

POST /v1/items/browse


It takes user_id and item_id as required parameters.

Here is an example value of the request body

  {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "item_id": "1000764491"
  }


You can find sample code here

Product purchase

You can use the below endpoint to capture user's product purchase information and save them in GAIP database

POST /v1/purchase

It takes user_id, item_list which includes item_id, price, quantity for a specific item as required parameters.

Here is an example request body

  {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "item_list": [
      {
        "item_id": "1000757666",
        "price": 5000,
        "quantity": 1
      },
      {
        "item_id": "1000764491",
        "price": 400,
        "quantity": 7
      }
    ]
  }


You a find sample code for this implementation here

Product rating

You can use the below endpoint to capture user's product rating information and save them in GAIP database

POST /v1/rating


It takes user_id, item_id, and rating for the specific item as required parameters.

Here is a sample request body

{
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "item_id": "1000764491",
  "rating": "1"
}


You can find the sample code for this implementation here

If you want to save your data with bulk upload you can use above-mentioned endpoint.

Client to server integration

For client to server integration, you will need to generate client key as described in the Credentials sections. Once the client key is ready, you can directly send the request from your client side to GAIP, using the client key provided.

Note that while generating client key, you can add whitelisted domains, which whitelists the request origin. This is recommended to enhance security.

The rest of the implementation method is same as server to server integration.

Import user behavior data

Similar to data integration, all 4 kinds of user information (browse, purchase, rating, user) can be bulk uploaded. This could be useful if you already have this information from the past and want to import it into GAIP.

To import user behavior and user information in bulk, first you need to create mapper to match the keys with GAIP.

To create the mapper, the endpoints with the example request bodies can be found here in the gigalogy recommender page. You can also find the sample codes for mapper creation here in the API documentation page

Next we will use the below 4 endpoints to upload each category of data in bulk

Request path for product browsing history: POST /v1/items/browse/save
Request path for purchase history: POST /v1/items/purchase/save
Request path for rating history: POST /v1/items/rating/save
Request path to upload user information in bulk: POST /v1/users/save

You can find these endpoints with the example request bodies here. The sample code can be found here in the API documentation page

Previous
Environment setup
Next
Training your data
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/00_Setup_and_training/03_Data_integration_%26_user_behavior_collection/#import-user-behavior-data
Skip to content
Gigalogy Tutorial
Integration of Catalogue information and user behavior data
English
Japanese
Type to start searching
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Table of contents
Catalogue information integration.
Uploading data using a file
Fetch item from external API
Search Items in GAIP after import
User behavior data collection integration
Comparison of each approach.
Google Tag manager
Generating user ID
Collecting and sending user browsing data
Collecting and sending user purchase data
Collecting and sending user rating data
Collecting and sending user data
Server to server integration
User information
Product browse
Product purchase
Product rating
Client to server integration
Import user behavior data
Integration of Catalogue information and user behavior data

This tutorial will cover how to integrate your catalogue information into GAIP and how to set up user behavior tracking and integrate with GAIP.

Catalogue information integration.

Prerequisite: Mapping creation and the index creation is done.

Info

This step can also be done from our platform (GAIP). Refer here for detail.

There are two ways to import your catalogue information into GAIP.

Upload you catalogue information as a CSV or JSON file using endpoint POST /v1/item/save.
Fetch data from your API (or any external API) using endpoint POST /v1/item/save/remote.
Uploading data using a file

For uploading the data using a CSV file or JSON file, please use the POST /v1/item/save endpoint. Simply upload the file and confirm the server response is success. Confirm the task was successful using the GET/v1/tasks/{task_id} endpoint.

Info

This will throw an error and task will fail, if the keys during the Mapping creation step does not match with the keys in the file, OR if the indices were not created succesfully.

Fetch item from external API

To fetch data from external API, use the POST /v1/item/save/remote endpoint. The key and value types and an example request body for the endpoint can be found here in our sandbox.

After hitting either of the endpoint above to import your data into GAIP, you will get a task ID in the response. Use this task ID and hit the /v1/tasks/{task_id} endpoint to confirm the operation was successful. In case it fails, you can also find the details there. For API documentation, please refer <>

Search Items in GAIP after import

You can search items by passing list of item ids fromPOST /v1/items/search endpoint. This endpoint will return searched items with item details.

It is recommended to use this endpoint to confirm that the item catalogue is successfully imported into your project.

User behavior data collection integration

GAIP can collect different user behavior related information to optimize the recommendation for the user. Types of data collected are listed below with their endpoints.

Data type	Endpoint
Product browsing: When user browse products.	/v1/items/browse or /v1/items/browse/client
Product Purchase: When user purchase a product with its quantity.	/v1/items/purchase or /v1/items/purchase/client
Rating: When a user rates a product.	/v1/items/rating or /v1/items/rating/client
User: User information such as age, gender and other customized attributes depending on your website.	/v1/users or /v1/users/client

You will find these endpoints listed in our Sandbox under section "User Data Collection". Please check the required parameters, value types and example request bodies for all the endpoints there.

There are 3 ways to integrate user behavior data collection with GAIP

Google Tag Manager
Server to server integration
Client to server integration

You can also bulk upload user behavior data from the past. For that, please refer to Import user behavior data section.

Comparison of each approach.
Approach	GTM	Server to Server	Client to Server
Description	Use Google Tag Manager (GTM) to collect data (User behavior) from your website and send it to GAIP via endpoint.	The data is captured in the backend server of your application and then sent to GAIP via endpoint.	The data is directly sent from your front end (Client side) to GAIP via endpoint.
Pros	Easy to implement, Minimum coding required, Flexible configuration	More secure, Data integrity, Controlled environment	Real-time data, Less server dependency
Cons	Limited customization, need to have basic knowledge about GTM, Dependency on third-party service, Might not work for certain browsers and plugins like AdBlockers	More complex to set up, potential latency, maintenance required	Less secure, Potential for inconsistent data, dependency on client-side behavior

Below we will show the implementation of each approach.

BE ADVISED: The following is a general guideline, and it may vary across different websites, contingent upon the specific implementation of your website.

Google Tag manager

Prerequisite: Your website must have GTM setup. If you do not have GTM setup, you can easily do the setup by following the guidelines here.

If you are not familiar with basic GTM concepts, such as Tags, Triggers and Variables, please familiarize yourself first with these concepts before proceeding with this approach. You can find more resources related to this here.

Generating user ID

In our sandbox, Notice that in the user data collection endpoints, every endpoint has a parameter called user_id, and member_id. These are vital to identify each user so that you can personalize their experience. user_id is generated by GAIP for each user of your site. The endpoint to generate and user_id is GET /v1/users/generate/id. You can generate the user_id using GTM using below code. This code can be used with every Tag, which checks if there is a user_id and creates one if there is none.

// Function to get or generate 'gaip_user_id' using a function expression
var getGaipUser = function() {
  return new Promise(function(resolve, reject) {
    if (gaipUser !== null) {
      resolve(gaipUser);
    } else {
      var idHeaders = new Headers();
      idHeaders.append("project-key", "{{ YOUR_PROJECT_KEY_HERE }}");
      idHeaders.append("api-key", "{{ YOUR_API_KEY_HERE }}");
      fetch("https://api.recommender.gigalogy.com/v1/users/generate/id", { headers: idHeaders })
      .then(function(response) {
        return response.json();
      })
      .then(function(data) {
        localStorage.setItem('gaip_user_id', data.detail.response);
        resolve(data.detail.response);
      })
      .catch(reject);
    }
  });
};


member_id can be set by you depending on how your site identifies unique users such as user ID, phone number, email address etc.

Collecting and sending user browsing data

Set up a variable to capture the product name/title/ID, when the user goes a product details page or clicks on a product to enlarge it or open a pop-up etc.

Set up a trigger so that the tag would fire when the user goes browses an item (Go to product detail page or quick view options etc.).

Create a custom HTML Tag with the above trigger and variable and put the below code in the tag.

Collecting and sending user purchase data

Set up a variable to capture the all the purchase detail, when the user makes a purchase. This could be from the purchase confirmation page etc.

Set up a trigger so that the tag would fire when the user make the purchase.

Create a custom HTML Tag with the above trigger to send the information to endpoint POST /v1/purchase or POST /v1/purchase/client

Collecting and sending user rating data

Setup variables to capture the product name/title/ID and the rating, when the user rates an item positively or negatively. We can also consider an item is positively rated when user adds the item to wishlist.

Set up a trigger for the tag to fire when the user rates a product.

Create a custom HTML Tag with the above trigger and variables to send the information to the endpoint POST /v1/rating or POST /v1/rating/client

Collecting and sending user data

Setup variable to capture the user information.

For this, the trigger could be setup up when the user logs or update their information.

Create a custom HTML Tag with the above trigger and variables to send the information to the endpoint POST /v1/user or POST /v1/user/client

Server to server integration

For server to server integration, you will need to generate Project key and API as mentioned in the credentials section.

User information

The below request path, takes user information, such as name, age, gender, address and saves them in the gaip database.

POST /v1/user


Here is an example request body

{
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "user_info": {
    "address": "string",
    "gender": "integer --> 1 for male or 2 for female or 3 for others",
    "age": 25,
    "user_type": [
      {
        "key_name1": "value1_value2",
        "separator": "_"
      },
      {
        "key_name2": "value3"
      }
    ]
  }
}

You can find the sample code for implementation here

Product browse

You can use the below endpoint to capture user browsing information and save them in GAIP database

POST /v1/items/browse


It takes user_id and item_id as required parameters.

Here is an example value of the request body

  {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "item_id": "1000764491"
  }


You can find sample code here

Product purchase

You can use the below endpoint to capture user's product purchase information and save them in GAIP database

POST /v1/purchase

It takes user_id, item_list which includes item_id, price, quantity for a specific item as required parameters.

Here is an example request body

  {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "item_list": [
      {
        "item_id": "1000757666",
        "price": 5000,
        "quantity": 1
      },
      {
        "item_id": "1000764491",
        "price": 400,
        "quantity": 7
      }
    ]
  }


You a find sample code for this implementation here

Product rating

You can use the below endpoint to capture user's product rating information and save them in GAIP database

POST /v1/rating


It takes user_id, item_id, and rating for the specific item as required parameters.

Here is a sample request body

{
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "item_id": "1000764491",
  "rating": "1"
}


You can find the sample code for this implementation here

If you want to save your data with bulk upload you can use above-mentioned endpoint.

Client to server integration

For client to server integration, you will need to generate client key as described in the Credentials sections. Once the client key is ready, you can directly send the request from your client side to GAIP, using the client key provided.

Note that while generating client key, you can add whitelisted domains, which whitelists the request origin. This is recommended to enhance security.

The rest of the implementation method is same as server to server integration.

Import user behavior data

Similar to data integration, all 4 kinds of user information (browse, purchase, rating, user) can be bulk uploaded. This could be useful if you already have this information from the past and want to import it into GAIP.

To import user behavior and user information in bulk, first you need to create mapper to match the keys with GAIP.

To create the mapper, the endpoints with the example request bodies can be found here in the gigalogy recommender page. You can also find the sample codes for mapper creation here in the API documentation page

Next we will use the below 4 endpoints to upload each category of data in bulk

Request path for product browsing history: POST /v1/items/browse/save
Request path for purchase history: POST /v1/items/purchase/save
Request path for rating history: POST /v1/items/rating/save
Request path to upload user information in bulk: POST /v1/users/save

You can find these endpoints with the example request bodies here. The sample code can be found here in the API documentation page

Previous
Environment setup
Next
Training your data
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/00_Setup_and_training/04_Training/
Skip to content
Gigalogy Tutorial
Training your data
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Table of contents
Item Training
Image Training
Rank Training
Training your data

After you have integrated and saved your data in the GAIP database, you can train and generate intelligence from your data. You need to train several models to get your desired output. In GAIP, there are three different models that have been designed to serve different purposes.

All models are trained at regular intervals. You can also train the models manually using the following endpoints.

Info

It is recommended to run all the trainings once manually after importing the item catalog/data into GAIP. After that you can check the result immediately

Info

These steps can also be done from our platform (GAIP). Refer here for detail.

Item Training

Item model takes your items from the database and generates intelligence from it so that our solution could recommend items from user behavior and filter out items with personalized search results.

Request endpoint for training item model:

GET /v1/item/train 

Image Training

Image model takes image url from item database and generates feature vectors. Feature vectors leads to calculate the similarity score and predict similar image.

Request endpoint for training image model:

GET /v1/image/train 

Rank Training

Rank model considers user behavior, item relations from item data to predict most trending items.

Note

You will need user data to train the rank model. Follow user behavior section to save user data.

Request endpoint for training rank model:

GET /v1/rank/train 


While hitting the training endpoints, you will get a task id in response. You can check the training status of the model using that task id from GET v1/tasks/{task_id} endpoint.

It is recommended to always check and confirm with the Task endpoints to confirm the status of the training. When using it for the first time, it might take some time to complete.

You could also check the status of any training model with task type from GET/v1/tasks endpoint. By default, you will get the latest 100 tasks with their details.

You can train each model once in 24 hours time frame.

Previous
Integration of Catalogue information and user behavior data
Next
Personalized search
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/00_Setup_and_training/04_Training/#item-training
Skip to content
Gigalogy Tutorial
Training your data
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Table of contents
Item Training
Image Training
Rank Training
Training your data

After you have integrated and saved your data in the GAIP database, you can train and generate intelligence from your data. You need to train several models to get your desired output. In GAIP, there are three different models that have been designed to serve different purposes.

All models are trained at regular intervals. You can also train the models manually using the following endpoints.

Info

It is recommended to run all the trainings once manually after importing the item catalog/data into GAIP. After that you can check the result immediately

Info

These steps can also be done from our platform (GAIP). Refer here for detail.

Item Training

Item model takes your items from the database and generates intelligence from it so that our solution could recommend items from user behavior and filter out items with personalized search results.

Request endpoint for training item model:

GET /v1/item/train 

Image Training

Image model takes image url from item database and generates feature vectors. Feature vectors leads to calculate the similarity score and predict similar image.

Request endpoint for training image model:

GET /v1/image/train 

Rank Training

Rank model considers user behavior, item relations from item data to predict most trending items.

Note

You will need user data to train the rank model. Follow user behavior section to save user data.

Request endpoint for training rank model:

GET /v1/rank/train 


While hitting the training endpoints, you will get a task id in response. You can check the training status of the model using that task id from GET v1/tasks/{task_id} endpoint.

It is recommended to always check and confirm with the Task endpoints to confirm the status of the training. When using it for the first time, it might take some time to complete.

You could also check the status of any training model with task type from GET/v1/tasks endpoint. By default, you will get the latest 100 tasks with their details.

You can train each model once in 24 hours time frame.

Previous
Integration of Catalogue information and user behavior data
Next
Personalized search
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/00_Setup_and_training/04_Training/#image-training
Skip to content
Gigalogy Tutorial
Training your data
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Table of contents
Item Training
Image Training
Rank Training
Training your data

After you have integrated and saved your data in the GAIP database, you can train and generate intelligence from your data. You need to train several models to get your desired output. In GAIP, there are three different models that have been designed to serve different purposes.

All models are trained at regular intervals. You can also train the models manually using the following endpoints.

Info

It is recommended to run all the trainings once manually after importing the item catalog/data into GAIP. After that you can check the result immediately

Info

These steps can also be done from our platform (GAIP). Refer here for detail.

Item Training

Item model takes your items from the database and generates intelligence from it so that our solution could recommend items from user behavior and filter out items with personalized search results.

Request endpoint for training item model:

GET /v1/item/train 

Image Training

Image model takes image url from item database and generates feature vectors. Feature vectors leads to calculate the similarity score and predict similar image.

Request endpoint for training image model:

GET /v1/image/train 

Rank Training

Rank model considers user behavior, item relations from item data to predict most trending items.

Note

You will need user data to train the rank model. Follow user behavior section to save user data.

Request endpoint for training rank model:

GET /v1/rank/train 


While hitting the training endpoints, you will get a task id in response. You can check the training status of the model using that task id from GET v1/tasks/{task_id} endpoint.

It is recommended to always check and confirm with the Task endpoints to confirm the status of the training. When using it for the first time, it might take some time to complete.

You could also check the status of any training model with task type from GET/v1/tasks endpoint. By default, you will get the latest 100 tasks with their details.

You can train each model once in 24 hours time frame.

Previous
Integration of Catalogue information and user behavior data
Next
Personalized search
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/00_Setup_and_training/04_Training/#rank-training
Skip to content
Gigalogy Tutorial
Training your data
English
Japanese
Type to start searching
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Table of contents
Item Training
Image Training
Rank Training
Training your data

After you have integrated and saved your data in the GAIP database, you can train and generate intelligence from your data. You need to train several models to get your desired output. In GAIP, there are three different models that have been designed to serve different purposes.

All models are trained at regular intervals. You can also train the models manually using the following endpoints.

Info

It is recommended to run all the trainings once manually after importing the item catalog/data into GAIP. After that you can check the result immediately

Info

These steps can also be done from our platform (GAIP). Refer here for detail.

Item Training

Item model takes your items from the database and generates intelligence from it so that our solution could recommend items from user behavior and filter out items with personalized search results.

Request endpoint for training item model:

GET /v1/item/train 

Image Training

Image model takes image url from item database and generates feature vectors. Feature vectors leads to calculate the similarity score and predict similar image.

Request endpoint for training image model:

GET /v1/image/train 

Rank Training

Rank model considers user behavior, item relations from item data to predict most trending items.

Note

You will need user data to train the rank model. Follow user behavior section to save user data.

Request endpoint for training rank model:

GET /v1/rank/train 


While hitting the training endpoints, you will get a task id in response. You can check the training status of the model using that task id from GET v1/tasks/{task_id} endpoint.

It is recommended to always check and confirm with the Task endpoints to confirm the status of the training. When using it for the first time, it might take some time to complete.

You could also check the status of any training model with task type from GET/v1/tasks endpoint. By default, you will get the latest 100 tasks with their details.

You can train each model once in 24 hours time frame.

Previous
Integration of Catalogue information and user behavior data
Next
Personalized search
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/01_Integration/00_Personalized_search_engine/
Skip to content
Gigalogy Tutorial
Personalized search
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Personalized search engine

Our endpoint /v1/items/search, generates personalized search results tailored for each user in your application.

It considers user behavior, current trends, and more and returns a customized search result for each individual.

This endpoint takes several parameters to generate customized search results.

To implement this solution, please use the endpoint /v1/items/search. The required parameters and an example request body can be found in our sandbox here.

You can find sample code for this implementation here.

Please note

category : User can search the items using category field using the value that you have mapped in the environment setup (mapper creation) with the "category" key.
flag : If you have any boolean values in your dataset and set as flag in mapper settings you can pass those values to filter the items using flag field.
sort : In sort field you have to pass columns that doesn't contain text field. You couldn't pass title, second_title, third_title, fourth_title, description as the column name.
Previous
Training your data
Next
Personalized Image Search
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/01_Integration/00_Personalized_search_engine/#personalized-search-engine
Skip to content
Gigalogy Tutorial
Personalized search
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Personalized search engine

Our endpoint /v1/items/search, generates personalized search results tailored for each user in your application.

It considers user behavior, current trends, and more and returns a customized search result for each individual.

This endpoint takes several parameters to generate customized search results.

To implement this solution, please use the endpoint /v1/items/search. The required parameters and an example request body can be found in our sandbox here.

You can find sample code for this implementation here.

Please note

category : User can search the items using category field using the value that you have mapped in the environment setup (mapper creation) with the "category" key.
flag : If you have any boolean values in your dataset and set as flag in mapper settings you can pass those values to filter the items using flag field.
sort : In sort field you have to pass columns that doesn't contain text field. You couldn't pass title, second_title, third_title, fourth_title, description as the column name.
Previous
Training your data
Next
Personalized Image Search
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/01_Integration/06_Image_Search_Engine/
Skip to content
Gigalogy Tutorial
Personalized Image Search
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Image Search Engine

Image search endpoint generates search results based on image similarity. You have to upload an image it will search most similar items for you and retrieve them as response.

For example, this endpoint could be used in the product details page if you want to show similar product that matches the image of the product in the detail page.

Request path:

POST /v1/images/search


You can find the list and description of required parameters here.

You can find the sample codes for this implementation here.

Previous
Personalized search
Next
Personalized Feed
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/01_Integration/06_Image_Search_Engine/#image-search-engine
Skip to content
Gigalogy Tutorial
Personalized Image Search
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Image Search Engine

Image search endpoint generates search results based on image similarity. You have to upload an image it will search most similar items for you and retrieve them as response.

For example, this endpoint could be used in the product details page if you want to show similar product that matches the image of the product in the detail page.

Request path:

POST /v1/images/search


You can find the list and description of required parameters here.

You can find the sample codes for this implementation here.

Previous
Personalized search
Next
Personalized Feed
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/01_Integration/02_Personalized_Feed/
Skip to content
Gigalogy Tutorial
Personalized Feed
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Table of contents
1. users/recommend
2. users/search/recommend
Personalized Feed

These solutions can be used to personalize the user feed when they log into your website, open the homepage, or search for products, among other actions.

There are two endpoints here that you can use at different sections of the page

1. users/recommend

POST /v1/users/recommend can be used to personalize the user feed such as the home page or some other general pages.

v1/users/recommend endpoint understands user behavior such as browse history, purchase history, favorites/wishlist, time spent in your application and returns the most suitable items for them as a response.

The details of required parameters and a sample request body for this can be found here.

You can find sample code for implementation here.

2. users/search/recommend

This endpoint analyzes user search history and, based on that, returns recommended items to the user. It can be integrated into the user feed, the top page, personalized suggestions, or as a widget, among other applications.

Additionally, the response from this endpoint can be utilized to send users emails about products recommended based on their search history.

Request path:

POST /v1/users/search/recommend

To implement this solution, you can find the description of the required parameters and an example request body here. You can find sample codes for implementation here.

Previous
Personalized Image Search
Next
Recommend trending items
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/01_Integration/02_Personalized_Feed/#personalized-feed
Skip to content
Gigalogy Tutorial
Personalized Feed
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Table of contents
1. users/recommend
2. users/search/recommend
Personalized Feed

These solutions can be used to personalize the user feed when they log into your website, open the homepage, or search for products, among other actions.

There are two endpoints here that you can use at different sections of the page

1. users/recommend

POST /v1/users/recommend can be used to personalize the user feed such as the home page or some other general pages.

v1/users/recommend endpoint understands user behavior such as browse history, purchase history, favorites/wishlist, time spent in your application and returns the most suitable items for them as a response.

The details of required parameters and a sample request body for this can be found here.

You can find sample code for implementation here.

2. users/search/recommend

This endpoint analyzes user search history and, based on that, returns recommended items to the user. It can be integrated into the user feed, the top page, personalized suggestions, or as a widget, among other applications.

Additionally, the response from this endpoint can be utilized to send users emails about products recommended based on their search history.

Request path:

POST /v1/users/search/recommend

To implement this solution, you can find the description of the required parameters and an example request body here. You can find sample codes for implementation here.

Previous
Personalized Image Search
Next
Recommend trending items
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/01_Integration/02_Personalized_Feed/#1-usersrecommend
Skip to content
Gigalogy Tutorial
Personalized Feed
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Table of contents
1. users/recommend
2. users/search/recommend
Personalized Feed

These solutions can be used to personalize the user feed when they log into your website, open the homepage, or search for products, among other actions.

There are two endpoints here that you can use at different sections of the page

1. users/recommend

POST /v1/users/recommend can be used to personalize the user feed such as the home page or some other general pages.

v1/users/recommend endpoint understands user behavior such as browse history, purchase history, favorites/wishlist, time spent in your application and returns the most suitable items for them as a response.

The details of required parameters and a sample request body for this can be found here.

You can find sample code for implementation here.

2. users/search/recommend

This endpoint analyzes user search history and, based on that, returns recommended items to the user. It can be integrated into the user feed, the top page, personalized suggestions, or as a widget, among other applications.

Additionally, the response from this endpoint can be utilized to send users emails about products recommended based on their search history.

Request path:

POST /v1/users/search/recommend

To implement this solution, you can find the description of the required parameters and an example request body here. You can find sample codes for implementation here.

Previous
Personalized Image Search
Next
Recommend trending items
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/01_Integration/02_Personalized_Feed/#2-userssearchrecommend
Skip to content
Gigalogy Tutorial
Personalized Feed
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Table of contents
1. users/recommend
2. users/search/recommend
Personalized Feed

These solutions can be used to personalize the user feed when they log into your website, open the homepage, or search for products, among other actions.

There are two endpoints here that you can use at different sections of the page

1. users/recommend

POST /v1/users/recommend can be used to personalize the user feed such as the home page or some other general pages.

v1/users/recommend endpoint understands user behavior such as browse history, purchase history, favorites/wishlist, time spent in your application and returns the most suitable items for them as a response.

The details of required parameters and a sample request body for this can be found here.

You can find sample code for implementation here.

2. users/search/recommend

This endpoint analyzes user search history and, based on that, returns recommended items to the user. It can be integrated into the user feed, the top page, personalized suggestions, or as a widget, among other applications.

Additionally, the response from this endpoint can be utilized to send users emails about products recommended based on their search history.

Request path:

POST /v1/users/search/recommend

To implement this solution, you can find the description of the required parameters and an example request body here. You can find sample codes for implementation here.

Previous
Personalized Image Search
Next
Recommend trending items
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/01_Integration/03_Trending_Items_Recommendation_Engine/
Skip to content
Gigalogy Tutorial
Recommend trending items
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Trending items recommendation engine

Our /v1/items/trending endpoint considers all kind of possible parameters in your application such as user behavior, item co-relation, external impact, business impact and returns the trending items for a given interval as response. You can use it on user feed, top page, personalized suggestions etc.

To use this feature, you must first set up the key parameters for the ranking model via the endpoint POST /v1/ranks/settings.

You can find the required parameters with their description and an example request body here.

You can always check the current setting using GET /v1/ranks/settings and update the setting using PUT /v1/ranks/settings.

Once the above setting is done, then you can set up the feature for showing trending items using the below request path:

POST /v1/items/trending


To implement this solution, the required parameters with their description and an example request body can be found here. You can find sample code for implementation here.

Previous
Personalized Feed
Next
Recommend similar items
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/01_Integration/03_Trending_Items_Recommendation_Engine/#trending-items-recommendation-engine
Skip to content
Gigalogy Tutorial
Recommend trending items
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Trending items recommendation engine

Our /v1/items/trending endpoint considers all kind of possible parameters in your application such as user behavior, item co-relation, external impact, business impact and returns the trending items for a given interval as response. You can use it on user feed, top page, personalized suggestions etc.

To use this feature, you must first set up the key parameters for the ranking model via the endpoint POST /v1/ranks/settings.

You can find the required parameters with their description and an example request body here.

You can always check the current setting using GET /v1/ranks/settings and update the setting using PUT /v1/ranks/settings.

Once the above setting is done, then you can set up the feature for showing trending items using the below request path:

POST /v1/items/trending


To implement this solution, the required parameters with their description and an example request body can be found here. You can find sample code for implementation here.

Previous
Personalized Feed
Next
Recommend similar items
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/01_Integration/04_Recommend_Similar_Products_on_Details_Page/
Skip to content
Gigalogy Tutorial
Recommend similar items
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Recommend Similar Products

This solution can be used to recommend similar products and could be used in your EC site's product details page or search result page to show similar products.

Item recommend endpoint understands the content of your item and returns the most similar items as response.

Request path for this solution is:

POST /v1/items/recommend


To implement this solution, the required parameters with description and a sample request body can be found here. You can find sample code for implementation here.

Previous
Recommend trending items
Next
Recommend items purchase together
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/01_Integration/04_Recommend_Similar_Products_on_Details_Page/#recommend-similar-products
Skip to content
Gigalogy Tutorial
Recommend similar items
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Recommend Similar Products

This solution can be used to recommend similar products and could be used in your EC site's product details page or search result page to show similar products.

Item recommend endpoint understands the content of your item and returns the most similar items as response.

Request path for this solution is:

POST /v1/items/recommend


To implement this solution, the required parameters with description and a sample request body can be found here. You can find sample code for implementation here.

Previous
Recommend trending items
Next
Recommend items purchase together
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/01_Integration/purchased_together/
Gigalogy Tutorial
Recommend items purchase together
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Recommend items purchase together

This endpoint considers the items that are frequently purchased together and recommend those items for particular products. The endpoint, along with other parameters, takes item_id as an input, and in response, gives items that are usually purchased together with the given item.

Request path for this solution is:

POST /v1/items/purchased/together


You can find the required parameters with their description and an example request body here in our sandbox.

You can find sample code for implementation here in our API documentation.

Previous
Recommend similar items
Next
Dynamic Pricing
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/01_Integration/05_Dynamic_Pricing/
Skip to content
Gigalogy Tutorial
Dynamic Pricing
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Dynamic Pricing

Dynamic pricing is a pricing strategy in which the cost of a product or service is adjusted in real-time based on the popularity of the product.

You can maximize revenue and profit by finding the optimal price point that customers are willing to pay.

The lowest price is always the given price.

Info

If you provided the catalogue information is also shared, a customized dynamic pricing solution can be designed. Please contact in this regard.

This solution have to be setup while setting up the personalize search engine.

Please find the boolean value dynamic pricing in the request body. When you provide the value "True," this solution will display a dynamic price to the user.

Previous
Recommend items purchase together
Next
Questionnaire
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/01_Integration/05_Dynamic_Pricing/#dynamic-pricing
Skip to content
Gigalogy Tutorial
Dynamic Pricing
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Dynamic Pricing

Dynamic pricing is a pricing strategy in which the cost of a product or service is adjusted in real-time based on the popularity of the product.

You can maximize revenue and profit by finding the optimal price point that customers are willing to pay.

The lowest price is always the given price.

Info

If you provided the catalogue information is also shared, a customized dynamic pricing solution can be designed. Please contact in this regard.

This solution have to be setup while setting up the personalize search engine.

Please find the boolean value dynamic pricing in the request body. When you provide the value "True," this solution will display a dynamic price to the user.

Previous
Recommend items purchase together
Next
Questionnaire
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/01_Integration/Questionnaire/
Skip to content
Gigalogy Tutorial
Questionnaire
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Table of contents
Registration of Questionnaire
Registration of Questionnaire Mapper
Questions
Exclusivity
Prompt
Prompt Order
GPT Settings
Integration of Questionnaire Recommendation
Reviewing Questionnaire Recommendation Logs
Questionnaire

Our questionnaire software is specifically tailored to provide recommendations for novice and experienced users. Here is how it works:

Questionnaire Design: We meticulously design the questionnaire to encapsulate all necessary questions and decisions.
Questionnaire Registration: The questionnaire is seamlessly integrated into the project, enabling easy access and interaction.
User Response Collection: User responses are gathered through an interactive, user-friendly, UI-based questionnaire embedded in the website.
Response Processing: These responses are then processed by the GAIP system.
Product Recommendation: Finally, personalized product recommendations are suggested based on the processed responses.

Furthermore, the registration of the questionnaire into the project constitutes two crucial phases:

Registration of Questionnaire: Where the questionnaire is incorporated into the project.
Registration of Questionnaire Mapper: Which equips the AI system with the knowledge to accurately interpret decisions based on the users' responses to the questions.
Registration of Questionnaire

To manage the questionnaire, a series of RESTful API endpoints are provided which can be explored in our sandbox.

Creating a new questionnaire: Make a POST request to /v1/questionnaires to create a new questionnaire. The sandbox hosts detailed explanations and sample request bodies. The questionnaire can be divided into different sections, with at least one required.

Listing all questionnaires: Sending a GET request to /v1/questionnaires/list lists all the questionnaire's ID and names. A project can host multiple questionnaires that are differentiated through these IDs.

Viewing a questionnaire: Make a GET request to /v1/questionnaires/{questionnaire_id} to retrieve a specific questionnaire's details, including sections and questions.

Updating and deleting questionnaire: Use the PUT /v1/questionnaires/{questionnaire_id} and DELETE /v1/questionnaires/{questionnaire_id} endpoints to update or remove a questionnaire respectively.

Registration of Questionnaire Mapper

A questionnaire mapper is essential to instruct the system on making decisions based on user responses. Corresponding endpoints for creating, viewing, and editing a mapper are found at /v1/questionnaires/{questionnaire_id}/mapper.

To create a mapper, use POST /v1/questionnaires/{questionnaire_id}/mapper.

The mapper consists of five main components:

Questions: This section maps the decisions for all questionnaire questions.
Exclusivity: Handles duplicate removal and exclusivity requirements.
Prompt Generation: This section produces prompts that are used by the AI to generate recommendations.
Prompt Order: Sets the sequence in which prompts appear.
GPT settings: Provides settings and parameters to the GPT module for context understanding.

Each section will be explained in detail as we progress further.

Questions

Inside a question object we add mapper for different possible values.

A questionnaire can have three types of questions 1. Radio button: User can select a single answer, 2. Checkbox: User can select multiple answers, 3. Free text: User can enter string.

To add mapper for a single value, use the value key as the key for related decision objects. This approach allows you to define how the system should handle or process that value.

Example

{
  "skincare_history": {
    "q2": {
      "mapper": {
        "a": {
          "exclude": ["Retinol",  "Retinol based products"]
        }
      }
    }
  }
}

In the above example, the key a represents answer selected by user. The object associated with a specifies decisions related to it—in this case, an exclude list. This list contains the values Retinol and Retinol based products, defined by the creator of the mapper. How this Exclude list is used is covered in a latter section below.

To add mapper for a combination of value (Answers with multiple selection), - Use | sign as or to combine more than one values for a decision in mapper. - Use & sign as and to combine more than one values for a decision in mapper. Example

{
  "a|b|c": {
    "exclude": ["Retinol",  "Retinol palmitate"]
  }
}


To add mapper for free-text value, use any key to add the decision rule. This can be useful for taking age, allergy information etc. Example

{
  "any": {
    "age": ""
  }
}


When a decision need to be taken if a set of value is not selected we should use negative selection.

An example scenario.

What of the following skincare you follow every day?

a. Cleanser b. Moisturizer c. Spf d. Serum e. Toner f. Night cream g. Eye cream

Decision: if cleanser, moisturizer and spf is chosen, AI will consider all products

If one of the basic step(cleanser, moisturizer, spf) is not chosen, Ai will exclude Retinol, Retinol palmitate, tranexamic acid, vitamin C, vitamin C derivative , arbutin

Here we need to take a decision if cleanser, moisturizer, spf is not selected, this is a candidate for negative selection.

Rules: Use ~ as key to add negative selection decisions in a question mapper. Use value serial as usual inside the negative selection object to add decision if a value is not selected, e.g. "a": "decision" Example

{
  "q1": {
    "mapper" : {
      "a": {
        "tags": ["acne", "anti-aging"]
      },
      "~": {
        "a|b|c": {
          "exclude": ["Retinol",  "Retinol palmitate",  "tranexamic acid",  "vitamin c",  "vitamin c derivative" , "arbutin"]
        },
        "d": {
          "tags": ["Retinol"]
        }
      }
    }
  }
}

Exclusivity

The integration of exclusivity in the mapper is crucial for eliminating duplicates and addressing exclusivity prerequisites.

To incorporate exclusivity, you utilize the exclusive key to append an object in the following format:

"prompt_key-1" :  "prompt_key-2"


Doing so ensures that any value present in both prompt_key-1 and prompt_key-2, within the final prompt, will be extracted exclusively from prompt_key-2.

For instance:

{
  "exclusive": {
    "exclude": "includes",
    "exclude_tag": "include_tag"
  }
}


Prompt

Each prompt section is a decision point. A prompt section has two constituting parts, the sentence and the variable. Let's say we have a decision point to exclude products that has certain tags. we can add a prompt section named exclude_tags as follows

{
  "prompt_sections": {
    "exclude_tags": "Exclude any products that has following tags {exclude_tags}."
  }
}


And We need to add the exclude_tags in mapper wherever this decision point need to be mapped. An example mapper, like we have discussed above, would be

{
  "q1": {
    "mapper": {
      "a": {
        "exclude_tags": ["retinol", "retinol based products"]
      }
    }
  }
}


An example prompt section for a cosmetics company could be.

{
  "prompt_sections": {
    "age": "I am {age} years old.",
    "gender": "I am a {gender}.",
    "skin_type": "My skin type is {skin_type}.",
    "include_tag": "Show products that contain the tag: {include_tag}",
    "exclude_tag": "Exclude products that do contain the tag: {exclude_tag}"
  }
}

Prompt Order

This section is to decide the order of the prompts in the prompt section above. This section must contain all the prompts from the above section. This is the order by which the prompts will be sent to GPT model. Note: This order effects the quality of the response. User should try different orders to find the best result.

An example prompt order from the prompt_sections sample above sample could be:

{
  "prompt_order": [
    "age",
    "gender",
    "skin_type",
    "include_tag",
    "exclude_tag"
  ]
}

GPT Settings

This section is required for the context and various parameter setting for GPT. The prompt generated til this point above, goes to our GPT model, which is familiar with the item catalogue. This GPT model, in turn generates this recommendation for the user. Below is an example.

{
    "gpt_settings": {
    "model": "gpt-3.5-turbo-0613",
    "search_max_token": 2500,
    "intro": "Using given context make recommendation. make recommendation of top {{ recommend_count }} products in json format and your response should denote the json part with three tick notations(```). Use `we` as your pronoun. json object should have following format. {'comment': 'make an overall comment about your recommendations', 'advice':'...', 'recommendations': [{'id':'...', 'comment': 'why you chose this product'},{'id':'...', 'comment': 'why you chose this product'}]}. if the query includes `specialist_pretext` then include that suggestion in your 'advice'",
    "system": "You are an expert on ...",
    "temperature": 0,
    "top_p": 1,
    "frequency_penalty": 0,
    "presence_penalty": 0,
    "stop": [
      "AI:",
      "Human:"
    ],
    "recommend_count": 3,
    "result_includes": [
      "key_name_1",
      "key_name_2"
    ],
    "top_k": 20,
    "is_keyword_enabled": true
  }
}

Integration of Questionnaire Recommendation

The questionnaire recommendation function processes user responses, identifies the corresponding questionnaire and decision points, and generates personalized recommendations. The endpoint POST /v1/questionnaire/recommend is designed for this purpose.

Detailed examples, required parameters, and explanations can be found in our sandbox.

This endpoint requires questionnaire_id as input. This identifier helps determine which questionnaire and mapping to consult, and which user response to consider, leading to the generation of personalized results.

You will notice the recommend_count parameter also exist in the mapper. If it is set, the value of this parameter takes priority over recommend_count variable in questionnaire mapper.

The response format of this endpoint can be customized using the previously mentioned GPT settings.

Reviewing Questionnaire Recommendation Logs

By utilizing the endpoint GET /v1/questionnaires/{questionnaire_id}/logs, you're able to access the log of requests dispatched to the v1/questionnaire/recommend endpoint, along with the corresponding generated responses.

Previous
Dynamic Pricing
Next
GPT Project setup
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/01_Integration/Questionnaire/#registration-of-questionnaire
Skip to content
Gigalogy Tutorial
Questionnaire
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Table of contents
Registration of Questionnaire
Registration of Questionnaire Mapper
Questions
Exclusivity
Prompt
Prompt Order
GPT Settings
Integration of Questionnaire Recommendation
Reviewing Questionnaire Recommendation Logs
Questionnaire

Our questionnaire software is specifically tailored to provide recommendations for novice and experienced users. Here is how it works:

Questionnaire Design: We meticulously design the questionnaire to encapsulate all necessary questions and decisions.
Questionnaire Registration: The questionnaire is seamlessly integrated into the project, enabling easy access and interaction.
User Response Collection: User responses are gathered through an interactive, user-friendly, UI-based questionnaire embedded in the website.
Response Processing: These responses are then processed by the GAIP system.
Product Recommendation: Finally, personalized product recommendations are suggested based on the processed responses.

Furthermore, the registration of the questionnaire into the project constitutes two crucial phases:

Registration of Questionnaire: Where the questionnaire is incorporated into the project.
Registration of Questionnaire Mapper: Which equips the AI system with the knowledge to accurately interpret decisions based on the users' responses to the questions.
Registration of Questionnaire

To manage the questionnaire, a series of RESTful API endpoints are provided which can be explored in our sandbox.

Creating a new questionnaire: Make a POST request to /v1/questionnaires to create a new questionnaire. The sandbox hosts detailed explanations and sample request bodies. The questionnaire can be divided into different sections, with at least one required.

Listing all questionnaires: Sending a GET request to /v1/questionnaires/list lists all the questionnaire's ID and names. A project can host multiple questionnaires that are differentiated through these IDs.

Viewing a questionnaire: Make a GET request to /v1/questionnaires/{questionnaire_id} to retrieve a specific questionnaire's details, including sections and questions.

Updating and deleting questionnaire: Use the PUT /v1/questionnaires/{questionnaire_id} and DELETE /v1/questionnaires/{questionnaire_id} endpoints to update or remove a questionnaire respectively.

Registration of Questionnaire Mapper

A questionnaire mapper is essential to instruct the system on making decisions based on user responses. Corresponding endpoints for creating, viewing, and editing a mapper are found at /v1/questionnaires/{questionnaire_id}/mapper.

To create a mapper, use POST /v1/questionnaires/{questionnaire_id}/mapper.

The mapper consists of five main components:

Questions: This section maps the decisions for all questionnaire questions.
Exclusivity: Handles duplicate removal and exclusivity requirements.
Prompt Generation: This section produces prompts that are used by the AI to generate recommendations.
Prompt Order: Sets the sequence in which prompts appear.
GPT settings: Provides settings and parameters to the GPT module for context understanding.

Each section will be explained in detail as we progress further.

Questions

Inside a question object we add mapper for different possible values.

A questionnaire can have three types of questions 1. Radio button: User can select a single answer, 2. Checkbox: User can select multiple answers, 3. Free text: User can enter string.

To add mapper for a single value, use the value key as the key for related decision objects. This approach allows you to define how the system should handle or process that value.

Example

{
  "skincare_history": {
    "q2": {
      "mapper": {
        "a": {
          "exclude": ["Retinol",  "Retinol based products"]
        }
      }
    }
  }
}

In the above example, the key a represents answer selected by user. The object associated with a specifies decisions related to it—in this case, an exclude list. This list contains the values Retinol and Retinol based products, defined by the creator of the mapper. How this Exclude list is used is covered in a latter section below.

To add mapper for a combination of value (Answers with multiple selection), - Use | sign as or to combine more than one values for a decision in mapper. - Use & sign as and to combine more than one values for a decision in mapper. Example

{
  "a|b|c": {
    "exclude": ["Retinol",  "Retinol palmitate"]
  }
}


To add mapper for free-text value, use any key to add the decision rule. This can be useful for taking age, allergy information etc. Example

{
  "any": {
    "age": ""
  }
}


When a decision need to be taken if a set of value is not selected we should use negative selection.

An example scenario.

What of the following skincare you follow every day?

a. Cleanser b. Moisturizer c. Spf d. Serum e. Toner f. Night cream g. Eye cream

Decision: if cleanser, moisturizer and spf is chosen, AI will consider all products

If one of the basic step(cleanser, moisturizer, spf) is not chosen, Ai will exclude Retinol, Retinol palmitate, tranexamic acid, vitamin C, vitamin C derivative , arbutin

Here we need to take a decision if cleanser, moisturizer, spf is not selected, this is a candidate for negative selection.

Rules: Use ~ as key to add negative selection decisions in a question mapper. Use value serial as usual inside the negative selection object to add decision if a value is not selected, e.g. "a": "decision" Example

{
  "q1": {
    "mapper" : {
      "a": {
        "tags": ["acne", "anti-aging"]
      },
      "~": {
        "a|b|c": {
          "exclude": ["Retinol",  "Retinol palmitate",  "tranexamic acid",  "vitamin c",  "vitamin c derivative" , "arbutin"]
        },
        "d": {
          "tags": ["Retinol"]
        }
      }
    }
  }
}

Exclusivity

The integration of exclusivity in the mapper is crucial for eliminating duplicates and addressing exclusivity prerequisites.

To incorporate exclusivity, you utilize the exclusive key to append an object in the following format:

"prompt_key-1" :  "prompt_key-2"


Doing so ensures that any value present in both prompt_key-1 and prompt_key-2, within the final prompt, will be extracted exclusively from prompt_key-2.

For instance:

{
  "exclusive": {
    "exclude": "includes",
    "exclude_tag": "include_tag"
  }
}


Prompt

Each prompt section is a decision point. A prompt section has two constituting parts, the sentence and the variable. Let's say we have a decision point to exclude products that has certain tags. we can add a prompt section named exclude_tags as follows

{
  "prompt_sections": {
    "exclude_tags": "Exclude any products that has following tags {exclude_tags}."
  }
}


And We need to add the exclude_tags in mapper wherever this decision point need to be mapped. An example mapper, like we have discussed above, would be

{
  "q1": {
    "mapper": {
      "a": {
        "exclude_tags": ["retinol", "retinol based products"]
      }
    }
  }
}


An example prompt section for a cosmetics company could be.

{
  "prompt_sections": {
    "age": "I am {age} years old.",
    "gender": "I am a {gender}.",
    "skin_type": "My skin type is {skin_type}.",
    "include_tag": "Show products that contain the tag: {include_tag}",
    "exclude_tag": "Exclude products that do contain the tag: {exclude_tag}"
  }
}

Prompt Order

This section is to decide the order of the prompts in the prompt section above. This section must contain all the prompts from the above section. This is the order by which the prompts will be sent to GPT model. Note: This order effects the quality of the response. User should try different orders to find the best result.

An example prompt order from the prompt_sections sample above sample could be:

{
  "prompt_order": [
    "age",
    "gender",
    "skin_type",
    "include_tag",
    "exclude_tag"
  ]
}

GPT Settings

This section is required for the context and various parameter setting for GPT. The prompt generated til this point above, goes to our GPT model, which is familiar with the item catalogue. This GPT model, in turn generates this recommendation for the user. Below is an example.

{
    "gpt_settings": {
    "model": "gpt-3.5-turbo-0613",
    "search_max_token": 2500,
    "intro": "Using given context make recommendation. make recommendation of top {{ recommend_count }} products in json format and your response should denote the json part with three tick notations(```). Use `we` as your pronoun. json object should have following format. {'comment': 'make an overall comment about your recommendations', 'advice':'...', 'recommendations': [{'id':'...', 'comment': 'why you chose this product'},{'id':'...', 'comment': 'why you chose this product'}]}. if the query includes `specialist_pretext` then include that suggestion in your 'advice'",
    "system": "You are an expert on ...",
    "temperature": 0,
    "top_p": 1,
    "frequency_penalty": 0,
    "presence_penalty": 0,
    "stop": [
      "AI:",
      "Human:"
    ],
    "recommend_count": 3,
    "result_includes": [
      "key_name_1",
      "key_name_2"
    ],
    "top_k": 20,
    "is_keyword_enabled": true
  }
}

Integration of Questionnaire Recommendation

The questionnaire recommendation function processes user responses, identifies the corresponding questionnaire and decision points, and generates personalized recommendations. The endpoint POST /v1/questionnaire/recommend is designed for this purpose.

Detailed examples, required parameters, and explanations can be found in our sandbox.

This endpoint requires questionnaire_id as input. This identifier helps determine which questionnaire and mapping to consult, and which user response to consider, leading to the generation of personalized results.

You will notice the recommend_count parameter also exist in the mapper. If it is set, the value of this parameter takes priority over recommend_count variable in questionnaire mapper.

The response format of this endpoint can be customized using the previously mentioned GPT settings.

Reviewing Questionnaire Recommendation Logs

By utilizing the endpoint GET /v1/questionnaires/{questionnaire_id}/logs, you're able to access the log of requests dispatched to the v1/questionnaire/recommend endpoint, along with the corresponding generated responses.

Previous
Dynamic Pricing
Next
GPT Project setup
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/01_Integration/Questionnaire/#registration-of-questionnaire-mapper
Skip to content
Gigalogy Tutorial
Questionnaire
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Table of contents
Registration of Questionnaire
Registration of Questionnaire Mapper
Questions
Exclusivity
Prompt
Prompt Order
GPT Settings
Integration of Questionnaire Recommendation
Reviewing Questionnaire Recommendation Logs
Questionnaire

Our questionnaire software is specifically tailored to provide recommendations for novice and experienced users. Here is how it works:

Questionnaire Design: We meticulously design the questionnaire to encapsulate all necessary questions and decisions.
Questionnaire Registration: The questionnaire is seamlessly integrated into the project, enabling easy access and interaction.
User Response Collection: User responses are gathered through an interactive, user-friendly, UI-based questionnaire embedded in the website.
Response Processing: These responses are then processed by the GAIP system.
Product Recommendation: Finally, personalized product recommendations are suggested based on the processed responses.

Furthermore, the registration of the questionnaire into the project constitutes two crucial phases:

Registration of Questionnaire: Where the questionnaire is incorporated into the project.
Registration of Questionnaire Mapper: Which equips the AI system with the knowledge to accurately interpret decisions based on the users' responses to the questions.
Registration of Questionnaire

To manage the questionnaire, a series of RESTful API endpoints are provided which can be explored in our sandbox.

Creating a new questionnaire: Make a POST request to /v1/questionnaires to create a new questionnaire. The sandbox hosts detailed explanations and sample request bodies. The questionnaire can be divided into different sections, with at least one required.

Listing all questionnaires: Sending a GET request to /v1/questionnaires/list lists all the questionnaire's ID and names. A project can host multiple questionnaires that are differentiated through these IDs.

Viewing a questionnaire: Make a GET request to /v1/questionnaires/{questionnaire_id} to retrieve a specific questionnaire's details, including sections and questions.

Updating and deleting questionnaire: Use the PUT /v1/questionnaires/{questionnaire_id} and DELETE /v1/questionnaires/{questionnaire_id} endpoints to update or remove a questionnaire respectively.

Registration of Questionnaire Mapper

A questionnaire mapper is essential to instruct the system on making decisions based on user responses. Corresponding endpoints for creating, viewing, and editing a mapper are found at /v1/questionnaires/{questionnaire_id}/mapper.

To create a mapper, use POST /v1/questionnaires/{questionnaire_id}/mapper.

The mapper consists of five main components:

Questions: This section maps the decisions for all questionnaire questions.
Exclusivity: Handles duplicate removal and exclusivity requirements.
Prompt Generation: This section produces prompts that are used by the AI to generate recommendations.
Prompt Order: Sets the sequence in which prompts appear.
GPT settings: Provides settings and parameters to the GPT module for context understanding.

Each section will be explained in detail as we progress further.

Questions

Inside a question object we add mapper for different possible values.

A questionnaire can have three types of questions 1. Radio button: User can select a single answer, 2. Checkbox: User can select multiple answers, 3. Free text: User can enter string.

To add mapper for a single value, use the value key as the key for related decision objects. This approach allows you to define how the system should handle or process that value.

Example

{
  "skincare_history": {
    "q2": {
      "mapper": {
        "a": {
          "exclude": ["Retinol",  "Retinol based products"]
        }
      }
    }
  }
}

In the above example, the key a represents answer selected by user. The object associated with a specifies decisions related to it—in this case, an exclude list. This list contains the values Retinol and Retinol based products, defined by the creator of the mapper. How this Exclude list is used is covered in a latter section below.

To add mapper for a combination of value (Answers with multiple selection), - Use | sign as or to combine more than one values for a decision in mapper. - Use & sign as and to combine more than one values for a decision in mapper. Example

{
  "a|b|c": {
    "exclude": ["Retinol",  "Retinol palmitate"]
  }
}


To add mapper for free-text value, use any key to add the decision rule. This can be useful for taking age, allergy information etc. Example

{
  "any": {
    "age": ""
  }
}


When a decision need to be taken if a set of value is not selected we should use negative selection.

An example scenario.

What of the following skincare you follow every day?

a. Cleanser b. Moisturizer c. Spf d. Serum e. Toner f. Night cream g. Eye cream

Decision: if cleanser, moisturizer and spf is chosen, AI will consider all products

If one of the basic step(cleanser, moisturizer, spf) is not chosen, Ai will exclude Retinol, Retinol palmitate, tranexamic acid, vitamin C, vitamin C derivative , arbutin

Here we need to take a decision if cleanser, moisturizer, spf is not selected, this is a candidate for negative selection.

Rules: Use ~ as key to add negative selection decisions in a question mapper. Use value serial as usual inside the negative selection object to add decision if a value is not selected, e.g. "a": "decision" Example

{
  "q1": {
    "mapper" : {
      "a": {
        "tags": ["acne", "anti-aging"]
      },
      "~": {
        "a|b|c": {
          "exclude": ["Retinol",  "Retinol palmitate",  "tranexamic acid",  "vitamin c",  "vitamin c derivative" , "arbutin"]
        },
        "d": {
          "tags": ["Retinol"]
        }
      }
    }
  }
}

Exclusivity

The integration of exclusivity in the mapper is crucial for eliminating duplicates and addressing exclusivity prerequisites.

To incorporate exclusivity, you utilize the exclusive key to append an object in the following format:

"prompt_key-1" :  "prompt_key-2"


Doing so ensures that any value present in both prompt_key-1 and prompt_key-2, within the final prompt, will be extracted exclusively from prompt_key-2.

For instance:

{
  "exclusive": {
    "exclude": "includes",
    "exclude_tag": "include_tag"
  }
}


Prompt

Each prompt section is a decision point. A prompt section has two constituting parts, the sentence and the variable. Let's say we have a decision point to exclude products that has certain tags. we can add a prompt section named exclude_tags as follows

{
  "prompt_sections": {
    "exclude_tags": "Exclude any products that has following tags {exclude_tags}."
  }
}


And We need to add the exclude_tags in mapper wherever this decision point need to be mapped. An example mapper, like we have discussed above, would be

{
  "q1": {
    "mapper": {
      "a": {
        "exclude_tags": ["retinol", "retinol based products"]
      }
    }
  }
}


An example prompt section for a cosmetics company could be.

{
  "prompt_sections": {
    "age": "I am {age} years old.",
    "gender": "I am a {gender}.",
    "skin_type": "My skin type is {skin_type}.",
    "include_tag": "Show products that contain the tag: {include_tag}",
    "exclude_tag": "Exclude products that do contain the tag: {exclude_tag}"
  }
}

Prompt Order

This section is to decide the order of the prompts in the prompt section above. This section must contain all the prompts from the above section. This is the order by which the prompts will be sent to GPT model. Note: This order effects the quality of the response. User should try different orders to find the best result.

An example prompt order from the prompt_sections sample above sample could be:

{
  "prompt_order": [
    "age",
    "gender",
    "skin_type",
    "include_tag",
    "exclude_tag"
  ]
}

GPT Settings

This section is required for the context and various parameter setting for GPT. The prompt generated til this point above, goes to our GPT model, which is familiar with the item catalogue. This GPT model, in turn generates this recommendation for the user. Below is an example.

{
    "gpt_settings": {
    "model": "gpt-3.5-turbo-0613",
    "search_max_token": 2500,
    "intro": "Using given context make recommendation. make recommendation of top {{ recommend_count }} products in json format and your response should denote the json part with three tick notations(```). Use `we` as your pronoun. json object should have following format. {'comment': 'make an overall comment about your recommendations', 'advice':'...', 'recommendations': [{'id':'...', 'comment': 'why you chose this product'},{'id':'...', 'comment': 'why you chose this product'}]}. if the query includes `specialist_pretext` then include that suggestion in your 'advice'",
    "system": "You are an expert on ...",
    "temperature": 0,
    "top_p": 1,
    "frequency_penalty": 0,
    "presence_penalty": 0,
    "stop": [
      "AI:",
      "Human:"
    ],
    "recommend_count": 3,
    "result_includes": [
      "key_name_1",
      "key_name_2"
    ],
    "top_k": 20,
    "is_keyword_enabled": true
  }
}

Integration of Questionnaire Recommendation

The questionnaire recommendation function processes user responses, identifies the corresponding questionnaire and decision points, and generates personalized recommendations. The endpoint POST /v1/questionnaire/recommend is designed for this purpose.

Detailed examples, required parameters, and explanations can be found in our sandbox.

This endpoint requires questionnaire_id as input. This identifier helps determine which questionnaire and mapping to consult, and which user response to consider, leading to the generation of personalized results.

You will notice the recommend_count parameter also exist in the mapper. If it is set, the value of this parameter takes priority over recommend_count variable in questionnaire mapper.

The response format of this endpoint can be customized using the previously mentioned GPT settings.

Reviewing Questionnaire Recommendation Logs

By utilizing the endpoint GET /v1/questionnaires/{questionnaire_id}/logs, you're able to access the log of requests dispatched to the v1/questionnaire/recommend endpoint, along with the corresponding generated responses.

Previous
Dynamic Pricing
Next
GPT Project setup
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/01_Integration/Questionnaire/#questions
Skip to content
Gigalogy Tutorial
Questionnaire
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Table of contents
Registration of Questionnaire
Registration of Questionnaire Mapper
Questions
Exclusivity
Prompt
Prompt Order
GPT Settings
Integration of Questionnaire Recommendation
Reviewing Questionnaire Recommendation Logs
Questionnaire

Our questionnaire software is specifically tailored to provide recommendations for novice and experienced users. Here is how it works:

Questionnaire Design: We meticulously design the questionnaire to encapsulate all necessary questions and decisions.
Questionnaire Registration: The questionnaire is seamlessly integrated into the project, enabling easy access and interaction.
User Response Collection: User responses are gathered through an interactive, user-friendly, UI-based questionnaire embedded in the website.
Response Processing: These responses are then processed by the GAIP system.
Product Recommendation: Finally, personalized product recommendations are suggested based on the processed responses.

Furthermore, the registration of the questionnaire into the project constitutes two crucial phases:

Registration of Questionnaire: Where the questionnaire is incorporated into the project.
Registration of Questionnaire Mapper: Which equips the AI system with the knowledge to accurately interpret decisions based on the users' responses to the questions.
Registration of Questionnaire

To manage the questionnaire, a series of RESTful API endpoints are provided which can be explored in our sandbox.

Creating a new questionnaire: Make a POST request to /v1/questionnaires to create a new questionnaire. The sandbox hosts detailed explanations and sample request bodies. The questionnaire can be divided into different sections, with at least one required.

Listing all questionnaires: Sending a GET request to /v1/questionnaires/list lists all the questionnaire's ID and names. A project can host multiple questionnaires that are differentiated through these IDs.

Viewing a questionnaire: Make a GET request to /v1/questionnaires/{questionnaire_id} to retrieve a specific questionnaire's details, including sections and questions.

Updating and deleting questionnaire: Use the PUT /v1/questionnaires/{questionnaire_id} and DELETE /v1/questionnaires/{questionnaire_id} endpoints to update or remove a questionnaire respectively.

Registration of Questionnaire Mapper

A questionnaire mapper is essential to instruct the system on making decisions based on user responses. Corresponding endpoints for creating, viewing, and editing a mapper are found at /v1/questionnaires/{questionnaire_id}/mapper.

To create a mapper, use POST /v1/questionnaires/{questionnaire_id}/mapper.

The mapper consists of five main components:

Questions: This section maps the decisions for all questionnaire questions.
Exclusivity: Handles duplicate removal and exclusivity requirements.
Prompt Generation: This section produces prompts that are used by the AI to generate recommendations.
Prompt Order: Sets the sequence in which prompts appear.
GPT settings: Provides settings and parameters to the GPT module for context understanding.

Each section will be explained in detail as we progress further.

Questions

Inside a question object we add mapper for different possible values.

A questionnaire can have three types of questions 1. Radio button: User can select a single answer, 2. Checkbox: User can select multiple answers, 3. Free text: User can enter string.

To add mapper for a single value, use the value key as the key for related decision objects. This approach allows you to define how the system should handle or process that value.

Example

{
  "skincare_history": {
    "q2": {
      "mapper": {
        "a": {
          "exclude": ["Retinol",  "Retinol based products"]
        }
      }
    }
  }
}

In the above example, the key a represents answer selected by user. The object associated with a specifies decisions related to it—in this case, an exclude list. This list contains the values Retinol and Retinol based products, defined by the creator of the mapper. How this Exclude list is used is covered in a latter section below.

To add mapper for a combination of value (Answers with multiple selection), - Use | sign as or to combine more than one values for a decision in mapper. - Use & sign as and to combine more than one values for a decision in mapper. Example

{
  "a|b|c": {
    "exclude": ["Retinol",  "Retinol palmitate"]
  }
}


To add mapper for free-text value, use any key to add the decision rule. This can be useful for taking age, allergy information etc. Example

{
  "any": {
    "age": ""
  }
}


When a decision need to be taken if a set of value is not selected we should use negative selection.

An example scenario.

What of the following skincare you follow every day?

a. Cleanser b. Moisturizer c. Spf d. Serum e. Toner f. Night cream g. Eye cream

Decision: if cleanser, moisturizer and spf is chosen, AI will consider all products

If one of the basic step(cleanser, moisturizer, spf) is not chosen, Ai will exclude Retinol, Retinol palmitate, tranexamic acid, vitamin C, vitamin C derivative , arbutin

Here we need to take a decision if cleanser, moisturizer, spf is not selected, this is a candidate for negative selection.

Rules: Use ~ as key to add negative selection decisions in a question mapper. Use value serial as usual inside the negative selection object to add decision if a value is not selected, e.g. "a": "decision" Example

{
  "q1": {
    "mapper" : {
      "a": {
        "tags": ["acne", "anti-aging"]
      },
      "~": {
        "a|b|c": {
          "exclude": ["Retinol",  "Retinol palmitate",  "tranexamic acid",  "vitamin c",  "vitamin c derivative" , "arbutin"]
        },
        "d": {
          "tags": ["Retinol"]
        }
      }
    }
  }
}

Exclusivity

The integration of exclusivity in the mapper is crucial for eliminating duplicates and addressing exclusivity prerequisites.

To incorporate exclusivity, you utilize the exclusive key to append an object in the following format:

"prompt_key-1" :  "prompt_key-2"


Doing so ensures that any value present in both prompt_key-1 and prompt_key-2, within the final prompt, will be extracted exclusively from prompt_key-2.

For instance:

{
  "exclusive": {
    "exclude": "includes",
    "exclude_tag": "include_tag"
  }
}


Prompt

Each prompt section is a decision point. A prompt section has two constituting parts, the sentence and the variable. Let's say we have a decision point to exclude products that has certain tags. we can add a prompt section named exclude_tags as follows

{
  "prompt_sections": {
    "exclude_tags": "Exclude any products that has following tags {exclude_tags}."
  }
}


And We need to add the exclude_tags in mapper wherever this decision point need to be mapped. An example mapper, like we have discussed above, would be

{
  "q1": {
    "mapper": {
      "a": {
        "exclude_tags": ["retinol", "retinol based products"]
      }
    }
  }
}


An example prompt section for a cosmetics company could be.

{
  "prompt_sections": {
    "age": "I am {age} years old.",
    "gender": "I am a {gender}.",
    "skin_type": "My skin type is {skin_type}.",
    "include_tag": "Show products that contain the tag: {include_tag}",
    "exclude_tag": "Exclude products that do contain the tag: {exclude_tag}"
  }
}

Prompt Order

This section is to decide the order of the prompts in the prompt section above. This section must contain all the prompts from the above section. This is the order by which the prompts will be sent to GPT model. Note: This order effects the quality of the response. User should try different orders to find the best result.

An example prompt order from the prompt_sections sample above sample could be:

{
  "prompt_order": [
    "age",
    "gender",
    "skin_type",
    "include_tag",
    "exclude_tag"
  ]
}

GPT Settings

This section is required for the context and various parameter setting for GPT. The prompt generated til this point above, goes to our GPT model, which is familiar with the item catalogue. This GPT model, in turn generates this recommendation for the user. Below is an example.

{
    "gpt_settings": {
    "model": "gpt-3.5-turbo-0613",
    "search_max_token": 2500,
    "intro": "Using given context make recommendation. make recommendation of top {{ recommend_count }} products in json format and your response should denote the json part with three tick notations(```). Use `we` as your pronoun. json object should have following format. {'comment': 'make an overall comment about your recommendations', 'advice':'...', 'recommendations': [{'id':'...', 'comment': 'why you chose this product'},{'id':'...', 'comment': 'why you chose this product'}]}. if the query includes `specialist_pretext` then include that suggestion in your 'advice'",
    "system": "You are an expert on ...",
    "temperature": 0,
    "top_p": 1,
    "frequency_penalty": 0,
    "presence_penalty": 0,
    "stop": [
      "AI:",
      "Human:"
    ],
    "recommend_count": 3,
    "result_includes": [
      "key_name_1",
      "key_name_2"
    ],
    "top_k": 20,
    "is_keyword_enabled": true
  }
}

Integration of Questionnaire Recommendation

The questionnaire recommendation function processes user responses, identifies the corresponding questionnaire and decision points, and generates personalized recommendations. The endpoint POST /v1/questionnaire/recommend is designed for this purpose.

Detailed examples, required parameters, and explanations can be found in our sandbox.

This endpoint requires questionnaire_id as input. This identifier helps determine which questionnaire and mapping to consult, and which user response to consider, leading to the generation of personalized results.

You will notice the recommend_count parameter also exist in the mapper. If it is set, the value of this parameter takes priority over recommend_count variable in questionnaire mapper.

The response format of this endpoint can be customized using the previously mentioned GPT settings.

Reviewing Questionnaire Recommendation Logs

By utilizing the endpoint GET /v1/questionnaires/{questionnaire_id}/logs, you're able to access the log of requests dispatched to the v1/questionnaire/recommend endpoint, along with the corresponding generated responses.

Previous
Dynamic Pricing
Next
GPT Project setup
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/01_Integration/Questionnaire/#exclusivity
Skip to content
Gigalogy Tutorial
Questionnaire
English
Japanese
Type to start searching
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Table of contents
Registration of Questionnaire
Registration of Questionnaire Mapper
Questions
Exclusivity
Prompt
Prompt Order
GPT Settings
Integration of Questionnaire Recommendation
Reviewing Questionnaire Recommendation Logs
Questionnaire

Our questionnaire software is specifically tailored to provide recommendations for novice and experienced users. Here is how it works:

Questionnaire Design: We meticulously design the questionnaire to encapsulate all necessary questions and decisions.
Questionnaire Registration: The questionnaire is seamlessly integrated into the project, enabling easy access and interaction.
User Response Collection: User responses are gathered through an interactive, user-friendly, UI-based questionnaire embedded in the website.
Response Processing: These responses are then processed by the GAIP system.
Product Recommendation: Finally, personalized product recommendations are suggested based on the processed responses.

Furthermore, the registration of the questionnaire into the project constitutes two crucial phases:

Registration of Questionnaire: Where the questionnaire is incorporated into the project.
Registration of Questionnaire Mapper: Which equips the AI system with the knowledge to accurately interpret decisions based on the users' responses to the questions.
Registration of Questionnaire

To manage the questionnaire, a series of RESTful API endpoints are provided which can be explored in our sandbox.

Creating a new questionnaire: Make a POST request to /v1/questionnaires to create a new questionnaire. The sandbox hosts detailed explanations and sample request bodies. The questionnaire can be divided into different sections, with at least one required.

Listing all questionnaires: Sending a GET request to /v1/questionnaires/list lists all the questionnaire's ID and names. A project can host multiple questionnaires that are differentiated through these IDs.

Viewing a questionnaire: Make a GET request to /v1/questionnaires/{questionnaire_id} to retrieve a specific questionnaire's details, including sections and questions.

Updating and deleting questionnaire: Use the PUT /v1/questionnaires/{questionnaire_id} and DELETE /v1/questionnaires/{questionnaire_id} endpoints to update or remove a questionnaire respectively.

Registration of Questionnaire Mapper

A questionnaire mapper is essential to instruct the system on making decisions based on user responses. Corresponding endpoints for creating, viewing, and editing a mapper are found at /v1/questionnaires/{questionnaire_id}/mapper.

To create a mapper, use POST /v1/questionnaires/{questionnaire_id}/mapper.

The mapper consists of five main components:

Questions: This section maps the decisions for all questionnaire questions.
Exclusivity: Handles duplicate removal and exclusivity requirements.
Prompt Generation: This section produces prompts that are used by the AI to generate recommendations.
Prompt Order: Sets the sequence in which prompts appear.
GPT settings: Provides settings and parameters to the GPT module for context understanding.

Each section will be explained in detail as we progress further.

Questions

Inside a question object we add mapper for different possible values.

A questionnaire can have three types of questions 1. Radio button: User can select a single answer, 2. Checkbox: User can select multiple answers, 3. Free text: User can enter string.

To add mapper for a single value, use the value key as the key for related decision objects. This approach allows you to define how the system should handle or process that value.

Example

{
  "skincare_history": {
    "q2": {
      "mapper": {
        "a": {
          "exclude": ["Retinol",  "Retinol based products"]
        }
      }
    }
  }
}

In the above example, the key a represents answer selected by user. The object associated with a specifies decisions related to it—in this case, an exclude list. This list contains the values Retinol and Retinol based products, defined by the creator of the mapper. How this Exclude list is used is covered in a latter section below.

To add mapper for a combination of value (Answers with multiple selection), - Use | sign as or to combine more than one values for a decision in mapper. - Use & sign as and to combine more than one values for a decision in mapper. Example

{
  "a|b|c": {
    "exclude": ["Retinol",  "Retinol palmitate"]
  }
}


To add mapper for free-text value, use any key to add the decision rule. This can be useful for taking age, allergy information etc. Example

{
  "any": {
    "age": ""
  }
}


When a decision need to be taken if a set of value is not selected we should use negative selection.

An example scenario.

What of the following skincare you follow every day?

a. Cleanser b. Moisturizer c. Spf d. Serum e. Toner f. Night cream g. Eye cream

Decision: if cleanser, moisturizer and spf is chosen, AI will consider all products

If one of the basic step(cleanser, moisturizer, spf) is not chosen, Ai will exclude Retinol, Retinol palmitate, tranexamic acid, vitamin C, vitamin C derivative , arbutin

Here we need to take a decision if cleanser, moisturizer, spf is not selected, this is a candidate for negative selection.

Rules: Use ~ as key to add negative selection decisions in a question mapper. Use value serial as usual inside the negative selection object to add decision if a value is not selected, e.g. "a": "decision" Example

{
  "q1": {
    "mapper" : {
      "a": {
        "tags": ["acne", "anti-aging"]
      },
      "~": {
        "a|b|c": {
          "exclude": ["Retinol",  "Retinol palmitate",  "tranexamic acid",  "vitamin c",  "vitamin c derivative" , "arbutin"]
        },
        "d": {
          "tags": ["Retinol"]
        }
      }
    }
  }
}

Exclusivity

The integration of exclusivity in the mapper is crucial for eliminating duplicates and addressing exclusivity prerequisites.

To incorporate exclusivity, you utilize the exclusive key to append an object in the following format:

"prompt_key-1" :  "prompt_key-2"


Doing so ensures that any value present in both prompt_key-1 and prompt_key-2, within the final prompt, will be extracted exclusively from prompt_key-2.

For instance:

{
  "exclusive": {
    "exclude": "includes",
    "exclude_tag": "include_tag"
  }
}


Prompt

Each prompt section is a decision point. A prompt section has two constituting parts, the sentence and the variable. Let's say we have a decision point to exclude products that has certain tags. we can add a prompt section named exclude_tags as follows

{
  "prompt_sections": {
    "exclude_tags": "Exclude any products that has following tags {exclude_tags}."
  }
}


And We need to add the exclude_tags in mapper wherever this decision point need to be mapped. An example mapper, like we have discussed above, would be

{
  "q1": {
    "mapper": {
      "a": {
        "exclude_tags": ["retinol", "retinol based products"]
      }
    }
  }
}


An example prompt section for a cosmetics company could be.

{
  "prompt_sections": {
    "age": "I am {age} years old.",
    "gender": "I am a {gender}.",
    "skin_type": "My skin type is {skin_type}.",
    "include_tag": "Show products that contain the tag: {include_tag}",
    "exclude_tag": "Exclude products that do contain the tag: {exclude_tag}"
  }
}

Prompt Order

This section is to decide the order of the prompts in the prompt section above. This section must contain all the prompts from the above section. This is the order by which the prompts will be sent to GPT model. Note: This order effects the quality of the response. User should try different orders to find the best result.

An example prompt order from the prompt_sections sample above sample could be:

{
  "prompt_order": [
    "age",
    "gender",
    "skin_type",
    "include_tag",
    "exclude_tag"
  ]
}

GPT Settings

This section is required for the context and various parameter setting for GPT. The prompt generated til this point above, goes to our GPT model, which is familiar with the item catalogue. This GPT model, in turn generates this recommendation for the user. Below is an example.

{
    "gpt_settings": {
    "model": "gpt-3.5-turbo-0613",
    "search_max_token": 2500,
    "intro": "Using given context make recommendation. make recommendation of top {{ recommend_count }} products in json format and your response should denote the json part with three tick notations(```). Use `we` as your pronoun. json object should have following format. {'comment': 'make an overall comment about your recommendations', 'advice':'...', 'recommendations': [{'id':'...', 'comment': 'why you chose this product'},{'id':'...', 'comment': 'why you chose this product'}]}. if the query includes `specialist_pretext` then include that suggestion in your 'advice'",
    "system": "You are an expert on ...",
    "temperature": 0,
    "top_p": 1,
    "frequency_penalty": 0,
    "presence_penalty": 0,
    "stop": [
      "AI:",
      "Human:"
    ],
    "recommend_count": 3,
    "result_includes": [
      "key_name_1",
      "key_name_2"
    ],
    "top_k": 20,
    "is_keyword_enabled": true
  }
}

Integration of Questionnaire Recommendation

The questionnaire recommendation function processes user responses, identifies the corresponding questionnaire and decision points, and generates personalized recommendations. The endpoint POST /v1/questionnaire/recommend is designed for this purpose.

Detailed examples, required parameters, and explanations can be found in our sandbox.

This endpoint requires questionnaire_id as input. This identifier helps determine which questionnaire and mapping to consult, and which user response to consider, leading to the generation of personalized results.

You will notice the recommend_count parameter also exist in the mapper. If it is set, the value of this parameter takes priority over recommend_count variable in questionnaire mapper.

The response format of this endpoint can be customized using the previously mentioned GPT settings.

Reviewing Questionnaire Recommendation Logs

By utilizing the endpoint GET /v1/questionnaires/{questionnaire_id}/logs, you're able to access the log of requests dispatched to the v1/questionnaire/recommend endpoint, along with the corresponding generated responses.

Previous
Dynamic Pricing
Next
GPT Project setup
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/01_Integration/Questionnaire/#prompt
Skip to content
Gigalogy Tutorial
Questionnaire
English
Japanese
Type to start searching
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Table of contents
Registration of Questionnaire
Registration of Questionnaire Mapper
Questions
Exclusivity
Prompt
Prompt Order
GPT Settings
Integration of Questionnaire Recommendation
Reviewing Questionnaire Recommendation Logs
Questionnaire

Our questionnaire software is specifically tailored to provide recommendations for novice and experienced users. Here is how it works:

Questionnaire Design: We meticulously design the questionnaire to encapsulate all necessary questions and decisions.
Questionnaire Registration: The questionnaire is seamlessly integrated into the project, enabling easy access and interaction.
User Response Collection: User responses are gathered through an interactive, user-friendly, UI-based questionnaire embedded in the website.
Response Processing: These responses are then processed by the GAIP system.
Product Recommendation: Finally, personalized product recommendations are suggested based on the processed responses.

Furthermore, the registration of the questionnaire into the project constitutes two crucial phases:

Registration of Questionnaire: Where the questionnaire is incorporated into the project.
Registration of Questionnaire Mapper: Which equips the AI system with the knowledge to accurately interpret decisions based on the users' responses to the questions.
Registration of Questionnaire

To manage the questionnaire, a series of RESTful API endpoints are provided which can be explored in our sandbox.

Creating a new questionnaire: Make a POST request to /v1/questionnaires to create a new questionnaire. The sandbox hosts detailed explanations and sample request bodies. The questionnaire can be divided into different sections, with at least one required.

Listing all questionnaires: Sending a GET request to /v1/questionnaires/list lists all the questionnaire's ID and names. A project can host multiple questionnaires that are differentiated through these IDs.

Viewing a questionnaire: Make a GET request to /v1/questionnaires/{questionnaire_id} to retrieve a specific questionnaire's details, including sections and questions.

Updating and deleting questionnaire: Use the PUT /v1/questionnaires/{questionnaire_id} and DELETE /v1/questionnaires/{questionnaire_id} endpoints to update or remove a questionnaire respectively.

Registration of Questionnaire Mapper

A questionnaire mapper is essential to instruct the system on making decisions based on user responses. Corresponding endpoints for creating, viewing, and editing a mapper are found at /v1/questionnaires/{questionnaire_id}/mapper.

To create a mapper, use POST /v1/questionnaires/{questionnaire_id}/mapper.

The mapper consists of five main components:

Questions: This section maps the decisions for all questionnaire questions.
Exclusivity: Handles duplicate removal and exclusivity requirements.
Prompt Generation: This section produces prompts that are used by the AI to generate recommendations.
Prompt Order: Sets the sequence in which prompts appear.
GPT settings: Provides settings and parameters to the GPT module for context understanding.

Each section will be explained in detail as we progress further.

Questions

Inside a question object we add mapper for different possible values.

A questionnaire can have three types of questions 1. Radio button: User can select a single answer, 2. Checkbox: User can select multiple answers, 3. Free text: User can enter string.

To add mapper for a single value, use the value key as the key for related decision objects. This approach allows you to define how the system should handle or process that value.

Example

{
  "skincare_history": {
    "q2": {
      "mapper": {
        "a": {
          "exclude": ["Retinol",  "Retinol based products"]
        }
      }
    }
  }
}

In the above example, the key a represents answer selected by user. The object associated with a specifies decisions related to it—in this case, an exclude list. This list contains the values Retinol and Retinol based products, defined by the creator of the mapper. How this Exclude list is used is covered in a latter section below.

To add mapper for a combination of value (Answers with multiple selection), - Use | sign as or to combine more than one values for a decision in mapper. - Use & sign as and to combine more than one values for a decision in mapper. Example

{
  "a|b|c": {
    "exclude": ["Retinol",  "Retinol palmitate"]
  }
}


To add mapper for free-text value, use any key to add the decision rule. This can be useful for taking age, allergy information etc. Example

{
  "any": {
    "age": ""
  }
}


When a decision need to be taken if a set of value is not selected we should use negative selection.

An example scenario.

What of the following skincare you follow every day?

a. Cleanser b. Moisturizer c. Spf d. Serum e. Toner f. Night cream g. Eye cream

Decision: if cleanser, moisturizer and spf is chosen, AI will consider all products

If one of the basic step(cleanser, moisturizer, spf) is not chosen, Ai will exclude Retinol, Retinol palmitate, tranexamic acid, vitamin C, vitamin C derivative , arbutin

Here we need to take a decision if cleanser, moisturizer, spf is not selected, this is a candidate for negative selection.

Rules: Use ~ as key to add negative selection decisions in a question mapper. Use value serial as usual inside the negative selection object to add decision if a value is not selected, e.g. "a": "decision" Example

{
  "q1": {
    "mapper" : {
      "a": {
        "tags": ["acne", "anti-aging"]
      },
      "~": {
        "a|b|c": {
          "exclude": ["Retinol",  "Retinol palmitate",  "tranexamic acid",  "vitamin c",  "vitamin c derivative" , "arbutin"]
        },
        "d": {
          "tags": ["Retinol"]
        }
      }
    }
  }
}

Exclusivity

The integration of exclusivity in the mapper is crucial for eliminating duplicates and addressing exclusivity prerequisites.

To incorporate exclusivity, you utilize the exclusive key to append an object in the following format:

"prompt_key-1" :  "prompt_key-2"


Doing so ensures that any value present in both prompt_key-1 and prompt_key-2, within the final prompt, will be extracted exclusively from prompt_key-2.

For instance:

{
  "exclusive": {
    "exclude": "includes",
    "exclude_tag": "include_tag"
  }
}


Prompt

Each prompt section is a decision point. A prompt section has two constituting parts, the sentence and the variable. Let's say we have a decision point to exclude products that has certain tags. we can add a prompt section named exclude_tags as follows

{
  "prompt_sections": {
    "exclude_tags": "Exclude any products that has following tags {exclude_tags}."
  }
}


And We need to add the exclude_tags in mapper wherever this decision point need to be mapped. An example mapper, like we have discussed above, would be

{
  "q1": {
    "mapper": {
      "a": {
        "exclude_tags": ["retinol", "retinol based products"]
      }
    }
  }
}


An example prompt section for a cosmetics company could be.

{
  "prompt_sections": {
    "age": "I am {age} years old.",
    "gender": "I am a {gender}.",
    "skin_type": "My skin type is {skin_type}.",
    "include_tag": "Show products that contain the tag: {include_tag}",
    "exclude_tag": "Exclude products that do contain the tag: {exclude_tag}"
  }
}

Prompt Order

This section is to decide the order of the prompts in the prompt section above. This section must contain all the prompts from the above section. This is the order by which the prompts will be sent to GPT model. Note: This order effects the quality of the response. User should try different orders to find the best result.

An example prompt order from the prompt_sections sample above sample could be:

{
  "prompt_order": [
    "age",
    "gender",
    "skin_type",
    "include_tag",
    "exclude_tag"
  ]
}

GPT Settings

This section is required for the context and various parameter setting for GPT. The prompt generated til this point above, goes to our GPT model, which is familiar with the item catalogue. This GPT model, in turn generates this recommendation for the user. Below is an example.

{
    "gpt_settings": {
    "model": "gpt-3.5-turbo-0613",
    "search_max_token": 2500,
    "intro": "Using given context make recommendation. make recommendation of top {{ recommend_count }} products in json format and your response should denote the json part with three tick notations(```). Use `we` as your pronoun. json object should have following format. {'comment': 'make an overall comment about your recommendations', 'advice':'...', 'recommendations': [{'id':'...', 'comment': 'why you chose this product'},{'id':'...', 'comment': 'why you chose this product'}]}. if the query includes `specialist_pretext` then include that suggestion in your 'advice'",
    "system": "You are an expert on ...",
    "temperature": 0,
    "top_p": 1,
    "frequency_penalty": 0,
    "presence_penalty": 0,
    "stop": [
      "AI:",
      "Human:"
    ],
    "recommend_count": 3,
    "result_includes": [
      "key_name_1",
      "key_name_2"
    ],
    "top_k": 20,
    "is_keyword_enabled": true
  }
}

Integration of Questionnaire Recommendation

The questionnaire recommendation function processes user responses, identifies the corresponding questionnaire and decision points, and generates personalized recommendations. The endpoint POST /v1/questionnaire/recommend is designed for this purpose.

Detailed examples, required parameters, and explanations can be found in our sandbox.

This endpoint requires questionnaire_id as input. This identifier helps determine which questionnaire and mapping to consult, and which user response to consider, leading to the generation of personalized results.

You will notice the recommend_count parameter also exist in the mapper. If it is set, the value of this parameter takes priority over recommend_count variable in questionnaire mapper.

The response format of this endpoint can be customized using the previously mentioned GPT settings.

Reviewing Questionnaire Recommendation Logs

By utilizing the endpoint GET /v1/questionnaires/{questionnaire_id}/logs, you're able to access the log of requests dispatched to the v1/questionnaire/recommend endpoint, along with the corresponding generated responses.

Previous
Dynamic Pricing
Next
GPT Project setup
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/01_Integration/Questionnaire/#prompt-order
Skip to content
Gigalogy Tutorial
Questionnaire
English
Japanese
Type to start searching
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Table of contents
Registration of Questionnaire
Registration of Questionnaire Mapper
Questions
Exclusivity
Prompt
Prompt Order
GPT Settings
Integration of Questionnaire Recommendation
Reviewing Questionnaire Recommendation Logs
Questionnaire

Our questionnaire software is specifically tailored to provide recommendations for novice and experienced users. Here is how it works:

Questionnaire Design: We meticulously design the questionnaire to encapsulate all necessary questions and decisions.
Questionnaire Registration: The questionnaire is seamlessly integrated into the project, enabling easy access and interaction.
User Response Collection: User responses are gathered through an interactive, user-friendly, UI-based questionnaire embedded in the website.
Response Processing: These responses are then processed by the GAIP system.
Product Recommendation: Finally, personalized product recommendations are suggested based on the processed responses.

Furthermore, the registration of the questionnaire into the project constitutes two crucial phases:

Registration of Questionnaire: Where the questionnaire is incorporated into the project.
Registration of Questionnaire Mapper: Which equips the AI system with the knowledge to accurately interpret decisions based on the users' responses to the questions.
Registration of Questionnaire

To manage the questionnaire, a series of RESTful API endpoints are provided which can be explored in our sandbox.

Creating a new questionnaire: Make a POST request to /v1/questionnaires to create a new questionnaire. The sandbox hosts detailed explanations and sample request bodies. The questionnaire can be divided into different sections, with at least one required.

Listing all questionnaires: Sending a GET request to /v1/questionnaires/list lists all the questionnaire's ID and names. A project can host multiple questionnaires that are differentiated through these IDs.

Viewing a questionnaire: Make a GET request to /v1/questionnaires/{questionnaire_id} to retrieve a specific questionnaire's details, including sections and questions.

Updating and deleting questionnaire: Use the PUT /v1/questionnaires/{questionnaire_id} and DELETE /v1/questionnaires/{questionnaire_id} endpoints to update or remove a questionnaire respectively.

Registration of Questionnaire Mapper

A questionnaire mapper is essential to instruct the system on making decisions based on user responses. Corresponding endpoints for creating, viewing, and editing a mapper are found at /v1/questionnaires/{questionnaire_id}/mapper.

To create a mapper, use POST /v1/questionnaires/{questionnaire_id}/mapper.

The mapper consists of five main components:

Questions: This section maps the decisions for all questionnaire questions.
Exclusivity: Handles duplicate removal and exclusivity requirements.
Prompt Generation: This section produces prompts that are used by the AI to generate recommendations.
Prompt Order: Sets the sequence in which prompts appear.
GPT settings: Provides settings and parameters to the GPT module for context understanding.

Each section will be explained in detail as we progress further.

Questions

Inside a question object we add mapper for different possible values.

A questionnaire can have three types of questions 1. Radio button: User can select a single answer, 2. Checkbox: User can select multiple answers, 3. Free text: User can enter string.

To add mapper for a single value, use the value key as the key for related decision objects. This approach allows you to define how the system should handle or process that value.

Example

{
  "skincare_history": {
    "q2": {
      "mapper": {
        "a": {
          "exclude": ["Retinol",  "Retinol based products"]
        }
      }
    }
  }
}

In the above example, the key a represents answer selected by user. The object associated with a specifies decisions related to it—in this case, an exclude list. This list contains the values Retinol and Retinol based products, defined by the creator of the mapper. How this Exclude list is used is covered in a latter section below.

To add mapper for a combination of value (Answers with multiple selection), - Use | sign as or to combine more than one values for a decision in mapper. - Use & sign as and to combine more than one values for a decision in mapper. Example

{
  "a|b|c": {
    "exclude": ["Retinol",  "Retinol palmitate"]
  }
}


To add mapper for free-text value, use any key to add the decision rule. This can be useful for taking age, allergy information etc. Example

{
  "any": {
    "age": ""
  }
}


When a decision need to be taken if a set of value is not selected we should use negative selection.

An example scenario.

What of the following skincare you follow every day?

a. Cleanser b. Moisturizer c. Spf d. Serum e. Toner f. Night cream g. Eye cream

Decision: if cleanser, moisturizer and spf is chosen, AI will consider all products

If one of the basic step(cleanser, moisturizer, spf) is not chosen, Ai will exclude Retinol, Retinol palmitate, tranexamic acid, vitamin C, vitamin C derivative , arbutin

Here we need to take a decision if cleanser, moisturizer, spf is not selected, this is a candidate for negative selection.

Rules: Use ~ as key to add negative selection decisions in a question mapper. Use value serial as usual inside the negative selection object to add decision if a value is not selected, e.g. "a": "decision" Example

{
  "q1": {
    "mapper" : {
      "a": {
        "tags": ["acne", "anti-aging"]
      },
      "~": {
        "a|b|c": {
          "exclude": ["Retinol",  "Retinol palmitate",  "tranexamic acid",  "vitamin c",  "vitamin c derivative" , "arbutin"]
        },
        "d": {
          "tags": ["Retinol"]
        }
      }
    }
  }
}

Exclusivity

The integration of exclusivity in the mapper is crucial for eliminating duplicates and addressing exclusivity prerequisites.

To incorporate exclusivity, you utilize the exclusive key to append an object in the following format:

"prompt_key-1" :  "prompt_key-2"


Doing so ensures that any value present in both prompt_key-1 and prompt_key-2, within the final prompt, will be extracted exclusively from prompt_key-2.

For instance:

{
  "exclusive": {
    "exclude": "includes",
    "exclude_tag": "include_tag"
  }
}


Prompt

Each prompt section is a decision point. A prompt section has two constituting parts, the sentence and the variable. Let's say we have a decision point to exclude products that has certain tags. we can add a prompt section named exclude_tags as follows

{
  "prompt_sections": {
    "exclude_tags": "Exclude any products that has following tags {exclude_tags}."
  }
}


And We need to add the exclude_tags in mapper wherever this decision point need to be mapped. An example mapper, like we have discussed above, would be

{
  "q1": {
    "mapper": {
      "a": {
        "exclude_tags": ["retinol", "retinol based products"]
      }
    }
  }
}


An example prompt section for a cosmetics company could be.

{
  "prompt_sections": {
    "age": "I am {age} years old.",
    "gender": "I am a {gender}.",
    "skin_type": "My skin type is {skin_type}.",
    "include_tag": "Show products that contain the tag: {include_tag}",
    "exclude_tag": "Exclude products that do contain the tag: {exclude_tag}"
  }
}

Prompt Order

This section is to decide the order of the prompts in the prompt section above. This section must contain all the prompts from the above section. This is the order by which the prompts will be sent to GPT model. Note: This order effects the quality of the response. User should try different orders to find the best result.

An example prompt order from the prompt_sections sample above sample could be:

{
  "prompt_order": [
    "age",
    "gender",
    "skin_type",
    "include_tag",
    "exclude_tag"
  ]
}

GPT Settings

This section is required for the context and various parameter setting for GPT. The prompt generated til this point above, goes to our GPT model, which is familiar with the item catalogue. This GPT model, in turn generates this recommendation for the user. Below is an example.

{
    "gpt_settings": {
    "model": "gpt-3.5-turbo-0613",
    "search_max_token": 2500,
    "intro": "Using given context make recommendation. make recommendation of top {{ recommend_count }} products in json format and your response should denote the json part with three tick notations(```). Use `we` as your pronoun. json object should have following format. {'comment': 'make an overall comment about your recommendations', 'advice':'...', 'recommendations': [{'id':'...', 'comment': 'why you chose this product'},{'id':'...', 'comment': 'why you chose this product'}]}. if the query includes `specialist_pretext` then include that suggestion in your 'advice'",
    "system": "You are an expert on ...",
    "temperature": 0,
    "top_p": 1,
    "frequency_penalty": 0,
    "presence_penalty": 0,
    "stop": [
      "AI:",
      "Human:"
    ],
    "recommend_count": 3,
    "result_includes": [
      "key_name_1",
      "key_name_2"
    ],
    "top_k": 20,
    "is_keyword_enabled": true
  }
}

Integration of Questionnaire Recommendation

The questionnaire recommendation function processes user responses, identifies the corresponding questionnaire and decision points, and generates personalized recommendations. The endpoint POST /v1/questionnaire/recommend is designed for this purpose.

Detailed examples, required parameters, and explanations can be found in our sandbox.

This endpoint requires questionnaire_id as input. This identifier helps determine which questionnaire and mapping to consult, and which user response to consider, leading to the generation of personalized results.

You will notice the recommend_count parameter also exist in the mapper. If it is set, the value of this parameter takes priority over recommend_count variable in questionnaire mapper.

The response format of this endpoint can be customized using the previously mentioned GPT settings.

Reviewing Questionnaire Recommendation Logs

By utilizing the endpoint GET /v1/questionnaires/{questionnaire_id}/logs, you're able to access the log of requests dispatched to the v1/questionnaire/recommend endpoint, along with the corresponding generated responses.

Previous
Dynamic Pricing
Next
GPT Project setup
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/01_Integration/Questionnaire/#gpt-settings
Skip to content
Gigalogy Tutorial
Questionnaire
English
Japanese
Type to start searching
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Table of contents
Registration of Questionnaire
Registration of Questionnaire Mapper
Questions
Exclusivity
Prompt
Prompt Order
GPT Settings
Integration of Questionnaire Recommendation
Reviewing Questionnaire Recommendation Logs
Questionnaire

Our questionnaire software is specifically tailored to provide recommendations for novice and experienced users. Here is how it works:

Questionnaire Design: We meticulously design the questionnaire to encapsulate all necessary questions and decisions.
Questionnaire Registration: The questionnaire is seamlessly integrated into the project, enabling easy access and interaction.
User Response Collection: User responses are gathered through an interactive, user-friendly, UI-based questionnaire embedded in the website.
Response Processing: These responses are then processed by the GAIP system.
Product Recommendation: Finally, personalized product recommendations are suggested based on the processed responses.

Furthermore, the registration of the questionnaire into the project constitutes two crucial phases:

Registration of Questionnaire: Where the questionnaire is incorporated into the project.
Registration of Questionnaire Mapper: Which equips the AI system with the knowledge to accurately interpret decisions based on the users' responses to the questions.
Registration of Questionnaire

To manage the questionnaire, a series of RESTful API endpoints are provided which can be explored in our sandbox.

Creating a new questionnaire: Make a POST request to /v1/questionnaires to create a new questionnaire. The sandbox hosts detailed explanations and sample request bodies. The questionnaire can be divided into different sections, with at least one required.

Listing all questionnaires: Sending a GET request to /v1/questionnaires/list lists all the questionnaire's ID and names. A project can host multiple questionnaires that are differentiated through these IDs.

Viewing a questionnaire: Make a GET request to /v1/questionnaires/{questionnaire_id} to retrieve a specific questionnaire's details, including sections and questions.

Updating and deleting questionnaire: Use the PUT /v1/questionnaires/{questionnaire_id} and DELETE /v1/questionnaires/{questionnaire_id} endpoints to update or remove a questionnaire respectively.

Registration of Questionnaire Mapper

A questionnaire mapper is essential to instruct the system on making decisions based on user responses. Corresponding endpoints for creating, viewing, and editing a mapper are found at /v1/questionnaires/{questionnaire_id}/mapper.

To create a mapper, use POST /v1/questionnaires/{questionnaire_id}/mapper.

The mapper consists of five main components:

Questions: This section maps the decisions for all questionnaire questions.
Exclusivity: Handles duplicate removal and exclusivity requirements.
Prompt Generation: This section produces prompts that are used by the AI to generate recommendations.
Prompt Order: Sets the sequence in which prompts appear.
GPT settings: Provides settings and parameters to the GPT module for context understanding.

Each section will be explained in detail as we progress further.

Questions

Inside a question object we add mapper for different possible values.

A questionnaire can have three types of questions 1. Radio button: User can select a single answer, 2. Checkbox: User can select multiple answers, 3. Free text: User can enter string.

To add mapper for a single value, use the value key as the key for related decision objects. This approach allows you to define how the system should handle or process that value.

Example

{
  "skincare_history": {
    "q2": {
      "mapper": {
        "a": {
          "exclude": ["Retinol",  "Retinol based products"]
        }
      }
    }
  }
}

In the above example, the key a represents answer selected by user. The object associated with a specifies decisions related to it—in this case, an exclude list. This list contains the values Retinol and Retinol based products, defined by the creator of the mapper. How this Exclude list is used is covered in a latter section below.

To add mapper for a combination of value (Answers with multiple selection), - Use | sign as or to combine more than one values for a decision in mapper. - Use & sign as and to combine more than one values for a decision in mapper. Example

{
  "a|b|c": {
    "exclude": ["Retinol",  "Retinol palmitate"]
  }
}


To add mapper for free-text value, use any key to add the decision rule. This can be useful for taking age, allergy information etc. Example

{
  "any": {
    "age": ""
  }
}


When a decision need to be taken if a set of value is not selected we should use negative selection.

An example scenario.

What of the following skincare you follow every day?

a. Cleanser b. Moisturizer c. Spf d. Serum e. Toner f. Night cream g. Eye cream

Decision: if cleanser, moisturizer and spf is chosen, AI will consider all products

If one of the basic step(cleanser, moisturizer, spf) is not chosen, Ai will exclude Retinol, Retinol palmitate, tranexamic acid, vitamin C, vitamin C derivative , arbutin

Here we need to take a decision if cleanser, moisturizer, spf is not selected, this is a candidate for negative selection.

Rules: Use ~ as key to add negative selection decisions in a question mapper. Use value serial as usual inside the negative selection object to add decision if a value is not selected, e.g. "a": "decision" Example

{
  "q1": {
    "mapper" : {
      "a": {
        "tags": ["acne", "anti-aging"]
      },
      "~": {
        "a|b|c": {
          "exclude": ["Retinol",  "Retinol palmitate",  "tranexamic acid",  "vitamin c",  "vitamin c derivative" , "arbutin"]
        },
        "d": {
          "tags": ["Retinol"]
        }
      }
    }
  }
}

Exclusivity

The integration of exclusivity in the mapper is crucial for eliminating duplicates and addressing exclusivity prerequisites.

To incorporate exclusivity, you utilize the exclusive key to append an object in the following format:

"prompt_key-1" :  "prompt_key-2"


Doing so ensures that any value present in both prompt_key-1 and prompt_key-2, within the final prompt, will be extracted exclusively from prompt_key-2.

For instance:

{
  "exclusive": {
    "exclude": "includes",
    "exclude_tag": "include_tag"
  }
}


Prompt

Each prompt section is a decision point. A prompt section has two constituting parts, the sentence and the variable. Let's say we have a decision point to exclude products that has certain tags. we can add a prompt section named exclude_tags as follows

{
  "prompt_sections": {
    "exclude_tags": "Exclude any products that has following tags {exclude_tags}."
  }
}


And We need to add the exclude_tags in mapper wherever this decision point need to be mapped. An example mapper, like we have discussed above, would be

{
  "q1": {
    "mapper": {
      "a": {
        "exclude_tags": ["retinol", "retinol based products"]
      }
    }
  }
}


An example prompt section for a cosmetics company could be.

{
  "prompt_sections": {
    "age": "I am {age} years old.",
    "gender": "I am a {gender}.",
    "skin_type": "My skin type is {skin_type}.",
    "include_tag": "Show products that contain the tag: {include_tag}",
    "exclude_tag": "Exclude products that do contain the tag: {exclude_tag}"
  }
}

Prompt Order

This section is to decide the order of the prompts in the prompt section above. This section must contain all the prompts from the above section. This is the order by which the prompts will be sent to GPT model. Note: This order effects the quality of the response. User should try different orders to find the best result.

An example prompt order from the prompt_sections sample above sample could be:

{
  "prompt_order": [
    "age",
    "gender",
    "skin_type",
    "include_tag",
    "exclude_tag"
  ]
}

GPT Settings

This section is required for the context and various parameter setting for GPT. The prompt generated til this point above, goes to our GPT model, which is familiar with the item catalogue. This GPT model, in turn generates this recommendation for the user. Below is an example.

{
    "gpt_settings": {
    "model": "gpt-3.5-turbo-0613",
    "search_max_token": 2500,
    "intro": "Using given context make recommendation. make recommendation of top {{ recommend_count }} products in json format and your response should denote the json part with three tick notations(```). Use `we` as your pronoun. json object should have following format. {'comment': 'make an overall comment about your recommendations', 'advice':'...', 'recommendations': [{'id':'...', 'comment': 'why you chose this product'},{'id':'...', 'comment': 'why you chose this product'}]}. if the query includes `specialist_pretext` then include that suggestion in your 'advice'",
    "system": "You are an expert on ...",
    "temperature": 0,
    "top_p": 1,
    "frequency_penalty": 0,
    "presence_penalty": 0,
    "stop": [
      "AI:",
      "Human:"
    ],
    "recommend_count": 3,
    "result_includes": [
      "key_name_1",
      "key_name_2"
    ],
    "top_k": 20,
    "is_keyword_enabled": true
  }
}

Integration of Questionnaire Recommendation

The questionnaire recommendation function processes user responses, identifies the corresponding questionnaire and decision points, and generates personalized recommendations. The endpoint POST /v1/questionnaire/recommend is designed for this purpose.

Detailed examples, required parameters, and explanations can be found in our sandbox.

This endpoint requires questionnaire_id as input. This identifier helps determine which questionnaire and mapping to consult, and which user response to consider, leading to the generation of personalized results.

You will notice the recommend_count parameter also exist in the mapper. If it is set, the value of this parameter takes priority over recommend_count variable in questionnaire mapper.

The response format of this endpoint can be customized using the previously mentioned GPT settings.

Reviewing Questionnaire Recommendation Logs

By utilizing the endpoint GET /v1/questionnaires/{questionnaire_id}/logs, you're able to access the log of requests dispatched to the v1/questionnaire/recommend endpoint, along with the corresponding generated responses.

Previous
Dynamic Pricing
Next
GPT Project setup
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/01_Integration/Questionnaire/#integration-of-questionnaire-recommendation
Skip to content
Gigalogy Tutorial
Questionnaire
English
Japanese
Type to start searching
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Table of contents
Registration of Questionnaire
Registration of Questionnaire Mapper
Questions
Exclusivity
Prompt
Prompt Order
GPT Settings
Integration of Questionnaire Recommendation
Reviewing Questionnaire Recommendation Logs
Questionnaire

Our questionnaire software is specifically tailored to provide recommendations for novice and experienced users. Here is how it works:

Questionnaire Design: We meticulously design the questionnaire to encapsulate all necessary questions and decisions.
Questionnaire Registration: The questionnaire is seamlessly integrated into the project, enabling easy access and interaction.
User Response Collection: User responses are gathered through an interactive, user-friendly, UI-based questionnaire embedded in the website.
Response Processing: These responses are then processed by the GAIP system.
Product Recommendation: Finally, personalized product recommendations are suggested based on the processed responses.

Furthermore, the registration of the questionnaire into the project constitutes two crucial phases:

Registration of Questionnaire: Where the questionnaire is incorporated into the project.
Registration of Questionnaire Mapper: Which equips the AI system with the knowledge to accurately interpret decisions based on the users' responses to the questions.
Registration of Questionnaire

To manage the questionnaire, a series of RESTful API endpoints are provided which can be explored in our sandbox.

Creating a new questionnaire: Make a POST request to /v1/questionnaires to create a new questionnaire. The sandbox hosts detailed explanations and sample request bodies. The questionnaire can be divided into different sections, with at least one required.

Listing all questionnaires: Sending a GET request to /v1/questionnaires/list lists all the questionnaire's ID and names. A project can host multiple questionnaires that are differentiated through these IDs.

Viewing a questionnaire: Make a GET request to /v1/questionnaires/{questionnaire_id} to retrieve a specific questionnaire's details, including sections and questions.

Updating and deleting questionnaire: Use the PUT /v1/questionnaires/{questionnaire_id} and DELETE /v1/questionnaires/{questionnaire_id} endpoints to update or remove a questionnaire respectively.

Registration of Questionnaire Mapper

A questionnaire mapper is essential to instruct the system on making decisions based on user responses. Corresponding endpoints for creating, viewing, and editing a mapper are found at /v1/questionnaires/{questionnaire_id}/mapper.

To create a mapper, use POST /v1/questionnaires/{questionnaire_id}/mapper.

The mapper consists of five main components:

Questions: This section maps the decisions for all questionnaire questions.
Exclusivity: Handles duplicate removal and exclusivity requirements.
Prompt Generation: This section produces prompts that are used by the AI to generate recommendations.
Prompt Order: Sets the sequence in which prompts appear.
GPT settings: Provides settings and parameters to the GPT module for context understanding.

Each section will be explained in detail as we progress further.

Questions

Inside a question object we add mapper for different possible values.

A questionnaire can have three types of questions 1. Radio button: User can select a single answer, 2. Checkbox: User can select multiple answers, 3. Free text: User can enter string.

To add mapper for a single value, use the value key as the key for related decision objects. This approach allows you to define how the system should handle or process that value.

Example

{
  "skincare_history": {
    "q2": {
      "mapper": {
        "a": {
          "exclude": ["Retinol",  "Retinol based products"]
        }
      }
    }
  }
}

In the above example, the key a represents answer selected by user. The object associated with a specifies decisions related to it—in this case, an exclude list. This list contains the values Retinol and Retinol based products, defined by the creator of the mapper. How this Exclude list is used is covered in a latter section below.

To add mapper for a combination of value (Answers with multiple selection), - Use | sign as or to combine more than one values for a decision in mapper. - Use & sign as and to combine more than one values for a decision in mapper. Example

{
  "a|b|c": {
    "exclude": ["Retinol",  "Retinol palmitate"]
  }
}


To add mapper for free-text value, use any key to add the decision rule. This can be useful for taking age, allergy information etc. Example

{
  "any": {
    "age": ""
  }
}


When a decision need to be taken if a set of value is not selected we should use negative selection.

An example scenario.

What of the following skincare you follow every day?

a. Cleanser b. Moisturizer c. Spf d. Serum e. Toner f. Night cream g. Eye cream

Decision: if cleanser, moisturizer and spf is chosen, AI will consider all products

If one of the basic step(cleanser, moisturizer, spf) is not chosen, Ai will exclude Retinol, Retinol palmitate, tranexamic acid, vitamin C, vitamin C derivative , arbutin

Here we need to take a decision if cleanser, moisturizer, spf is not selected, this is a candidate for negative selection.

Rules: Use ~ as key to add negative selection decisions in a question mapper. Use value serial as usual inside the negative selection object to add decision if a value is not selected, e.g. "a": "decision" Example

{
  "q1": {
    "mapper" : {
      "a": {
        "tags": ["acne", "anti-aging"]
      },
      "~": {
        "a|b|c": {
          "exclude": ["Retinol",  "Retinol palmitate",  "tranexamic acid",  "vitamin c",  "vitamin c derivative" , "arbutin"]
        },
        "d": {
          "tags": ["Retinol"]
        }
      }
    }
  }
}

Exclusivity

The integration of exclusivity in the mapper is crucial for eliminating duplicates and addressing exclusivity prerequisites.

To incorporate exclusivity, you utilize the exclusive key to append an object in the following format:

"prompt_key-1" :  "prompt_key-2"


Doing so ensures that any value present in both prompt_key-1 and prompt_key-2, within the final prompt, will be extracted exclusively from prompt_key-2.

For instance:

{
  "exclusive": {
    "exclude": "includes",
    "exclude_tag": "include_tag"
  }
}


Prompt

Each prompt section is a decision point. A prompt section has two constituting parts, the sentence and the variable. Let's say we have a decision point to exclude products that has certain tags. we can add a prompt section named exclude_tags as follows

{
  "prompt_sections": {
    "exclude_tags": "Exclude any products that has following tags {exclude_tags}."
  }
}


And We need to add the exclude_tags in mapper wherever this decision point need to be mapped. An example mapper, like we have discussed above, would be

{
  "q1": {
    "mapper": {
      "a": {
        "exclude_tags": ["retinol", "retinol based products"]
      }
    }
  }
}


An example prompt section for a cosmetics company could be.

{
  "prompt_sections": {
    "age": "I am {age} years old.",
    "gender": "I am a {gender}.",
    "skin_type": "My skin type is {skin_type}.",
    "include_tag": "Show products that contain the tag: {include_tag}",
    "exclude_tag": "Exclude products that do contain the tag: {exclude_tag}"
  }
}

Prompt Order

This section is to decide the order of the prompts in the prompt section above. This section must contain all the prompts from the above section. This is the order by which the prompts will be sent to GPT model. Note: This order effects the quality of the response. User should try different orders to find the best result.

An example prompt order from the prompt_sections sample above sample could be:

{
  "prompt_order": [
    "age",
    "gender",
    "skin_type",
    "include_tag",
    "exclude_tag"
  ]
}

GPT Settings

This section is required for the context and various parameter setting for GPT. The prompt generated til this point above, goes to our GPT model, which is familiar with the item catalogue. This GPT model, in turn generates this recommendation for the user. Below is an example.

{
    "gpt_settings": {
    "model": "gpt-3.5-turbo-0613",
    "search_max_token": 2500,
    "intro": "Using given context make recommendation. make recommendation of top {{ recommend_count }} products in json format and your response should denote the json part with three tick notations(```). Use `we` as your pronoun. json object should have following format. {'comment': 'make an overall comment about your recommendations', 'advice':'...', 'recommendations': [{'id':'...', 'comment': 'why you chose this product'},{'id':'...', 'comment': 'why you chose this product'}]}. if the query includes `specialist_pretext` then include that suggestion in your 'advice'",
    "system": "You are an expert on ...",
    "temperature": 0,
    "top_p": 1,
    "frequency_penalty": 0,
    "presence_penalty": 0,
    "stop": [
      "AI:",
      "Human:"
    ],
    "recommend_count": 3,
    "result_includes": [
      "key_name_1",
      "key_name_2"
    ],
    "top_k": 20,
    "is_keyword_enabled": true
  }
}

Integration of Questionnaire Recommendation

The questionnaire recommendation function processes user responses, identifies the corresponding questionnaire and decision points, and generates personalized recommendations. The endpoint POST /v1/questionnaire/recommend is designed for this purpose.

Detailed examples, required parameters, and explanations can be found in our sandbox.

This endpoint requires questionnaire_id as input. This identifier helps determine which questionnaire and mapping to consult, and which user response to consider, leading to the generation of personalized results.

You will notice the recommend_count parameter also exist in the mapper. If it is set, the value of this parameter takes priority over recommend_count variable in questionnaire mapper.

The response format of this endpoint can be customized using the previously mentioned GPT settings.

Reviewing Questionnaire Recommendation Logs

By utilizing the endpoint GET /v1/questionnaires/{questionnaire_id}/logs, you're able to access the log of requests dispatched to the v1/questionnaire/recommend endpoint, along with the corresponding generated responses.

Previous
Dynamic Pricing
Next
GPT Project setup
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/01_Integration/Questionnaire/#reviewing-questionnaire-recommendation-logs
Skip to content
Gigalogy Tutorial
Questionnaire
English
Japanese
Type to start searching
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Table of contents
Registration of Questionnaire
Registration of Questionnaire Mapper
Questions
Exclusivity
Prompt
Prompt Order
GPT Settings
Integration of Questionnaire Recommendation
Reviewing Questionnaire Recommendation Logs
Questionnaire

Our questionnaire software is specifically tailored to provide recommendations for novice and experienced users. Here is how it works:

Questionnaire Design: We meticulously design the questionnaire to encapsulate all necessary questions and decisions.
Questionnaire Registration: The questionnaire is seamlessly integrated into the project, enabling easy access and interaction.
User Response Collection: User responses are gathered through an interactive, user-friendly, UI-based questionnaire embedded in the website.
Response Processing: These responses are then processed by the GAIP system.
Product Recommendation: Finally, personalized product recommendations are suggested based on the processed responses.

Furthermore, the registration of the questionnaire into the project constitutes two crucial phases:

Registration of Questionnaire: Where the questionnaire is incorporated into the project.
Registration of Questionnaire Mapper: Which equips the AI system with the knowledge to accurately interpret decisions based on the users' responses to the questions.
Registration of Questionnaire

To manage the questionnaire, a series of RESTful API endpoints are provided which can be explored in our sandbox.

Creating a new questionnaire: Make a POST request to /v1/questionnaires to create a new questionnaire. The sandbox hosts detailed explanations and sample request bodies. The questionnaire can be divided into different sections, with at least one required.

Listing all questionnaires: Sending a GET request to /v1/questionnaires/list lists all the questionnaire's ID and names. A project can host multiple questionnaires that are differentiated through these IDs.

Viewing a questionnaire: Make a GET request to /v1/questionnaires/{questionnaire_id} to retrieve a specific questionnaire's details, including sections and questions.

Updating and deleting questionnaire: Use the PUT /v1/questionnaires/{questionnaire_id} and DELETE /v1/questionnaires/{questionnaire_id} endpoints to update or remove a questionnaire respectively.

Registration of Questionnaire Mapper

A questionnaire mapper is essential to instruct the system on making decisions based on user responses. Corresponding endpoints for creating, viewing, and editing a mapper are found at /v1/questionnaires/{questionnaire_id}/mapper.

To create a mapper, use POST /v1/questionnaires/{questionnaire_id}/mapper.

The mapper consists of five main components:

Questions: This section maps the decisions for all questionnaire questions.
Exclusivity: Handles duplicate removal and exclusivity requirements.
Prompt Generation: This section produces prompts that are used by the AI to generate recommendations.
Prompt Order: Sets the sequence in which prompts appear.
GPT settings: Provides settings and parameters to the GPT module for context understanding.

Each section will be explained in detail as we progress further.

Questions

Inside a question object we add mapper for different possible values.

A questionnaire can have three types of questions 1. Radio button: User can select a single answer, 2. Checkbox: User can select multiple answers, 3. Free text: User can enter string.

To add mapper for a single value, use the value key as the key for related decision objects. This approach allows you to define how the system should handle or process that value.

Example

{
  "skincare_history": {
    "q2": {
      "mapper": {
        "a": {
          "exclude": ["Retinol",  "Retinol based products"]
        }
      }
    }
  }
}

In the above example, the key a represents answer selected by user. The object associated with a specifies decisions related to it—in this case, an exclude list. This list contains the values Retinol and Retinol based products, defined by the creator of the mapper. How this Exclude list is used is covered in a latter section below.

To add mapper for a combination of value (Answers with multiple selection), - Use | sign as or to combine more than one values for a decision in mapper. - Use & sign as and to combine more than one values for a decision in mapper. Example

{
  "a|b|c": {
    "exclude": ["Retinol",  "Retinol palmitate"]
  }
}


To add mapper for free-text value, use any key to add the decision rule. This can be useful for taking age, allergy information etc. Example

{
  "any": {
    "age": ""
  }
}


When a decision need to be taken if a set of value is not selected we should use negative selection.

An example scenario.

What of the following skincare you follow every day?

a. Cleanser b. Moisturizer c. Spf d. Serum e. Toner f. Night cream g. Eye cream

Decision: if cleanser, moisturizer and spf is chosen, AI will consider all products

If one of the basic step(cleanser, moisturizer, spf) is not chosen, Ai will exclude Retinol, Retinol palmitate, tranexamic acid, vitamin C, vitamin C derivative , arbutin

Here we need to take a decision if cleanser, moisturizer, spf is not selected, this is a candidate for negative selection.

Rules: Use ~ as key to add negative selection decisions in a question mapper. Use value serial as usual inside the negative selection object to add decision if a value is not selected, e.g. "a": "decision" Example

{
  "q1": {
    "mapper" : {
      "a": {
        "tags": ["acne", "anti-aging"]
      },
      "~": {
        "a|b|c": {
          "exclude": ["Retinol",  "Retinol palmitate",  "tranexamic acid",  "vitamin c",  "vitamin c derivative" , "arbutin"]
        },
        "d": {
          "tags": ["Retinol"]
        }
      }
    }
  }
}

Exclusivity

The integration of exclusivity in the mapper is crucial for eliminating duplicates and addressing exclusivity prerequisites.

To incorporate exclusivity, you utilize the exclusive key to append an object in the following format:

"prompt_key-1" :  "prompt_key-2"


Doing so ensures that any value present in both prompt_key-1 and prompt_key-2, within the final prompt, will be extracted exclusively from prompt_key-2.

For instance:

{
  "exclusive": {
    "exclude": "includes",
    "exclude_tag": "include_tag"
  }
}


Prompt

Each prompt section is a decision point. A prompt section has two constituting parts, the sentence and the variable. Let's say we have a decision point to exclude products that has certain tags. we can add a prompt section named exclude_tags as follows

{
  "prompt_sections": {
    "exclude_tags": "Exclude any products that has following tags {exclude_tags}."
  }
}


And We need to add the exclude_tags in mapper wherever this decision point need to be mapped. An example mapper, like we have discussed above, would be

{
  "q1": {
    "mapper": {
      "a": {
        "exclude_tags": ["retinol", "retinol based products"]
      }
    }
  }
}


An example prompt section for a cosmetics company could be.

{
  "prompt_sections": {
    "age": "I am {age} years old.",
    "gender": "I am a {gender}.",
    "skin_type": "My skin type is {skin_type}.",
    "include_tag": "Show products that contain the tag: {include_tag}",
    "exclude_tag": "Exclude products that do contain the tag: {exclude_tag}"
  }
}

Prompt Order

This section is to decide the order of the prompts in the prompt section above. This section must contain all the prompts from the above section. This is the order by which the prompts will be sent to GPT model. Note: This order effects the quality of the response. User should try different orders to find the best result.

An example prompt order from the prompt_sections sample above sample could be:

{
  "prompt_order": [
    "age",
    "gender",
    "skin_type",
    "include_tag",
    "exclude_tag"
  ]
}

GPT Settings

This section is required for the context and various parameter setting for GPT. The prompt generated til this point above, goes to our GPT model, which is familiar with the item catalogue. This GPT model, in turn generates this recommendation for the user. Below is an example.

{
    "gpt_settings": {
    "model": "gpt-3.5-turbo-0613",
    "search_max_token": 2500,
    "intro": "Using given context make recommendation. make recommendation of top {{ recommend_count }} products in json format and your response should denote the json part with three tick notations(```). Use `we` as your pronoun. json object should have following format. {'comment': 'make an overall comment about your recommendations', 'advice':'...', 'recommendations': [{'id':'...', 'comment': 'why you chose this product'},{'id':'...', 'comment': 'why you chose this product'}]}. if the query includes `specialist_pretext` then include that suggestion in your 'advice'",
    "system": "You are an expert on ...",
    "temperature": 0,
    "top_p": 1,
    "frequency_penalty": 0,
    "presence_penalty": 0,
    "stop": [
      "AI:",
      "Human:"
    ],
    "recommend_count": 3,
    "result_includes": [
      "key_name_1",
      "key_name_2"
    ],
    "top_k": 20,
    "is_keyword_enabled": true
  }
}

Integration of Questionnaire Recommendation

The questionnaire recommendation function processes user responses, identifies the corresponding questionnaire and decision points, and generates personalized recommendations. The endpoint POST /v1/questionnaire/recommend is designed for this purpose.

Detailed examples, required parameters, and explanations can be found in our sandbox.

This endpoint requires questionnaire_id as input. This identifier helps determine which questionnaire and mapping to consult, and which user response to consider, leading to the generation of personalized results.

You will notice the recommend_count parameter also exist in the mapper. If it is set, the value of this parameter takes priority over recommend_count variable in questionnaire mapper.

The response format of this endpoint can be customized using the previously mentioned GPT settings.

Reviewing Questionnaire Recommendation Logs

By utilizing the endpoint GET /v1/questionnaires/{questionnaire_id}/logs, you're able to access the log of requests dispatched to the v1/questionnaire/recommend endpoint, along with the corresponding generated responses.

Previous
Dynamic Pricing
Next
GPT Project setup
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/02_gpt_integration/gpt_project_setup/
Skip to content
Gigalogy Tutorial
GPT Project setup
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
MyGPT
GPT Project setup
GPT Integration
GPT Feedback
API Reference
Release notes
Glossary
Table of contents
Documents
Datasets
Profiles
Project setup
Dataset
Upload Dataset
How to see uploaded datasets
Delete dataset
Update Dataset
Updating and deleting - Documents
Training
Profile
Setup profile
Default profile setup
GPT Project setup

Gigalogy,s GPT based solutions allows you to make your own GPT solutions, trained with your own data, customized according to your needs. Here are some basics to get you started. Find MyGPT related endpoints in our sandbox.

Documents

Documents are information that GPT will consider as a single piece of information, such as Address of Gigalogy, What is Gigalogy personalization, etc.

Datasets

A Dataset is a collection of documents in a single file. For instance, single dataset may contain documents with information such as Address of Gigalogy, What is Gigalogy personalization, What is Gigalogy's MyGPT.

Profiles

With each request sent to GPT endpoints POST /v1/gpt/ask and POST /v1/gpt/ask/vision, we include a parameter called gpt_profile_id. This parameter's value points to a GPT profile. GPT profiles hold information that tells the GPT how to process the information provided (query) and how to respond. To see more about what is inside a profile, check out the parameters and the example request body of the endpoint POST /v1/gpt/profiles.

There are two types of profiles. One is for the /gpt/ask endpoint, which is a general profile for any model except gpt-4-vision-preview. The other is for the /gpt/ask/vision endpoint, for which we currently support only gpt-4-vision-preview as the model.

Project setup

Project setup for MyGPT involves preparing, uploading and training your data. Additionally, set up the required setting the parameters to suit your requirement.

Dataset
Upload Dataset

Use the endpoint POST /v1/gpt/datasets to upload a dataset that will be used to train your customized GPT bot. Currently, we accept CSV and JSON format. You will find the required parameters and description in the sandbox in the link above.

How to see uploaded datasets

Once the dataset is uploaded, you can use /v1/gpt/datasets to see all your datasets of your project. The response will give you below details along with the datasets ids. This dataset_id will be required to edit, delete, train your data.

  {
    "dataset_id": "a8bf8ddd-b5cb-4bea-a82b-4ac148f01c0a",
    "created_at": "2023-12-24T20:23:34.992063+09:00",
    "name": "NAME OF THE DATASET",
    "description": DESCRIPTION OF THE DATASET,
    "idx_column_name": "idx",
    "image_url_column": "images"
  }

Delete dataset

Use the endpoint DELETE /v1/gpt/datasets/{dataset_id} to delete a dataset or particular documents from a dataset. You can find the expected request body, with required parameters and values in our sandbox here

Update Dataset

To be updated

Updating and deleting - Documents

To be updated

Training

Use endpoint POST /v1/gpt/dataset/train to train your uploaded dataset. This endpoint will take the dataset id and image type. It is good practice to train only what is necessary to optimize the usage of resources.

Profile
Setup profile

Use POST /v1/gpt/profiles to setup GPT profile. You can setup multiple profiles. However you will need to select one as the default profile in the next step.

Here are some detail about "intro", "System" and "Model" parameters.

Intro: This is detailed instruction for the bot on how to respond to a query. For example, if you are creating a customer support bot for an E-commerce site "AAA", this parameter could be: "Answer customer questions based on the catalog information and FAQ documents of our company. If a customer wants a product recommendation, ask up to three questions to understand their needs better, then make three recommendations and ask the customer if they like them or want different recommendations."

System: This tells the bot about the persona it is supposed to adopt. For example, if you are creating a customer support bot for an E-commerce site "AAA", selling cosmetics, this parameter could be: "You are customer support for AAA, an expert on skincare and cosmetic products who values customer needs and provides the right product recommendations."

Model: We support all GPT models of OpenAI, which you can select based on the needs and use cases. Please consider the purpose and the estimated token count when selecting the model, as this can significantly impact costs. You can learn more about OpenAI models from this page. This setting will impact the parameters search_max_token (tokens allocated for data sent to the model) and completion_token (tokens allocated for the reply). Note that intro, system, and query have token costs that are not included in the token size allocation. The selected model's CONTEXT WINDOW should cover the total token allocation. That is CONTEXT WINDOW ≥ search_max_token + completion_token + intro + system + query.

You can use the use the endpoints in our sandbox under "MyGPT Profiles" to Check the profiles and update or delete them.

Default profile setup

Once you have setup the profile(s), decide one of the profiles that should be default and use our endpoint POST /v1/gpt/settings to set your default profile.

with this, your GPT setup is completed.

Previous
Questionnaire
Next
GPT Integration
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/02_gpt_integration/gpt_project_setup/#documents
Skip to content
Gigalogy Tutorial
GPT Project setup
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
MyGPT
GPT Project setup
GPT Integration
GPT Feedback
API Reference
Release notes
Glossary
Table of contents
Documents
Datasets
Profiles
Project setup
Dataset
Upload Dataset
How to see uploaded datasets
Delete dataset
Update Dataset
Updating and deleting - Documents
Training
Profile
Setup profile
Default profile setup
GPT Project setup

Gigalogy,s GPT based solutions allows you to make your own GPT solutions, trained with your own data, customized according to your needs. Here are some basics to get you started. Find MyGPT related endpoints in our sandbox.

Documents

Documents are information that GPT will consider as a single piece of information, such as Address of Gigalogy, What is Gigalogy personalization, etc.

Datasets

A Dataset is a collection of documents in a single file. For instance, single dataset may contain documents with information such as Address of Gigalogy, What is Gigalogy personalization, What is Gigalogy's MyGPT.

Profiles

With each request sent to GPT endpoints POST /v1/gpt/ask and POST /v1/gpt/ask/vision, we include a parameter called gpt_profile_id. This parameter's value points to a GPT profile. GPT profiles hold information that tells the GPT how to process the information provided (query) and how to respond. To see more about what is inside a profile, check out the parameters and the example request body of the endpoint POST /v1/gpt/profiles.

There are two types of profiles. One is for the /gpt/ask endpoint, which is a general profile for any model except gpt-4-vision-preview. The other is for the /gpt/ask/vision endpoint, for which we currently support only gpt-4-vision-preview as the model.

Project setup

Project setup for MyGPT involves preparing, uploading and training your data. Additionally, set up the required setting the parameters to suit your requirement.

Dataset
Upload Dataset

Use the endpoint POST /v1/gpt/datasets to upload a dataset that will be used to train your customized GPT bot. Currently, we accept CSV and JSON format. You will find the required parameters and description in the sandbox in the link above.

How to see uploaded datasets

Once the dataset is uploaded, you can use /v1/gpt/datasets to see all your datasets of your project. The response will give you below details along with the datasets ids. This dataset_id will be required to edit, delete, train your data.

  {
    "dataset_id": "a8bf8ddd-b5cb-4bea-a82b-4ac148f01c0a",
    "created_at": "2023-12-24T20:23:34.992063+09:00",
    "name": "NAME OF THE DATASET",
    "description": DESCRIPTION OF THE DATASET,
    "idx_column_name": "idx",
    "image_url_column": "images"
  }

Delete dataset

Use the endpoint DELETE /v1/gpt/datasets/{dataset_id} to delete a dataset or particular documents from a dataset. You can find the expected request body, with required parameters and values in our sandbox here

Update Dataset

To be updated

Updating and deleting - Documents

To be updated

Training

Use endpoint POST /v1/gpt/dataset/train to train your uploaded dataset. This endpoint will take the dataset id and image type. It is good practice to train only what is necessary to optimize the usage of resources.

Profile
Setup profile

Use POST /v1/gpt/profiles to setup GPT profile. You can setup multiple profiles. However you will need to select one as the default profile in the next step.

Here are some detail about "intro", "System" and "Model" parameters.

Intro: This is detailed instruction for the bot on how to respond to a query. For example, if you are creating a customer support bot for an E-commerce site "AAA", this parameter could be: "Answer customer questions based on the catalog information and FAQ documents of our company. If a customer wants a product recommendation, ask up to three questions to understand their needs better, then make three recommendations and ask the customer if they like them or want different recommendations."

System: This tells the bot about the persona it is supposed to adopt. For example, if you are creating a customer support bot for an E-commerce site "AAA", selling cosmetics, this parameter could be: "You are customer support for AAA, an expert on skincare and cosmetic products who values customer needs and provides the right product recommendations."

Model: We support all GPT models of OpenAI, which you can select based on the needs and use cases. Please consider the purpose and the estimated token count when selecting the model, as this can significantly impact costs. You can learn more about OpenAI models from this page. This setting will impact the parameters search_max_token (tokens allocated for data sent to the model) and completion_token (tokens allocated for the reply). Note that intro, system, and query have token costs that are not included in the token size allocation. The selected model's CONTEXT WINDOW should cover the total token allocation. That is CONTEXT WINDOW ≥ search_max_token + completion_token + intro + system + query.

You can use the use the endpoints in our sandbox under "MyGPT Profiles" to Check the profiles and update or delete them.

Default profile setup

Once you have setup the profile(s), decide one of the profiles that should be default and use our endpoint POST /v1/gpt/settings to set your default profile.

with this, your GPT setup is completed.

Previous
Questionnaire
Next
GPT Integration
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/02_gpt_integration/gpt_project_setup/#datasets
Skip to content
Gigalogy Tutorial
GPT Project setup
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
MyGPT
GPT Project setup
GPT Integration
GPT Feedback
API Reference
Release notes
Glossary
Table of contents
Documents
Datasets
Profiles
Project setup
Dataset
Upload Dataset
How to see uploaded datasets
Delete dataset
Update Dataset
Updating and deleting - Documents
Training
Profile
Setup profile
Default profile setup
GPT Project setup

Gigalogy,s GPT based solutions allows you to make your own GPT solutions, trained with your own data, customized according to your needs. Here are some basics to get you started. Find MyGPT related endpoints in our sandbox.

Documents

Documents are information that GPT will consider as a single piece of information, such as Address of Gigalogy, What is Gigalogy personalization, etc.

Datasets

A Dataset is a collection of documents in a single file. For instance, single dataset may contain documents with information such as Address of Gigalogy, What is Gigalogy personalization, What is Gigalogy's MyGPT.

Profiles

With each request sent to GPT endpoints POST /v1/gpt/ask and POST /v1/gpt/ask/vision, we include a parameter called gpt_profile_id. This parameter's value points to a GPT profile. GPT profiles hold information that tells the GPT how to process the information provided (query) and how to respond. To see more about what is inside a profile, check out the parameters and the example request body of the endpoint POST /v1/gpt/profiles.

There are two types of profiles. One is for the /gpt/ask endpoint, which is a general profile for any model except gpt-4-vision-preview. The other is for the /gpt/ask/vision endpoint, for which we currently support only gpt-4-vision-preview as the model.

Project setup

Project setup for MyGPT involves preparing, uploading and training your data. Additionally, set up the required setting the parameters to suit your requirement.

Dataset
Upload Dataset

Use the endpoint POST /v1/gpt/datasets to upload a dataset that will be used to train your customized GPT bot. Currently, we accept CSV and JSON format. You will find the required parameters and description in the sandbox in the link above.

How to see uploaded datasets

Once the dataset is uploaded, you can use /v1/gpt/datasets to see all your datasets of your project. The response will give you below details along with the datasets ids. This dataset_id will be required to edit, delete, train your data.

  {
    "dataset_id": "a8bf8ddd-b5cb-4bea-a82b-4ac148f01c0a",
    "created_at": "2023-12-24T20:23:34.992063+09:00",
    "name": "NAME OF THE DATASET",
    "description": DESCRIPTION OF THE DATASET,
    "idx_column_name": "idx",
    "image_url_column": "images"
  }

Delete dataset

Use the endpoint DELETE /v1/gpt/datasets/{dataset_id} to delete a dataset or particular documents from a dataset. You can find the expected request body, with required parameters and values in our sandbox here

Update Dataset

To be updated

Updating and deleting - Documents

To be updated

Training

Use endpoint POST /v1/gpt/dataset/train to train your uploaded dataset. This endpoint will take the dataset id and image type. It is good practice to train only what is necessary to optimize the usage of resources.

Profile
Setup profile

Use POST /v1/gpt/profiles to setup GPT profile. You can setup multiple profiles. However you will need to select one as the default profile in the next step.

Here are some detail about "intro", "System" and "Model" parameters.

Intro: This is detailed instruction for the bot on how to respond to a query. For example, if you are creating a customer support bot for an E-commerce site "AAA", this parameter could be: "Answer customer questions based on the catalog information and FAQ documents of our company. If a customer wants a product recommendation, ask up to three questions to understand their needs better, then make three recommendations and ask the customer if they like them or want different recommendations."

System: This tells the bot about the persona it is supposed to adopt. For example, if you are creating a customer support bot for an E-commerce site "AAA", selling cosmetics, this parameter could be: "You are customer support for AAA, an expert on skincare and cosmetic products who values customer needs and provides the right product recommendations."

Model: We support all GPT models of OpenAI, which you can select based on the needs and use cases. Please consider the purpose and the estimated token count when selecting the model, as this can significantly impact costs. You can learn more about OpenAI models from this page. This setting will impact the parameters search_max_token (tokens allocated for data sent to the model) and completion_token (tokens allocated for the reply). Note that intro, system, and query have token costs that are not included in the token size allocation. The selected model's CONTEXT WINDOW should cover the total token allocation. That is CONTEXT WINDOW ≥ search_max_token + completion_token + intro + system + query.

You can use the use the endpoints in our sandbox under "MyGPT Profiles" to Check the profiles and update or delete them.

Default profile setup

Once you have setup the profile(s), decide one of the profiles that should be default and use our endpoint POST /v1/gpt/settings to set your default profile.

with this, your GPT setup is completed.

Previous
Questionnaire
Next
GPT Integration
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/02_gpt_integration/gpt_project_setup/#profiles
Skip to content
Gigalogy Tutorial
GPT Project setup
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
MyGPT
GPT Project setup
GPT Integration
GPT Feedback
API Reference
Release notes
Glossary
Table of contents
Documents
Datasets
Profiles
Project setup
Dataset
Upload Dataset
How to see uploaded datasets
Delete dataset
Update Dataset
Updating and deleting - Documents
Training
Profile
Setup profile
Default profile setup
GPT Project setup

Gigalogy,s GPT based solutions allows you to make your own GPT solutions, trained with your own data, customized according to your needs. Here are some basics to get you started. Find MyGPT related endpoints in our sandbox.

Documents

Documents are information that GPT will consider as a single piece of information, such as Address of Gigalogy, What is Gigalogy personalization, etc.

Datasets

A Dataset is a collection of documents in a single file. For instance, single dataset may contain documents with information such as Address of Gigalogy, What is Gigalogy personalization, What is Gigalogy's MyGPT.

Profiles

With each request sent to GPT endpoints POST /v1/gpt/ask and POST /v1/gpt/ask/vision, we include a parameter called gpt_profile_id. This parameter's value points to a GPT profile. GPT profiles hold information that tells the GPT how to process the information provided (query) and how to respond. To see more about what is inside a profile, check out the parameters and the example request body of the endpoint POST /v1/gpt/profiles.

There are two types of profiles. One is for the /gpt/ask endpoint, which is a general profile for any model except gpt-4-vision-preview. The other is for the /gpt/ask/vision endpoint, for which we currently support only gpt-4-vision-preview as the model.

Project setup

Project setup for MyGPT involves preparing, uploading and training your data. Additionally, set up the required setting the parameters to suit your requirement.

Dataset
Upload Dataset

Use the endpoint POST /v1/gpt/datasets to upload a dataset that will be used to train your customized GPT bot. Currently, we accept CSV and JSON format. You will find the required parameters and description in the sandbox in the link above.

How to see uploaded datasets

Once the dataset is uploaded, you can use /v1/gpt/datasets to see all your datasets of your project. The response will give you below details along with the datasets ids. This dataset_id will be required to edit, delete, train your data.

  {
    "dataset_id": "a8bf8ddd-b5cb-4bea-a82b-4ac148f01c0a",
    "created_at": "2023-12-24T20:23:34.992063+09:00",
    "name": "NAME OF THE DATASET",
    "description": DESCRIPTION OF THE DATASET,
    "idx_column_name": "idx",
    "image_url_column": "images"
  }

Delete dataset

Use the endpoint DELETE /v1/gpt/datasets/{dataset_id} to delete a dataset or particular documents from a dataset. You can find the expected request body, with required parameters and values in our sandbox here

Update Dataset

To be updated

Updating and deleting - Documents

To be updated

Training

Use endpoint POST /v1/gpt/dataset/train to train your uploaded dataset. This endpoint will take the dataset id and image type. It is good practice to train only what is necessary to optimize the usage of resources.

Profile
Setup profile

Use POST /v1/gpt/profiles to setup GPT profile. You can setup multiple profiles. However you will need to select one as the default profile in the next step.

Here are some detail about "intro", "System" and "Model" parameters.

Intro: This is detailed instruction for the bot on how to respond to a query. For example, if you are creating a customer support bot for an E-commerce site "AAA", this parameter could be: "Answer customer questions based on the catalog information and FAQ documents of our company. If a customer wants a product recommendation, ask up to three questions to understand their needs better, then make three recommendations and ask the customer if they like them or want different recommendations."

System: This tells the bot about the persona it is supposed to adopt. For example, if you are creating a customer support bot for an E-commerce site "AAA", selling cosmetics, this parameter could be: "You are customer support for AAA, an expert on skincare and cosmetic products who values customer needs and provides the right product recommendations."

Model: We support all GPT models of OpenAI, which you can select based on the needs and use cases. Please consider the purpose and the estimated token count when selecting the model, as this can significantly impact costs. You can learn more about OpenAI models from this page. This setting will impact the parameters search_max_token (tokens allocated for data sent to the model) and completion_token (tokens allocated for the reply). Note that intro, system, and query have token costs that are not included in the token size allocation. The selected model's CONTEXT WINDOW should cover the total token allocation. That is CONTEXT WINDOW ≥ search_max_token + completion_token + intro + system + query.

You can use the use the endpoints in our sandbox under "MyGPT Profiles" to Check the profiles and update or delete them.

Default profile setup

Once you have setup the profile(s), decide one of the profiles that should be default and use our endpoint POST /v1/gpt/settings to set your default profile.

with this, your GPT setup is completed.

Previous
Questionnaire
Next
GPT Integration
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/02_gpt_integration/gpt_project_setup/#project-setup
Skip to content
Gigalogy Tutorial
GPT Project setup
English
Japanese
Type to start searching
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
MyGPT
GPT Project setup
GPT Integration
GPT Feedback
API Reference
Release notes
Glossary
Table of contents
Documents
Datasets
Profiles
Project setup
Dataset
Upload Dataset
How to see uploaded datasets
Delete dataset
Update Dataset
Updating and deleting - Documents
Training
Profile
Setup profile
Default profile setup
GPT Project setup

Gigalogy,s GPT based solutions allows you to make your own GPT solutions, trained with your own data, customized according to your needs. Here are some basics to get you started. Find MyGPT related endpoints in our sandbox.

Documents

Documents are information that GPT will consider as a single piece of information, such as Address of Gigalogy, What is Gigalogy personalization, etc.

Datasets

A Dataset is a collection of documents in a single file. For instance, single dataset may contain documents with information such as Address of Gigalogy, What is Gigalogy personalization, What is Gigalogy's MyGPT.

Profiles

With each request sent to GPT endpoints POST /v1/gpt/ask and POST /v1/gpt/ask/vision, we include a parameter called gpt_profile_id. This parameter's value points to a GPT profile. GPT profiles hold information that tells the GPT how to process the information provided (query) and how to respond. To see more about what is inside a profile, check out the parameters and the example request body of the endpoint POST /v1/gpt/profiles.

There are two types of profiles. One is for the /gpt/ask endpoint, which is a general profile for any model except gpt-4-vision-preview. The other is for the /gpt/ask/vision endpoint, for which we currently support only gpt-4-vision-preview as the model.

Project setup

Project setup for MyGPT involves preparing, uploading and training your data. Additionally, set up the required setting the parameters to suit your requirement.

Dataset
Upload Dataset

Use the endpoint POST /v1/gpt/datasets to upload a dataset that will be used to train your customized GPT bot. Currently, we accept CSV and JSON format. You will find the required parameters and description in the sandbox in the link above.

How to see uploaded datasets

Once the dataset is uploaded, you can use /v1/gpt/datasets to see all your datasets of your project. The response will give you below details along with the datasets ids. This dataset_id will be required to edit, delete, train your data.

  {
    "dataset_id": "a8bf8ddd-b5cb-4bea-a82b-4ac148f01c0a",
    "created_at": "2023-12-24T20:23:34.992063+09:00",
    "name": "NAME OF THE DATASET",
    "description": DESCRIPTION OF THE DATASET,
    "idx_column_name": "idx",
    "image_url_column": "images"
  }

Delete dataset

Use the endpoint DELETE /v1/gpt/datasets/{dataset_id} to delete a dataset or particular documents from a dataset. You can find the expected request body, with required parameters and values in our sandbox here

Update Dataset

To be updated

Updating and deleting - Documents

To be updated

Training

Use endpoint POST /v1/gpt/dataset/train to train your uploaded dataset. This endpoint will take the dataset id and image type. It is good practice to train only what is necessary to optimize the usage of resources.

Profile
Setup profile

Use POST /v1/gpt/profiles to setup GPT profile. You can setup multiple profiles. However you will need to select one as the default profile in the next step.

Here are some detail about "intro", "System" and "Model" parameters.

Intro: This is detailed instruction for the bot on how to respond to a query. For example, if you are creating a customer support bot for an E-commerce site "AAA", this parameter could be: "Answer customer questions based on the catalog information and FAQ documents of our company. If a customer wants a product recommendation, ask up to three questions to understand their needs better, then make three recommendations and ask the customer if they like them or want different recommendations."

System: This tells the bot about the persona it is supposed to adopt. For example, if you are creating a customer support bot for an E-commerce site "AAA", selling cosmetics, this parameter could be: "You are customer support for AAA, an expert on skincare and cosmetic products who values customer needs and provides the right product recommendations."

Model: We support all GPT models of OpenAI, which you can select based on the needs and use cases. Please consider the purpose and the estimated token count when selecting the model, as this can significantly impact costs. You can learn more about OpenAI models from this page. This setting will impact the parameters search_max_token (tokens allocated for data sent to the model) and completion_token (tokens allocated for the reply). Note that intro, system, and query have token costs that are not included in the token size allocation. The selected model's CONTEXT WINDOW should cover the total token allocation. That is CONTEXT WINDOW ≥ search_max_token + completion_token + intro + system + query.

You can use the use the endpoints in our sandbox under "MyGPT Profiles" to Check the profiles and update or delete them.

Default profile setup

Once you have setup the profile(s), decide one of the profiles that should be default and use our endpoint POST /v1/gpt/settings to set your default profile.

with this, your GPT setup is completed.

Previous
Questionnaire
Next
GPT Integration
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/02_gpt_integration/gpt_project_setup/#dataset
Skip to content
Gigalogy Tutorial
GPT Project setup
English
Japanese
Type to start searching
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
MyGPT
GPT Project setup
GPT Integration
GPT Feedback
API Reference
Release notes
Glossary
Table of contents
Documents
Datasets
Profiles
Project setup
Dataset
Upload Dataset
How to see uploaded datasets
Delete dataset
Update Dataset
Updating and deleting - Documents
Training
Profile
Setup profile
Default profile setup
GPT Project setup

Gigalogy,s GPT based solutions allows you to make your own GPT solutions, trained with your own data, customized according to your needs. Here are some basics to get you started. Find MyGPT related endpoints in our sandbox.

Documents

Documents are information that GPT will consider as a single piece of information, such as Address of Gigalogy, What is Gigalogy personalization, etc.

Datasets

A Dataset is a collection of documents in a single file. For instance, single dataset may contain documents with information such as Address of Gigalogy, What is Gigalogy personalization, What is Gigalogy's MyGPT.

Profiles

With each request sent to GPT endpoints POST /v1/gpt/ask and POST /v1/gpt/ask/vision, we include a parameter called gpt_profile_id. This parameter's value points to a GPT profile. GPT profiles hold information that tells the GPT how to process the information provided (query) and how to respond. To see more about what is inside a profile, check out the parameters and the example request body of the endpoint POST /v1/gpt/profiles.

There are two types of profiles. One is for the /gpt/ask endpoint, which is a general profile for any model except gpt-4-vision-preview. The other is for the /gpt/ask/vision endpoint, for which we currently support only gpt-4-vision-preview as the model.

Project setup

Project setup for MyGPT involves preparing, uploading and training your data. Additionally, set up the required setting the parameters to suit your requirement.

Dataset
Upload Dataset

Use the endpoint POST /v1/gpt/datasets to upload a dataset that will be used to train your customized GPT bot. Currently, we accept CSV and JSON format. You will find the required parameters and description in the sandbox in the link above.

How to see uploaded datasets

Once the dataset is uploaded, you can use /v1/gpt/datasets to see all your datasets of your project. The response will give you below details along with the datasets ids. This dataset_id will be required to edit, delete, train your data.

  {
    "dataset_id": "a8bf8ddd-b5cb-4bea-a82b-4ac148f01c0a",
    "created_at": "2023-12-24T20:23:34.992063+09:00",
    "name": "NAME OF THE DATASET",
    "description": DESCRIPTION OF THE DATASET,
    "idx_column_name": "idx",
    "image_url_column": "images"
  }

Delete dataset

Use the endpoint DELETE /v1/gpt/datasets/{dataset_id} to delete a dataset or particular documents from a dataset. You can find the expected request body, with required parameters and values in our sandbox here

Update Dataset

To be updated

Updating and deleting - Documents

To be updated

Training

Use endpoint POST /v1/gpt/dataset/train to train your uploaded dataset. This endpoint will take the dataset id and image type. It is good practice to train only what is necessary to optimize the usage of resources.

Profile
Setup profile

Use POST /v1/gpt/profiles to setup GPT profile. You can setup multiple profiles. However you will need to select one as the default profile in the next step.

Here are some detail about "intro", "System" and "Model" parameters.

Intro: This is detailed instruction for the bot on how to respond to a query. For example, if you are creating a customer support bot for an E-commerce site "AAA", this parameter could be: "Answer customer questions based on the catalog information and FAQ documents of our company. If a customer wants a product recommendation, ask up to three questions to understand their needs better, then make three recommendations and ask the customer if they like them or want different recommendations."

System: This tells the bot about the persona it is supposed to adopt. For example, if you are creating a customer support bot for an E-commerce site "AAA", selling cosmetics, this parameter could be: "You are customer support for AAA, an expert on skincare and cosmetic products who values customer needs and provides the right product recommendations."

Model: We support all GPT models of OpenAI, which you can select based on the needs and use cases. Please consider the purpose and the estimated token count when selecting the model, as this can significantly impact costs. You can learn more about OpenAI models from this page. This setting will impact the parameters search_max_token (tokens allocated for data sent to the model) and completion_token (tokens allocated for the reply). Note that intro, system, and query have token costs that are not included in the token size allocation. The selected model's CONTEXT WINDOW should cover the total token allocation. That is CONTEXT WINDOW ≥ search_max_token + completion_token + intro + system + query.

You can use the use the endpoints in our sandbox under "MyGPT Profiles" to Check the profiles and update or delete them.

Default profile setup

Once you have setup the profile(s), decide one of the profiles that should be default and use our endpoint POST /v1/gpt/settings to set your default profile.

with this, your GPT setup is completed.

Previous
Questionnaire
Next
GPT Integration
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/02_gpt_integration/gpt_project_setup/#upload-dataset
Skip to content
Gigalogy Tutorial
GPT Project setup
English
Japanese
Type to start searching
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
MyGPT
GPT Project setup
GPT Integration
GPT Feedback
API Reference
Release notes
Glossary
Table of contents
Documents
Datasets
Profiles
Project setup
Dataset
Upload Dataset
How to see uploaded datasets
Delete dataset
Update Dataset
Updating and deleting - Documents
Training
Profile
Setup profile
Default profile setup
GPT Project setup

Gigalogy,s GPT based solutions allows you to make your own GPT solutions, trained with your own data, customized according to your needs. Here are some basics to get you started. Find MyGPT related endpoints in our sandbox.

Documents

Documents are information that GPT will consider as a single piece of information, such as Address of Gigalogy, What is Gigalogy personalization, etc.

Datasets

A Dataset is a collection of documents in a single file. For instance, single dataset may contain documents with information such as Address of Gigalogy, What is Gigalogy personalization, What is Gigalogy's MyGPT.

Profiles

With each request sent to GPT endpoints POST /v1/gpt/ask and POST /v1/gpt/ask/vision, we include a parameter called gpt_profile_id. This parameter's value points to a GPT profile. GPT profiles hold information that tells the GPT how to process the information provided (query) and how to respond. To see more about what is inside a profile, check out the parameters and the example request body of the endpoint POST /v1/gpt/profiles.

There are two types of profiles. One is for the /gpt/ask endpoint, which is a general profile for any model except gpt-4-vision-preview. The other is for the /gpt/ask/vision endpoint, for which we currently support only gpt-4-vision-preview as the model.

Project setup

Project setup for MyGPT involves preparing, uploading and training your data. Additionally, set up the required setting the parameters to suit your requirement.

Dataset
Upload Dataset

Use the endpoint POST /v1/gpt/datasets to upload a dataset that will be used to train your customized GPT bot. Currently, we accept CSV and JSON format. You will find the required parameters and description in the sandbox in the link above.

How to see uploaded datasets

Once the dataset is uploaded, you can use /v1/gpt/datasets to see all your datasets of your project. The response will give you below details along with the datasets ids. This dataset_id will be required to edit, delete, train your data.

  {
    "dataset_id": "a8bf8ddd-b5cb-4bea-a82b-4ac148f01c0a",
    "created_at": "2023-12-24T20:23:34.992063+09:00",
    "name": "NAME OF THE DATASET",
    "description": DESCRIPTION OF THE DATASET,
    "idx_column_name": "idx",
    "image_url_column": "images"
  }

Delete dataset

Use the endpoint DELETE /v1/gpt/datasets/{dataset_id} to delete a dataset or particular documents from a dataset. You can find the expected request body, with required parameters and values in our sandbox here

Update Dataset

To be updated

Updating and deleting - Documents

To be updated

Training

Use endpoint POST /v1/gpt/dataset/train to train your uploaded dataset. This endpoint will take the dataset id and image type. It is good practice to train only what is necessary to optimize the usage of resources.

Profile
Setup profile

Use POST /v1/gpt/profiles to setup GPT profile. You can setup multiple profiles. However you will need to select one as the default profile in the next step.

Here are some detail about "intro", "System" and "Model" parameters.

Intro: This is detailed instruction for the bot on how to respond to a query. For example, if you are creating a customer support bot for an E-commerce site "AAA", this parameter could be: "Answer customer questions based on the catalog information and FAQ documents of our company. If a customer wants a product recommendation, ask up to three questions to understand their needs better, then make three recommendations and ask the customer if they like them or want different recommendations."

System: This tells the bot about the persona it is supposed to adopt. For example, if you are creating a customer support bot for an E-commerce site "AAA", selling cosmetics, this parameter could be: "You are customer support for AAA, an expert on skincare and cosmetic products who values customer needs and provides the right product recommendations."

Model: We support all GPT models of OpenAI, which you can select based on the needs and use cases. Please consider the purpose and the estimated token count when selecting the model, as this can significantly impact costs. You can learn more about OpenAI models from this page. This setting will impact the parameters search_max_token (tokens allocated for data sent to the model) and completion_token (tokens allocated for the reply). Note that intro, system, and query have token costs that are not included in the token size allocation. The selected model's CONTEXT WINDOW should cover the total token allocation. That is CONTEXT WINDOW ≥ search_max_token + completion_token + intro + system + query.

You can use the use the endpoints in our sandbox under "MyGPT Profiles" to Check the profiles and update or delete them.

Default profile setup

Once you have setup the profile(s), decide one of the profiles that should be default and use our endpoint POST /v1/gpt/settings to set your default profile.

with this, your GPT setup is completed.

Previous
Questionnaire
Next
GPT Integration
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/02_gpt_integration/gpt_project_setup/#how-to-see-uploaded-datasets
Skip to content
Gigalogy Tutorial
GPT Project setup
English
Japanese
Type to start searching
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
MyGPT
GPT Project setup
GPT Integration
GPT Feedback
API Reference
Release notes
Glossary
Table of contents
Documents
Datasets
Profiles
Project setup
Dataset
Upload Dataset
How to see uploaded datasets
Delete dataset
Update Dataset
Updating and deleting - Documents
Training
Profile
Setup profile
Default profile setup
GPT Project setup

Gigalogy,s GPT based solutions allows you to make your own GPT solutions, trained with your own data, customized according to your needs. Here are some basics to get you started. Find MyGPT related endpoints in our sandbox.

Documents

Documents are information that GPT will consider as a single piece of information, such as Address of Gigalogy, What is Gigalogy personalization, etc.

Datasets

A Dataset is a collection of documents in a single file. For instance, single dataset may contain documents with information such as Address of Gigalogy, What is Gigalogy personalization, What is Gigalogy's MyGPT.

Profiles

With each request sent to GPT endpoints POST /v1/gpt/ask and POST /v1/gpt/ask/vision, we include a parameter called gpt_profile_id. This parameter's value points to a GPT profile. GPT profiles hold information that tells the GPT how to process the information provided (query) and how to respond. To see more about what is inside a profile, check out the parameters and the example request body of the endpoint POST /v1/gpt/profiles.

There are two types of profiles. One is for the /gpt/ask endpoint, which is a general profile for any model except gpt-4-vision-preview. The other is for the /gpt/ask/vision endpoint, for which we currently support only gpt-4-vision-preview as the model.

Project setup

Project setup for MyGPT involves preparing, uploading and training your data. Additionally, set up the required setting the parameters to suit your requirement.

Dataset
Upload Dataset

Use the endpoint POST /v1/gpt/datasets to upload a dataset that will be used to train your customized GPT bot. Currently, we accept CSV and JSON format. You will find the required parameters and description in the sandbox in the link above.

How to see uploaded datasets

Once the dataset is uploaded, you can use /v1/gpt/datasets to see all your datasets of your project. The response will give you below details along with the datasets ids. This dataset_id will be required to edit, delete, train your data.

  {
    "dataset_id": "a8bf8ddd-b5cb-4bea-a82b-4ac148f01c0a",
    "created_at": "2023-12-24T20:23:34.992063+09:00",
    "name": "NAME OF THE DATASET",
    "description": DESCRIPTION OF THE DATASET,
    "idx_column_name": "idx",
    "image_url_column": "images"
  }

Delete dataset

Use the endpoint DELETE /v1/gpt/datasets/{dataset_id} to delete a dataset or particular documents from a dataset. You can find the expected request body, with required parameters and values in our sandbox here

Update Dataset

To be updated

Updating and deleting - Documents

To be updated

Training

Use endpoint POST /v1/gpt/dataset/train to train your uploaded dataset. This endpoint will take the dataset id and image type. It is good practice to train only what is necessary to optimize the usage of resources.

Profile
Setup profile

Use POST /v1/gpt/profiles to setup GPT profile. You can setup multiple profiles. However you will need to select one as the default profile in the next step.

Here are some detail about "intro", "System" and "Model" parameters.

Intro: This is detailed instruction for the bot on how to respond to a query. For example, if you are creating a customer support bot for an E-commerce site "AAA", this parameter could be: "Answer customer questions based on the catalog information and FAQ documents of our company. If a customer wants a product recommendation, ask up to three questions to understand their needs better, then make three recommendations and ask the customer if they like them or want different recommendations."

System: This tells the bot about the persona it is supposed to adopt. For example, if you are creating a customer support bot for an E-commerce site "AAA", selling cosmetics, this parameter could be: "You are customer support for AAA, an expert on skincare and cosmetic products who values customer needs and provides the right product recommendations."

Model: We support all GPT models of OpenAI, which you can select based on the needs and use cases. Please consider the purpose and the estimated token count when selecting the model, as this can significantly impact costs. You can learn more about OpenAI models from this page. This setting will impact the parameters search_max_token (tokens allocated for data sent to the model) and completion_token (tokens allocated for the reply). Note that intro, system, and query have token costs that are not included in the token size allocation. The selected model's CONTEXT WINDOW should cover the total token allocation. That is CONTEXT WINDOW ≥ search_max_token + completion_token + intro + system + query.

You can use the use the endpoints in our sandbox under "MyGPT Profiles" to Check the profiles and update or delete them.

Default profile setup

Once you have setup the profile(s), decide one of the profiles that should be default and use our endpoint POST /v1/gpt/settings to set your default profile.

with this, your GPT setup is completed.

Previous
Questionnaire
Next
GPT Integration
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/02_gpt_integration/gpt_project_setup/#delete-dataset
Skip to content
Gigalogy Tutorial
GPT Project setup
English
Japanese
Type to start searching
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
MyGPT
GPT Project setup
GPT Integration
GPT Feedback
API Reference
Release notes
Glossary
Table of contents
Documents
Datasets
Profiles
Project setup
Dataset
Upload Dataset
How to see uploaded datasets
Delete dataset
Update Dataset
Updating and deleting - Documents
Training
Profile
Setup profile
Default profile setup
GPT Project setup

Gigalogy,s GPT based solutions allows you to make your own GPT solutions, trained with your own data, customized according to your needs. Here are some basics to get you started. Find MyGPT related endpoints in our sandbox.

Documents

Documents are information that GPT will consider as a single piece of information, such as Address of Gigalogy, What is Gigalogy personalization, etc.

Datasets

A Dataset is a collection of documents in a single file. For instance, single dataset may contain documents with information such as Address of Gigalogy, What is Gigalogy personalization, What is Gigalogy's MyGPT.

Profiles

With each request sent to GPT endpoints POST /v1/gpt/ask and POST /v1/gpt/ask/vision, we include a parameter called gpt_profile_id. This parameter's value points to a GPT profile. GPT profiles hold information that tells the GPT how to process the information provided (query) and how to respond. To see more about what is inside a profile, check out the parameters and the example request body of the endpoint POST /v1/gpt/profiles.

There are two types of profiles. One is for the /gpt/ask endpoint, which is a general profile for any model except gpt-4-vision-preview. The other is for the /gpt/ask/vision endpoint, for which we currently support only gpt-4-vision-preview as the model.

Project setup

Project setup for MyGPT involves preparing, uploading and training your data. Additionally, set up the required setting the parameters to suit your requirement.

Dataset
Upload Dataset

Use the endpoint POST /v1/gpt/datasets to upload a dataset that will be used to train your customized GPT bot. Currently, we accept CSV and JSON format. You will find the required parameters and description in the sandbox in the link above.

How to see uploaded datasets

Once the dataset is uploaded, you can use /v1/gpt/datasets to see all your datasets of your project. The response will give you below details along with the datasets ids. This dataset_id will be required to edit, delete, train your data.

  {
    "dataset_id": "a8bf8ddd-b5cb-4bea-a82b-4ac148f01c0a",
    "created_at": "2023-12-24T20:23:34.992063+09:00",
    "name": "NAME OF THE DATASET",
    "description": DESCRIPTION OF THE DATASET,
    "idx_column_name": "idx",
    "image_url_column": "images"
  }

Delete dataset

Use the endpoint DELETE /v1/gpt/datasets/{dataset_id} to delete a dataset or particular documents from a dataset. You can find the expected request body, with required parameters and values in our sandbox here

Update Dataset

To be updated

Updating and deleting - Documents

To be updated

Training

Use endpoint POST /v1/gpt/dataset/train to train your uploaded dataset. This endpoint will take the dataset id and image type. It is good practice to train only what is necessary to optimize the usage of resources.

Profile
Setup profile

Use POST /v1/gpt/profiles to setup GPT profile. You can setup multiple profiles. However you will need to select one as the default profile in the next step.

Here are some detail about "intro", "System" and "Model" parameters.

Intro: This is detailed instruction for the bot on how to respond to a query. For example, if you are creating a customer support bot for an E-commerce site "AAA", this parameter could be: "Answer customer questions based on the catalog information and FAQ documents of our company. If a customer wants a product recommendation, ask up to three questions to understand their needs better, then make three recommendations and ask the customer if they like them or want different recommendations."

System: This tells the bot about the persona it is supposed to adopt. For example, if you are creating a customer support bot for an E-commerce site "AAA", selling cosmetics, this parameter could be: "You are customer support for AAA, an expert on skincare and cosmetic products who values customer needs and provides the right product recommendations."

Model: We support all GPT models of OpenAI, which you can select based on the needs and use cases. Please consider the purpose and the estimated token count when selecting the model, as this can significantly impact costs. You can learn more about OpenAI models from this page. This setting will impact the parameters search_max_token (tokens allocated for data sent to the model) and completion_token (tokens allocated for the reply). Note that intro, system, and query have token costs that are not included in the token size allocation. The selected model's CONTEXT WINDOW should cover the total token allocation. That is CONTEXT WINDOW ≥ search_max_token + completion_token + intro + system + query.

You can use the use the endpoints in our sandbox under "MyGPT Profiles" to Check the profiles and update or delete them.

Default profile setup

Once you have setup the profile(s), decide one of the profiles that should be default and use our endpoint POST /v1/gpt/settings to set your default profile.

with this, your GPT setup is completed.

Previous
Questionnaire
Next
GPT Integration
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/02_gpt_integration/gpt_project_setup/#update-dataset
Skip to content
Gigalogy Tutorial
GPT Project setup
English
Japanese
Type to start searching
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
MyGPT
GPT Project setup
GPT Integration
GPT Feedback
API Reference
Release notes
Glossary
Table of contents
Documents
Datasets
Profiles
Project setup
Dataset
Upload Dataset
How to see uploaded datasets
Delete dataset
Update Dataset
Updating and deleting - Documents
Training
Profile
Setup profile
Default profile setup
GPT Project setup

Gigalogy,s GPT based solutions allows you to make your own GPT solutions, trained with your own data, customized according to your needs. Here are some basics to get you started. Find MyGPT related endpoints in our sandbox.

Documents

Documents are information that GPT will consider as a single piece of information, such as Address of Gigalogy, What is Gigalogy personalization, etc.

Datasets

A Dataset is a collection of documents in a single file. For instance, single dataset may contain documents with information such as Address of Gigalogy, What is Gigalogy personalization, What is Gigalogy's MyGPT.

Profiles

With each request sent to GPT endpoints POST /v1/gpt/ask and POST /v1/gpt/ask/vision, we include a parameter called gpt_profile_id. This parameter's value points to a GPT profile. GPT profiles hold information that tells the GPT how to process the information provided (query) and how to respond. To see more about what is inside a profile, check out the parameters and the example request body of the endpoint POST /v1/gpt/profiles.

There are two types of profiles. One is for the /gpt/ask endpoint, which is a general profile for any model except gpt-4-vision-preview. The other is for the /gpt/ask/vision endpoint, for which we currently support only gpt-4-vision-preview as the model.

Project setup

Project setup for MyGPT involves preparing, uploading and training your data. Additionally, set up the required setting the parameters to suit your requirement.

Dataset
Upload Dataset

Use the endpoint POST /v1/gpt/datasets to upload a dataset that will be used to train your customized GPT bot. Currently, we accept CSV and JSON format. You will find the required parameters and description in the sandbox in the link above.

How to see uploaded datasets

Once the dataset is uploaded, you can use /v1/gpt/datasets to see all your datasets of your project. The response will give you below details along with the datasets ids. This dataset_id will be required to edit, delete, train your data.

  {
    "dataset_id": "a8bf8ddd-b5cb-4bea-a82b-4ac148f01c0a",
    "created_at": "2023-12-24T20:23:34.992063+09:00",
    "name": "NAME OF THE DATASET",
    "description": DESCRIPTION OF THE DATASET,
    "idx_column_name": "idx",
    "image_url_column": "images"
  }

Delete dataset

Use the endpoint DELETE /v1/gpt/datasets/{dataset_id} to delete a dataset or particular documents from a dataset. You can find the expected request body, with required parameters and values in our sandbox here

Update Dataset

To be updated

Updating and deleting - Documents

To be updated

Training

Use endpoint POST /v1/gpt/dataset/train to train your uploaded dataset. This endpoint will take the dataset id and image type. It is good practice to train only what is necessary to optimize the usage of resources.

Profile
Setup profile

Use POST /v1/gpt/profiles to setup GPT profile. You can setup multiple profiles. However you will need to select one as the default profile in the next step.

Here are some detail about "intro", "System" and "Model" parameters.

Intro: This is detailed instruction for the bot on how to respond to a query. For example, if you are creating a customer support bot for an E-commerce site "AAA", this parameter could be: "Answer customer questions based on the catalog information and FAQ documents of our company. If a customer wants a product recommendation, ask up to three questions to understand their needs better, then make three recommendations and ask the customer if they like them or want different recommendations."

System: This tells the bot about the persona it is supposed to adopt. For example, if you are creating a customer support bot for an E-commerce site "AAA", selling cosmetics, this parameter could be: "You are customer support for AAA, an expert on skincare and cosmetic products who values customer needs and provides the right product recommendations."

Model: We support all GPT models of OpenAI, which you can select based on the needs and use cases. Please consider the purpose and the estimated token count when selecting the model, as this can significantly impact costs. You can learn more about OpenAI models from this page. This setting will impact the parameters search_max_token (tokens allocated for data sent to the model) and completion_token (tokens allocated for the reply). Note that intro, system, and query have token costs that are not included in the token size allocation. The selected model's CONTEXT WINDOW should cover the total token allocation. That is CONTEXT WINDOW ≥ search_max_token + completion_token + intro + system + query.

You can use the use the endpoints in our sandbox under "MyGPT Profiles" to Check the profiles and update or delete them.

Default profile setup

Once you have setup the profile(s), decide one of the profiles that should be default and use our endpoint POST /v1/gpt/settings to set your default profile.

with this, your GPT setup is completed.

Previous
Questionnaire
Next
GPT Integration
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/02_gpt_integration/gpt_project_setup/#updating-and-deleting-documents
Skip to content
Gigalogy Tutorial
GPT Project setup
English
Japanese
Type to start searching
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
MyGPT
GPT Project setup
GPT Integration
GPT Feedback
API Reference
Release notes
Glossary
Table of contents
Documents
Datasets
Profiles
Project setup
Dataset
Upload Dataset
How to see uploaded datasets
Delete dataset
Update Dataset
Updating and deleting - Documents
Training
Profile
Setup profile
Default profile setup
GPT Project setup

Gigalogy,s GPT based solutions allows you to make your own GPT solutions, trained with your own data, customized according to your needs. Here are some basics to get you started. Find MyGPT related endpoints in our sandbox.

Documents

Documents are information that GPT will consider as a single piece of information, such as Address of Gigalogy, What is Gigalogy personalization, etc.

Datasets

A Dataset is a collection of documents in a single file. For instance, single dataset may contain documents with information such as Address of Gigalogy, What is Gigalogy personalization, What is Gigalogy's MyGPT.

Profiles

With each request sent to GPT endpoints POST /v1/gpt/ask and POST /v1/gpt/ask/vision, we include a parameter called gpt_profile_id. This parameter's value points to a GPT profile. GPT profiles hold information that tells the GPT how to process the information provided (query) and how to respond. To see more about what is inside a profile, check out the parameters and the example request body of the endpoint POST /v1/gpt/profiles.

There are two types of profiles. One is for the /gpt/ask endpoint, which is a general profile for any model except gpt-4-vision-preview. The other is for the /gpt/ask/vision endpoint, for which we currently support only gpt-4-vision-preview as the model.

Project setup

Project setup for MyGPT involves preparing, uploading and training your data. Additionally, set up the required setting the parameters to suit your requirement.

Dataset
Upload Dataset

Use the endpoint POST /v1/gpt/datasets to upload a dataset that will be used to train your customized GPT bot. Currently, we accept CSV and JSON format. You will find the required parameters and description in the sandbox in the link above.

How to see uploaded datasets

Once the dataset is uploaded, you can use /v1/gpt/datasets to see all your datasets of your project. The response will give you below details along with the datasets ids. This dataset_id will be required to edit, delete, train your data.

  {
    "dataset_id": "a8bf8ddd-b5cb-4bea-a82b-4ac148f01c0a",
    "created_at": "2023-12-24T20:23:34.992063+09:00",
    "name": "NAME OF THE DATASET",
    "description": DESCRIPTION OF THE DATASET,
    "idx_column_name": "idx",
    "image_url_column": "images"
  }

Delete dataset

Use the endpoint DELETE /v1/gpt/datasets/{dataset_id} to delete a dataset or particular documents from a dataset. You can find the expected request body, with required parameters and values in our sandbox here

Update Dataset

To be updated

Updating and deleting - Documents

To be updated

Training

Use endpoint POST /v1/gpt/dataset/train to train your uploaded dataset. This endpoint will take the dataset id and image type. It is good practice to train only what is necessary to optimize the usage of resources.

Profile
Setup profile

Use POST /v1/gpt/profiles to setup GPT profile. You can setup multiple profiles. However you will need to select one as the default profile in the next step.

Here are some detail about "intro", "System" and "Model" parameters.

Intro: This is detailed instruction for the bot on how to respond to a query. For example, if you are creating a customer support bot for an E-commerce site "AAA", this parameter could be: "Answer customer questions based on the catalog information and FAQ documents of our company. If a customer wants a product recommendation, ask up to three questions to understand their needs better, then make three recommendations and ask the customer if they like them or want different recommendations."

System: This tells the bot about the persona it is supposed to adopt. For example, if you are creating a customer support bot for an E-commerce site "AAA", selling cosmetics, this parameter could be: "You are customer support for AAA, an expert on skincare and cosmetic products who values customer needs and provides the right product recommendations."

Model: We support all GPT models of OpenAI, which you can select based on the needs and use cases. Please consider the purpose and the estimated token count when selecting the model, as this can significantly impact costs. You can learn more about OpenAI models from this page. This setting will impact the parameters search_max_token (tokens allocated for data sent to the model) and completion_token (tokens allocated for the reply). Note that intro, system, and query have token costs that are not included in the token size allocation. The selected model's CONTEXT WINDOW should cover the total token allocation. That is CONTEXT WINDOW ≥ search_max_token + completion_token + intro + system + query.

You can use the use the endpoints in our sandbox under "MyGPT Profiles" to Check the profiles and update or delete them.

Default profile setup

Once you have setup the profile(s), decide one of the profiles that should be default and use our endpoint POST /v1/gpt/settings to set your default profile.

with this, your GPT setup is completed.

Previous
Questionnaire
Next
GPT Integration
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/02_gpt_integration/gpt_project_setup/#training
Skip to content
Gigalogy Tutorial
GPT Project setup
English
Japanese
Type to start searching
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
MyGPT
GPT Project setup
GPT Integration
GPT Feedback
API Reference
Release notes
Glossary
Table of contents
Documents
Datasets
Profiles
Project setup
Dataset
Upload Dataset
How to see uploaded datasets
Delete dataset
Update Dataset
Updating and deleting - Documents
Training
Profile
Setup profile
Default profile setup
GPT Project setup

Gigalogy,s GPT based solutions allows you to make your own GPT solutions, trained with your own data, customized according to your needs. Here are some basics to get you started. Find MyGPT related endpoints in our sandbox.

Documents

Documents are information that GPT will consider as a single piece of information, such as Address of Gigalogy, What is Gigalogy personalization, etc.

Datasets

A Dataset is a collection of documents in a single file. For instance, single dataset may contain documents with information such as Address of Gigalogy, What is Gigalogy personalization, What is Gigalogy's MyGPT.

Profiles

With each request sent to GPT endpoints POST /v1/gpt/ask and POST /v1/gpt/ask/vision, we include a parameter called gpt_profile_id. This parameter's value points to a GPT profile. GPT profiles hold information that tells the GPT how to process the information provided (query) and how to respond. To see more about what is inside a profile, check out the parameters and the example request body of the endpoint POST /v1/gpt/profiles.

There are two types of profiles. One is for the /gpt/ask endpoint, which is a general profile for any model except gpt-4-vision-preview. The other is for the /gpt/ask/vision endpoint, for which we currently support only gpt-4-vision-preview as the model.

Project setup

Project setup for MyGPT involves preparing, uploading and training your data. Additionally, set up the required setting the parameters to suit your requirement.

Dataset
Upload Dataset

Use the endpoint POST /v1/gpt/datasets to upload a dataset that will be used to train your customized GPT bot. Currently, we accept CSV and JSON format. You will find the required parameters and description in the sandbox in the link above.

How to see uploaded datasets

Once the dataset is uploaded, you can use /v1/gpt/datasets to see all your datasets of your project. The response will give you below details along with the datasets ids. This dataset_id will be required to edit, delete, train your data.

  {
    "dataset_id": "a8bf8ddd-b5cb-4bea-a82b-4ac148f01c0a",
    "created_at": "2023-12-24T20:23:34.992063+09:00",
    "name": "NAME OF THE DATASET",
    "description": DESCRIPTION OF THE DATASET,
    "idx_column_name": "idx",
    "image_url_column": "images"
  }

Delete dataset

Use the endpoint DELETE /v1/gpt/datasets/{dataset_id} to delete a dataset or particular documents from a dataset. You can find the expected request body, with required parameters and values in our sandbox here

Update Dataset

To be updated

Updating and deleting - Documents

To be updated

Training

Use endpoint POST /v1/gpt/dataset/train to train your uploaded dataset. This endpoint will take the dataset id and image type. It is good practice to train only what is necessary to optimize the usage of resources.

Profile
Setup profile

Use POST /v1/gpt/profiles to setup GPT profile. You can setup multiple profiles. However you will need to select one as the default profile in the next step.

Here are some detail about "intro", "System" and "Model" parameters.

Intro: This is detailed instruction for the bot on how to respond to a query. For example, if you are creating a customer support bot for an E-commerce site "AAA", this parameter could be: "Answer customer questions based on the catalog information and FAQ documents of our company. If a customer wants a product recommendation, ask up to three questions to understand their needs better, then make three recommendations and ask the customer if they like them or want different recommendations."

System: This tells the bot about the persona it is supposed to adopt. For example, if you are creating a customer support bot for an E-commerce site "AAA", selling cosmetics, this parameter could be: "You are customer support for AAA, an expert on skincare and cosmetic products who values customer needs and provides the right product recommendations."

Model: We support all GPT models of OpenAI, which you can select based on the needs and use cases. Please consider the purpose and the estimated token count when selecting the model, as this can significantly impact costs. You can learn more about OpenAI models from this page. This setting will impact the parameters search_max_token (tokens allocated for data sent to the model) and completion_token (tokens allocated for the reply). Note that intro, system, and query have token costs that are not included in the token size allocation. The selected model's CONTEXT WINDOW should cover the total token allocation. That is CONTEXT WINDOW ≥ search_max_token + completion_token + intro + system + query.

You can use the use the endpoints in our sandbox under "MyGPT Profiles" to Check the profiles and update or delete them.

Default profile setup

Once you have setup the profile(s), decide one of the profiles that should be default and use our endpoint POST /v1/gpt/settings to set your default profile.

with this, your GPT setup is completed.

Previous
Questionnaire
Next
GPT Integration
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/02_gpt_integration/gpt_project_setup/#profile
Skip to content
Gigalogy Tutorial
GPT Project setup
English
Japanese
Type to start searching
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
MyGPT
GPT Project setup
GPT Integration
GPT Feedback
API Reference
Release notes
Glossary
Table of contents
Documents
Datasets
Profiles
Project setup
Dataset
Upload Dataset
How to see uploaded datasets
Delete dataset
Update Dataset
Updating and deleting - Documents
Training
Profile
Setup profile
Default profile setup
GPT Project setup

Gigalogy,s GPT based solutions allows you to make your own GPT solutions, trained with your own data, customized according to your needs. Here are some basics to get you started. Find MyGPT related endpoints in our sandbox.

Documents

Documents are information that GPT will consider as a single piece of information, such as Address of Gigalogy, What is Gigalogy personalization, etc.

Datasets

A Dataset is a collection of documents in a single file. For instance, single dataset may contain documents with information such as Address of Gigalogy, What is Gigalogy personalization, What is Gigalogy's MyGPT.

Profiles

With each request sent to GPT endpoints POST /v1/gpt/ask and POST /v1/gpt/ask/vision, we include a parameter called gpt_profile_id. This parameter's value points to a GPT profile. GPT profiles hold information that tells the GPT how to process the information provided (query) and how to respond. To see more about what is inside a profile, check out the parameters and the example request body of the endpoint POST /v1/gpt/profiles.

There are two types of profiles. One is for the /gpt/ask endpoint, which is a general profile for any model except gpt-4-vision-preview. The other is for the /gpt/ask/vision endpoint, for which we currently support only gpt-4-vision-preview as the model.

Project setup

Project setup for MyGPT involves preparing, uploading and training your data. Additionally, set up the required setting the parameters to suit your requirement.

Dataset
Upload Dataset

Use the endpoint POST /v1/gpt/datasets to upload a dataset that will be used to train your customized GPT bot. Currently, we accept CSV and JSON format. You will find the required parameters and description in the sandbox in the link above.

How to see uploaded datasets

Once the dataset is uploaded, you can use /v1/gpt/datasets to see all your datasets of your project. The response will give you below details along with the datasets ids. This dataset_id will be required to edit, delete, train your data.

  {
    "dataset_id": "a8bf8ddd-b5cb-4bea-a82b-4ac148f01c0a",
    "created_at": "2023-12-24T20:23:34.992063+09:00",
    "name": "NAME OF THE DATASET",
    "description": DESCRIPTION OF THE DATASET,
    "idx_column_name": "idx",
    "image_url_column": "images"
  }

Delete dataset

Use the endpoint DELETE /v1/gpt/datasets/{dataset_id} to delete a dataset or particular documents from a dataset. You can find the expected request body, with required parameters and values in our sandbox here

Update Dataset

To be updated

Updating and deleting - Documents

To be updated

Training

Use endpoint POST /v1/gpt/dataset/train to train your uploaded dataset. This endpoint will take the dataset id and image type. It is good practice to train only what is necessary to optimize the usage of resources.

Profile
Setup profile

Use POST /v1/gpt/profiles to setup GPT profile. You can setup multiple profiles. However you will need to select one as the default profile in the next step.

Here are some detail about "intro", "System" and "Model" parameters.

Intro: This is detailed instruction for the bot on how to respond to a query. For example, if you are creating a customer support bot for an E-commerce site "AAA", this parameter could be: "Answer customer questions based on the catalog information and FAQ documents of our company. If a customer wants a product recommendation, ask up to three questions to understand their needs better, then make three recommendations and ask the customer if they like them or want different recommendations."

System: This tells the bot about the persona it is supposed to adopt. For example, if you are creating a customer support bot for an E-commerce site "AAA", selling cosmetics, this parameter could be: "You are customer support for AAA, an expert on skincare and cosmetic products who values customer needs and provides the right product recommendations."

Model: We support all GPT models of OpenAI, which you can select based on the needs and use cases. Please consider the purpose and the estimated token count when selecting the model, as this can significantly impact costs. You can learn more about OpenAI models from this page. This setting will impact the parameters search_max_token (tokens allocated for data sent to the model) and completion_token (tokens allocated for the reply). Note that intro, system, and query have token costs that are not included in the token size allocation. The selected model's CONTEXT WINDOW should cover the total token allocation. That is CONTEXT WINDOW ≥ search_max_token + completion_token + intro + system + query.

You can use the use the endpoints in our sandbox under "MyGPT Profiles" to Check the profiles and update or delete them.

Default profile setup

Once you have setup the profile(s), decide one of the profiles that should be default and use our endpoint POST /v1/gpt/settings to set your default profile.

with this, your GPT setup is completed.

Previous
Questionnaire
Next
GPT Integration
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/02_gpt_integration/gpt_project_setup/#setup-profile
Skip to content
Gigalogy Tutorial
GPT Project setup
English
Japanese
Type to start searching
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
MyGPT
GPT Project setup
GPT Integration
GPT Feedback
API Reference
Release notes
Glossary
Table of contents
Documents
Datasets
Profiles
Project setup
Dataset
Upload Dataset
How to see uploaded datasets
Delete dataset
Update Dataset
Updating and deleting - Documents
Training
Profile
Setup profile
Default profile setup
GPT Project setup

Gigalogy,s GPT based solutions allows you to make your own GPT solutions, trained with your own data, customized according to your needs. Here are some basics to get you started. Find MyGPT related endpoints in our sandbox.

Documents

Documents are information that GPT will consider as a single piece of information, such as Address of Gigalogy, What is Gigalogy personalization, etc.

Datasets

A Dataset is a collection of documents in a single file. For instance, single dataset may contain documents with information such as Address of Gigalogy, What is Gigalogy personalization, What is Gigalogy's MyGPT.

Profiles

With each request sent to GPT endpoints POST /v1/gpt/ask and POST /v1/gpt/ask/vision, we include a parameter called gpt_profile_id. This parameter's value points to a GPT profile. GPT profiles hold information that tells the GPT how to process the information provided (query) and how to respond. To see more about what is inside a profile, check out the parameters and the example request body of the endpoint POST /v1/gpt/profiles.

There are two types of profiles. One is for the /gpt/ask endpoint, which is a general profile for any model except gpt-4-vision-preview. The other is for the /gpt/ask/vision endpoint, for which we currently support only gpt-4-vision-preview as the model.

Project setup

Project setup for MyGPT involves preparing, uploading and training your data. Additionally, set up the required setting the parameters to suit your requirement.

Dataset
Upload Dataset

Use the endpoint POST /v1/gpt/datasets to upload a dataset that will be used to train your customized GPT bot. Currently, we accept CSV and JSON format. You will find the required parameters and description in the sandbox in the link above.

How to see uploaded datasets

Once the dataset is uploaded, you can use /v1/gpt/datasets to see all your datasets of your project. The response will give you below details along with the datasets ids. This dataset_id will be required to edit, delete, train your data.

  {
    "dataset_id": "a8bf8ddd-b5cb-4bea-a82b-4ac148f01c0a",
    "created_at": "2023-12-24T20:23:34.992063+09:00",
    "name": "NAME OF THE DATASET",
    "description": DESCRIPTION OF THE DATASET,
    "idx_column_name": "idx",
    "image_url_column": "images"
  }

Delete dataset

Use the endpoint DELETE /v1/gpt/datasets/{dataset_id} to delete a dataset or particular documents from a dataset. You can find the expected request body, with required parameters and values in our sandbox here

Update Dataset

To be updated

Updating and deleting - Documents

To be updated

Training

Use endpoint POST /v1/gpt/dataset/train to train your uploaded dataset. This endpoint will take the dataset id and image type. It is good practice to train only what is necessary to optimize the usage of resources.

Profile
Setup profile

Use POST /v1/gpt/profiles to setup GPT profile. You can setup multiple profiles. However you will need to select one as the default profile in the next step.

Here are some detail about "intro", "System" and "Model" parameters.

Intro: This is detailed instruction for the bot on how to respond to a query. For example, if you are creating a customer support bot for an E-commerce site "AAA", this parameter could be: "Answer customer questions based on the catalog information and FAQ documents of our company. If a customer wants a product recommendation, ask up to three questions to understand their needs better, then make three recommendations and ask the customer if they like them or want different recommendations."

System: This tells the bot about the persona it is supposed to adopt. For example, if you are creating a customer support bot for an E-commerce site "AAA", selling cosmetics, this parameter could be: "You are customer support for AAA, an expert on skincare and cosmetic products who values customer needs and provides the right product recommendations."

Model: We support all GPT models of OpenAI, which you can select based on the needs and use cases. Please consider the purpose and the estimated token count when selecting the model, as this can significantly impact costs. You can learn more about OpenAI models from this page. This setting will impact the parameters search_max_token (tokens allocated for data sent to the model) and completion_token (tokens allocated for the reply). Note that intro, system, and query have token costs that are not included in the token size allocation. The selected model's CONTEXT WINDOW should cover the total token allocation. That is CONTEXT WINDOW ≥ search_max_token + completion_token + intro + system + query.

You can use the use the endpoints in our sandbox under "MyGPT Profiles" to Check the profiles and update or delete them.

Default profile setup

Once you have setup the profile(s), decide one of the profiles that should be default and use our endpoint POST /v1/gpt/settings to set your default profile.

with this, your GPT setup is completed.

Previous
Questionnaire
Next
GPT Integration
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/02_gpt_integration/gpt_project_setup/#default-profile-setup
Skip to content
Gigalogy Tutorial
GPT Project setup
English
Japanese
Type to start searching
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
MyGPT
GPT Project setup
GPT Integration
GPT Feedback
API Reference
Release notes
Glossary
Table of contents
Documents
Datasets
Profiles
Project setup
Dataset
Upload Dataset
How to see uploaded datasets
Delete dataset
Update Dataset
Updating and deleting - Documents
Training
Profile
Setup profile
Default profile setup
GPT Project setup

Gigalogy,s GPT based solutions allows you to make your own GPT solutions, trained with your own data, customized according to your needs. Here are some basics to get you started. Find MyGPT related endpoints in our sandbox.

Documents

Documents are information that GPT will consider as a single piece of information, such as Address of Gigalogy, What is Gigalogy personalization, etc.

Datasets

A Dataset is a collection of documents in a single file. For instance, single dataset may contain documents with information such as Address of Gigalogy, What is Gigalogy personalization, What is Gigalogy's MyGPT.

Profiles

With each request sent to GPT endpoints POST /v1/gpt/ask and POST /v1/gpt/ask/vision, we include a parameter called gpt_profile_id. This parameter's value points to a GPT profile. GPT profiles hold information that tells the GPT how to process the information provided (query) and how to respond. To see more about what is inside a profile, check out the parameters and the example request body of the endpoint POST /v1/gpt/profiles.

There are two types of profiles. One is for the /gpt/ask endpoint, which is a general profile for any model except gpt-4-vision-preview. The other is for the /gpt/ask/vision endpoint, for which we currently support only gpt-4-vision-preview as the model.

Project setup

Project setup for MyGPT involves preparing, uploading and training your data. Additionally, set up the required setting the parameters to suit your requirement.

Dataset
Upload Dataset

Use the endpoint POST /v1/gpt/datasets to upload a dataset that will be used to train your customized GPT bot. Currently, we accept CSV and JSON format. You will find the required parameters and description in the sandbox in the link above.

How to see uploaded datasets

Once the dataset is uploaded, you can use /v1/gpt/datasets to see all your datasets of your project. The response will give you below details along with the datasets ids. This dataset_id will be required to edit, delete, train your data.

  {
    "dataset_id": "a8bf8ddd-b5cb-4bea-a82b-4ac148f01c0a",
    "created_at": "2023-12-24T20:23:34.992063+09:00",
    "name": "NAME OF THE DATASET",
    "description": DESCRIPTION OF THE DATASET,
    "idx_column_name": "idx",
    "image_url_column": "images"
  }

Delete dataset

Use the endpoint DELETE /v1/gpt/datasets/{dataset_id} to delete a dataset or particular documents from a dataset. You can find the expected request body, with required parameters and values in our sandbox here

Update Dataset

To be updated

Updating and deleting - Documents

To be updated

Training

Use endpoint POST /v1/gpt/dataset/train to train your uploaded dataset. This endpoint will take the dataset id and image type. It is good practice to train only what is necessary to optimize the usage of resources.

Profile
Setup profile

Use POST /v1/gpt/profiles to setup GPT profile. You can setup multiple profiles. However you will need to select one as the default profile in the next step.

Here are some detail about "intro", "System" and "Model" parameters.

Intro: This is detailed instruction for the bot on how to respond to a query. For example, if you are creating a customer support bot for an E-commerce site "AAA", this parameter could be: "Answer customer questions based on the catalog information and FAQ documents of our company. If a customer wants a product recommendation, ask up to three questions to understand their needs better, then make three recommendations and ask the customer if they like them or want different recommendations."

System: This tells the bot about the persona it is supposed to adopt. For example, if you are creating a customer support bot for an E-commerce site "AAA", selling cosmetics, this parameter could be: "You are customer support for AAA, an expert on skincare and cosmetic products who values customer needs and provides the right product recommendations."

Model: We support all GPT models of OpenAI, which you can select based on the needs and use cases. Please consider the purpose and the estimated token count when selecting the model, as this can significantly impact costs. You can learn more about OpenAI models from this page. This setting will impact the parameters search_max_token (tokens allocated for data sent to the model) and completion_token (tokens allocated for the reply). Note that intro, system, and query have token costs that are not included in the token size allocation. The selected model's CONTEXT WINDOW should cover the total token allocation. That is CONTEXT WINDOW ≥ search_max_token + completion_token + intro + system + query.

You can use the use the endpoints in our sandbox under "MyGPT Profiles" to Check the profiles and update or delete them.

Default profile setup

Once you have setup the profile(s), decide one of the profiles that should be default and use our endpoint POST /v1/gpt/settings to set your default profile.

with this, your GPT setup is completed.

Previous
Questionnaire
Next
GPT Integration
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/02_gpt_integration/gpt_integration/
Skip to content
Gigalogy Tutorial
GPT Integration
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
MyGPT
GPT Project setup
GPT Integration
GPT Feedback
API Reference
Release notes
Glossary
Table of contents
Asking question to the bot
Checking conversation history
Using endpoint
From the GAIP UI
GPT Integration

After preparing, uploading and training your data, now you are ready to interact with your bot, by asking it question with texts and images via our endpoints.

Asking question to the bot

To send a text only question/query to GPT, use the endpoint POST /v1/gpt/ask. Find details of the required parameters with explanation and an example request body in our sandbox under "MyGPT"

In the response, you will get the response to the query, along with some other information related, such as the conversation_id, tokens, etc.

For query with image, use the endpoint POST /v1/gpt/ask/vision. There is one additional parameter here, to add the image file. This endpoint will take both the image and the query and respond based on both input. Here you can only use gpt-4-vision-preview model.

Note that if you do not pass any gpt_profile_id, it will use the default profile that was set during the setup.

Checking conversation history

There are two ways to check conversation history 1. Using API endpoint 2. From the GAIP UI.

Using endpoint

Using our endpoint GET /v1/gpt/conversations, you can check conversation history of your project, for a specific date range. By default, (if no time period is specified), this endpoint will give the conversation history for last 7 days. If you want to see the response detail of any particular conversation, you can use your endpoint GET /v1/gpt/conversations/{conversation_id}. This endpoint will take the conversation ID and will give the detail of that particular conversation.

From the GAIP UI

In our platform, navigate to your project's insight page. Here you will find "GPT-Flow History" table. This will show all the conversation during the time range selected above. You can filter this table with user id, query, feedback. You can also see the details of each conversation by clicking on the details icon at the right. To download the history table, use the download button at the top right of the table. This will download the table as CSV. Note that the downloaded file will only contain the information as it is on the table, with the date and other filters applied.

Previous
GPT Project setup
Next
GPT Feedback
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/02_gpt_integration/gpt_integration/#asking-question-to-the-bot
Skip to content
Gigalogy Tutorial
GPT Integration
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
MyGPT
GPT Project setup
GPT Integration
GPT Feedback
API Reference
Release notes
Glossary
Table of contents
Asking question to the bot
Checking conversation history
Using endpoint
From the GAIP UI
GPT Integration

After preparing, uploading and training your data, now you are ready to interact with your bot, by asking it question with texts and images via our endpoints.

Asking question to the bot

To send a text only question/query to GPT, use the endpoint POST /v1/gpt/ask. Find details of the required parameters with explanation and an example request body in our sandbox under "MyGPT"

In the response, you will get the response to the query, along with some other information related, such as the conversation_id, tokens, etc.

For query with image, use the endpoint POST /v1/gpt/ask/vision. There is one additional parameter here, to add the image file. This endpoint will take both the image and the query and respond based on both input. Here you can only use gpt-4-vision-preview model.

Note that if you do not pass any gpt_profile_id, it will use the default profile that was set during the setup.

Checking conversation history

There are two ways to check conversation history 1. Using API endpoint 2. From the GAIP UI.

Using endpoint

Using our endpoint GET /v1/gpt/conversations, you can check conversation history of your project, for a specific date range. By default, (if no time period is specified), this endpoint will give the conversation history for last 7 days. If you want to see the response detail of any particular conversation, you can use your endpoint GET /v1/gpt/conversations/{conversation_id}. This endpoint will take the conversation ID and will give the detail of that particular conversation.

From the GAIP UI

In our platform, navigate to your project's insight page. Here you will find "GPT-Flow History" table. This will show all the conversation during the time range selected above. You can filter this table with user id, query, feedback. You can also see the details of each conversation by clicking on the details icon at the right. To download the history table, use the download button at the top right of the table. This will download the table as CSV. Note that the downloaded file will only contain the information as it is on the table, with the date and other filters applied.

Previous
GPT Project setup
Next
GPT Feedback
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/02_gpt_integration/gpt_integration/#checking-conversation-history
Skip to content
Gigalogy Tutorial
GPT Integration
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
MyGPT
GPT Project setup
GPT Integration
GPT Feedback
API Reference
Release notes
Glossary
Table of contents
Asking question to the bot
Checking conversation history
Using endpoint
From the GAIP UI
GPT Integration

After preparing, uploading and training your data, now you are ready to interact with your bot, by asking it question with texts and images via our endpoints.

Asking question to the bot

To send a text only question/query to GPT, use the endpoint POST /v1/gpt/ask. Find details of the required parameters with explanation and an example request body in our sandbox under "MyGPT"

In the response, you will get the response to the query, along with some other information related, such as the conversation_id, tokens, etc.

For query with image, use the endpoint POST /v1/gpt/ask/vision. There is one additional parameter here, to add the image file. This endpoint will take both the image and the query and respond based on both input. Here you can only use gpt-4-vision-preview model.

Note that if you do not pass any gpt_profile_id, it will use the default profile that was set during the setup.

Checking conversation history

There are two ways to check conversation history 1. Using API endpoint 2. From the GAIP UI.

Using endpoint

Using our endpoint GET /v1/gpt/conversations, you can check conversation history of your project, for a specific date range. By default, (if no time period is specified), this endpoint will give the conversation history for last 7 days. If you want to see the response detail of any particular conversation, you can use your endpoint GET /v1/gpt/conversations/{conversation_id}. This endpoint will take the conversation ID and will give the detail of that particular conversation.

From the GAIP UI

In our platform, navigate to your project's insight page. Here you will find "GPT-Flow History" table. This will show all the conversation during the time range selected above. You can filter this table with user id, query, feedback. You can also see the details of each conversation by clicking on the details icon at the right. To download the history table, use the download button at the top right of the table. This will download the table as CSV. Note that the downloaded file will only contain the information as it is on the table, with the date and other filters applied.

Previous
GPT Project setup
Next
GPT Feedback
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/02_gpt_integration/gpt_integration/#using-endpoint
Skip to content
Gigalogy Tutorial
GPT Integration
English
Japanese
Type to start searching
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
MyGPT
GPT Project setup
GPT Integration
GPT Feedback
API Reference
Release notes
Glossary
Table of contents
Asking question to the bot
Checking conversation history
Using endpoint
From the GAIP UI
GPT Integration

After preparing, uploading and training your data, now you are ready to interact with your bot, by asking it question with texts and images via our endpoints.

Asking question to the bot

To send a text only question/query to GPT, use the endpoint POST /v1/gpt/ask. Find details of the required parameters with explanation and an example request body in our sandbox under "MyGPT"

In the response, you will get the response to the query, along with some other information related, such as the conversation_id, tokens, etc.

For query with image, use the endpoint POST /v1/gpt/ask/vision. There is one additional parameter here, to add the image file. This endpoint will take both the image and the query and respond based on both input. Here you can only use gpt-4-vision-preview model.

Note that if you do not pass any gpt_profile_id, it will use the default profile that was set during the setup.

Checking conversation history

There are two ways to check conversation history 1. Using API endpoint 2. From the GAIP UI.

Using endpoint

Using our endpoint GET /v1/gpt/conversations, you can check conversation history of your project, for a specific date range. By default, (if no time period is specified), this endpoint will give the conversation history for last 7 days. If you want to see the response detail of any particular conversation, you can use your endpoint GET /v1/gpt/conversations/{conversation_id}. This endpoint will take the conversation ID and will give the detail of that particular conversation.

From the GAIP UI

In our platform, navigate to your project's insight page. Here you will find "GPT-Flow History" table. This will show all the conversation during the time range selected above. You can filter this table with user id, query, feedback. You can also see the details of each conversation by clicking on the details icon at the right. To download the history table, use the download button at the top right of the table. This will download the table as CSV. Note that the downloaded file will only contain the information as it is on the table, with the date and other filters applied.

Previous
GPT Project setup
Next
GPT Feedback
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/02_gpt_integration/gpt_integration/#from-the-gaip-ui
Skip to content
Gigalogy Tutorial
GPT Integration
English
Japanese
Type to start searching
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
MyGPT
GPT Project setup
GPT Integration
GPT Feedback
API Reference
Release notes
Glossary
Table of contents
Asking question to the bot
Checking conversation history
Using endpoint
From the GAIP UI
GPT Integration

After preparing, uploading and training your data, now you are ready to interact with your bot, by asking it question with texts and images via our endpoints.

Asking question to the bot

To send a text only question/query to GPT, use the endpoint POST /v1/gpt/ask. Find details of the required parameters with explanation and an example request body in our sandbox under "MyGPT"

In the response, you will get the response to the query, along with some other information related, such as the conversation_id, tokens, etc.

For query with image, use the endpoint POST /v1/gpt/ask/vision. There is one additional parameter here, to add the image file. This endpoint will take both the image and the query and respond based on both input. Here you can only use gpt-4-vision-preview model.

Note that if you do not pass any gpt_profile_id, it will use the default profile that was set during the setup.

Checking conversation history

There are two ways to check conversation history 1. Using API endpoint 2. From the GAIP UI.

Using endpoint

Using our endpoint GET /v1/gpt/conversations, you can check conversation history of your project, for a specific date range. By default, (if no time period is specified), this endpoint will give the conversation history for last 7 days. If you want to see the response detail of any particular conversation, you can use your endpoint GET /v1/gpt/conversations/{conversation_id}. This endpoint will take the conversation ID and will give the detail of that particular conversation.

From the GAIP UI

In our platform, navigate to your project's insight page. Here you will find "GPT-Flow History" table. This will show all the conversation during the time range selected above. You can filter this table with user id, query, feedback. You can also see the details of each conversation by clicking on the details icon at the right. To download the history table, use the download button at the top right of the table. This will download the table as CSV. Note that the downloaded file will only contain the information as it is on the table, with the date and other filters applied.

Previous
GPT Project setup
Next
GPT Feedback
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/02_gpt_integration/gpt_feedbacks/
Skip to content
Gigalogy Tutorial
GPT Feedback
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
MyGPT
GPT Project setup
GPT Integration
GPT Feedback
API Reference
Release notes
Glossary
Table of contents
Providing Feedback via API
Sharing Feedback via the User Interface
GPT Feedback

After establishing your GPT project and engaging with your bot, you may want to provide response on the dialogue quality.

Providing Feedback via API

To facilitate this, the endpoint PUT /v1/gpt/conversations would be of use. This endpoint allows you to designate specific conversations through their IDs, assign either positive or negative feedback, and optionally include a message conveying your review details. Such feedback is instrumental for refining the model's training and future results optimization.

Sharing Feedback via the User Interface

Under your GPT project's insight tab, you can see the history of your conversations in the the "GPT-Flow History" table. From the "Training data" column, you can edit the query, response and provide feedback. You can also select here which data should be added for future training and under which dataset.

Previous
GPT Integration
Next
API Reference
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/02_gpt_integration/gpt_feedbacks/#providing-feedback-via-api
Skip to content
Gigalogy Tutorial
GPT Feedback
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
MyGPT
GPT Project setup
GPT Integration
GPT Feedback
API Reference
Release notes
Glossary
Table of contents
Providing Feedback via API
Sharing Feedback via the User Interface
GPT Feedback

After establishing your GPT project and engaging with your bot, you may want to provide response on the dialogue quality.

Providing Feedback via API

To facilitate this, the endpoint PUT /v1/gpt/conversations would be of use. This endpoint allows you to designate specific conversations through their IDs, assign either positive or negative feedback, and optionally include a message conveying your review details. Such feedback is instrumental for refining the model's training and future results optimization.

Sharing Feedback via the User Interface

Under your GPT project's insight tab, you can see the history of your conversations in the the "GPT-Flow History" table. From the "Training data" column, you can edit the query, response and provide feedback. You can also select here which data should be added for future training and under which dataset.

Previous
GPT Integration
Next
API Reference
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/02_gpt_integration/gpt_feedbacks/#sharing-feedback-via-the-user-interface
Skip to content
Gigalogy Tutorial
GPT Feedback
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
MyGPT
GPT Project setup
GPT Integration
GPT Feedback
API Reference
Release notes
Glossary
Table of contents
Providing Feedback via API
Sharing Feedback via the User Interface
GPT Feedback

After establishing your GPT project and engaging with your bot, you may want to provide response on the dialogue quality.

Providing Feedback via API

To facilitate this, the endpoint PUT /v1/gpt/conversations would be of use. This endpoint allows you to designate specific conversations through their IDs, assign either positive or negative feedback, and optionally include a message conveying your review details. Such feedback is instrumental for refining the model's training and future results optimization.

Sharing Feedback via the User Interface

Under your GPT project's insight tab, you can see the history of your conversations in the the "GPT-Flow History" table. From the "Training data" column, you can edit the query, response and provide feedback. You can also select here which data should be added for future training and under which dataset.

Previous
GPT Integration
Next
API Reference
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/api_reference/
Gigalogy Tutorial
API Reference
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
MyGPT
API Reference
Release notes
Glossary
API Reference

API Documentation URL

Sandbox URL

Previous
GPT Feedback
Next
Release notes
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/release_notes/
Skip to content
Gigalogy Tutorial
Release notes
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
MyGPT
API Reference
Release notes
Glossary
Table of contents
Apr 5, 2024
Mar 27, 2024
Mar 27, 2024
Mar 26, 2024
Mar 20, 2024
Mar 16, 2024
Mar 3, 2024
Jan 25, 2024
GAIP Release notes
Apr 5, 2024
New feature
questionnaire mapper now supports result format. User can setup how they want to see the questionnaire result. User can setup required categories and optional categories. Recommended items from POST /v1/questionnaire/recommend will be categorized based on that. Optional categories come with their inclusion condition as well.
Mar 27, 2024
New feature
From the GPT-Flow History table, you can now select which data (Query, response, feedback) you want to include in the training for future conversations and in which dataset.
Mar 27, 2024
New feature
Now POST /v1/gpt/ask API have multiple options to generate answer. This can be set as the value of the key conversation_type, question type does not consider any previous conversation history. chat type considers n previous conversation history while generating an answer. The length of the converstaion is defined by the parameter chat_history_length of GPT settings.
Mar 26, 2024
New features
In the same project, /gpt/ask API can now answer from both personalizer catalog and MyGPT datasets. Previously it could handle only one of the data sources.
Introducing "Profiles" for our GPT solutions! You can now create and save multiple profiles, each with its own settings . Users no longer have to manually adjust the GPT settings every time they switch between different tasks or needs.
Mar 20, 2024
New features
keyword extractor changed for japanese language. This is done to improve the quality of japanese language search capabilities. top_k can control how wide or controlled search a customer wants to do in terms of keywords.
questionnaire/recommend end point now has a new optional parameter called recommend_count. If it is set, the value of this parameter takes priority over recommend_count variable in questionnaire mapper.
Mar 16, 2024
New feature
gpt/ask and questionnaire/recommend endpoints, when providing response with product IDs, now can include any key that was set in the mapper.
Now it is easier to set how many product questionnaire/recommend will give, with the new key "recommend_count" in the mapper.
introducing top_k to items/search, gpt/ask, giving ability to controls the number of keywords to consider for document searching.
Bug Fix
questionnaire/recommend endpoint can now take Null values.
Mar 3, 2024
New feature
UI-Based Project Setup: Now set up Personalization Projects directly via the UI, including file uploads, data mapping, and model training.
Training History: View detailed training history in Project Settings for improved tracking and insights.
Manual Training: Initiate model training manually from the UI for greater control over your personalization strategies.
Jan 25, 2024
New features
Add an export button at the bottom of the GPT flow history table. Exports the Table as a CSV file for the specified time range
GAIP sidebar improved: Solutions are accessible directly now.
Big fix
Bug at trial project status and upgrade flow
Previous
API Reference
Next
Glossary
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/release_notes/#gaip-release-notes
Skip to content
Gigalogy Tutorial
Release notes
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
MyGPT
API Reference
Release notes
Glossary
Table of contents
Apr 5, 2024
Mar 27, 2024
Mar 27, 2024
Mar 26, 2024
Mar 20, 2024
Mar 16, 2024
Mar 3, 2024
Jan 25, 2024
GAIP Release notes
Apr 5, 2024
New feature
questionnaire mapper now supports result format. User can setup how they want to see the questionnaire result. User can setup required categories and optional categories. Recommended items from POST /v1/questionnaire/recommend will be categorized based on that. Optional categories come with their inclusion condition as well.
Mar 27, 2024
New feature
From the GPT-Flow History table, you can now select which data (Query, response, feedback) you want to include in the training for future conversations and in which dataset.
Mar 27, 2024
New feature
Now POST /v1/gpt/ask API have multiple options to generate answer. This can be set as the value of the key conversation_type, question type does not consider any previous conversation history. chat type considers n previous conversation history while generating an answer. The length of the converstaion is defined by the parameter chat_history_length of GPT settings.
Mar 26, 2024
New features
In the same project, /gpt/ask API can now answer from both personalizer catalog and MyGPT datasets. Previously it could handle only one of the data sources.
Introducing "Profiles" for our GPT solutions! You can now create and save multiple profiles, each with its own settings . Users no longer have to manually adjust the GPT settings every time they switch between different tasks or needs.
Mar 20, 2024
New features
keyword extractor changed for japanese language. This is done to improve the quality of japanese language search capabilities. top_k can control how wide or controlled search a customer wants to do in terms of keywords.
questionnaire/recommend end point now has a new optional parameter called recommend_count. If it is set, the value of this parameter takes priority over recommend_count variable in questionnaire mapper.
Mar 16, 2024
New feature
gpt/ask and questionnaire/recommend endpoints, when providing response with product IDs, now can include any key that was set in the mapper.
Now it is easier to set how many product questionnaire/recommend will give, with the new key "recommend_count" in the mapper.
introducing top_k to items/search, gpt/ask, giving ability to controls the number of keywords to consider for document searching.
Bug Fix
questionnaire/recommend endpoint can now take Null values.
Mar 3, 2024
New feature
UI-Based Project Setup: Now set up Personalization Projects directly via the UI, including file uploads, data mapping, and model training.
Training History: View detailed training history in Project Settings for improved tracking and insights.
Manual Training: Initiate model training manually from the UI for greater control over your personalization strategies.
Jan 25, 2024
New features
Add an export button at the bottom of the GPT flow history table. Exports the Table as a CSV file for the specified time range
GAIP sidebar improved: Solutions are accessible directly now.
Big fix
Bug at trial project status and upgrade flow
Previous
API Reference
Next
Glossary
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/release_notes/#apr-5-2024
Skip to content
Gigalogy Tutorial
Release notes
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
MyGPT
API Reference
Release notes
Glossary
Table of contents
Apr 5, 2024
Mar 27, 2024
Mar 27, 2024
Mar 26, 2024
Mar 20, 2024
Mar 16, 2024
Mar 3, 2024
Jan 25, 2024
GAIP Release notes
Apr 5, 2024
New feature
questionnaire mapper now supports result format. User can setup how they want to see the questionnaire result. User can setup required categories and optional categories. Recommended items from POST /v1/questionnaire/recommend will be categorized based on that. Optional categories come with their inclusion condition as well.
Mar 27, 2024
New feature
From the GPT-Flow History table, you can now select which data (Query, response, feedback) you want to include in the training for future conversations and in which dataset.
Mar 27, 2024
New feature
Now POST /v1/gpt/ask API have multiple options to generate answer. This can be set as the value of the key conversation_type, question type does not consider any previous conversation history. chat type considers n previous conversation history while generating an answer. The length of the converstaion is defined by the parameter chat_history_length of GPT settings.
Mar 26, 2024
New features
In the same project, /gpt/ask API can now answer from both personalizer catalog and MyGPT datasets. Previously it could handle only one of the data sources.
Introducing "Profiles" for our GPT solutions! You can now create and save multiple profiles, each with its own settings . Users no longer have to manually adjust the GPT settings every time they switch between different tasks or needs.
Mar 20, 2024
New features
keyword extractor changed for japanese language. This is done to improve the quality of japanese language search capabilities. top_k can control how wide or controlled search a customer wants to do in terms of keywords.
questionnaire/recommend end point now has a new optional parameter called recommend_count. If it is set, the value of this parameter takes priority over recommend_count variable in questionnaire mapper.
Mar 16, 2024
New feature
gpt/ask and questionnaire/recommend endpoints, when providing response with product IDs, now can include any key that was set in the mapper.
Now it is easier to set how many product questionnaire/recommend will give, with the new key "recommend_count" in the mapper.
introducing top_k to items/search, gpt/ask, giving ability to controls the number of keywords to consider for document searching.
Bug Fix
questionnaire/recommend endpoint can now take Null values.
Mar 3, 2024
New feature
UI-Based Project Setup: Now set up Personalization Projects directly via the UI, including file uploads, data mapping, and model training.
Training History: View detailed training history in Project Settings for improved tracking and insights.
Manual Training: Initiate model training manually from the UI for greater control over your personalization strategies.
Jan 25, 2024
New features
Add an export button at the bottom of the GPT flow history table. Exports the Table as a CSV file for the specified time range
GAIP sidebar improved: Solutions are accessible directly now.
Big fix
Bug at trial project status and upgrade flow
Previous
API Reference
Next
Glossary
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/release_notes/#mar-27-2024
Skip to content
Gigalogy Tutorial
Release notes
English
Japanese
Type to start searching
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
MyGPT
API Reference
Release notes
Glossary
Table of contents
Apr 5, 2024
Mar 27, 2024
Mar 27, 2024
Mar 26, 2024
Mar 20, 2024
Mar 16, 2024
Mar 3, 2024
Jan 25, 2024
GAIP Release notes
Apr 5, 2024
New feature
questionnaire mapper now supports result format. User can setup how they want to see the questionnaire result. User can setup required categories and optional categories. Recommended items from POST /v1/questionnaire/recommend will be categorized based on that. Optional categories come with their inclusion condition as well.
Mar 27, 2024
New feature
From the GPT-Flow History table, you can now select which data (Query, response, feedback) you want to include in the training for future conversations and in which dataset.
Mar 27, 2024
New feature
Now POST /v1/gpt/ask API have multiple options to generate answer. This can be set as the value of the key conversation_type, question type does not consider any previous conversation history. chat type considers n previous conversation history while generating an answer. The length of the converstaion is defined by the parameter chat_history_length of GPT settings.
Mar 26, 2024
New features
In the same project, /gpt/ask API can now answer from both personalizer catalog and MyGPT datasets. Previously it could handle only one of the data sources.
Introducing "Profiles" for our GPT solutions! You can now create and save multiple profiles, each with its own settings . Users no longer have to manually adjust the GPT settings every time they switch between different tasks or needs.
Mar 20, 2024
New features
keyword extractor changed for japanese language. This is done to improve the quality of japanese language search capabilities. top_k can control how wide or controlled search a customer wants to do in terms of keywords.
questionnaire/recommend end point now has a new optional parameter called recommend_count. If it is set, the value of this parameter takes priority over recommend_count variable in questionnaire mapper.
Mar 16, 2024
New feature
gpt/ask and questionnaire/recommend endpoints, when providing response with product IDs, now can include any key that was set in the mapper.
Now it is easier to set how many product questionnaire/recommend will give, with the new key "recommend_count" in the mapper.
introducing top_k to items/search, gpt/ask, giving ability to controls the number of keywords to consider for document searching.
Bug Fix
questionnaire/recommend endpoint can now take Null values.
Mar 3, 2024
New feature
UI-Based Project Setup: Now set up Personalization Projects directly via the UI, including file uploads, data mapping, and model training.
Training History: View detailed training history in Project Settings for improved tracking and insights.
Manual Training: Initiate model training manually from the UI for greater control over your personalization strategies.
Jan 25, 2024
New features
Add an export button at the bottom of the GPT flow history table. Exports the Table as a CSV file for the specified time range
GAIP sidebar improved: Solutions are accessible directly now.
Big fix
Bug at trial project status and upgrade flow
Previous
API Reference
Next
Glossary
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/release_notes/#mar-27-2024_1
Skip to content
Gigalogy Tutorial
Release notes
English
Japanese
Type to start searching
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
MyGPT
API Reference
Release notes
Glossary
Table of contents
Apr 5, 2024
Mar 27, 2024
Mar 27, 2024
Mar 26, 2024
Mar 20, 2024
Mar 16, 2024
Mar 3, 2024
Jan 25, 2024
GAIP Release notes
Apr 5, 2024
New feature
questionnaire mapper now supports result format. User can setup how they want to see the questionnaire result. User can setup required categories and optional categories. Recommended items from POST /v1/questionnaire/recommend will be categorized based on that. Optional categories come with their inclusion condition as well.
Mar 27, 2024
New feature
From the GPT-Flow History table, you can now select which data (Query, response, feedback) you want to include in the training for future conversations and in which dataset.
Mar 27, 2024
New feature
Now POST /v1/gpt/ask API have multiple options to generate answer. This can be set as the value of the key conversation_type, question type does not consider any previous conversation history. chat type considers n previous conversation history while generating an answer. The length of the converstaion is defined by the parameter chat_history_length of GPT settings.
Mar 26, 2024
New features
In the same project, /gpt/ask API can now answer from both personalizer catalog and MyGPT datasets. Previously it could handle only one of the data sources.
Introducing "Profiles" for our GPT solutions! You can now create and save multiple profiles, each with its own settings . Users no longer have to manually adjust the GPT settings every time they switch between different tasks or needs.
Mar 20, 2024
New features
keyword extractor changed for japanese language. This is done to improve the quality of japanese language search capabilities. top_k can control how wide or controlled search a customer wants to do in terms of keywords.
questionnaire/recommend end point now has a new optional parameter called recommend_count. If it is set, the value of this parameter takes priority over recommend_count variable in questionnaire mapper.
Mar 16, 2024
New feature
gpt/ask and questionnaire/recommend endpoints, when providing response with product IDs, now can include any key that was set in the mapper.
Now it is easier to set how many product questionnaire/recommend will give, with the new key "recommend_count" in the mapper.
introducing top_k to items/search, gpt/ask, giving ability to controls the number of keywords to consider for document searching.
Bug Fix
questionnaire/recommend endpoint can now take Null values.
Mar 3, 2024
New feature
UI-Based Project Setup: Now set up Personalization Projects directly via the UI, including file uploads, data mapping, and model training.
Training History: View detailed training history in Project Settings for improved tracking and insights.
Manual Training: Initiate model training manually from the UI for greater control over your personalization strategies.
Jan 25, 2024
New features
Add an export button at the bottom of the GPT flow history table. Exports the Table as a CSV file for the specified time range
GAIP sidebar improved: Solutions are accessible directly now.
Big fix
Bug at trial project status and upgrade flow
Previous
API Reference
Next
Glossary
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/release_notes/#mar-26-2024
Skip to content
Gigalogy Tutorial
Release notes
English
Japanese
Type to start searching
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
MyGPT
API Reference
Release notes
Glossary
Table of contents
Apr 5, 2024
Mar 27, 2024
Mar 27, 2024
Mar 26, 2024
Mar 20, 2024
Mar 16, 2024
Mar 3, 2024
Jan 25, 2024
GAIP Release notes
Apr 5, 2024
New feature
questionnaire mapper now supports result format. User can setup how they want to see the questionnaire result. User can setup required categories and optional categories. Recommended items from POST /v1/questionnaire/recommend will be categorized based on that. Optional categories come with their inclusion condition as well.
Mar 27, 2024
New feature
From the GPT-Flow History table, you can now select which data (Query, response, feedback) you want to include in the training for future conversations and in which dataset.
Mar 27, 2024
New feature
Now POST /v1/gpt/ask API have multiple options to generate answer. This can be set as the value of the key conversation_type, question type does not consider any previous conversation history. chat type considers n previous conversation history while generating an answer. The length of the converstaion is defined by the parameter chat_history_length of GPT settings.
Mar 26, 2024
New features
In the same project, /gpt/ask API can now answer from both personalizer catalog and MyGPT datasets. Previously it could handle only one of the data sources.
Introducing "Profiles" for our GPT solutions! You can now create and save multiple profiles, each with its own settings . Users no longer have to manually adjust the GPT settings every time they switch between different tasks or needs.
Mar 20, 2024
New features
keyword extractor changed for japanese language. This is done to improve the quality of japanese language search capabilities. top_k can control how wide or controlled search a customer wants to do in terms of keywords.
questionnaire/recommend end point now has a new optional parameter called recommend_count. If it is set, the value of this parameter takes priority over recommend_count variable in questionnaire mapper.
Mar 16, 2024
New feature
gpt/ask and questionnaire/recommend endpoints, when providing response with product IDs, now can include any key that was set in the mapper.
Now it is easier to set how many product questionnaire/recommend will give, with the new key "recommend_count" in the mapper.
introducing top_k to items/search, gpt/ask, giving ability to controls the number of keywords to consider for document searching.
Bug Fix
questionnaire/recommend endpoint can now take Null values.
Mar 3, 2024
New feature
UI-Based Project Setup: Now set up Personalization Projects directly via the UI, including file uploads, data mapping, and model training.
Training History: View detailed training history in Project Settings for improved tracking and insights.
Manual Training: Initiate model training manually from the UI for greater control over your personalization strategies.
Jan 25, 2024
New features
Add an export button at the bottom of the GPT flow history table. Exports the Table as a CSV file for the specified time range
GAIP sidebar improved: Solutions are accessible directly now.
Big fix
Bug at trial project status and upgrade flow
Previous
API Reference
Next
Glossary
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/release_notes/#mar-20-2024
Skip to content
Gigalogy Tutorial
Release notes
English
Japanese
Type to start searching
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
MyGPT
API Reference
Release notes
Glossary
Table of contents
Apr 5, 2024
Mar 27, 2024
Mar 27, 2024
Mar 26, 2024
Mar 20, 2024
Mar 16, 2024
Mar 3, 2024
Jan 25, 2024
GAIP Release notes
Apr 5, 2024
New feature
questionnaire mapper now supports result format. User can setup how they want to see the questionnaire result. User can setup required categories and optional categories. Recommended items from POST /v1/questionnaire/recommend will be categorized based on that. Optional categories come with their inclusion condition as well.
Mar 27, 2024
New feature
From the GPT-Flow History table, you can now select which data (Query, response, feedback) you want to include in the training for future conversations and in which dataset.
Mar 27, 2024
New feature
Now POST /v1/gpt/ask API have multiple options to generate answer. This can be set as the value of the key conversation_type, question type does not consider any previous conversation history. chat type considers n previous conversation history while generating an answer. The length of the converstaion is defined by the parameter chat_history_length of GPT settings.
Mar 26, 2024
New features
In the same project, /gpt/ask API can now answer from both personalizer catalog and MyGPT datasets. Previously it could handle only one of the data sources.
Introducing "Profiles" for our GPT solutions! You can now create and save multiple profiles, each with its own settings . Users no longer have to manually adjust the GPT settings every time they switch between different tasks or needs.
Mar 20, 2024
New features
keyword extractor changed for japanese language. This is done to improve the quality of japanese language search capabilities. top_k can control how wide or controlled search a customer wants to do in terms of keywords.
questionnaire/recommend end point now has a new optional parameter called recommend_count. If it is set, the value of this parameter takes priority over recommend_count variable in questionnaire mapper.
Mar 16, 2024
New feature
gpt/ask and questionnaire/recommend endpoints, when providing response with product IDs, now can include any key that was set in the mapper.
Now it is easier to set how many product questionnaire/recommend will give, with the new key "recommend_count" in the mapper.
introducing top_k to items/search, gpt/ask, giving ability to controls the number of keywords to consider for document searching.
Bug Fix
questionnaire/recommend endpoint can now take Null values.
Mar 3, 2024
New feature
UI-Based Project Setup: Now set up Personalization Projects directly via the UI, including file uploads, data mapping, and model training.
Training History: View detailed training history in Project Settings for improved tracking and insights.
Manual Training: Initiate model training manually from the UI for greater control over your personalization strategies.
Jan 25, 2024
New features
Add an export button at the bottom of the GPT flow history table. Exports the Table as a CSV file for the specified time range
GAIP sidebar improved: Solutions are accessible directly now.
Big fix
Bug at trial project status and upgrade flow
Previous
API Reference
Next
Glossary
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/release_notes/#mar-16-2024
Skip to content
Gigalogy Tutorial
Release notes
English
Japanese
Type to start searching
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
MyGPT
API Reference
Release notes
Glossary
Table of contents
Apr 5, 2024
Mar 27, 2024
Mar 27, 2024
Mar 26, 2024
Mar 20, 2024
Mar 16, 2024
Mar 3, 2024
Jan 25, 2024
GAIP Release notes
Apr 5, 2024
New feature
questionnaire mapper now supports result format. User can setup how they want to see the questionnaire result. User can setup required categories and optional categories. Recommended items from POST /v1/questionnaire/recommend will be categorized based on that. Optional categories come with their inclusion condition as well.
Mar 27, 2024
New feature
From the GPT-Flow History table, you can now select which data (Query, response, feedback) you want to include in the training for future conversations and in which dataset.
Mar 27, 2024
New feature
Now POST /v1/gpt/ask API have multiple options to generate answer. This can be set as the value of the key conversation_type, question type does not consider any previous conversation history. chat type considers n previous conversation history while generating an answer. The length of the converstaion is defined by the parameter chat_history_length of GPT settings.
Mar 26, 2024
New features
In the same project, /gpt/ask API can now answer from both personalizer catalog and MyGPT datasets. Previously it could handle only one of the data sources.
Introducing "Profiles" for our GPT solutions! You can now create and save multiple profiles, each with its own settings . Users no longer have to manually adjust the GPT settings every time they switch between different tasks or needs.
Mar 20, 2024
New features
keyword extractor changed for japanese language. This is done to improve the quality of japanese language search capabilities. top_k can control how wide or controlled search a customer wants to do in terms of keywords.
questionnaire/recommend end point now has a new optional parameter called recommend_count. If it is set, the value of this parameter takes priority over recommend_count variable in questionnaire mapper.
Mar 16, 2024
New feature
gpt/ask and questionnaire/recommend endpoints, when providing response with product IDs, now can include any key that was set in the mapper.
Now it is easier to set how many product questionnaire/recommend will give, with the new key "recommend_count" in the mapper.
introducing top_k to items/search, gpt/ask, giving ability to controls the number of keywords to consider for document searching.
Bug Fix
questionnaire/recommend endpoint can now take Null values.
Mar 3, 2024
New feature
UI-Based Project Setup: Now set up Personalization Projects directly via the UI, including file uploads, data mapping, and model training.
Training History: View detailed training history in Project Settings for improved tracking and insights.
Manual Training: Initiate model training manually from the UI for greater control over your personalization strategies.
Jan 25, 2024
New features
Add an export button at the bottom of the GPT flow history table. Exports the Table as a CSV file for the specified time range
GAIP sidebar improved: Solutions are accessible directly now.
Big fix
Bug at trial project status and upgrade flow
Previous
API Reference
Next
Glossary
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/release_notes/#mar-3-2024
Skip to content
Gigalogy Tutorial
Release notes
English
Japanese
Type to start searching
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
MyGPT
API Reference
Release notes
Glossary
Table of contents
Apr 5, 2024
Mar 27, 2024
Mar 27, 2024
Mar 26, 2024
Mar 20, 2024
Mar 16, 2024
Mar 3, 2024
Jan 25, 2024
GAIP Release notes
Apr 5, 2024
New feature
questionnaire mapper now supports result format. User can setup how they want to see the questionnaire result. User can setup required categories and optional categories. Recommended items from POST /v1/questionnaire/recommend will be categorized based on that. Optional categories come with their inclusion condition as well.
Mar 27, 2024
New feature
From the GPT-Flow History table, you can now select which data (Query, response, feedback) you want to include in the training for future conversations and in which dataset.
Mar 27, 2024
New feature
Now POST /v1/gpt/ask API have multiple options to generate answer. This can be set as the value of the key conversation_type, question type does not consider any previous conversation history. chat type considers n previous conversation history while generating an answer. The length of the converstaion is defined by the parameter chat_history_length of GPT settings.
Mar 26, 2024
New features
In the same project, /gpt/ask API can now answer from both personalizer catalog and MyGPT datasets. Previously it could handle only one of the data sources.
Introducing "Profiles" for our GPT solutions! You can now create and save multiple profiles, each with its own settings . Users no longer have to manually adjust the GPT settings every time they switch between different tasks or needs.
Mar 20, 2024
New features
keyword extractor changed for japanese language. This is done to improve the quality of japanese language search capabilities. top_k can control how wide or controlled search a customer wants to do in terms of keywords.
questionnaire/recommend end point now has a new optional parameter called recommend_count. If it is set, the value of this parameter takes priority over recommend_count variable in questionnaire mapper.
Mar 16, 2024
New feature
gpt/ask and questionnaire/recommend endpoints, when providing response with product IDs, now can include any key that was set in the mapper.
Now it is easier to set how many product questionnaire/recommend will give, with the new key "recommend_count" in the mapper.
introducing top_k to items/search, gpt/ask, giving ability to controls the number of keywords to consider for document searching.
Bug Fix
questionnaire/recommend endpoint can now take Null values.
Mar 3, 2024
New feature
UI-Based Project Setup: Now set up Personalization Projects directly via the UI, including file uploads, data mapping, and model training.
Training History: View detailed training history in Project Settings for improved tracking and insights.
Manual Training: Initiate model training manually from the UI for greater control over your personalization strategies.
Jan 25, 2024
New features
Add an export button at the bottom of the GPT flow history table. Exports the Table as a CSV file for the specified time range
GAIP sidebar improved: Solutions are accessible directly now.
Big fix
Bug at trial project status and upgrade flow
Previous
API Reference
Next
Glossary
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/release_notes/#jan-25-2024
Skip to content
Gigalogy Tutorial
Release notes
English
Japanese
Type to start searching
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
MyGPT
API Reference
Release notes
Glossary
Table of contents
Apr 5, 2024
Mar 27, 2024
Mar 27, 2024
Mar 26, 2024
Mar 20, 2024
Mar 16, 2024
Mar 3, 2024
Jan 25, 2024
GAIP Release notes
Apr 5, 2024
New feature
questionnaire mapper now supports result format. User can setup how they want to see the questionnaire result. User can setup required categories and optional categories. Recommended items from POST /v1/questionnaire/recommend will be categorized based on that. Optional categories come with their inclusion condition as well.
Mar 27, 2024
New feature
From the GPT-Flow History table, you can now select which data (Query, response, feedback) you want to include in the training for future conversations and in which dataset.
Mar 27, 2024
New feature
Now POST /v1/gpt/ask API have multiple options to generate answer. This can be set as the value of the key conversation_type, question type does not consider any previous conversation history. chat type considers n previous conversation history while generating an answer. The length of the converstaion is defined by the parameter chat_history_length of GPT settings.
Mar 26, 2024
New features
In the same project, /gpt/ask API can now answer from both personalizer catalog and MyGPT datasets. Previously it could handle only one of the data sources.
Introducing "Profiles" for our GPT solutions! You can now create and save multiple profiles, each with its own settings . Users no longer have to manually adjust the GPT settings every time they switch between different tasks or needs.
Mar 20, 2024
New features
keyword extractor changed for japanese language. This is done to improve the quality of japanese language search capabilities. top_k can control how wide or controlled search a customer wants to do in terms of keywords.
questionnaire/recommend end point now has a new optional parameter called recommend_count. If it is set, the value of this parameter takes priority over recommend_count variable in questionnaire mapper.
Mar 16, 2024
New feature
gpt/ask and questionnaire/recommend endpoints, when providing response with product IDs, now can include any key that was set in the mapper.
Now it is easier to set how many product questionnaire/recommend will give, with the new key "recommend_count" in the mapper.
introducing top_k to items/search, gpt/ask, giving ability to controls the number of keywords to consider for document searching.
Bug Fix
questionnaire/recommend endpoint can now take Null values.
Mar 3, 2024
New feature
UI-Based Project Setup: Now set up Personalization Projects directly via the UI, including file uploads, data mapping, and model training.
Training History: View detailed training history in Project Settings for improved tracking and insights.
Manual Training: Initiate model training manually from the UI for greater control over your personalization strategies.
Jan 25, 2024
New features
Add an export button at the bottom of the GPT flow history table. Exports the Table as a CSV file for the specified time range
GAIP sidebar improved: Solutions are accessible directly now.
Big fix
Bug at trial project status and upgrade flow
Previous
API Reference
Next
Glossary
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/glossary/
Skip to content
Gigalogy Tutorial
Glossary
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
MyGPT
API Reference
Release notes
Glossary
Table of contents
Index
Mapper
Reindex
Index Settings
Index Mappings
Glossary
Index

Index are the data organizing mechanism which are similar to the database of relational database system.

Mapper

Mapper is the system to map recommender key to data source key. Therefore, solution can understand data from any data source generate intelligence from them.

Reindex

Reindexing is a process to copy documents from one index to another, optionally filtering the source documents by a query, fetching the documents from a remote cluster. You will about to change the settings and mappings of a destination index with reindex.

Index Settings

Index settings are one of the index modules created per index and control all aspects of the index.

Index Mappings

Index mapping is the process of defining how a document and the fields it contained are sorted and indexed.

Previous
Release notes
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/glossary/#index
Skip to content
Gigalogy Tutorial
Glossary
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
MyGPT
API Reference
Release notes
Glossary
Table of contents
Index
Mapper
Reindex
Index Settings
Index Mappings
Glossary
Index

Index are the data organizing mechanism which are similar to the database of relational database system.

Mapper

Mapper is the system to map recommender key to data source key. Therefore, solution can understand data from any data source generate intelligence from them.

Reindex

Reindexing is a process to copy documents from one index to another, optionally filtering the source documents by a query, fetching the documents from a remote cluster. You will about to change the settings and mappings of a destination index with reindex.

Index Settings

Index settings are one of the index modules created per index and control all aspects of the index.

Index Mappings

Index mapping is the process of defining how a document and the fields it contained are sorted and indexed.

Previous
Release notes
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/glossary/#mapper
Skip to content
Gigalogy Tutorial
Glossary
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
MyGPT
API Reference
Release notes
Glossary
Table of contents
Index
Mapper
Reindex
Index Settings
Index Mappings
Glossary
Index

Index are the data organizing mechanism which are similar to the database of relational database system.

Mapper

Mapper is the system to map recommender key to data source key. Therefore, solution can understand data from any data source generate intelligence from them.

Reindex

Reindexing is a process to copy documents from one index to another, optionally filtering the source documents by a query, fetching the documents from a remote cluster. You will about to change the settings and mappings of a destination index with reindex.

Index Settings

Index settings are one of the index modules created per index and control all aspects of the index.

Index Mappings

Index mapping is the process of defining how a document and the fields it contained are sorted and indexed.

Previous
Release notes
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/glossary/#reindex
Skip to content
Gigalogy Tutorial
Glossary
English
Japanese
Type to start searching
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
MyGPT
API Reference
Release notes
Glossary
Table of contents
Index
Mapper
Reindex
Index Settings
Index Mappings
Glossary
Index

Index are the data organizing mechanism which are similar to the database of relational database system.

Mapper

Mapper is the system to map recommender key to data source key. Therefore, solution can understand data from any data source generate intelligence from them.

Reindex

Reindexing is a process to copy documents from one index to another, optionally filtering the source documents by a query, fetching the documents from a remote cluster. You will about to change the settings and mappings of a destination index with reindex.

Index Settings

Index settings are one of the index modules created per index and control all aspects of the index.

Index Mappings

Index mapping is the process of defining how a document and the fields it contained are sorted and indexed.

Previous
Release notes
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/glossary/#index-settings
Skip to content
Gigalogy Tutorial
Glossary
English
Japanese
Type to start searching
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
MyGPT
API Reference
Release notes
Glossary
Table of contents
Index
Mapper
Reindex
Index Settings
Index Mappings
Glossary
Index

Index are the data organizing mechanism which are similar to the database of relational database system.

Mapper

Mapper is the system to map recommender key to data source key. Therefore, solution can understand data from any data source generate intelligence from them.

Reindex

Reindexing is a process to copy documents from one index to another, optionally filtering the source documents by a query, fetching the documents from a remote cluster. You will about to change the settings and mappings of a destination index with reindex.

Index Settings

Index settings are one of the index modules created per index and control all aspects of the index.

Index Mappings

Index mapping is the process of defining how a document and the fields it contained are sorted and indexed.

Previous
Release notes
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/glossary/#index-mappings
Skip to content
Gigalogy Tutorial
Glossary
English
Japanese
Type to start searching
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
MyGPT
API Reference
Release notes
Glossary
Table of contents
Index
Mapper
Reindex
Index Settings
Index Mappings
Glossary
Index

Index are the data organizing mechanism which are similar to the database of relational database system.

Mapper

Mapper is the system to map recommender key to data source key. Therefore, solution can understand data from any data source generate intelligence from them.

Reindex

Reindexing is a process to copy documents from one index to another, optionally filtering the source documents by a query, fetching the documents from a remote cluster. You will about to change the settings and mappings of a destination index with reindex.

Index Settings

Index settings are one of the index modules created per index and control all aspects of the index.

Index Mappings

Index mapping is the process of defining how a document and the fields it contained are sorted and indexed.

Previous
Release notes
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/mkdocs/docs/tutorial/00_Setup_and_training/03_Data_integration_&_user_behavior_collection.md##Import-user-behavior-data
Gigalogy Tutorial
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
MyGPT
API Reference
Release notes
Glossary
404 - Not found
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/tutorial/00_Setup_and_training/03_Data_integration_%26_user_behavior_collection/##Import-user-behavior-data
Skip to content
Gigalogy Tutorial
Integration of Catalogue information and user behavior data
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
Project setup
Environment setup
Integration of Catalogue information and user behavior data
Training your data
Personalized search
Personalized Image Search
Personalized Feed
Recommend trending items
Recommend similar items
Recommend items purchase together
Dynamic Pricing
Questionnaire
MyGPT
API Reference
Release notes
Glossary
Table of contents
Catalogue information integration.
Uploading data using a file
Fetch item from external API
Search Items in GAIP after import
User behavior data collection integration
Comparison of each approach.
Google Tag manager
Generating user ID
Collecting and sending user browsing data
Collecting and sending user purchase data
Collecting and sending user rating data
Collecting and sending user data
Server to server integration
User information
Product browse
Product purchase
Product rating
Client to server integration
Import user behavior data
Integration of Catalogue information and user behavior data

This tutorial will cover how to integrate your catalogue information into GAIP and how to set up user behavior tracking and integrate with GAIP.

Catalogue information integration.

Prerequisite: Mapping creation and the index creation is done.

Info

This step can also be done from our platform (GAIP). Refer here for detail.

There are two ways to import your catalogue information into GAIP.

Upload you catalogue information as a CSV or JSON file using endpoint POST /v1/item/save.
Fetch data from your API (or any external API) using endpoint POST /v1/item/save/remote.
Uploading data using a file

For uploading the data using a CSV file or JSON file, please use the POST /v1/item/save endpoint. Simply upload the file and confirm the server response is success. Confirm the task was successful using the GET/v1/tasks/{task_id} endpoint.

Info

This will throw an error and task will fail, if the keys during the Mapping creation step does not match with the keys in the file, OR if the indices were not created succesfully.

Fetch item from external API

To fetch data from external API, use the POST /v1/item/save/remote endpoint. The key and value types and an example request body for the endpoint can be found here in our sandbox.

After hitting either of the endpoint above to import your data into GAIP, you will get a task ID in the response. Use this task ID and hit the /v1/tasks/{task_id} endpoint to confirm the operation was successful. In case it fails, you can also find the details there. For API documentation, please refer <>

Search Items in GAIP after import

You can search items by passing list of item ids fromPOST /v1/items/search endpoint. This endpoint will return searched items with item details.

It is recommended to use this endpoint to confirm that the item catalogue is successfully imported into your project.

User behavior data collection integration

GAIP can collect different user behavior related information to optimize the recommendation for the user. Types of data collected are listed below with their endpoints.

Data type	Endpoint
Product browsing: When user browse products.	/v1/items/browse or /v1/items/browse/client
Product Purchase: When user purchase a product with its quantity.	/v1/items/purchase or /v1/items/purchase/client
Rating: When a user rates a product.	/v1/items/rating or /v1/items/rating/client
User: User information such as age, gender and other customized attributes depending on your website.	/v1/users or /v1/users/client

You will find these endpoints listed in our Sandbox under section "User Data Collection". Please check the required parameters, value types and example request bodies for all the endpoints there.

There are 3 ways to integrate user behavior data collection with GAIP

Google Tag Manager
Server to server integration
Client to server integration

You can also bulk upload user behavior data from the past. For that, please refer to Import user behavior data section.

Comparison of each approach.
Approach	GTM	Server to Server	Client to Server
Description	Use Google Tag Manager (GTM) to collect data (User behavior) from your website and send it to GAIP via endpoint.	The data is captured in the backend server of your application and then sent to GAIP via endpoint.	The data is directly sent from your front end (Client side) to GAIP via endpoint.
Pros	Easy to implement, Minimum coding required, Flexible configuration	More secure, Data integrity, Controlled environment	Real-time data, Less server dependency
Cons	Limited customization, need to have basic knowledge about GTM, Dependency on third-party service, Might not work for certain browsers and plugins like AdBlockers	More complex to set up, potential latency, maintenance required	Less secure, Potential for inconsistent data, dependency on client-side behavior

Below we will show the implementation of each approach.

BE ADVISED: The following is a general guideline, and it may vary across different websites, contingent upon the specific implementation of your website.

Google Tag manager

Prerequisite: Your website must have GTM setup. If you do not have GTM setup, you can easily do the setup by following the guidelines here.

If you are not familiar with basic GTM concepts, such as Tags, Triggers and Variables, please familiarize yourself first with these concepts before proceeding with this approach. You can find more resources related to this here.

Generating user ID

In our sandbox, Notice that in the user data collection endpoints, every endpoint has a parameter called user_id, and member_id. These are vital to identify each user so that you can personalize their experience. user_id is generated by GAIP for each user of your site. The endpoint to generate and user_id is GET /v1/users/generate/id. You can generate the user_id using GTM using below code. This code can be used with every Tag, which checks if there is a user_id and creates one if there is none.

// Function to get or generate 'gaip_user_id' using a function expression
var getGaipUser = function() {
  return new Promise(function(resolve, reject) {
    if (gaipUser !== null) {
      resolve(gaipUser);
    } else {
      var idHeaders = new Headers();
      idHeaders.append("project-key", "{{ YOUR_PROJECT_KEY_HERE }}");
      idHeaders.append("api-key", "{{ YOUR_API_KEY_HERE }}");
      fetch("https://api.recommender.gigalogy.com/v1/users/generate/id", { headers: idHeaders })
      .then(function(response) {
        return response.json();
      })
      .then(function(data) {
        localStorage.setItem('gaip_user_id', data.detail.response);
        resolve(data.detail.response);
      })
      .catch(reject);
    }
  });
};


member_id can be set by you depending on how your site identifies unique users such as user ID, phone number, email address etc.

Collecting and sending user browsing data

Set up a variable to capture the product name/title/ID, when the user goes a product details page or clicks on a product to enlarge it or open a pop-up etc.

Set up a trigger so that the tag would fire when the user goes browses an item (Go to product detail page or quick view options etc.).

Create a custom HTML Tag with the above trigger and variable and put the below code in the tag.

Collecting and sending user purchase data

Set up a variable to capture the all the purchase detail, when the user makes a purchase. This could be from the purchase confirmation page etc.

Set up a trigger so that the tag would fire when the user make the purchase.

Create a custom HTML Tag with the above trigger to send the information to endpoint POST /v1/purchase or POST /v1/purchase/client

Collecting and sending user rating data

Setup variables to capture the product name/title/ID and the rating, when the user rates an item positively or negatively. We can also consider an item is positively rated when user adds the item to wishlist.

Set up a trigger for the tag to fire when the user rates a product.

Create a custom HTML Tag with the above trigger and variables to send the information to the endpoint POST /v1/rating or POST /v1/rating/client

Collecting and sending user data

Setup variable to capture the user information.

For this, the trigger could be setup up when the user logs or update their information.

Create a custom HTML Tag with the above trigger and variables to send the information to the endpoint POST /v1/user or POST /v1/user/client

Server to server integration

For server to server integration, you will need to generate Project key and API as mentioned in the credentials section.

User information

The below request path, takes user information, such as name, age, gender, address and saves them in the gaip database.

POST /v1/user


Here is an example request body

{
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "user_info": {
    "address": "string",
    "gender": "integer --> 1 for male or 2 for female or 3 for others",
    "age": 25,
    "user_type": [
      {
        "key_name1": "value1_value2",
        "separator": "_"
      },
      {
        "key_name2": "value3"
      }
    ]
  }
}

You can find the sample code for implementation here

Product browse

You can use the below endpoint to capture user browsing information and save them in GAIP database

POST /v1/items/browse


It takes user_id and item_id as required parameters.

Here is an example value of the request body

  {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "item_id": "1000764491"
  }


You can find sample code here

Product purchase

You can use the below endpoint to capture user's product purchase information and save them in GAIP database

POST /v1/purchase

It takes user_id, item_list which includes item_id, price, quantity for a specific item as required parameters.

Here is an example request body

  {
    "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
    "member_id": "df3456tg-2909-459b-be55-62196afedf85",
    "item_list": [
      {
        "item_id": "1000757666",
        "price": 5000,
        "quantity": 1
      },
      {
        "item_id": "1000764491",
        "price": 400,
        "quantity": 7
      }
    ]
  }


You a find sample code for this implementation here

Product rating

You can use the below endpoint to capture user's product rating information and save them in GAIP database

POST /v1/rating


It takes user_id, item_id, and rating for the specific item as required parameters.

Here is a sample request body

{
  "user_id": "a0cc6beb-2909-459b-be55-62196af78ce4",
  "member_id": "df3456tg-2909-459b-be55-62196afedf85",
  "item_id": "1000764491",
  "rating": "1"
}


You can find the sample code for this implementation here

If you want to save your data with bulk upload you can use above-mentioned endpoint.

Client to server integration

For client to server integration, you will need to generate client key as described in the Credentials sections. Once the client key is ready, you can directly send the request from your client side to GAIP, using the client key provided.

Note that while generating client key, you can add whitelisted domains, which whitelists the request origin. This is recommended to enhance security.

The rest of the implementation method is same as server to server integration.

Import user behavior data

Similar to data integration, all 4 kinds of user information (browse, purchase, rating, user) can be bulk uploaded. This could be useful if you already have this information from the past and want to import it into GAIP.

To import user behavior and user information in bulk, first you need to create mapper to match the keys with GAIP.

To create the mapper, the endpoints with the example request bodies can be found here in the gigalogy recommender page. You can also find the sample codes for mapper creation here in the API documentation page

Next we will use the below 4 endpoints to upload each category of data in bulk

Request path for product browsing history: POST /v1/items/browse/save
Request path for purchase history: POST /v1/items/purchase/save
Request path for rating history: POST /v1/items/rating/save
Request path to upload user information in bulk: POST /v1/users/save

You can find these endpoints with the example request bodies here. The sample code can be found here in the API documentation page

Previous
Environment setup
Next
Training your data
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/#tutorial
Skip to content
Gigalogy Tutorial
Overview
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
MyGPT
API Reference
Release notes
Glossary
Table of contents
Tutorial
API Reference
Overview

The Gigalogy AI platform (GAIP) introduces cutting-edge solutions, designed to craft personalized product offerings. These solutions address specific user needs while propelling business growth. The platform provides solutions for personalization, Custom GPT creation and CV based solution. Within this documentation, you will discover comprehensive guidance on integrating the solutions, understanding its operational framework, and leveraging its capabilities within your application.

Let's have a rundown of the documentation:

Tutorial

To seamlessly integrate your product with our solutions, this section serves as your comprehensive guide. It provides a detailed, step-by-step walkthrough for integrating an API with our solutions. Additionally, you'll gain insights into how the solution function and discover strategies for effectively building your application with it. For an optimal integration process, it is advisable to thoroughly review this section prior to integrating your product.

Get started

API Reference

This section offers developer-friendly API documentation designed to guide you through accessing and utilizing the recommender API effectively.

API Reference

Next
Account and Project creation
Made with Material for MkDocs
================================================================================
URL: https://tutorial.gigalogy.com/#api-reference
Skip to content
Gigalogy Tutorial
Overview
English
Japanese
Initializing search
Gigalogy Tutorial
Overview
Account and Project creation
Credentials
Personalizer
MyGPT
API Reference
Release notes
Glossary
Table of contents
Tutorial
API Reference
Overview

The Gigalogy AI platform (GAIP) introduces cutting-edge solutions, designed to craft personalized product offerings. These solutions address specific user needs while propelling business growth. The platform provides solutions for personalization, Custom GPT creation and CV based solution. Within this documentation, you will discover comprehensive guidance on integrating the solutions, understanding its operational framework, and leveraging its capabilities within your application.

Let's have a rundown of the documentation:

Tutorial

To seamlessly integrate your product with our solutions, this section serves as your comprehensive guide. It provides a detailed, step-by-step walkthrough for integrating an API with our solutions. Additionally, you'll gain insights into how the solution function and discover strategies for effectively building your application with it. For an optimal integration process, it is advisable to thoroughly review this section prior to integrating your product.

Get started

API Reference

This section offers developer-friendly API documentation designed to guide you through accessing and utilizing the recommender API effectively.

API Reference

Next
Account and Project creation
Made with Material for MkDocs
================================================================================
{
    "openapi": "3.0.2",
    "info": {
        "title": "Gigalogy Recommender",
        "description": "Combining user needs, business strategy and recommend actions which will maximize user satisfaction and business growth.",
        "version": "v1"
    },
    "paths": {
        "/v1/mappers": {
            "get": {
                "tags": [
                    "Catalog Mapping"
                ],
                "summary": "Get mapper",
                "description": "Get the mapped keys between your data source and our recommender system.",
                "operationId": "get_mapper_v1_mappers_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/mappers\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/mappers\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/mappers\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/mappers\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/mappers\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/mappers\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/mappers\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/mappers\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/mappers',\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/mappers\");\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/mappers\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/mappers\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/mappers');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/mappers');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/mappers\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/mappers\"\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/mappers\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request GET \\\n  --url https://api.recommender.gigalogy.com/v1/mappers \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/mappers\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            },
            "put": {
                "tags": [
                    "Catalog Mapping"
                ],
                "summary": "Update a mapper",
                "description": "This endpoint updates the mapped keys. Please checkout the schema from the\nrequest body section for details about the key type and supported values.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| item_id | str | str | item_id is the unit of recommended items and typically should be the Unique ID of your products. choose the parameter from your data source that you want to be the unit of recommendation. |\n| title | str | str | Represents your product / item title. |\n| second_title | Optional[str] | str | If your item has a catch copy / headline field you can assign it here. |\n| third_title | Optional[str] | str | If you have another field you want to use as a title level assign it here. |\n| fourth_title | Optional[str] | str | If you have another field you want to use as a title level assign it here. |\n| availability | str | bool | Represents whether your item is available or not. Data type for this key is `boolean`. Make sure to adjust your data accordingly. |\n| description | Optional[str] | str | Represents your product details information. |\n| image_url | Optional[str] | Depends on your data source | Represents image url of your data source. *This is required if you want to use image recommend end point* |\n| image_url_type | Optional[Enum] | Selected enum value | Based on this our recommended will choose how to process your image url data. Available values are `STR`, `LIST_STR`, `LIST_DICT`, `DICT` *This is required if you want to use image recommend end point* |\n| item_url | str | str | Represents your product / item details page url |\n| price | str | int | Represents your product / item price. |\n| category | List[str] | str | Represents your category list. You can add multiple category here. |\n| flag | List[str] | bool | Represents list of flags available in your dataset. Flag value data type is `boolean`. Please do not use keys which contains other types of data as flag. |",
                "operationId": "put_mapper_v1_mappers_put",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MapperSchema"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/mappers\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"key_map\\\":{\\\"item_id\\\":\\\"item_id\\\",\\\"title\\\":\\\"title\\\",\\\"second_title\\\":\\\"string\\\",\\\"third_title\\\":\\\"string\\\",\\\"fourth_title\\\":\\\"string\\\",\\\"availability\\\":\\\"availability\\\",\\\"description\\\":\\\"string\\\",\\\"image_url\\\":\\\"string\\\",\\\"image_url_type\\\":\\\"STR or LIST_STR or LIST_DICT or DICT\\\",\\\"item_url\\\":\\\"string\\\",\\\"price\\\":\\\"price\\\",\\\"categories\\\":[{\\\"name\\\":\\\"category_1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"name\\\":\\\"category_2\\\",\\\"separator\\\":\\\"\\\"}],\\\"flag\\\":[\\\"condition\\\"],\\\"average_rating\\\":\\\"string\\\",\\\"user_ratings_total\\\":\\\"string\\\",\\\"custom\\\":[{\\\"name\\\":\\\"colum3\\\",\\\"data_type\\\":\\\"FLOAT\\\"},{\\\"name\\\":\\\"column4\\\",\\\"data_type\\\":\\\"INT\\\"}],\\\"item_nearby_calculation\\\":false,\\\"keywords_group_by\\\":\\\"string\\\",\\\"gpt_enabled\\\":false}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Put,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/mappers\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"key_map\\\":{\\\"item_id\\\":\\\"item_id\\\",\\\"title\\\":\\\"title\\\",\\\"second_title\\\":\\\"string\\\",\\\"third_title\\\":\\\"string\\\",\\\"fourth_title\\\":\\\"string\\\",\\\"availability\\\":\\\"availability\\\",\\\"description\\\":\\\"string\\\",\\\"image_url\\\":\\\"string\\\",\\\"image_url_type\\\":\\\"STR or LIST_STR or LIST_DICT or DICT\\\",\\\"item_url\\\":\\\"string\\\",\\\"price\\\":\\\"price\\\",\\\"categories\\\":[{\\\"name\\\":\\\"category_1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"name\\\":\\\"category_2\\\",\\\"separator\\\":\\\"\\\"}],\\\"flag\\\":[\\\"condition\\\"],\\\"average_rating\\\":\\\"string\\\",\\\"user_ratings_total\\\":\\\"string\\\",\\\"custom\\\":[{\\\"name\\\":\\\"colum3\\\",\\\"data_type\\\":\\\"FLOAT\\\"},{\\\"name\\\":\\\"column4\\\",\\\"data_type\\\":\\\"INT\\\"}],\\\"item_nearby_calculation\\\":false,\\\"keywords_group_by\\\":\\\"string\\\",\\\"gpt_enabled\\\":false}}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/mappers\"\n\n\tpayload := strings.NewReader(\"{\\\"key_map\\\":{\\\"item_id\\\":\\\"item_id\\\",\\\"title\\\":\\\"title\\\",\\\"second_title\\\":\\\"string\\\",\\\"third_title\\\":\\\"string\\\",\\\"fourth_title\\\":\\\"string\\\",\\\"availability\\\":\\\"availability\\\",\\\"description\\\":\\\"string\\\",\\\"image_url\\\":\\\"string\\\",\\\"image_url_type\\\":\\\"STR or LIST_STR or LIST_DICT or DICT\\\",\\\"item_url\\\":\\\"string\\\",\\\"price\\\":\\\"price\\\",\\\"categories\\\":[{\\\"name\\\":\\\"category_1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"name\\\":\\\"category_2\\\",\\\"separator\\\":\\\"\\\"}],\\\"flag\\\":[\\\"condition\\\"],\\\"average_rating\\\":\\\"string\\\",\\\"user_ratings_total\\\":\\\"string\\\",\\\"custom\\\":[{\\\"name\\\":\\\"colum3\\\",\\\"data_type\\\":\\\"FLOAT\\\"},{\\\"name\\\":\\\"column4\\\",\\\"data_type\\\":\\\"INT\\\"}],\\\"item_nearby_calculation\\\":false,\\\"keywords_group_by\\\":\\\"string\\\",\\\"gpt_enabled\\\":false}}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"key_map\\\":{\\\"item_id\\\":\\\"item_id\\\",\\\"title\\\":\\\"title\\\",\\\"second_title\\\":\\\"string\\\",\\\"third_title\\\":\\\"string\\\",\\\"fourth_title\\\":\\\"string\\\",\\\"availability\\\":\\\"availability\\\",\\\"description\\\":\\\"string\\\",\\\"image_url\\\":\\\"string\\\",\\\"image_url_type\\\":\\\"STR or LIST_STR or LIST_DICT or DICT\\\",\\\"item_url\\\":\\\"string\\\",\\\"price\\\":\\\"price\\\",\\\"categories\\\":[{\\\"name\\\":\\\"category_1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"name\\\":\\\"category_2\\\",\\\"separator\\\":\\\"\\\"}],\\\"flag\\\":[\\\"condition\\\"],\\\"average_rating\\\":\\\"string\\\",\\\"user_ratings_total\\\":\\\"string\\\",\\\"custom\\\":[{\\\"name\\\":\\\"colum3\\\",\\\"data_type\\\":\\\"FLOAT\\\"},{\\\"name\\\":\\\"column4\\\",\\\"data_type\\\":\\\"INT\\\"}],\\\"item_nearby_calculation\\\":false,\\\"keywords_group_by\\\":\\\"string\\\",\\\"gpt_enabled\\\":false}}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/mappers\")\n  .put(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.put(\"https://api.recommender.gigalogy.com/v1/mappers\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"key_map\\\":{\\\"item_id\\\":\\\"item_id\\\",\\\"title\\\":\\\"title\\\",\\\"second_title\\\":\\\"string\\\",\\\"third_title\\\":\\\"string\\\",\\\"fourth_title\\\":\\\"string\\\",\\\"availability\\\":\\\"availability\\\",\\\"description\\\":\\\"string\\\",\\\"image_url\\\":\\\"string\\\",\\\"image_url_type\\\":\\\"STR or LIST_STR or LIST_DICT or DICT\\\",\\\"item_url\\\":\\\"string\\\",\\\"price\\\":\\\"price\\\",\\\"categories\\\":[{\\\"name\\\":\\\"category_1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"name\\\":\\\"category_2\\\",\\\"separator\\\":\\\"\\\"}],\\\"flag\\\":[\\\"condition\\\"],\\\"average_rating\\\":\\\"string\\\",\\\"user_ratings_total\\\":\\\"string\\\",\\\"custom\\\":[{\\\"name\\\":\\\"colum3\\\",\\\"data_type\\\":\\\"FLOAT\\\"},{\\\"name\\\":\\\"column4\\\",\\\"data_type\\\":\\\"INT\\\"}],\\\"item_nearby_calculation\\\":false,\\\"keywords_group_by\\\":\\\"string\\\",\\\"gpt_enabled\\\":false}}\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/mappers\",\n  \"method\": \"PUT\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"key_map\\\":{\\\"item_id\\\":\\\"item_id\\\",\\\"title\\\":\\\"title\\\",\\\"second_title\\\":\\\"string\\\",\\\"third_title\\\":\\\"string\\\",\\\"fourth_title\\\":\\\"string\\\",\\\"availability\\\":\\\"availability\\\",\\\"description\\\":\\\"string\\\",\\\"image_url\\\":\\\"string\\\",\\\"image_url_type\\\":\\\"STR or LIST_STR or LIST_DICT or DICT\\\",\\\"item_url\\\":\\\"string\\\",\\\"price\\\":\\\"price\\\",\\\"categories\\\":[{\\\"name\\\":\\\"category_1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"name\\\":\\\"category_2\\\",\\\"separator\\\":\\\"\\\"}],\\\"flag\\\":[\\\"condition\\\"],\\\"average_rating\\\":\\\"string\\\",\\\"user_ratings_total\\\":\\\"string\\\",\\\"custom\\\":[{\\\"name\\\":\\\"colum3\\\",\\\"data_type\\\":\\\"FLOAT\\\"},{\\\"name\\\":\\\"column4\\\",\\\"data_type\\\":\\\"INT\\\"}],\\\"item_nearby_calculation\\\":false,\\\"keywords_group_by\\\":\\\"string\\\",\\\"gpt_enabled\\\":false}}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = JSON.stringify({\n  \"key_map\": {\n    \"item_id\": \"item_id\",\n    \"title\": \"title\",\n    \"second_title\": \"string\",\n    \"third_title\": \"string\",\n    \"fourth_title\": \"string\",\n    \"availability\": \"availability\",\n    \"description\": \"string\",\n    \"image_url\": \"string\",\n    \"image_url_type\": \"STR or LIST_STR or LIST_DICT or DICT\",\n    \"item_url\": \"string\",\n    \"price\": \"price\",\n    \"categories\": [\n      {\n        \"name\": \"category_1\",\n        \"separator\": \"_\"\n      },\n      {\n        \"name\": \"category_2\",\n        \"separator\": \"\"\n      }\n    ],\n    \"flag\": [\n      \"condition\"\n    ],\n    \"average_rating\": \"string\",\n    \"user_ratings_total\": \"string\",\n    \"custom\": [\n      {\n        \"name\": \"colum3\",\n        \"data_type\": \"FLOAT\"\n      },\n      {\n        \"name\": \"column4\",\n        \"data_type\": \"INT\"\n      }\n    ],\n    \"item_nearby_calculation\": false,\n    \"keywords_group_by\": \"string\",\n    \"gpt_enabled\": false\n  }\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PUT\", \"https://api.recommender.gigalogy.com/v1/mappers\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/mappers\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  key_map: {\n    item_id: 'item_id',\n    title: 'title',\n    second_title: 'string',\n    third_title: 'string',\n    fourth_title: 'string',\n    availability: 'availability',\n    description: 'string',\n    image_url: 'string',\n    image_url_type: 'STR or LIST_STR or LIST_DICT or DICT',\n    item_url: 'string',\n    price: 'price',\n    categories: [{name: 'category_1', separator: '_'}, {name: 'category_2', separator: ''}],\n    flag: ['condition'],\n    average_rating: 'string',\n    user_ratings_total: 'string',\n    custom: [{name: 'colum3', data_type: 'FLOAT'}, {name: 'column4', data_type: 'INT'}],\n    item_nearby_calculation: false,\n    keywords_group_by: 'string',\n    gpt_enabled: false\n  }\n}));\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.recommender.gigalogy.com/v1/mappers',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    key_map: {\n      item_id: 'item_id',\n      title: 'title',\n      second_title: 'string',\n      third_title: 'string',\n      fourth_title: 'string',\n      availability: 'availability',\n      description: 'string',\n      image_url: 'string',\n      image_url_type: 'STR or LIST_STR or LIST_DICT or DICT',\n      item_url: 'string',\n      price: 'price',\n      categories: [{name: 'category_1', separator: '_'}, {name: 'category_2', separator: ''}],\n      flag: ['condition'],\n      average_rating: 'string',\n      user_ratings_total: 'string',\n      custom: [{name: 'colum3', data_type: 'FLOAT'}, {name: 'column4', data_type: 'INT'}],\n      item_nearby_calculation: false,\n      keywords_group_by: 'string',\n      gpt_enabled: false\n    }\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"PUT\", \"https://api.recommender.gigalogy.com/v1/mappers\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"key_map\": {\n    \"item_id\": \"item_id\",\n    \"title\": \"title\",\n    \"second_title\": \"string\",\n    \"third_title\": \"string\",\n    \"fourth_title\": \"string\",\n    \"availability\": \"availability\",\n    \"description\": \"string\",\n    \"image_url\": \"string\",\n    \"image_url_type\": \"STR or LIST_STR or LIST_DICT or DICT\",\n    \"item_url\": \"string\",\n    \"price\": \"price\",\n    \"categories\": [\n      {\n        \"name\": \"category_1\",\n        \"separator\": \"_\"\n      },\n      {\n        \"name\": \"category_2\",\n        \"separator\": \"\"\n      }\n    ],\n    \"flag\": [\n      \"condition\"\n    ],\n    \"average_rating\": \"string\",\n    \"user_ratings_total\": \"string\",\n    \"custom\": [\n      {\n        \"name\": \"colum3\",\n        \"data_type\": \"FLOAT\"\n      },\n      {\n        \"name\": \"column4\",\n        \"data_type\": \"INT\"\n      }\n    ],\n    \"item_nearby_calculation\": false,\n    \"keywords_group_by\": \"string\",\n    \"gpt_enabled\": false\n  }\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"key_map\": @{ @\"item_id\": @\"item_id\", @\"title\": @\"title\", @\"second_title\": @\"string\", @\"third_title\": @\"string\", @\"fourth_title\": @\"string\", @\"availability\": @\"availability\", @\"description\": @\"string\", @\"image_url\": @\"string\", @\"image_url_type\": @\"STR or LIST_STR or LIST_DICT or DICT\", @\"item_url\": @\"string\", @\"price\": @\"price\", @\"categories\": @[ @{ @\"name\": @\"category_1\", @\"separator\": @\"_\" }, @{ @\"name\": @\"category_2\", @\"separator\": @\"\" } ], @\"flag\": @[ @\"condition\" ], @\"average_rating\": @\"string\", @\"user_ratings_total\": @\"string\", @\"custom\": @[ @{ @\"name\": @\"colum3\", @\"data_type\": @\"FLOAT\" }, @{ @\"name\": @\"column4\", @\"data_type\": @\"INT\" } ], @\"item_nearby_calculation\": @NO, @\"keywords_group_by\": @\"string\", @\"gpt_enabled\": @NO } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/mappers\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PUT\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/mappers\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"key_map\\\":{\\\"item_id\\\":\\\"item_id\\\",\\\"title\\\":\\\"title\\\",\\\"second_title\\\":\\\"string\\\",\\\"third_title\\\":\\\"string\\\",\\\"fourth_title\\\":\\\"string\\\",\\\"availability\\\":\\\"availability\\\",\\\"description\\\":\\\"string\\\",\\\"image_url\\\":\\\"string\\\",\\\"image_url_type\\\":\\\"STR or LIST_STR or LIST_DICT or DICT\\\",\\\"item_url\\\":\\\"string\\\",\\\"price\\\":\\\"price\\\",\\\"categories\\\":[{\\\"name\\\":\\\"category_1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"name\\\":\\\"category_2\\\",\\\"separator\\\":\\\"\\\"}],\\\"flag\\\":[\\\"condition\\\"],\\\"average_rating\\\":\\\"string\\\",\\\"user_ratings_total\\\":\\\"string\\\",\\\"custom\\\":[{\\\"name\\\":\\\"colum3\\\",\\\"data_type\\\":\\\"FLOAT\\\"},{\\\"name\\\":\\\"column4\\\",\\\"data_type\\\":\\\"INT\\\"}],\\\"item_nearby_calculation\\\":false,\\\"keywords_group_by\\\":\\\"string\\\",\\\"gpt_enabled\\\":false}}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/mappers');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"key_map\":{\"item_id\":\"item_id\",\"title\":\"title\",\"second_title\":\"string\",\"third_title\":\"string\",\"fourth_title\":\"string\",\"availability\":\"availability\",\"description\":\"string\",\"image_url\":\"string\",\"image_url_type\":\"STR or LIST_STR or LIST_DICT or DICT\",\"item_url\":\"string\",\"price\":\"price\",\"categories\":[{\"name\":\"category_1\",\"separator\":\"_\"},{\"name\":\"category_2\",\"separator\":\"\"}],\"flag\":[\"condition\"],\"average_rating\":\"string\",\"user_ratings_total\":\"string\",\"custom\":[{\"name\":\"colum3\",\"data_type\":\"FLOAT\"},{\"name\":\"column4\",\"data_type\":\"INT\"}],\"item_nearby_calculation\":false,\"keywords_group_by\":\"string\",\"gpt_enabled\":false}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"key_map\":{\"item_id\":\"item_id\",\"title\":\"title\",\"second_title\":\"string\",\"third_title\":\"string\",\"fourth_title\":\"string\",\"availability\":\"availability\",\"description\":\"string\",\"image_url\":\"string\",\"image_url_type\":\"STR or LIST_STR or LIST_DICT or DICT\",\"item_url\":\"string\",\"price\":\"price\",\"categories\":[{\"name\":\"category_1\",\"separator\":\"_\"},{\"name\":\"category_2\",\"separator\":\"\"}],\"flag\":[\"condition\"],\"average_rating\":\"string\",\"user_ratings_total\":\"string\",\"custom\":[{\"name\":\"colum3\",\"data_type\":\"FLOAT\"},{\"name\":\"column4\",\"data_type\":\"INT\"}],\"item_nearby_calculation\":false,\"keywords_group_by\":\"string\",\"gpt_enabled\":false}}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/mappers');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"key_map\\\":{\\\"item_id\\\":\\\"item_id\\\",\\\"title\\\":\\\"title\\\",\\\"second_title\\\":\\\"string\\\",\\\"third_title\\\":\\\"string\\\",\\\"fourth_title\\\":\\\"string\\\",\\\"availability\\\":\\\"availability\\\",\\\"description\\\":\\\"string\\\",\\\"image_url\\\":\\\"string\\\",\\\"image_url_type\\\":\\\"STR or LIST_STR or LIST_DICT or DICT\\\",\\\"item_url\\\":\\\"string\\\",\\\"price\\\":\\\"price\\\",\\\"categories\\\":[{\\\"name\\\":\\\"category_1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"name\\\":\\\"category_2\\\",\\\"separator\\\":\\\"\\\"}],\\\"flag\\\":[\\\"condition\\\"],\\\"average_rating\\\":\\\"string\\\",\\\"user_ratings_total\\\":\\\"string\\\",\\\"custom\\\":[{\\\"name\\\":\\\"colum3\\\",\\\"data_type\\\":\\\"FLOAT\\\"},{\\\"name\\\":\\\"column4\\\",\\\"data_type\\\":\\\"INT\\\"}],\\\"item_nearby_calculation\\\":false,\\\"keywords_group_by\\\":\\\"string\\\",\\\"gpt_enabled\\\":false}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"PUT\", \"/v1/mappers\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/mappers\"\n\npayload = {\"key_map\": {\n        \"item_id\": \"item_id\",\n        \"title\": \"title\",\n        \"second_title\": \"string\",\n        \"third_title\": \"string\",\n        \"fourth_title\": \"string\",\n        \"availability\": \"availability\",\n        \"description\": \"string\",\n        \"image_url\": \"string\",\n        \"image_url_type\": \"STR or LIST_STR or LIST_DICT or DICT\",\n        \"item_url\": \"string\",\n        \"price\": \"price\",\n        \"categories\": [\n            {\n                \"name\": \"category_1\",\n                \"separator\": \"_\"\n            },\n            {\n                \"name\": \"category_2\",\n                \"separator\": \"\"\n            }\n        ],\n        \"flag\": [\"condition\"],\n        \"average_rating\": \"string\",\n        \"user_ratings_total\": \"string\",\n        \"custom\": [\n            {\n                \"name\": \"colum3\",\n                \"data_type\": \"FLOAT\"\n            },\n            {\n                \"name\": \"column4\",\n                \"data_type\": \"INT\"\n            }\n        ],\n        \"item_nearby_calculation\": False,\n        \"keywords_group_by\": \"string\",\n        \"gpt_enabled\": False\n    }}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"PUT\", url, json=payload, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/mappers\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"key_map\\\":{\\\"item_id\\\":\\\"item_id\\\",\\\"title\\\":\\\"title\\\",\\\"second_title\\\":\\\"string\\\",\\\"third_title\\\":\\\"string\\\",\\\"fourth_title\\\":\\\"string\\\",\\\"availability\\\":\\\"availability\\\",\\\"description\\\":\\\"string\\\",\\\"image_url\\\":\\\"string\\\",\\\"image_url_type\\\":\\\"STR or LIST_STR or LIST_DICT or DICT\\\",\\\"item_url\\\":\\\"string\\\",\\\"price\\\":\\\"price\\\",\\\"categories\\\":[{\\\"name\\\":\\\"category_1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"name\\\":\\\"category_2\\\",\\\"separator\\\":\\\"\\\"}],\\\"flag\\\":[\\\"condition\\\"],\\\"average_rating\\\":\\\"string\\\",\\\"user_ratings_total\\\":\\\"string\\\",\\\"custom\\\":[{\\\"name\\\":\\\"colum3\\\",\\\"data_type\\\":\\\"FLOAT\\\"},{\\\"name\\\":\\\"column4\\\",\\\"data_type\\\":\\\"INT\\\"}],\\\"item_nearby_calculation\\\":false,\\\"keywords_group_by\\\":\\\"string\\\",\\\"gpt_enabled\\\":false}}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request PUT \\\n  --url https://api.recommender.gigalogy.com/v1/mappers \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"key_map\":{\"item_id\":\"item_id\",\"title\":\"title\",\"second_title\":\"string\",\"third_title\":\"string\",\"fourth_title\":\"string\",\"availability\":\"availability\",\"description\":\"string\",\"image_url\":\"string\",\"image_url_type\":\"STR or LIST_STR or LIST_DICT or DICT\",\"item_url\":\"string\",\"price\":\"price\",\"categories\":[{\"name\":\"category_1\",\"separator\":\"_\"},{\"name\":\"category_2\",\"separator\":\"\"}],\"flag\":[\"condition\"],\"average_rating\":\"string\",\"user_ratings_total\":\"string\",\"custom\":[{\"name\":\"colum3\",\"data_type\":\"FLOAT\"},{\"name\":\"column4\",\"data_type\":\"INT\"}],\"item_nearby_calculation\":false,\"keywords_group_by\":\"string\",\"gpt_enabled\":false}}'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\"key_map\": [\n    \"item_id\": \"item_id\",\n    \"title\": \"title\",\n    \"second_title\": \"string\",\n    \"third_title\": \"string\",\n    \"fourth_title\": \"string\",\n    \"availability\": \"availability\",\n    \"description\": \"string\",\n    \"image_url\": \"string\",\n    \"image_url_type\": \"STR or LIST_STR or LIST_DICT or DICT\",\n    \"item_url\": \"string\",\n    \"price\": \"price\",\n    \"categories\": [\n      [\n        \"name\": \"category_1\",\n        \"separator\": \"_\"\n      ],\n      [\n        \"name\": \"category_2\",\n        \"separator\": \"\"\n      ]\n    ],\n    \"flag\": [\"condition\"],\n    \"average_rating\": \"string\",\n    \"user_ratings_total\": \"string\",\n    \"custom\": [\n      [\n        \"name\": \"colum3\",\n        \"data_type\": \"FLOAT\"\n      ],\n      [\n        \"name\": \"column4\",\n        \"data_type\": \"INT\"\n      ]\n    ],\n    \"item_nearby_calculation\": false,\n    \"keywords_group_by\": \"string\",\n    \"gpt_enabled\": false\n  ]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/mappers\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"PUT\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            },
            "post": {
                "tags": [
                    "Catalog Mapping"
                ],
                "summary": "Map data source keys with recommender keys",
                "description": "This endpoint map data source keys with our recommender keys. Our recommender\nsystem can understand your data by mapping keys. This is the core part of the\nrecommender system so the schema should be followed properly to successfully map\nyour data. Please checkout the schema from the request body section for details\nabout the key type and supported values.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| item_id | str | str | item_id is the unit of recommended items and typically should be the Unique ID of your products. choose the parameter from your data source that you want to be the unit of recommendation. |\n| title | str | str | Represents your product or item title. |\n| second_title | Optional[str] | str | If your item has a catch copy or headline field you can assign it here. |\n| third_title | Optional[str] | str | If you have another field you want to use as a title level assign it here. |\n| fourth_title | Optional[str] | str | If you have another field you want to use as a title level assign it here. |\n| availability | str | bool | Represents whether your item is available or not. Data type for this key is `boolean`. Make sure to adjust your data accordingly. |\n| description | Optional[str] | str | Represents your product details information. |\n| image_url | Optional[str] | Depends on your data source | Represents image url of your data source. *This is required if you want to use image recommend end point* |\n| image_url_type | Optional[Enum] | Selected enum value | Based on this our recommended will choose how to process your image url data. Available values are `STR`, `LIST_STR`, `LIST_DICT`, `DICT` *This is required if you want to use image recommend end point* |\n| item_url | str | str | Represents your product or tem details page url |\n| price | str | int | Represents your product or item price. |\n| categories | List[Dict[str,str]] | str | Represents your category list. You can add multiple category here. |\n| flag | List[str] | bool | Represents list of flags available in your dataset. Flag value data type is `boolean`. Please do not use keys which contains other types of data as flag. |",
                "operationId": "post_mapper_v1_mappers_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MapperSchema"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/mappers\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"key_map\\\":{\\\"item_id\\\":\\\"item_id\\\",\\\"title\\\":\\\"title\\\",\\\"second_title\\\":\\\"string\\\",\\\"third_title\\\":\\\"string\\\",\\\"fourth_title\\\":\\\"string\\\",\\\"availability\\\":\\\"availability\\\",\\\"description\\\":\\\"string\\\",\\\"image_url\\\":\\\"string\\\",\\\"image_url_type\\\":\\\"STR or LIST_STR or LIST_DICT or DICT\\\",\\\"item_url\\\":\\\"string\\\",\\\"price\\\":\\\"price\\\",\\\"categories\\\":[{\\\"name\\\":\\\"category_1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"name\\\":\\\"category_2\\\",\\\"separator\\\":\\\"\\\"}],\\\"flag\\\":[\\\"condition\\\"],\\\"average_rating\\\":\\\"string\\\",\\\"user_ratings_total\\\":\\\"string\\\",\\\"custom\\\":[{\\\"name\\\":\\\"colum3\\\",\\\"data_type\\\":\\\"FLOAT\\\"},{\\\"name\\\":\\\"column4\\\",\\\"data_type\\\":\\\"INT\\\"}],\\\"item_nearby_calculation\\\":false,\\\"keywords_group_by\\\":\\\"string\\\",\\\"gpt_enabled\\\":false}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/mappers\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"key_map\\\":{\\\"item_id\\\":\\\"item_id\\\",\\\"title\\\":\\\"title\\\",\\\"second_title\\\":\\\"string\\\",\\\"third_title\\\":\\\"string\\\",\\\"fourth_title\\\":\\\"string\\\",\\\"availability\\\":\\\"availability\\\",\\\"description\\\":\\\"string\\\",\\\"image_url\\\":\\\"string\\\",\\\"image_url_type\\\":\\\"STR or LIST_STR or LIST_DICT or DICT\\\",\\\"item_url\\\":\\\"string\\\",\\\"price\\\":\\\"price\\\",\\\"categories\\\":[{\\\"name\\\":\\\"category_1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"name\\\":\\\"category_2\\\",\\\"separator\\\":\\\"\\\"}],\\\"flag\\\":[\\\"condition\\\"],\\\"average_rating\\\":\\\"string\\\",\\\"user_ratings_total\\\":\\\"string\\\",\\\"custom\\\":[{\\\"name\\\":\\\"colum3\\\",\\\"data_type\\\":\\\"FLOAT\\\"},{\\\"name\\\":\\\"column4\\\",\\\"data_type\\\":\\\"INT\\\"}],\\\"item_nearby_calculation\\\":false,\\\"keywords_group_by\\\":\\\"string\\\",\\\"gpt_enabled\\\":false}}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/mappers\"\n\n\tpayload := strings.NewReader(\"{\\\"key_map\\\":{\\\"item_id\\\":\\\"item_id\\\",\\\"title\\\":\\\"title\\\",\\\"second_title\\\":\\\"string\\\",\\\"third_title\\\":\\\"string\\\",\\\"fourth_title\\\":\\\"string\\\",\\\"availability\\\":\\\"availability\\\",\\\"description\\\":\\\"string\\\",\\\"image_url\\\":\\\"string\\\",\\\"image_url_type\\\":\\\"STR or LIST_STR or LIST_DICT or DICT\\\",\\\"item_url\\\":\\\"string\\\",\\\"price\\\":\\\"price\\\",\\\"categories\\\":[{\\\"name\\\":\\\"category_1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"name\\\":\\\"category_2\\\",\\\"separator\\\":\\\"\\\"}],\\\"flag\\\":[\\\"condition\\\"],\\\"average_rating\\\":\\\"string\\\",\\\"user_ratings_total\\\":\\\"string\\\",\\\"custom\\\":[{\\\"name\\\":\\\"colum3\\\",\\\"data_type\\\":\\\"FLOAT\\\"},{\\\"name\\\":\\\"column4\\\",\\\"data_type\\\":\\\"INT\\\"}],\\\"item_nearby_calculation\\\":false,\\\"keywords_group_by\\\":\\\"string\\\",\\\"gpt_enabled\\\":false}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"key_map\\\":{\\\"item_id\\\":\\\"item_id\\\",\\\"title\\\":\\\"title\\\",\\\"second_title\\\":\\\"string\\\",\\\"third_title\\\":\\\"string\\\",\\\"fourth_title\\\":\\\"string\\\",\\\"availability\\\":\\\"availability\\\",\\\"description\\\":\\\"string\\\",\\\"image_url\\\":\\\"string\\\",\\\"image_url_type\\\":\\\"STR or LIST_STR or LIST_DICT or DICT\\\",\\\"item_url\\\":\\\"string\\\",\\\"price\\\":\\\"price\\\",\\\"categories\\\":[{\\\"name\\\":\\\"category_1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"name\\\":\\\"category_2\\\",\\\"separator\\\":\\\"\\\"}],\\\"flag\\\":[\\\"condition\\\"],\\\"average_rating\\\":\\\"string\\\",\\\"user_ratings_total\\\":\\\"string\\\",\\\"custom\\\":[{\\\"name\\\":\\\"colum3\\\",\\\"data_type\\\":\\\"FLOAT\\\"},{\\\"name\\\":\\\"column4\\\",\\\"data_type\\\":\\\"INT\\\"}],\\\"item_nearby_calculation\\\":false,\\\"keywords_group_by\\\":\\\"string\\\",\\\"gpt_enabled\\\":false}}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/mappers\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/mappers\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"key_map\\\":{\\\"item_id\\\":\\\"item_id\\\",\\\"title\\\":\\\"title\\\",\\\"second_title\\\":\\\"string\\\",\\\"third_title\\\":\\\"string\\\",\\\"fourth_title\\\":\\\"string\\\",\\\"availability\\\":\\\"availability\\\",\\\"description\\\":\\\"string\\\",\\\"image_url\\\":\\\"string\\\",\\\"image_url_type\\\":\\\"STR or LIST_STR or LIST_DICT or DICT\\\",\\\"item_url\\\":\\\"string\\\",\\\"price\\\":\\\"price\\\",\\\"categories\\\":[{\\\"name\\\":\\\"category_1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"name\\\":\\\"category_2\\\",\\\"separator\\\":\\\"\\\"}],\\\"flag\\\":[\\\"condition\\\"],\\\"average_rating\\\":\\\"string\\\",\\\"user_ratings_total\\\":\\\"string\\\",\\\"custom\\\":[{\\\"name\\\":\\\"colum3\\\",\\\"data_type\\\":\\\"FLOAT\\\"},{\\\"name\\\":\\\"column4\\\",\\\"data_type\\\":\\\"INT\\\"}],\\\"item_nearby_calculation\\\":false,\\\"keywords_group_by\\\":\\\"string\\\",\\\"gpt_enabled\\\":false}}\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/mappers\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"key_map\\\":{\\\"item_id\\\":\\\"item_id\\\",\\\"title\\\":\\\"title\\\",\\\"second_title\\\":\\\"string\\\",\\\"third_title\\\":\\\"string\\\",\\\"fourth_title\\\":\\\"string\\\",\\\"availability\\\":\\\"availability\\\",\\\"description\\\":\\\"string\\\",\\\"image_url\\\":\\\"string\\\",\\\"image_url_type\\\":\\\"STR or LIST_STR or LIST_DICT or DICT\\\",\\\"item_url\\\":\\\"string\\\",\\\"price\\\":\\\"price\\\",\\\"categories\\\":[{\\\"name\\\":\\\"category_1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"name\\\":\\\"category_2\\\",\\\"separator\\\":\\\"\\\"}],\\\"flag\\\":[\\\"condition\\\"],\\\"average_rating\\\":\\\"string\\\",\\\"user_ratings_total\\\":\\\"string\\\",\\\"custom\\\":[{\\\"name\\\":\\\"colum3\\\",\\\"data_type\\\":\\\"FLOAT\\\"},{\\\"name\\\":\\\"column4\\\",\\\"data_type\\\":\\\"INT\\\"}],\\\"item_nearby_calculation\\\":false,\\\"keywords_group_by\\\":\\\"string\\\",\\\"gpt_enabled\\\":false}}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = JSON.stringify({\n  \"key_map\": {\n    \"item_id\": \"item_id\",\n    \"title\": \"title\",\n    \"second_title\": \"string\",\n    \"third_title\": \"string\",\n    \"fourth_title\": \"string\",\n    \"availability\": \"availability\",\n    \"description\": \"string\",\n    \"image_url\": \"string\",\n    \"image_url_type\": \"STR or LIST_STR or LIST_DICT or DICT\",\n    \"item_url\": \"string\",\n    \"price\": \"price\",\n    \"categories\": [\n      {\n        \"name\": \"category_1\",\n        \"separator\": \"_\"\n      },\n      {\n        \"name\": \"category_2\",\n        \"separator\": \"\"\n      }\n    ],\n    \"flag\": [\n      \"condition\"\n    ],\n    \"average_rating\": \"string\",\n    \"user_ratings_total\": \"string\",\n    \"custom\": [\n      {\n        \"name\": \"colum3\",\n        \"data_type\": \"FLOAT\"\n      },\n      {\n        \"name\": \"column4\",\n        \"data_type\": \"INT\"\n      }\n    ],\n    \"item_nearby_calculation\": false,\n    \"keywords_group_by\": \"string\",\n    \"gpt_enabled\": false\n  }\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/mappers\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/mappers\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  key_map: {\n    item_id: 'item_id',\n    title: 'title',\n    second_title: 'string',\n    third_title: 'string',\n    fourth_title: 'string',\n    availability: 'availability',\n    description: 'string',\n    image_url: 'string',\n    image_url_type: 'STR or LIST_STR or LIST_DICT or DICT',\n    item_url: 'string',\n    price: 'price',\n    categories: [{name: 'category_1', separator: '_'}, {name: 'category_2', separator: ''}],\n    flag: ['condition'],\n    average_rating: 'string',\n    user_ratings_total: 'string',\n    custom: [{name: 'colum3', data_type: 'FLOAT'}, {name: 'column4', data_type: 'INT'}],\n    item_nearby_calculation: false,\n    keywords_group_by: 'string',\n    gpt_enabled: false\n  }\n}));\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/mappers',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    key_map: {\n      item_id: 'item_id',\n      title: 'title',\n      second_title: 'string',\n      third_title: 'string',\n      fourth_title: 'string',\n      availability: 'availability',\n      description: 'string',\n      image_url: 'string',\n      image_url_type: 'STR or LIST_STR or LIST_DICT or DICT',\n      item_url: 'string',\n      price: 'price',\n      categories: [{name: 'category_1', separator: '_'}, {name: 'category_2', separator: ''}],\n      flag: ['condition'],\n      average_rating: 'string',\n      user_ratings_total: 'string',\n      custom: [{name: 'colum3', data_type: 'FLOAT'}, {name: 'column4', data_type: 'INT'}],\n      item_nearby_calculation: false,\n      keywords_group_by: 'string',\n      gpt_enabled: false\n    }\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/mappers\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"key_map\": {\n    \"item_id\": \"item_id\",\n    \"title\": \"title\",\n    \"second_title\": \"string\",\n    \"third_title\": \"string\",\n    \"fourth_title\": \"string\",\n    \"availability\": \"availability\",\n    \"description\": \"string\",\n    \"image_url\": \"string\",\n    \"image_url_type\": \"STR or LIST_STR or LIST_DICT or DICT\",\n    \"item_url\": \"string\",\n    \"price\": \"price\",\n    \"categories\": [\n      {\n        \"name\": \"category_1\",\n        \"separator\": \"_\"\n      },\n      {\n        \"name\": \"category_2\",\n        \"separator\": \"\"\n      }\n    ],\n    \"flag\": [\n      \"condition\"\n    ],\n    \"average_rating\": \"string\",\n    \"user_ratings_total\": \"string\",\n    \"custom\": [\n      {\n        \"name\": \"colum3\",\n        \"data_type\": \"FLOAT\"\n      },\n      {\n        \"name\": \"column4\",\n        \"data_type\": \"INT\"\n      }\n    ],\n    \"item_nearby_calculation\": false,\n    \"keywords_group_by\": \"string\",\n    \"gpt_enabled\": false\n  }\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"key_map\": @{ @\"item_id\": @\"item_id\", @\"title\": @\"title\", @\"second_title\": @\"string\", @\"third_title\": @\"string\", @\"fourth_title\": @\"string\", @\"availability\": @\"availability\", @\"description\": @\"string\", @\"image_url\": @\"string\", @\"image_url_type\": @\"STR or LIST_STR or LIST_DICT or DICT\", @\"item_url\": @\"string\", @\"price\": @\"price\", @\"categories\": @[ @{ @\"name\": @\"category_1\", @\"separator\": @\"_\" }, @{ @\"name\": @\"category_2\", @\"separator\": @\"\" } ], @\"flag\": @[ @\"condition\" ], @\"average_rating\": @\"string\", @\"user_ratings_total\": @\"string\", @\"custom\": @[ @{ @\"name\": @\"colum3\", @\"data_type\": @\"FLOAT\" }, @{ @\"name\": @\"column4\", @\"data_type\": @\"INT\" } ], @\"item_nearby_calculation\": @NO, @\"keywords_group_by\": @\"string\", @\"gpt_enabled\": @NO } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/mappers\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/mappers\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"key_map\\\":{\\\"item_id\\\":\\\"item_id\\\",\\\"title\\\":\\\"title\\\",\\\"second_title\\\":\\\"string\\\",\\\"third_title\\\":\\\"string\\\",\\\"fourth_title\\\":\\\"string\\\",\\\"availability\\\":\\\"availability\\\",\\\"description\\\":\\\"string\\\",\\\"image_url\\\":\\\"string\\\",\\\"image_url_type\\\":\\\"STR or LIST_STR or LIST_DICT or DICT\\\",\\\"item_url\\\":\\\"string\\\",\\\"price\\\":\\\"price\\\",\\\"categories\\\":[{\\\"name\\\":\\\"category_1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"name\\\":\\\"category_2\\\",\\\"separator\\\":\\\"\\\"}],\\\"flag\\\":[\\\"condition\\\"],\\\"average_rating\\\":\\\"string\\\",\\\"user_ratings_total\\\":\\\"string\\\",\\\"custom\\\":[{\\\"name\\\":\\\"colum3\\\",\\\"data_type\\\":\\\"FLOAT\\\"},{\\\"name\\\":\\\"column4\\\",\\\"data_type\\\":\\\"INT\\\"}],\\\"item_nearby_calculation\\\":false,\\\"keywords_group_by\\\":\\\"string\\\",\\\"gpt_enabled\\\":false}}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/mappers');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"key_map\":{\"item_id\":\"item_id\",\"title\":\"title\",\"second_title\":\"string\",\"third_title\":\"string\",\"fourth_title\":\"string\",\"availability\":\"availability\",\"description\":\"string\",\"image_url\":\"string\",\"image_url_type\":\"STR or LIST_STR or LIST_DICT or DICT\",\"item_url\":\"string\",\"price\":\"price\",\"categories\":[{\"name\":\"category_1\",\"separator\":\"_\"},{\"name\":\"category_2\",\"separator\":\"\"}],\"flag\":[\"condition\"],\"average_rating\":\"string\",\"user_ratings_total\":\"string\",\"custom\":[{\"name\":\"colum3\",\"data_type\":\"FLOAT\"},{\"name\":\"column4\",\"data_type\":\"INT\"}],\"item_nearby_calculation\":false,\"keywords_group_by\":\"string\",\"gpt_enabled\":false}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"key_map\":{\"item_id\":\"item_id\",\"title\":\"title\",\"second_title\":\"string\",\"third_title\":\"string\",\"fourth_title\":\"string\",\"availability\":\"availability\",\"description\":\"string\",\"image_url\":\"string\",\"image_url_type\":\"STR or LIST_STR or LIST_DICT or DICT\",\"item_url\":\"string\",\"price\":\"price\",\"categories\":[{\"name\":\"category_1\",\"separator\":\"_\"},{\"name\":\"category_2\",\"separator\":\"\"}],\"flag\":[\"condition\"],\"average_rating\":\"string\",\"user_ratings_total\":\"string\",\"custom\":[{\"name\":\"colum3\",\"data_type\":\"FLOAT\"},{\"name\":\"column4\",\"data_type\":\"INT\"}],\"item_nearby_calculation\":false,\"keywords_group_by\":\"string\",\"gpt_enabled\":false}}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/mappers');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"key_map\\\":{\\\"item_id\\\":\\\"item_id\\\",\\\"title\\\":\\\"title\\\",\\\"second_title\\\":\\\"string\\\",\\\"third_title\\\":\\\"string\\\",\\\"fourth_title\\\":\\\"string\\\",\\\"availability\\\":\\\"availability\\\",\\\"description\\\":\\\"string\\\",\\\"image_url\\\":\\\"string\\\",\\\"image_url_type\\\":\\\"STR or LIST_STR or LIST_DICT or DICT\\\",\\\"item_url\\\":\\\"string\\\",\\\"price\\\":\\\"price\\\",\\\"categories\\\":[{\\\"name\\\":\\\"category_1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"name\\\":\\\"category_2\\\",\\\"separator\\\":\\\"\\\"}],\\\"flag\\\":[\\\"condition\\\"],\\\"average_rating\\\":\\\"string\\\",\\\"user_ratings_total\\\":\\\"string\\\",\\\"custom\\\":[{\\\"name\\\":\\\"colum3\\\",\\\"data_type\\\":\\\"FLOAT\\\"},{\\\"name\\\":\\\"column4\\\",\\\"data_type\\\":\\\"INT\\\"}],\\\"item_nearby_calculation\\\":false,\\\"keywords_group_by\\\":\\\"string\\\",\\\"gpt_enabled\\\":false}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/mappers\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/mappers\"\n\npayload = {\"key_map\": {\n        \"item_id\": \"item_id\",\n        \"title\": \"title\",\n        \"second_title\": \"string\",\n        \"third_title\": \"string\",\n        \"fourth_title\": \"string\",\n        \"availability\": \"availability\",\n        \"description\": \"string\",\n        \"image_url\": \"string\",\n        \"image_url_type\": \"STR or LIST_STR or LIST_DICT or DICT\",\n        \"item_url\": \"string\",\n        \"price\": \"price\",\n        \"categories\": [\n            {\n                \"name\": \"category_1\",\n                \"separator\": \"_\"\n            },\n            {\n                \"name\": \"category_2\",\n                \"separator\": \"\"\n            }\n        ],\n        \"flag\": [\"condition\"],\n        \"average_rating\": \"string\",\n        \"user_ratings_total\": \"string\",\n        \"custom\": [\n            {\n                \"name\": \"colum3\",\n                \"data_type\": \"FLOAT\"\n            },\n            {\n                \"name\": \"column4\",\n                \"data_type\": \"INT\"\n            }\n        ],\n        \"item_nearby_calculation\": False,\n        \"keywords_group_by\": \"string\",\n        \"gpt_enabled\": False\n    }}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/mappers\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"key_map\\\":{\\\"item_id\\\":\\\"item_id\\\",\\\"title\\\":\\\"title\\\",\\\"second_title\\\":\\\"string\\\",\\\"third_title\\\":\\\"string\\\",\\\"fourth_title\\\":\\\"string\\\",\\\"availability\\\":\\\"availability\\\",\\\"description\\\":\\\"string\\\",\\\"image_url\\\":\\\"string\\\",\\\"image_url_type\\\":\\\"STR or LIST_STR or LIST_DICT or DICT\\\",\\\"item_url\\\":\\\"string\\\",\\\"price\\\":\\\"price\\\",\\\"categories\\\":[{\\\"name\\\":\\\"category_1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"name\\\":\\\"category_2\\\",\\\"separator\\\":\\\"\\\"}],\\\"flag\\\":[\\\"condition\\\"],\\\"average_rating\\\":\\\"string\\\",\\\"user_ratings_total\\\":\\\"string\\\",\\\"custom\\\":[{\\\"name\\\":\\\"colum3\\\",\\\"data_type\\\":\\\"FLOAT\\\"},{\\\"name\\\":\\\"column4\\\",\\\"data_type\\\":\\\"INT\\\"}],\\\"item_nearby_calculation\\\":false,\\\"keywords_group_by\\\":\\\"string\\\",\\\"gpt_enabled\\\":false}}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/mappers \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"key_map\":{\"item_id\":\"item_id\",\"title\":\"title\",\"second_title\":\"string\",\"third_title\":\"string\",\"fourth_title\":\"string\",\"availability\":\"availability\",\"description\":\"string\",\"image_url\":\"string\",\"image_url_type\":\"STR or LIST_STR or LIST_DICT or DICT\",\"item_url\":\"string\",\"price\":\"price\",\"categories\":[{\"name\":\"category_1\",\"separator\":\"_\"},{\"name\":\"category_2\",\"separator\":\"\"}],\"flag\":[\"condition\"],\"average_rating\":\"string\",\"user_ratings_total\":\"string\",\"custom\":[{\"name\":\"colum3\",\"data_type\":\"FLOAT\"},{\"name\":\"column4\",\"data_type\":\"INT\"}],\"item_nearby_calculation\":false,\"keywords_group_by\":\"string\",\"gpt_enabled\":false}}'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\"key_map\": [\n    \"item_id\": \"item_id\",\n    \"title\": \"title\",\n    \"second_title\": \"string\",\n    \"third_title\": \"string\",\n    \"fourth_title\": \"string\",\n    \"availability\": \"availability\",\n    \"description\": \"string\",\n    \"image_url\": \"string\",\n    \"image_url_type\": \"STR or LIST_STR or LIST_DICT or DICT\",\n    \"item_url\": \"string\",\n    \"price\": \"price\",\n    \"categories\": [\n      [\n        \"name\": \"category_1\",\n        \"separator\": \"_\"\n      ],\n      [\n        \"name\": \"category_2\",\n        \"separator\": \"\"\n      ]\n    ],\n    \"flag\": [\"condition\"],\n    \"average_rating\": \"string\",\n    \"user_ratings_total\": \"string\",\n    \"custom\": [\n      [\n        \"name\": \"colum3\",\n        \"data_type\": \"FLOAT\"\n      ],\n      [\n        \"name\": \"column4\",\n        \"data_type\": \"INT\"\n      ]\n    ],\n    \"item_nearby_calculation\": false,\n    \"keywords_group_by\": \"string\",\n    \"gpt_enabled\": false\n  ]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/mappers\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/keys": {
            "get": {
                "tags": [
                    "Catalog Integration"
                ],
                "summary": "Get keys",
                "description": "Get your data source keys.",
                "operationId": "get_keys_v1_keys_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/keys\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/keys\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/keys\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/keys\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/keys\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/keys\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/keys\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/keys\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/keys',\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/keys\");\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/keys\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/keys\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/keys');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/keys');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/keys\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/keys\"\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/keys\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request GET \\\n  --url https://api.recommender.gigalogy.com/v1/keys \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/keys\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            },
            "put": {
                "tags": [
                    "Catalog Integration"
                ],
                "summary": "Update keys",
                "description": "This endpoint updates(add / remove / re-order) your data source keys. It takes\nlist of key as required parameter.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| keys | List[str] | str | List of column names with the same order as your data in CSV file. |",
                "operationId": "put_keys_v1_keys_put",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/KeysSchema"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/keys\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"keys\\\":[\\\"string\\\"]}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Put,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/keys\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"keys\\\":[\\\"string\\\"]}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/keys\"\n\n\tpayload := strings.NewReader(\"{\\\"keys\\\":[\\\"string\\\"]}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"keys\\\":[\\\"string\\\"]}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/keys\")\n  .put(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.put(\"https://api.recommender.gigalogy.com/v1/keys\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"keys\\\":[\\\"string\\\"]}\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/keys\",\n  \"method\": \"PUT\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"keys\\\":[\\\"string\\\"]}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = JSON.stringify({\n  \"keys\": [\n    \"string\"\n  ]\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PUT\", \"https://api.recommender.gigalogy.com/v1/keys\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/keys\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({keys: ['string']}));\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.recommender.gigalogy.com/v1/keys',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {keys: ['string']},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"PUT\", \"https://api.recommender.gigalogy.com/v1/keys\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"keys\": [\n    \"string\"\n  ]\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"keys\": @[ @\"string\" ] };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/keys\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PUT\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/keys\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"keys\\\":[\\\"string\\\"]}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/keys');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"keys\":[\"string\"]}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"keys\":[\"string\"]}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/keys');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"keys\\\":[\\\"string\\\"]}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"PUT\", \"/v1/keys\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/keys\"\n\npayload = {\"keys\": [\"string\"]}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"PUT\", url, json=payload, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/keys\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"keys\\\":[\\\"string\\\"]}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request PUT \\\n  --url https://api.recommender.gigalogy.com/v1/keys \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"keys\":[\"string\"]}'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\"keys\": [\"string\"]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/keys\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"PUT\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            },
            "post": {
                "tags": [
                    "Catalog Integration"
                ],
                "summary": "Save column / key name with the same order as your data in the source file",
                "description": "This endpoint saves column / key name with the same order as your data in the\nsource file. It takes list of keys as required parameter.\nThis endpoint is mandatory when you use CSV file as your data source and your CSV file\ndoes not contain headers. Make sure to enter the column names with the same\norder as your data in CSV file.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| keys | List[str] | str | List of column names with the same order as your data in CSV file. |",
                "operationId": "post_keys_v1_keys_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/KeysSchema"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/keys\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"keys\\\":[\\\"string\\\"]}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/keys\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"keys\\\":[\\\"string\\\"]}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/keys\"\n\n\tpayload := strings.NewReader(\"{\\\"keys\\\":[\\\"string\\\"]}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"keys\\\":[\\\"string\\\"]}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/keys\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/keys\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"keys\\\":[\\\"string\\\"]}\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/keys\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"keys\\\":[\\\"string\\\"]}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = JSON.stringify({\n  \"keys\": [\n    \"string\"\n  ]\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/keys\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/keys\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({keys: ['string']}));\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/keys',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {keys: ['string']},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/keys\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"keys\": [\n    \"string\"\n  ]\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"keys\": @[ @\"string\" ] };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/keys\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/keys\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"keys\\\":[\\\"string\\\"]}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/keys');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"keys\":[\"string\"]}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"keys\":[\"string\"]}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/keys');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"keys\\\":[\\\"string\\\"]}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/keys\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/keys\"\n\npayload = {\"keys\": [\"string\"]}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/keys\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"keys\\\":[\\\"string\\\"]}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/keys \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"keys\":[\"string\"]}'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\"keys\": [\"string\"]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/keys\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/items/browse/mapper": {
            "get": {
                "tags": [
                    "Historical User Data Collection"
                ],
                "summary": "Get browse mapper",
                "description": "Get the mapped keys for browsed items between your data source and our recommender system.",
                "operationId": "get_browse_mapper_v1_items_browse_mapper_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/browse/mapper\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/browse/mapper\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/browse/mapper\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/browse/mapper\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/items/browse/mapper\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/browse/mapper\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/items/browse/mapper\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/browse/mapper\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/items/browse/mapper',\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/items/browse/mapper\");\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/browse/mapper\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/browse/mapper\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/browse/mapper');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/browse/mapper');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/items/browse/mapper\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/browse/mapper\"\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/browse/mapper\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request GET \\\n  --url https://api.recommender.gigalogy.com/v1/items/browse/mapper \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/browse/mapper\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            },
            "put": {
                "tags": [
                    "Historical User Data Collection"
                ],
                "summary": "Update browse mapper",
                "description": "This endpoint updates the browse mapped keys. Please checkout the schema from the\nrequest body section for details about the key type and supported values.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| user_id | str | str | user_id is the id of unique user. choose the parameter from your data source that you want to be the id of user. |\n| member_id | Optional[str] | str | member_id is the id of logged-in user. choose the parameter from your data source that you want to be the id of logged-in user. |\n| item_id | str | str | item_id is the unit of recommended items. choose the parameter from your data source that you want to be the unit of recommendation. |\n| date | str | date | Represents product / item browsing session. |",
                "operationId": "put_browse_mapper_v1_items_browse_mapper_put",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MapperBrowseSchema"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/browse/mapper\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"browse_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"date\\\":\\\"browsed_at\\\"}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Put,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/browse/mapper\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"browse_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"date\\\":\\\"browsed_at\\\"}}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/browse/mapper\"\n\n\tpayload := strings.NewReader(\"{\\\"browse_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"date\\\":\\\"browsed_at\\\"}}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"browse_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"date\\\":\\\"browsed_at\\\"}}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/browse/mapper\")\n  .put(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.put(\"https://api.recommender.gigalogy.com/v1/items/browse/mapper\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"browse_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"date\\\":\\\"browsed_at\\\"}}\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/browse/mapper\",\n  \"method\": \"PUT\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"browse_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"date\\\":\\\"browsed_at\\\"}}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = JSON.stringify({\n  \"browse_key_map\": {\n    \"user_id\": \"user_id\",\n    \"member_id\": \"member_id\",\n    \"item_id\": \"item_id\",\n    \"date\": \"browsed_at\"\n  }\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PUT\", \"https://api.recommender.gigalogy.com/v1/items/browse/mapper\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/browse/mapper\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  browse_key_map: {\n    user_id: 'user_id',\n    member_id: 'member_id',\n    item_id: 'item_id',\n    date: 'browsed_at'\n  }\n}));\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.recommender.gigalogy.com/v1/items/browse/mapper',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    browse_key_map: {\n      user_id: 'user_id',\n      member_id: 'member_id',\n      item_id: 'item_id',\n      date: 'browsed_at'\n    }\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"PUT\", \"https://api.recommender.gigalogy.com/v1/items/browse/mapper\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"browse_key_map\": {\n    \"user_id\": \"user_id\",\n    \"member_id\": \"member_id\",\n    \"item_id\": \"item_id\",\n    \"date\": \"browsed_at\"\n  }\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"browse_key_map\": @{ @\"user_id\": @\"user_id\", @\"member_id\": @\"member_id\", @\"item_id\": @\"item_id\", @\"date\": @\"browsed_at\" } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/browse/mapper\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PUT\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/browse/mapper\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"browse_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"date\\\":\\\"browsed_at\\\"}}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/browse/mapper');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"browse_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"date\":\"browsed_at\"}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"browse_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"date\":\"browsed_at\"}}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/browse/mapper');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"browse_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"date\\\":\\\"browsed_at\\\"}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"PUT\", \"/v1/items/browse/mapper\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/browse/mapper\"\n\npayload = {\"browse_key_map\": {\n        \"user_id\": \"user_id\",\n        \"member_id\": \"member_id\",\n        \"item_id\": \"item_id\",\n        \"date\": \"browsed_at\"\n    }}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"PUT\", url, json=payload, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/browse/mapper\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"browse_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"date\\\":\\\"browsed_at\\\"}}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request PUT \\\n  --url https://api.recommender.gigalogy.com/v1/items/browse/mapper \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"browse_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"date\":\"browsed_at\"}}'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\"browse_key_map\": [\n    \"user_id\": \"user_id\",\n    \"member_id\": \"member_id\",\n    \"item_id\": \"item_id\",\n    \"date\": \"browsed_at\"\n  ]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/browse/mapper\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"PUT\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            },
            "post": {
                "tags": [
                    "Historical User Data Collection"
                ],
                "summary": "Map data source keys with recommender browse keys",
                "description": "This endpoint map data source keys with our recommender browse keys. This step is\ncompulsory if you want to upload browse data from CSV file. Please checkout the\nschema from the request body section for details about the key type and supported values.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| user_id | str | str | user_id is the id of logged out unique user. choose the parameter from your data source that you want to be the id of logged-out user. |\n| member_id | Optional[str] | str | member_id is the id of logged-in user. choose the parameter from your data source that you want to be the id of logged-in user. |\n| item_id | str | str | item_id is the unit of recommended items. choose the parameter from your data source that you want to be the unit of recommendation. |\n| date | str | date | Represents product / item browsing session. |",
                "operationId": "post_browse_mapper_v1_items_browse_mapper_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MapperBrowseSchema"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/browse/mapper\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"browse_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"date\\\":\\\"browsed_at\\\"}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/browse/mapper\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"browse_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"date\\\":\\\"browsed_at\\\"}}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/browse/mapper\"\n\n\tpayload := strings.NewReader(\"{\\\"browse_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"date\\\":\\\"browsed_at\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"browse_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"date\\\":\\\"browsed_at\\\"}}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/browse/mapper\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/items/browse/mapper\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"browse_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"date\\\":\\\"browsed_at\\\"}}\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/browse/mapper\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"browse_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"date\\\":\\\"browsed_at\\\"}}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = JSON.stringify({\n  \"browse_key_map\": {\n    \"user_id\": \"user_id\",\n    \"member_id\": \"member_id\",\n    \"item_id\": \"item_id\",\n    \"date\": \"browsed_at\"\n  }\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/browse/mapper\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/browse/mapper\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  browse_key_map: {\n    user_id: 'user_id',\n    member_id: 'member_id',\n    item_id: 'item_id',\n    date: 'browsed_at'\n  }\n}));\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/items/browse/mapper',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    browse_key_map: {\n      user_id: 'user_id',\n      member_id: 'member_id',\n      item_id: 'item_id',\n      date: 'browsed_at'\n    }\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/browse/mapper\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"browse_key_map\": {\n    \"user_id\": \"user_id\",\n    \"member_id\": \"member_id\",\n    \"item_id\": \"item_id\",\n    \"date\": \"browsed_at\"\n  }\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"browse_key_map\": @{ @\"user_id\": @\"user_id\", @\"member_id\": @\"member_id\", @\"item_id\": @\"item_id\", @\"date\": @\"browsed_at\" } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/browse/mapper\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/browse/mapper\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"browse_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"date\\\":\\\"browsed_at\\\"}}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/browse/mapper');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"browse_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"date\":\"browsed_at\"}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"browse_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"date\":\"browsed_at\"}}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/browse/mapper');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"browse_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"date\\\":\\\"browsed_at\\\"}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/items/browse/mapper\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/browse/mapper\"\n\npayload = {\"browse_key_map\": {\n        \"user_id\": \"user_id\",\n        \"member_id\": \"member_id\",\n        \"item_id\": \"item_id\",\n        \"date\": \"browsed_at\"\n    }}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/browse/mapper\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"browse_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"date\\\":\\\"browsed_at\\\"}}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/items/browse/mapper \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"browse_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"date\":\"browsed_at\"}}'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\"browse_key_map\": [\n    \"user_id\": \"user_id\",\n    \"member_id\": \"member_id\",\n    \"item_id\": \"item_id\",\n    \"date\": \"browsed_at\"\n  ]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/browse/mapper\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/items/purchase/mapper": {
            "get": {
                "tags": [
                    "Historical User Data Collection"
                ],
                "summary": "Get purchase mapper",
                "description": "Get the mapped keys for purchased items between your data source and our recommender system.",
                "operationId": "get_purchase_mapper_v1_items_purchase_mapper_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/purchase/mapper\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/items/purchase/mapper',\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\");\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/purchase/mapper');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/purchase/mapper');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/items/purchase/mapper\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\"\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request GET \\\n  --url https://api.recommender.gigalogy.com/v1/items/purchase/mapper \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            },
            "put": {
                "tags": [
                    "Historical User Data Collection"
                ],
                "summary": "Update purchase mapper",
                "description": "This endpoint updates the purchase mapped keys. Please checkout the schema from the\nrequest body section for details about the key type and supported values.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| user_id | str | str | user_id is the id of unique user. choose the parameter from your data source that you want to be the id of user. |\n| member_id | Optional[str] | str | member_id is the id of logged-in user. choose the parameter from your data source that you want to be the id of logged-in user. |\n| item_id | str | str | item_id is the unit of recommended items. choose the parameter from your data source that you want to be the unit of recommendation. |\n| price | str | float | Represents your product / item price. |\n| quantity | str | int | Represents number of purchased product / item. |\n| date | str | date | Represents product / item purchased time. |",
                "operationId": "put_purchase_mapper_v1_items_purchase_mapper_put",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MapperPurchaseSchema"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"purchase_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"price\\\":\\\"price\\\",\\\"quantity\\\":\\\"quantity\\\",\\\"date\\\":\\\"purchased_at\\\"}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Put,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"purchase_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"price\\\":\\\"price\\\",\\\"quantity\\\":\\\"quantity\\\",\\\"date\\\":\\\"purchased_at\\\"}}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\"\n\n\tpayload := strings.NewReader(\"{\\\"purchase_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"price\\\":\\\"price\\\",\\\"quantity\\\":\\\"quantity\\\",\\\"date\\\":\\\"purchased_at\\\"}}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"purchase_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"price\\\":\\\"price\\\",\\\"quantity\\\":\\\"quantity\\\",\\\"date\\\":\\\"purchased_at\\\"}}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\")\n  .put(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.put(\"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"purchase_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"price\\\":\\\"price\\\",\\\"quantity\\\":\\\"quantity\\\",\\\"date\\\":\\\"purchased_at\\\"}}\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\",\n  \"method\": \"PUT\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"purchase_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"price\\\":\\\"price\\\",\\\"quantity\\\":\\\"quantity\\\",\\\"date\\\":\\\"purchased_at\\\"}}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = JSON.stringify({\n  \"purchase_key_map\": {\n    \"user_id\": \"user_id\",\n    \"member_id\": \"member_id\",\n    \"item_id\": \"item_id\",\n    \"price\": \"price\",\n    \"quantity\": \"quantity\",\n    \"date\": \"purchased_at\"\n  }\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PUT\", \"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/purchase/mapper\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  purchase_key_map: {\n    user_id: 'user_id',\n    member_id: 'member_id',\n    item_id: 'item_id',\n    price: 'price',\n    quantity: 'quantity',\n    date: 'purchased_at'\n  }\n}));\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.recommender.gigalogy.com/v1/items/purchase/mapper',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    purchase_key_map: {\n      user_id: 'user_id',\n      member_id: 'member_id',\n      item_id: 'item_id',\n      price: 'price',\n      quantity: 'quantity',\n      date: 'purchased_at'\n    }\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"PUT\", \"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"purchase_key_map\": {\n    \"user_id\": \"user_id\",\n    \"member_id\": \"member_id\",\n    \"item_id\": \"item_id\",\n    \"price\": \"price\",\n    \"quantity\": \"quantity\",\n    \"date\": \"purchased_at\"\n  }\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"purchase_key_map\": @{ @\"user_id\": @\"user_id\", @\"member_id\": @\"member_id\", @\"item_id\": @\"item_id\", @\"price\": @\"price\", @\"quantity\": @\"quantity\", @\"date\": @\"purchased_at\" } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PUT\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"purchase_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"price\\\":\\\"price\\\",\\\"quantity\\\":\\\"quantity\\\",\\\"date\\\":\\\"purchased_at\\\"}}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/purchase/mapper');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"purchase_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"price\":\"price\",\"quantity\":\"quantity\",\"date\":\"purchased_at\"}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"purchase_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"price\":\"price\",\"quantity\":\"quantity\",\"date\":\"purchased_at\"}}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/purchase/mapper');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"purchase_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"price\\\":\\\"price\\\",\\\"quantity\\\":\\\"quantity\\\",\\\"date\\\":\\\"purchased_at\\\"}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"PUT\", \"/v1/items/purchase/mapper\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\"\n\npayload = {\"purchase_key_map\": {\n        \"user_id\": \"user_id\",\n        \"member_id\": \"member_id\",\n        \"item_id\": \"item_id\",\n        \"price\": \"price\",\n        \"quantity\": \"quantity\",\n        \"date\": \"purchased_at\"\n    }}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"PUT\", url, json=payload, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"purchase_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"price\\\":\\\"price\\\",\\\"quantity\\\":\\\"quantity\\\",\\\"date\\\":\\\"purchased_at\\\"}}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request PUT \\\n  --url https://api.recommender.gigalogy.com/v1/items/purchase/mapper \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"purchase_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"price\":\"price\",\"quantity\":\"quantity\",\"date\":\"purchased_at\"}}'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\"purchase_key_map\": [\n    \"user_id\": \"user_id\",\n    \"member_id\": \"member_id\",\n    \"item_id\": \"item_id\",\n    \"price\": \"price\",\n    \"quantity\": \"quantity\",\n    \"date\": \"purchased_at\"\n  ]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"PUT\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            },
            "post": {
                "tags": [
                    "Historical User Data Collection"
                ],
                "summary": "Map data source keys with recommender purchase keys",
                "description": "This endpoint map data source keys with our recommender browse keys. This step is\ncompulsory if you want to upload purchase data from CSV file. Please checkout the\nschema from the request body section for details about the key type and supported values.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| user_id | str | str | user_id is the id of unique user. choose the parameter from your data source that you want to be the id of user. |\n| member_id | Optional[str] | str | member_id is the id of logged-in user. choose the parameter from your data source that you want to be the id of logged-in user. |\n| item_id | str | str | item_id is the unit of recommended items. choose the parameter from your data source that you want to be the unit of recommendation. |\n| price | str | float | Represents your product / item price. |\n| quantity | str | int | Represents number of purchased product / item. |\n| date | str | date | Represents product / item purchased time. |",
                "operationId": "post_purchase_mapper_v1_items_purchase_mapper_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MapperPurchaseSchema"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"purchase_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"price\\\":\\\"price\\\",\\\"quantity\\\":\\\"quantity\\\",\\\"date\\\":\\\"purchased_at\\\"}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"purchase_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"price\\\":\\\"price\\\",\\\"quantity\\\":\\\"quantity\\\",\\\"date\\\":\\\"purchased_at\\\"}}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\"\n\n\tpayload := strings.NewReader(\"{\\\"purchase_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"price\\\":\\\"price\\\",\\\"quantity\\\":\\\"quantity\\\",\\\"date\\\":\\\"purchased_at\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"purchase_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"price\\\":\\\"price\\\",\\\"quantity\\\":\\\"quantity\\\",\\\"date\\\":\\\"purchased_at\\\"}}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"purchase_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"price\\\":\\\"price\\\",\\\"quantity\\\":\\\"quantity\\\",\\\"date\\\":\\\"purchased_at\\\"}}\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"purchase_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"price\\\":\\\"price\\\",\\\"quantity\\\":\\\"quantity\\\",\\\"date\\\":\\\"purchased_at\\\"}}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = JSON.stringify({\n  \"purchase_key_map\": {\n    \"user_id\": \"user_id\",\n    \"member_id\": \"member_id\",\n    \"item_id\": \"item_id\",\n    \"price\": \"price\",\n    \"quantity\": \"quantity\",\n    \"date\": \"purchased_at\"\n  }\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/purchase/mapper\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  purchase_key_map: {\n    user_id: 'user_id',\n    member_id: 'member_id',\n    item_id: 'item_id',\n    price: 'price',\n    quantity: 'quantity',\n    date: 'purchased_at'\n  }\n}));\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/items/purchase/mapper',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    purchase_key_map: {\n      user_id: 'user_id',\n      member_id: 'member_id',\n      item_id: 'item_id',\n      price: 'price',\n      quantity: 'quantity',\n      date: 'purchased_at'\n    }\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"purchase_key_map\": {\n    \"user_id\": \"user_id\",\n    \"member_id\": \"member_id\",\n    \"item_id\": \"item_id\",\n    \"price\": \"price\",\n    \"quantity\": \"quantity\",\n    \"date\": \"purchased_at\"\n  }\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"purchase_key_map\": @{ @\"user_id\": @\"user_id\", @\"member_id\": @\"member_id\", @\"item_id\": @\"item_id\", @\"price\": @\"price\", @\"quantity\": @\"quantity\", @\"date\": @\"purchased_at\" } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"purchase_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"price\\\":\\\"price\\\",\\\"quantity\\\":\\\"quantity\\\",\\\"date\\\":\\\"purchased_at\\\"}}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/purchase/mapper');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"purchase_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"price\":\"price\",\"quantity\":\"quantity\",\"date\":\"purchased_at\"}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"purchase_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"price\":\"price\",\"quantity\":\"quantity\",\"date\":\"purchased_at\"}}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/purchase/mapper');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"purchase_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"price\\\":\\\"price\\\",\\\"quantity\\\":\\\"quantity\\\",\\\"date\\\":\\\"purchased_at\\\"}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/items/purchase/mapper\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\"\n\npayload = {\"purchase_key_map\": {\n        \"user_id\": \"user_id\",\n        \"member_id\": \"member_id\",\n        \"item_id\": \"item_id\",\n        \"price\": \"price\",\n        \"quantity\": \"quantity\",\n        \"date\": \"purchased_at\"\n    }}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"purchase_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"price\\\":\\\"price\\\",\\\"quantity\\\":\\\"quantity\\\",\\\"date\\\":\\\"purchased_at\\\"}}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/items/purchase/mapper \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"purchase_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"price\":\"price\",\"quantity\":\"quantity\",\"date\":\"purchased_at\"}}'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\"purchase_key_map\": [\n    \"user_id\": \"user_id\",\n    \"member_id\": \"member_id\",\n    \"item_id\": \"item_id\",\n    \"price\": \"price\",\n    \"quantity\": \"quantity\",\n    \"date\": \"purchased_at\"\n  ]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/items/rating/mapper": {
            "get": {
                "tags": [
                    "Historical User Data Collection"
                ],
                "summary": "Get rating mapper",
                "description": "Get the mapped keys for rated items between your data source and our recommender system.",
                "operationId": "get_rating_mapper_v1_items_rating_mapper_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/rating/mapper\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/rating/mapper\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/rating/mapper\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/rating/mapper\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/items/rating/mapper\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/rating/mapper\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/items/rating/mapper\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/rating/mapper\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/items/rating/mapper',\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/items/rating/mapper\");\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/rating/mapper\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/rating/mapper\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/rating/mapper');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/rating/mapper');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/items/rating/mapper\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/rating/mapper\"\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/rating/mapper\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request GET \\\n  --url https://api.recommender.gigalogy.com/v1/items/rating/mapper \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/rating/mapper\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            },
            "put": {
                "tags": [
                    "Historical User Data Collection"
                ],
                "summary": "Update rating mapper",
                "description": "This endpoint updates the rating mapped keys. Please checkout the schema from the\nrequest body section for details about the key type and supported values.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| user_id | str | str | user_id is the id of unique user. choose the parameter from your data source that you want to be the id of user. |\n| member_id | Optional[str] | str | member_id is the id of logged-in user. choose the parameter from your data source that you want to be the id of logged-in user. |\n| item_id | str | str | item_id is the unit of recommended items. choose the parameter from your data source that you want to be the unit of recommendation. |\n| rating | str | str | Represents rating given by user for specific product / item. choose the parameter from your data source that you want to be the rating key. |\n| date | str | date | Represents the time when a rating is given for specific product / item. |",
                "operationId": "put_rating_mapper_v1_items_rating_mapper_put",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MapperRatingSchema"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/rating/mapper\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"rating_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"rating\\\":\\\"rating\\\",\\\"date\\\":\\\"rated_at\\\"}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Put,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/rating/mapper\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"rating_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"rating\\\":\\\"rating\\\",\\\"date\\\":\\\"rated_at\\\"}}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/rating/mapper\"\n\n\tpayload := strings.NewReader(\"{\\\"rating_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"rating\\\":\\\"rating\\\",\\\"date\\\":\\\"rated_at\\\"}}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"rating_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"rating\\\":\\\"rating\\\",\\\"date\\\":\\\"rated_at\\\"}}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/rating/mapper\")\n  .put(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.put(\"https://api.recommender.gigalogy.com/v1/items/rating/mapper\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"rating_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"rating\\\":\\\"rating\\\",\\\"date\\\":\\\"rated_at\\\"}}\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/rating/mapper\",\n  \"method\": \"PUT\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"rating_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"rating\\\":\\\"rating\\\",\\\"date\\\":\\\"rated_at\\\"}}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = JSON.stringify({\n  \"rating_key_map\": {\n    \"user_id\": \"user_id\",\n    \"member_id\": \"member_id\",\n    \"item_id\": \"item_id\",\n    \"rating\": \"rating\",\n    \"date\": \"rated_at\"\n  }\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PUT\", \"https://api.recommender.gigalogy.com/v1/items/rating/mapper\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/rating/mapper\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  rating_key_map: {\n    user_id: 'user_id',\n    member_id: 'member_id',\n    item_id: 'item_id',\n    rating: 'rating',\n    date: 'rated_at'\n  }\n}));\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.recommender.gigalogy.com/v1/items/rating/mapper',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    rating_key_map: {\n      user_id: 'user_id',\n      member_id: 'member_id',\n      item_id: 'item_id',\n      rating: 'rating',\n      date: 'rated_at'\n    }\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"PUT\", \"https://api.recommender.gigalogy.com/v1/items/rating/mapper\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"rating_key_map\": {\n    \"user_id\": \"user_id\",\n    \"member_id\": \"member_id\",\n    \"item_id\": \"item_id\",\n    \"rating\": \"rating\",\n    \"date\": \"rated_at\"\n  }\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"rating_key_map\": @{ @\"user_id\": @\"user_id\", @\"member_id\": @\"member_id\", @\"item_id\": @\"item_id\", @\"rating\": @\"rating\", @\"date\": @\"rated_at\" } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/rating/mapper\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PUT\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/rating/mapper\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"rating_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"rating\\\":\\\"rating\\\",\\\"date\\\":\\\"rated_at\\\"}}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/rating/mapper');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"rating_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"rating\":\"rating\",\"date\":\"rated_at\"}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"rating_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"rating\":\"rating\",\"date\":\"rated_at\"}}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/rating/mapper');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"rating_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"rating\\\":\\\"rating\\\",\\\"date\\\":\\\"rated_at\\\"}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"PUT\", \"/v1/items/rating/mapper\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/rating/mapper\"\n\npayload = {\"rating_key_map\": {\n        \"user_id\": \"user_id\",\n        \"member_id\": \"member_id\",\n        \"item_id\": \"item_id\",\n        \"rating\": \"rating\",\n        \"date\": \"rated_at\"\n    }}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"PUT\", url, json=payload, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/rating/mapper\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"rating_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"rating\\\":\\\"rating\\\",\\\"date\\\":\\\"rated_at\\\"}}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request PUT \\\n  --url https://api.recommender.gigalogy.com/v1/items/rating/mapper \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"rating_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"rating\":\"rating\",\"date\":\"rated_at\"}}'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\"rating_key_map\": [\n    \"user_id\": \"user_id\",\n    \"member_id\": \"member_id\",\n    \"item_id\": \"item_id\",\n    \"rating\": \"rating\",\n    \"date\": \"rated_at\"\n  ]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/rating/mapper\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"PUT\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            },
            "post": {
                "tags": [
                    "Historical User Data Collection"
                ],
                "summary": "Map data source keys with recommender rating keys",
                "description": "This endpoint map data source keys with our recommender rating keys. This step is\ncompulsory if you want to upload rating data from CSV file. Please checkout the\nschema from the request body section for details about the key type and supported values.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| user_id | str | str | user_id is the id of unique user. choose the parameter from your data source that you want to be the id of user. |\n| member_id | Optional[str] | str | member_id is the id of logged-in user. choose the parameter from your data source that you want to be the id of logged-in user. |\n| item_id | str | str | item_id is the unit of recommended items. choose the parameter from your data source that you want to be the unit of recommendation. |\n| rating | str | str | Represents rating given by user for specific product / item. choose the parameter from your data source that you want to be the rating key. |\n| date | str | date | Represents the time when a rating is given for specific product / item. |",
                "operationId": "post_rating_mapper_v1_items_rating_mapper_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MapperRatingSchema"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/rating/mapper\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"rating_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"rating\\\":\\\"rating\\\",\\\"date\\\":\\\"rated_at\\\"}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/rating/mapper\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"rating_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"rating\\\":\\\"rating\\\",\\\"date\\\":\\\"rated_at\\\"}}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/rating/mapper\"\n\n\tpayload := strings.NewReader(\"{\\\"rating_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"rating\\\":\\\"rating\\\",\\\"date\\\":\\\"rated_at\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"rating_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"rating\\\":\\\"rating\\\",\\\"date\\\":\\\"rated_at\\\"}}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/rating/mapper\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/items/rating/mapper\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"rating_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"rating\\\":\\\"rating\\\",\\\"date\\\":\\\"rated_at\\\"}}\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/rating/mapper\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"rating_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"rating\\\":\\\"rating\\\",\\\"date\\\":\\\"rated_at\\\"}}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = JSON.stringify({\n  \"rating_key_map\": {\n    \"user_id\": \"user_id\",\n    \"member_id\": \"member_id\",\n    \"item_id\": \"item_id\",\n    \"rating\": \"rating\",\n    \"date\": \"rated_at\"\n  }\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/rating/mapper\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/rating/mapper\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  rating_key_map: {\n    user_id: 'user_id',\n    member_id: 'member_id',\n    item_id: 'item_id',\n    rating: 'rating',\n    date: 'rated_at'\n  }\n}));\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/items/rating/mapper',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    rating_key_map: {\n      user_id: 'user_id',\n      member_id: 'member_id',\n      item_id: 'item_id',\n      rating: 'rating',\n      date: 'rated_at'\n    }\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/rating/mapper\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"rating_key_map\": {\n    \"user_id\": \"user_id\",\n    \"member_id\": \"member_id\",\n    \"item_id\": \"item_id\",\n    \"rating\": \"rating\",\n    \"date\": \"rated_at\"\n  }\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"rating_key_map\": @{ @\"user_id\": @\"user_id\", @\"member_id\": @\"member_id\", @\"item_id\": @\"item_id\", @\"rating\": @\"rating\", @\"date\": @\"rated_at\" } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/rating/mapper\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/rating/mapper\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"rating_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"rating\\\":\\\"rating\\\",\\\"date\\\":\\\"rated_at\\\"}}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/rating/mapper');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"rating_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"rating\":\"rating\",\"date\":\"rated_at\"}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"rating_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"rating\":\"rating\",\"date\":\"rated_at\"}}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/rating/mapper');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"rating_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"rating\\\":\\\"rating\\\",\\\"date\\\":\\\"rated_at\\\"}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/items/rating/mapper\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/rating/mapper\"\n\npayload = {\"rating_key_map\": {\n        \"user_id\": \"user_id\",\n        \"member_id\": \"member_id\",\n        \"item_id\": \"item_id\",\n        \"rating\": \"rating\",\n        \"date\": \"rated_at\"\n    }}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/rating/mapper\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"rating_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"rating\\\":\\\"rating\\\",\\\"date\\\":\\\"rated_at\\\"}}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/items/rating/mapper \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"rating_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"rating\":\"rating\",\"date\":\"rated_at\"}}'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\"rating_key_map\": [\n    \"user_id\": \"user_id\",\n    \"member_id\": \"member_id\",\n    \"item_id\": \"item_id\",\n    \"rating\": \"rating\",\n    \"date\": \"rated_at\"\n  ]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/rating/mapper\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/users/mapper": {
            "get": {
                "tags": [
                    "Historical User Data Collection"
                ],
                "summary": "Get user mapper",
                "description": "Get the mapped keys for user information between your data source and our recommender system.",
                "operationId": "get_user_mapper_v1_users_mapper_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/users/mapper\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/users/mapper\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/users/mapper\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/users/mapper\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/users/mapper\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/users/mapper\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/users/mapper\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/users/mapper\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/users/mapper',\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/users/mapper\");\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/users/mapper\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/users/mapper\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/users/mapper');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/users/mapper');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/users/mapper\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/users/mapper\"\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/users/mapper\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request GET \\\n  --url https://api.recommender.gigalogy.com/v1/users/mapper \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/users/mapper\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            },
            "put": {
                "tags": [
                    "Historical User Data Collection"
                ],
                "summary": "Update user mapper",
                "description": "This endpoint updates the user mapped keys. Please checkout the schema from the\nrequest body section for details about the key type and supported values.\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| user_id | str | str | user_id is the id of unique user. choose the parameter from your data source that you want to be the id of user. |\n| member_id | Optional[str] | str | member_id is the id of logged-in user. choose the parameter from your data source that you want to be the id of logged-in user. |\n| address | Optional[str] | str | Represents address of the unique user. |\n| gender | Optional[str] | str | Represents gender of the unique user. |\n| age | Optional[str] | str | Represents age of the unique user. |\n| type_name | str | str | Represents the type or preference of the user. If you have multiple columns for user preference you can assign them. |\n| separator | Optional[str] | str | If one key contains multiple parameter with separator in your data source please assign the separator here. If there is no separator in column value you can pass `null` or remove the key from the request body. |",
                "operationId": "put_user_mapper_v1_users_mapper_put",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MapperUserSchema"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/users/mapper\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"user_key_map\\\":{\\\"user_id\\\":\\\"customer_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"address\\\":\\\"residence\\\",\\\"gender\\\":\\\"gender\\\",\\\"age\\\":\\\"age\\\",\\\"user_type\\\":[{\\\"type_name\\\":\\\"column_name1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"type_name\\\":\\\"column_name2\\\"}]}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Put,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/users/mapper\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"user_key_map\\\":{\\\"user_id\\\":\\\"customer_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"address\\\":\\\"residence\\\",\\\"gender\\\":\\\"gender\\\",\\\"age\\\":\\\"age\\\",\\\"user_type\\\":[{\\\"type_name\\\":\\\"column_name1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"type_name\\\":\\\"column_name2\\\"}]}}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/users/mapper\"\n\n\tpayload := strings.NewReader(\"{\\\"user_key_map\\\":{\\\"user_id\\\":\\\"customer_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"address\\\":\\\"residence\\\",\\\"gender\\\":\\\"gender\\\",\\\"age\\\":\\\"age\\\",\\\"user_type\\\":[{\\\"type_name\\\":\\\"column_name1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"type_name\\\":\\\"column_name2\\\"}]}}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"user_key_map\\\":{\\\"user_id\\\":\\\"customer_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"address\\\":\\\"residence\\\",\\\"gender\\\":\\\"gender\\\",\\\"age\\\":\\\"age\\\",\\\"user_type\\\":[{\\\"type_name\\\":\\\"column_name1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"type_name\\\":\\\"column_name2\\\"}]}}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/users/mapper\")\n  .put(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.put(\"https://api.recommender.gigalogy.com/v1/users/mapper\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"user_key_map\\\":{\\\"user_id\\\":\\\"customer_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"address\\\":\\\"residence\\\",\\\"gender\\\":\\\"gender\\\",\\\"age\\\":\\\"age\\\",\\\"user_type\\\":[{\\\"type_name\\\":\\\"column_name1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"type_name\\\":\\\"column_name2\\\"}]}}\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/users/mapper\",\n  \"method\": \"PUT\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"user_key_map\\\":{\\\"user_id\\\":\\\"customer_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"address\\\":\\\"residence\\\",\\\"gender\\\":\\\"gender\\\",\\\"age\\\":\\\"age\\\",\\\"user_type\\\":[{\\\"type_name\\\":\\\"column_name1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"type_name\\\":\\\"column_name2\\\"}]}}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = JSON.stringify({\n  \"user_key_map\": {\n    \"user_id\": \"customer_id\",\n    \"member_id\": \"member_id\",\n    \"address\": \"residence\",\n    \"gender\": \"gender\",\n    \"age\": \"age\",\n    \"user_type\": [\n      {\n        \"type_name\": \"column_name1\",\n        \"separator\": \"_\"\n      },\n      {\n        \"type_name\": \"column_name2\"\n      }\n    ]\n  }\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PUT\", \"https://api.recommender.gigalogy.com/v1/users/mapper\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/users/mapper\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  user_key_map: {\n    user_id: 'customer_id',\n    member_id: 'member_id',\n    address: 'residence',\n    gender: 'gender',\n    age: 'age',\n    user_type: [{type_name: 'column_name1', separator: '_'}, {type_name: 'column_name2'}]\n  }\n}));\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.recommender.gigalogy.com/v1/users/mapper',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    user_key_map: {\n      user_id: 'customer_id',\n      member_id: 'member_id',\n      address: 'residence',\n      gender: 'gender',\n      age: 'age',\n      user_type: [{type_name: 'column_name1', separator: '_'}, {type_name: 'column_name2'}]\n    }\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"PUT\", \"https://api.recommender.gigalogy.com/v1/users/mapper\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"user_key_map\": {\n    \"user_id\": \"customer_id\",\n    \"member_id\": \"member_id\",\n    \"address\": \"residence\",\n    \"gender\": \"gender\",\n    \"age\": \"age\",\n    \"user_type\": [\n      {\n        \"type_name\": \"column_name1\",\n        \"separator\": \"_\"\n      },\n      {\n        \"type_name\": \"column_name2\"\n      }\n    ]\n  }\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"user_key_map\": @{ @\"user_id\": @\"customer_id\", @\"member_id\": @\"member_id\", @\"address\": @\"residence\", @\"gender\": @\"gender\", @\"age\": @\"age\", @\"user_type\": @[ @{ @\"type_name\": @\"column_name1\", @\"separator\": @\"_\" }, @{ @\"type_name\": @\"column_name2\" } ] } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/users/mapper\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PUT\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/users/mapper\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"user_key_map\\\":{\\\"user_id\\\":\\\"customer_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"address\\\":\\\"residence\\\",\\\"gender\\\":\\\"gender\\\",\\\"age\\\":\\\"age\\\",\\\"user_type\\\":[{\\\"type_name\\\":\\\"column_name1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"type_name\\\":\\\"column_name2\\\"}]}}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/users/mapper');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"user_key_map\":{\"user_id\":\"customer_id\",\"member_id\":\"member_id\",\"address\":\"residence\",\"gender\":\"gender\",\"age\":\"age\",\"user_type\":[{\"type_name\":\"column_name1\",\"separator\":\"_\"},{\"type_name\":\"column_name2\"}]}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"user_key_map\":{\"user_id\":\"customer_id\",\"member_id\":\"member_id\",\"address\":\"residence\",\"gender\":\"gender\",\"age\":\"age\",\"user_type\":[{\"type_name\":\"column_name1\",\"separator\":\"_\"},{\"type_name\":\"column_name2\"}]}}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/users/mapper');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"user_key_map\\\":{\\\"user_id\\\":\\\"customer_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"address\\\":\\\"residence\\\",\\\"gender\\\":\\\"gender\\\",\\\"age\\\":\\\"age\\\",\\\"user_type\\\":[{\\\"type_name\\\":\\\"column_name1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"type_name\\\":\\\"column_name2\\\"}]}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"PUT\", \"/v1/users/mapper\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/users/mapper\"\n\npayload = {\"user_key_map\": {\n        \"user_id\": \"customer_id\",\n        \"member_id\": \"member_id\",\n        \"address\": \"residence\",\n        \"gender\": \"gender\",\n        \"age\": \"age\",\n        \"user_type\": [{\n                \"type_name\": \"column_name1\",\n                \"separator\": \"_\"\n            }, {\"type_name\": \"column_name2\"}]\n    }}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"PUT\", url, json=payload, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/users/mapper\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"user_key_map\\\":{\\\"user_id\\\":\\\"customer_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"address\\\":\\\"residence\\\",\\\"gender\\\":\\\"gender\\\",\\\"age\\\":\\\"age\\\",\\\"user_type\\\":[{\\\"type_name\\\":\\\"column_name1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"type_name\\\":\\\"column_name2\\\"}]}}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request PUT \\\n  --url https://api.recommender.gigalogy.com/v1/users/mapper \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"user_key_map\":{\"user_id\":\"customer_id\",\"member_id\":\"member_id\",\"address\":\"residence\",\"gender\":\"gender\",\"age\":\"age\",\"user_type\":[{\"type_name\":\"column_name1\",\"separator\":\"_\"},{\"type_name\":\"column_name2\"}]}}'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\"user_key_map\": [\n    \"user_id\": \"customer_id\",\n    \"member_id\": \"member_id\",\n    \"address\": \"residence\",\n    \"gender\": \"gender\",\n    \"age\": \"age\",\n    \"user_type\": [[\n        \"type_name\": \"column_name1\",\n        \"separator\": \"_\"\n      ], [\"type_name\": \"column_name2\"]]\n  ]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/users/mapper\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"PUT\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            },
            "post": {
                "tags": [
                    "Historical User Data Collection"
                ],
                "summary": "Map data source keys with recommender user keys",
                "description": "This endpoint map data source keys with our recommender user keys. This step is\ncompulsory if you want to upload user data from CSV file. Please checkout the\nschema from the request body section for details about the key type and supported values.\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| user_id | str | str | user_id is the id of unique user. choose the parameter from your data source that you want to be the id of user. |\n| member_id | Optional[str] | str | member_id is the id of logged-in user. choose the parameter from your data source that you want to be the id of logged-in user. |\n| address | Optional[str] | str | Represents address of the unique user. |\n| gender | Optional[str] | str | Represents gender of the unique user. |\n| age | Optional[str] | str | Represents age of the unique user. |\n| type_name | str | str | Represents the type or preference of the user. If you have multiple columns for user preference you can assign them. |\n| separator | Optional[str] | str | If one key contains multiple parameter with separator in your data source please assign the separator here. If there is no separator in column value you can pass `null` or remove the key from the request body. |",
                "operationId": "post_user_mapper_v1_users_mapper_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MapperUserSchema"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/users/mapper\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"user_key_map\\\":{\\\"user_id\\\":\\\"customer_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"address\\\":\\\"residence\\\",\\\"gender\\\":\\\"gender\\\",\\\"age\\\":\\\"age\\\",\\\"user_type\\\":[{\\\"type_name\\\":\\\"column_name1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"type_name\\\":\\\"column_name2\\\"}]}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/users/mapper\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"user_key_map\\\":{\\\"user_id\\\":\\\"customer_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"address\\\":\\\"residence\\\",\\\"gender\\\":\\\"gender\\\",\\\"age\\\":\\\"age\\\",\\\"user_type\\\":[{\\\"type_name\\\":\\\"column_name1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"type_name\\\":\\\"column_name2\\\"}]}}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/users/mapper\"\n\n\tpayload := strings.NewReader(\"{\\\"user_key_map\\\":{\\\"user_id\\\":\\\"customer_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"address\\\":\\\"residence\\\",\\\"gender\\\":\\\"gender\\\",\\\"age\\\":\\\"age\\\",\\\"user_type\\\":[{\\\"type_name\\\":\\\"column_name1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"type_name\\\":\\\"column_name2\\\"}]}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"user_key_map\\\":{\\\"user_id\\\":\\\"customer_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"address\\\":\\\"residence\\\",\\\"gender\\\":\\\"gender\\\",\\\"age\\\":\\\"age\\\",\\\"user_type\\\":[{\\\"type_name\\\":\\\"column_name1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"type_name\\\":\\\"column_name2\\\"}]}}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/users/mapper\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/users/mapper\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"user_key_map\\\":{\\\"user_id\\\":\\\"customer_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"address\\\":\\\"residence\\\",\\\"gender\\\":\\\"gender\\\",\\\"age\\\":\\\"age\\\",\\\"user_type\\\":[{\\\"type_name\\\":\\\"column_name1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"type_name\\\":\\\"column_name2\\\"}]}}\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/users/mapper\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"user_key_map\\\":{\\\"user_id\\\":\\\"customer_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"address\\\":\\\"residence\\\",\\\"gender\\\":\\\"gender\\\",\\\"age\\\":\\\"age\\\",\\\"user_type\\\":[{\\\"type_name\\\":\\\"column_name1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"type_name\\\":\\\"column_name2\\\"}]}}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = JSON.stringify({\n  \"user_key_map\": {\n    \"user_id\": \"customer_id\",\n    \"member_id\": \"member_id\",\n    \"address\": \"residence\",\n    \"gender\": \"gender\",\n    \"age\": \"age\",\n    \"user_type\": [\n      {\n        \"type_name\": \"column_name1\",\n        \"separator\": \"_\"\n      },\n      {\n        \"type_name\": \"column_name2\"\n      }\n    ]\n  }\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/users/mapper\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/users/mapper\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  user_key_map: {\n    user_id: 'customer_id',\n    member_id: 'member_id',\n    address: 'residence',\n    gender: 'gender',\n    age: 'age',\n    user_type: [{type_name: 'column_name1', separator: '_'}, {type_name: 'column_name2'}]\n  }\n}));\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/users/mapper',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    user_key_map: {\n      user_id: 'customer_id',\n      member_id: 'member_id',\n      address: 'residence',\n      gender: 'gender',\n      age: 'age',\n      user_type: [{type_name: 'column_name1', separator: '_'}, {type_name: 'column_name2'}]\n    }\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/users/mapper\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"user_key_map\": {\n    \"user_id\": \"customer_id\",\n    \"member_id\": \"member_id\",\n    \"address\": \"residence\",\n    \"gender\": \"gender\",\n    \"age\": \"age\",\n    \"user_type\": [\n      {\n        \"type_name\": \"column_name1\",\n        \"separator\": \"_\"\n      },\n      {\n        \"type_name\": \"column_name2\"\n      }\n    ]\n  }\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"user_key_map\": @{ @\"user_id\": @\"customer_id\", @\"member_id\": @\"member_id\", @\"address\": @\"residence\", @\"gender\": @\"gender\", @\"age\": @\"age\", @\"user_type\": @[ @{ @\"type_name\": @\"column_name1\", @\"separator\": @\"_\" }, @{ @\"type_name\": @\"column_name2\" } ] } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/users/mapper\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/users/mapper\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"user_key_map\\\":{\\\"user_id\\\":\\\"customer_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"address\\\":\\\"residence\\\",\\\"gender\\\":\\\"gender\\\",\\\"age\\\":\\\"age\\\",\\\"user_type\\\":[{\\\"type_name\\\":\\\"column_name1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"type_name\\\":\\\"column_name2\\\"}]}}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/users/mapper');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"user_key_map\":{\"user_id\":\"customer_id\",\"member_id\":\"member_id\",\"address\":\"residence\",\"gender\":\"gender\",\"age\":\"age\",\"user_type\":[{\"type_name\":\"column_name1\",\"separator\":\"_\"},{\"type_name\":\"column_name2\"}]}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"user_key_map\":{\"user_id\":\"customer_id\",\"member_id\":\"member_id\",\"address\":\"residence\",\"gender\":\"gender\",\"age\":\"age\",\"user_type\":[{\"type_name\":\"column_name1\",\"separator\":\"_\"},{\"type_name\":\"column_name2\"}]}}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/users/mapper');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"user_key_map\\\":{\\\"user_id\\\":\\\"customer_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"address\\\":\\\"residence\\\",\\\"gender\\\":\\\"gender\\\",\\\"age\\\":\\\"age\\\",\\\"user_type\\\":[{\\\"type_name\\\":\\\"column_name1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"type_name\\\":\\\"column_name2\\\"}]}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/users/mapper\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/users/mapper\"\n\npayload = {\"user_key_map\": {\n        \"user_id\": \"customer_id\",\n        \"member_id\": \"member_id\",\n        \"address\": \"residence\",\n        \"gender\": \"gender\",\n        \"age\": \"age\",\n        \"user_type\": [{\n                \"type_name\": \"column_name1\",\n                \"separator\": \"_\"\n            }, {\"type_name\": \"column_name2\"}]\n    }}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/users/mapper\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"user_key_map\\\":{\\\"user_id\\\":\\\"customer_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"address\\\":\\\"residence\\\",\\\"gender\\\":\\\"gender\\\",\\\"age\\\":\\\"age\\\",\\\"user_type\\\":[{\\\"type_name\\\":\\\"column_name1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"type_name\\\":\\\"column_name2\\\"}]}}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/users/mapper \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"user_key_map\":{\"user_id\":\"customer_id\",\"member_id\":\"member_id\",\"address\":\"residence\",\"gender\":\"gender\",\"age\":\"age\",\"user_type\":[{\"type_name\":\"column_name1\",\"separator\":\"_\"},{\"type_name\":\"column_name2\"}]}}'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\"user_key_map\": [\n    \"user_id\": \"customer_id\",\n    \"member_id\": \"member_id\",\n    \"address\": \"residence\",\n    \"gender\": \"gender\",\n    \"age\": \"age\",\n    \"user_type\": [[\n        \"type_name\": \"column_name1\",\n        \"separator\": \"_\"\n      ], [\"type_name\": \"column_name2\"]]\n  ]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/users/mapper\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/indices": {
            "post": {
                "tags": [
                    "Index Creation"
                ],
                "summary": "Create indices to hold your data",
                "description": "Now you need to create indexes. These indexes will create the necessary schemas\nto hold your data.",
                "operationId": "post_index_create_v1_indices_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/indices\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/indices\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/indices\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/indices\")\n  .post(null)\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/indices\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/indices\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/indices\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/indices\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/indices',\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/indices\");\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/indices\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/indices\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/indices');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/indices');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/indices\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/indices\"\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/indices\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/indices \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/indices\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Index Creation"
                ],
                "summary": "Delete indices",
                "description": "You can delete an index with this endpoint. It takes index_type as required parameter.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| index_type | Enum | Selected enum value | Represents the type of index. Available value `items`, `image_features`, `browse`, `purchase`, `ratings`, `search`, `stats`, `user`, `settings`, `gpt_dataset`,` gpt_dataset_meta`, `questionnaire`, `questionnaire_mapper`. |",
                "operationId": "delete_index_v1_indices_delete",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IndexDeleteSchema"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/indices\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"index_type\\\":\\\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Delete,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/indices\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"index_type\\\":\\\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper\\\"}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/indices\"\n\n\tpayload := strings.NewReader(\"{\\\"index_type\\\":\\\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper\\\"}\")\n\n\treq, _ := http.NewRequest(\"DELETE\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"index_type\\\":\\\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/indices\")\n  .delete(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.delete(\"https://api.recommender.gigalogy.com/v1/indices\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"index_type\\\":\\\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper\\\"}\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/indices\",\n  \"method\": \"DELETE\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"index_type\\\":\\\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper\\\"}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = JSON.stringify({\n  \"index_type\": \"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper\"\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"DELETE\", \"https://api.recommender.gigalogy.com/v1/indices\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/indices\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  index_type: 'Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper'\n}));\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.recommender.gigalogy.com/v1/indices',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    index_type: 'Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"DELETE\", \"https://api.recommender.gigalogy.com/v1/indices\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"index_type\": \"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"index_type\": @\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper\" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/indices\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"DELETE\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/indices\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_POSTFIELDS => \"{\\\"index_type\\\":\\\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/indices');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"index_type\":\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"index_type\":\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper\"}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/indices');\n$request->setRequestMethod('DELETE');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"index_type\\\":\\\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"DELETE\", \"/v1/indices\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/indices\"\n\npayload = {\"index_type\": \"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper\"}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"DELETE\", url, json=payload, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/indices\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"index_type\\\":\\\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request DELETE \\\n  --url https://api.recommender.gigalogy.com/v1/indices \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"index_type\":\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper\"}'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\"index_type\": \"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper\"] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/indices\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"DELETE\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/reindex": {
            "post": {
                "tags": [
                    "Index Creation"
                ],
                "summary": "Creates index with new mappings and settings and create alias for new index",
                "description": "This endpoint create new index with new mappings and settings as well as copy all\nthe documents from previous index to new index. It takes index_type and mapping as\nrequired parameters.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| index_type | Enum | Selected enum value | Represents the type of index. Available value `items`, `image_features`, `browse`, `purchase`, `ratings`, `search`, `settings`. |\n| mapping | Dict | Dict | Represents required mappings and settings to create index. |",
                "operationId": "post_reindex_v1_reindex_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ReindexSchema"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/reindex\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"index_type\\\":\\\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire\\\",\\\"mappings\\\":{\\\"settings\\\":{\\\"analysis\\\":{}},\\\"mappings\\\":{\\\"properties\\\":{\\\"item\\\":{\\\"properties\\\":{}}}}}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/reindex\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"index_type\\\":\\\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire\\\",\\\"mappings\\\":{\\\"settings\\\":{\\\"analysis\\\":{}},\\\"mappings\\\":{\\\"properties\\\":{\\\"item\\\":{\\\"properties\\\":{}}}}}}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/reindex\"\n\n\tpayload := strings.NewReader(\"{\\\"index_type\\\":\\\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire\\\",\\\"mappings\\\":{\\\"settings\\\":{\\\"analysis\\\":{}},\\\"mappings\\\":{\\\"properties\\\":{\\\"item\\\":{\\\"properties\\\":{}}}}}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"index_type\\\":\\\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire\\\",\\\"mappings\\\":{\\\"settings\\\":{\\\"analysis\\\":{}},\\\"mappings\\\":{\\\"properties\\\":{\\\"item\\\":{\\\"properties\\\":{}}}}}}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/reindex\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/reindex\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"index_type\\\":\\\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire\\\",\\\"mappings\\\":{\\\"settings\\\":{\\\"analysis\\\":{}},\\\"mappings\\\":{\\\"properties\\\":{\\\"item\\\":{\\\"properties\\\":{}}}}}}\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/reindex\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"index_type\\\":\\\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire\\\",\\\"mappings\\\":{\\\"settings\\\":{\\\"analysis\\\":{}},\\\"mappings\\\":{\\\"properties\\\":{\\\"item\\\":{\\\"properties\\\":{}}}}}}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = JSON.stringify({\n  \"index_type\": \"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire\",\n  \"mappings\": {\n    \"settings\": {\n      \"analysis\": {}\n    },\n    \"mappings\": {\n      \"properties\": {\n        \"item\": {\n          \"properties\": {}\n        }\n      }\n    }\n  }\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/reindex\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/reindex\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  index_type: 'Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire',\n  mappings: {settings: {analysis: {}}, mappings: {properties: {item: {properties: {}}}}}\n}));\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/reindex',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    index_type: 'Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire',\n    mappings: {settings: {analysis: {}}, mappings: {properties: {item: {properties: {}}}}}\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/reindex\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"index_type\": \"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire\",\n  \"mappings\": {\n    \"settings\": {\n      \"analysis\": {}\n    },\n    \"mappings\": {\n      \"properties\": {\n        \"item\": {\n          \"properties\": {}\n        }\n      }\n    }\n  }\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"index_type\": @\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire\",\n                              @\"mappings\": @{ @\"settings\": @{ @\"analysis\": @{  } }, @\"mappings\": @{ @\"properties\": @{ @\"item\": @{ @\"properties\": @{  } } } } } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/reindex\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/reindex\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"index_type\\\":\\\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire\\\",\\\"mappings\\\":{\\\"settings\\\":{\\\"analysis\\\":{}},\\\"mappings\\\":{\\\"properties\\\":{\\\"item\\\":{\\\"properties\\\":{}}}}}}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/reindex');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"index_type\":\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire\",\"mappings\":{\"settings\":{\"analysis\":{}},\"mappings\":{\"properties\":{\"item\":{\"properties\":{}}}}}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"index_type\":\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire\",\"mappings\":{\"settings\":{\"analysis\":{}},\"mappings\":{\"properties\":{\"item\":{\"properties\":{}}}}}}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/reindex');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"index_type\\\":\\\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire\\\",\\\"mappings\\\":{\\\"settings\\\":{\\\"analysis\\\":{}},\\\"mappings\\\":{\\\"properties\\\":{\\\"item\\\":{\\\"properties\\\":{}}}}}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/reindex\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/reindex\"\n\npayload = {\n    \"index_type\": \"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire\",\n    \"mappings\": {\n        \"settings\": {\"analysis\": {}},\n        \"mappings\": {\"properties\": {\"item\": {\"properties\": {}}}}\n    }\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/reindex\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"index_type\\\":\\\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire\\\",\\\"mappings\\\":{\\\"settings\\\":{\\\"analysis\\\":{}},\\\"mappings\\\":{\\\"properties\\\":{\\\"item\\\":{\\\"properties\\\":{}}}}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/reindex \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"index_type\":\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire\",\"mappings\":{\"settings\":{\"analysis\":{}},\"mappings\":{\"properties\":{\"item\":{\"properties\":{}}}}}}'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"index_type\": \"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire\",\n  \"mappings\": [\n    \"settings\": [\"analysis\": []],\n    \"mappings\": [\"properties\": [\"item\": [\"properties\": []]]]\n  ]\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/reindex\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/ranks/settings": {
            "get": {
                "tags": [
                    "Training Settings"
                ],
                "summary": "Get rank settings",
                "description": "Get your saved rank settings.",
                "operationId": "get_rank_settings_v1_ranks_settings_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/ranks/settings\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/ranks/settings\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/ranks/settings\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/ranks/settings\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/ranks/settings\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/ranks/settings\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/ranks/settings\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/ranks/settings\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/ranks/settings',\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/ranks/settings\");\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/ranks/settings\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/ranks/settings\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/ranks/settings');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/ranks/settings');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/ranks/settings\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/ranks/settings\"\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/ranks/settings\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request GET \\\n  --url https://api.recommender.gigalogy.com/v1/ranks/settings \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/ranks/settings\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            },
            "put": {
                "tags": [
                    "Training Settings"
                ],
                "summary": "Updates rank settings",
                "description": "This endpoint updates the parameter in rank settings. It takes several technical\nparameters. Please checkout the schema from the request body section for details\nabout the key type and supported values.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| interval | List[Enum] | Selected enum value | Represents the time interval to train ranking model. Available values are `weekly`, `bi-weekly`, `monthly`, `quarterly`, `yearly`. |\n| split_size | float | float | Represents split_size to split data. Splitted data would be distributed as X_train, X_test, y_train, y_test and prepare the data for ranking model. IIf you are not sure about this parameter please use the default value. |\n| epoch | int | int | Represents the number of epoch for training the ranking model. If you are not sure about this parameter please use the default value. |",
                "operationId": "update_rank_settings_v1_ranks_settings_put",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RankSchema"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/ranks/settings\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"rank_settings\\\":{\\\"interval\\\":[\\\"weekly\\\",\\\"bi-weekly\\\",\\\"monthly\\\",\\\"quarterly\\\",\\\"yearly\\\"],\\\"split_size\\\":0.1,\\\"epoch\\\":200}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Put,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/ranks/settings\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"rank_settings\\\":{\\\"interval\\\":[\\\"weekly\\\",\\\"bi-weekly\\\",\\\"monthly\\\",\\\"quarterly\\\",\\\"yearly\\\"],\\\"split_size\\\":0.1,\\\"epoch\\\":200}}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/ranks/settings\"\n\n\tpayload := strings.NewReader(\"{\\\"rank_settings\\\":{\\\"interval\\\":[\\\"weekly\\\",\\\"bi-weekly\\\",\\\"monthly\\\",\\\"quarterly\\\",\\\"yearly\\\"],\\\"split_size\\\":0.1,\\\"epoch\\\":200}}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"rank_settings\\\":{\\\"interval\\\":[\\\"weekly\\\",\\\"bi-weekly\\\",\\\"monthly\\\",\\\"quarterly\\\",\\\"yearly\\\"],\\\"split_size\\\":0.1,\\\"epoch\\\":200}}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/ranks/settings\")\n  .put(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.put(\"https://api.recommender.gigalogy.com/v1/ranks/settings\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"rank_settings\\\":{\\\"interval\\\":[\\\"weekly\\\",\\\"bi-weekly\\\",\\\"monthly\\\",\\\"quarterly\\\",\\\"yearly\\\"],\\\"split_size\\\":0.1,\\\"epoch\\\":200}}\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/ranks/settings\",\n  \"method\": \"PUT\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"rank_settings\\\":{\\\"interval\\\":[\\\"weekly\\\",\\\"bi-weekly\\\",\\\"monthly\\\",\\\"quarterly\\\",\\\"yearly\\\"],\\\"split_size\\\":0.1,\\\"epoch\\\":200}}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = JSON.stringify({\n  \"rank_settings\": {\n    \"interval\": [\n      \"weekly\",\n      \"bi-weekly\",\n      \"monthly\",\n      \"quarterly\",\n      \"yearly\"\n    ],\n    \"split_size\": 0.1,\n    \"epoch\": 200\n  }\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PUT\", \"https://api.recommender.gigalogy.com/v1/ranks/settings\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/ranks/settings\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  rank_settings: {\n    interval: ['weekly', 'bi-weekly', 'monthly', 'quarterly', 'yearly'],\n    split_size: 0.1,\n    epoch: 200\n  }\n}));\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.recommender.gigalogy.com/v1/ranks/settings',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    rank_settings: {\n      interval: ['weekly', 'bi-weekly', 'monthly', 'quarterly', 'yearly'],\n      split_size: 0.1,\n      epoch: 200\n    }\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"PUT\", \"https://api.recommender.gigalogy.com/v1/ranks/settings\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"rank_settings\": {\n    \"interval\": [\n      \"weekly\",\n      \"bi-weekly\",\n      \"monthly\",\n      \"quarterly\",\n      \"yearly\"\n    ],\n    \"split_size\": 0.1,\n    \"epoch\": 200\n  }\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"rank_settings\": @{ @\"interval\": @[ @\"weekly\", @\"bi-weekly\", @\"monthly\", @\"quarterly\", @\"yearly\" ], @\"split_size\": @0.1, @\"epoch\": @200 } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/ranks/settings\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PUT\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/ranks/settings\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"rank_settings\\\":{\\\"interval\\\":[\\\"weekly\\\",\\\"bi-weekly\\\",\\\"monthly\\\",\\\"quarterly\\\",\\\"yearly\\\"],\\\"split_size\\\":0.1,\\\"epoch\\\":200}}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/ranks/settings');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"rank_settings\":{\"interval\":[\"weekly\",\"bi-weekly\",\"monthly\",\"quarterly\",\"yearly\"],\"split_size\":0.1,\"epoch\":200}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"rank_settings\":{\"interval\":[\"weekly\",\"bi-weekly\",\"monthly\",\"quarterly\",\"yearly\"],\"split_size\":0.1,\"epoch\":200}}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/ranks/settings');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"rank_settings\\\":{\\\"interval\\\":[\\\"weekly\\\",\\\"bi-weekly\\\",\\\"monthly\\\",\\\"quarterly\\\",\\\"yearly\\\"],\\\"split_size\\\":0.1,\\\"epoch\\\":200}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"PUT\", \"/v1/ranks/settings\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/ranks/settings\"\n\npayload = {\"rank_settings\": {\n        \"interval\": [\"weekly\", \"bi-weekly\", \"monthly\", \"quarterly\", \"yearly\"],\n        \"split_size\": 0.1,\n        \"epoch\": 200\n    }}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"PUT\", url, json=payload, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/ranks/settings\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"rank_settings\\\":{\\\"interval\\\":[\\\"weekly\\\",\\\"bi-weekly\\\",\\\"monthly\\\",\\\"quarterly\\\",\\\"yearly\\\"],\\\"split_size\\\":0.1,\\\"epoch\\\":200}}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request PUT \\\n  --url https://api.recommender.gigalogy.com/v1/ranks/settings \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"rank_settings\":{\"interval\":[\"weekly\",\"bi-weekly\",\"monthly\",\"quarterly\",\"yearly\"],\"split_size\":0.1,\"epoch\":200}}'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\"rank_settings\": [\n    \"interval\": [\"weekly\", \"bi-weekly\", \"monthly\", \"quarterly\", \"yearly\"],\n    \"split_size\": 0.1,\n    \"epoch\": 200\n  ]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/ranks/settings\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"PUT\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            },
            "post": {
                "tags": [
                    "Training Settings"
                ],
                "summary": "Creates rank settings",
                "description": "This endpoint determines the key parameters for our ranking model. It takes\nseveral technical parameters. Please checkout the schema from the request body\nsection for details about the key type and supported values.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| interval | List[Enum] | Selected enum value | Represents the time interval to train ranking model. Available values are `weekly`, `bi-weekly`, `monthly`, `quarterly`, `yearly`. |\n| split_size | float | float | Represents split_size to split data. Splitted data would be distributed as X_train, X_test, y_train, y_test and prepare the data for ranking model. IIf you are not sure about this parameter please use the default value. |\n| epoch | int | int | Represents the number of epoch for training the ranking model. If you are not sure about this parameter please use the default value. |",
                "operationId": "save_rank_settings_v1_ranks_settings_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RankSchema"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/ranks/settings\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"rank_settings\\\":{\\\"interval\\\":[\\\"weekly\\\",\\\"bi-weekly\\\",\\\"monthly\\\",\\\"quarterly\\\",\\\"yearly\\\"],\\\"split_size\\\":0.1,\\\"epoch\\\":200}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/ranks/settings\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"rank_settings\\\":{\\\"interval\\\":[\\\"weekly\\\",\\\"bi-weekly\\\",\\\"monthly\\\",\\\"quarterly\\\",\\\"yearly\\\"],\\\"split_size\\\":0.1,\\\"epoch\\\":200}}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/ranks/settings\"\n\n\tpayload := strings.NewReader(\"{\\\"rank_settings\\\":{\\\"interval\\\":[\\\"weekly\\\",\\\"bi-weekly\\\",\\\"monthly\\\",\\\"quarterly\\\",\\\"yearly\\\"],\\\"split_size\\\":0.1,\\\"epoch\\\":200}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"rank_settings\\\":{\\\"interval\\\":[\\\"weekly\\\",\\\"bi-weekly\\\",\\\"monthly\\\",\\\"quarterly\\\",\\\"yearly\\\"],\\\"split_size\\\":0.1,\\\"epoch\\\":200}}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/ranks/settings\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/ranks/settings\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"rank_settings\\\":{\\\"interval\\\":[\\\"weekly\\\",\\\"bi-weekly\\\",\\\"monthly\\\",\\\"quarterly\\\",\\\"yearly\\\"],\\\"split_size\\\":0.1,\\\"epoch\\\":200}}\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/ranks/settings\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"rank_settings\\\":{\\\"interval\\\":[\\\"weekly\\\",\\\"bi-weekly\\\",\\\"monthly\\\",\\\"quarterly\\\",\\\"yearly\\\"],\\\"split_size\\\":0.1,\\\"epoch\\\":200}}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = JSON.stringify({\n  \"rank_settings\": {\n    \"interval\": [\n      \"weekly\",\n      \"bi-weekly\",\n      \"monthly\",\n      \"quarterly\",\n      \"yearly\"\n    ],\n    \"split_size\": 0.1,\n    \"epoch\": 200\n  }\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/ranks/settings\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/ranks/settings\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  rank_settings: {\n    interval: ['weekly', 'bi-weekly', 'monthly', 'quarterly', 'yearly'],\n    split_size: 0.1,\n    epoch: 200\n  }\n}));\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/ranks/settings',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    rank_settings: {\n      interval: ['weekly', 'bi-weekly', 'monthly', 'quarterly', 'yearly'],\n      split_size: 0.1,\n      epoch: 200\n    }\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/ranks/settings\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"rank_settings\": {\n    \"interval\": [\n      \"weekly\",\n      \"bi-weekly\",\n      \"monthly\",\n      \"quarterly\",\n      \"yearly\"\n    ],\n    \"split_size\": 0.1,\n    \"epoch\": 200\n  }\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"rank_settings\": @{ @\"interval\": @[ @\"weekly\", @\"bi-weekly\", @\"monthly\", @\"quarterly\", @\"yearly\" ], @\"split_size\": @0.1, @\"epoch\": @200 } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/ranks/settings\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/ranks/settings\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"rank_settings\\\":{\\\"interval\\\":[\\\"weekly\\\",\\\"bi-weekly\\\",\\\"monthly\\\",\\\"quarterly\\\",\\\"yearly\\\"],\\\"split_size\\\":0.1,\\\"epoch\\\":200}}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/ranks/settings');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"rank_settings\":{\"interval\":[\"weekly\",\"bi-weekly\",\"monthly\",\"quarterly\",\"yearly\"],\"split_size\":0.1,\"epoch\":200}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"rank_settings\":{\"interval\":[\"weekly\",\"bi-weekly\",\"monthly\",\"quarterly\",\"yearly\"],\"split_size\":0.1,\"epoch\":200}}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/ranks/settings');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"rank_settings\\\":{\\\"interval\\\":[\\\"weekly\\\",\\\"bi-weekly\\\",\\\"monthly\\\",\\\"quarterly\\\",\\\"yearly\\\"],\\\"split_size\\\":0.1,\\\"epoch\\\":200}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/ranks/settings\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/ranks/settings\"\n\npayload = {\"rank_settings\": {\n        \"interval\": [\"weekly\", \"bi-weekly\", \"monthly\", \"quarterly\", \"yearly\"],\n        \"split_size\": 0.1,\n        \"epoch\": 200\n    }}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/ranks/settings\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"rank_settings\\\":{\\\"interval\\\":[\\\"weekly\\\",\\\"bi-weekly\\\",\\\"monthly\\\",\\\"quarterly\\\",\\\"yearly\\\"],\\\"split_size\\\":0.1,\\\"epoch\\\":200}}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/ranks/settings \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"rank_settings\":{\"interval\":[\"weekly\",\"bi-weekly\",\"monthly\",\"quarterly\",\"yearly\"],\"split_size\":0.1,\"epoch\":200}}'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\"rank_settings\": [\n    \"interval\": [\"weekly\", \"bi-weekly\", \"monthly\", \"quarterly\", \"yearly\"],\n    \"split_size\": 0.1,\n    \"epoch\": 200\n  ]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/ranks/settings\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/items/save": {
            "post": {
                "tags": [
                    "Catalog Integration"
                ],
                "summary": "Upload a CSV or JSON file and save data in item index",
                "description": "This endpoint uploads and saves data from the CSV file in the item index. It only\ntakes text or CSV files as a required parameter. If you want to integrate your\nitem data from a CSV file with our recommender system this endpoint will upload\nthe file and save them to the database.",
                "operationId": "post_items_csv_v1_items_save_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_post_items_csv_v1_items_save_post"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/save\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"multipart/form-data\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/save\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/save\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"multipart/form-data\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/save\")\n  .post(null)\n  .addHeader(\"content-type\", \"multipart/form-data\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/items/save\")\n  .header(\"content-type\", \"multipart/form-data\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/save\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/save\");\nxhr.setRequestHeader(\"content-type\", \"multipart/form-data\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/save\",\n  \"headers\": {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/items/save',\n  headers: {\n    'content-type': 'multipart/form-data',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/save\");\n\nreq.headers({\n  \"content-type\": \"multipart/form-data\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"multipart/form-data\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/save\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/save\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: multipart/form-data\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/save');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'multipart/form-data',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/save');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'content-type' => 'multipart/form-data',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'content-type': \"multipart/form-data\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/items/save\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/save\"\n\nheaders = {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/save\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'multipart/form-data'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/items/save \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: multipart/form-data' \\\n  --header 'project-key: SOME_STRING_VALUE'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"multipart/form-data\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/save\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/items/save/remote": {
            "post": {
                "tags": [
                    "Catalog Integration"
                ],
                "summary": "Save items to database from a given endpoint",
                "description": "This endpoint fetches item data from external API and saves them in the item index.\nIt takes URL, method, response_items_key as required parameters as well as headers,\nquery_parameters, body_parameters, response_item_key as optional parameters.\nPlease check out the schema from the request body section for details about the\nkey type and supported values.\nThis endpoint can be used to fetch items into our recommender system if you\nhave product details API.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| url | str | str | Represents URL of the product details api from where you want to fetch items into recommender |\n| method | str | str | Represents api method of the endpoint from which you want to fetch data into recommender. |\n| headers | Optional[Dict[str, str]] | str | Represents the meta data associated with api request and response. |\n| query_parameters | Optional[Dict[str, str]] | str | Represents the query parameter of api endpoint. It could be required to fetch data from external api otherwise you can keep it empty. |\n| body_parameters | Optional[Dict[str, str]] | str | Represents the body parameter of api endpoint. It could be required to fetch data from external api otherwise you can keep it empty. |\n| response_items_key | str | str | Represents the key of response items which you want to fetch into recommender . |\n| response_item_key | Optional[str] | str | If you have multiple keys in response you can use the key from where you want to fetch items. It could be empty as well. |",
                "operationId": "api_save_v1_items_save_remote_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ItemApiSaveSchema"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/save/remote\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"url\\\":\\\"https://api.doozie.ai/v1/api/items/search\\\",\\\"method\\\":\\\"GET\\\",\\\"headers\\\":{\\\"parameter_one\\\":\\\"value_one\\\",\\\"parameter_two\\\":\\\"value_two\\\",\\\"...\\\":\\\"...\\\"},\\\"query_parameters\\\":{\\\"parameter_one\\\":\\\"value_one\\\",\\\"parameter_two\\\":\\\"value_two\\\",\\\"...\\\":\\\"...\\\"},\\\"body_parameters\\\":{\\\"parameter_one\\\":\\\"value_one\\\",\\\"parameter_two\\\":\\\"value_two\\\",\\\"...\\\":\\\"...\\\"},\\\"response_items_key\\\":\\\"Items\\\",\\\"response_item_key\\\":\\\"Item\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/save/remote\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"url\\\":\\\"https://api.doozie.ai/v1/api/items/search\\\",\\\"method\\\":\\\"GET\\\",\\\"headers\\\":{\\\"parameter_one\\\":\\\"value_one\\\",\\\"parameter_two\\\":\\\"value_two\\\",\\\"...\\\":\\\"...\\\"},\\\"query_parameters\\\":{\\\"parameter_one\\\":\\\"value_one\\\",\\\"parameter_two\\\":\\\"value_two\\\",\\\"...\\\":\\\"...\\\"},\\\"body_parameters\\\":{\\\"parameter_one\\\":\\\"value_one\\\",\\\"parameter_two\\\":\\\"value_two\\\",\\\"...\\\":\\\"...\\\"},\\\"response_items_key\\\":\\\"Items\\\",\\\"response_item_key\\\":\\\"Item\\\"}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/save/remote\"\n\n\tpayload := strings.NewReader(\"{\\\"url\\\":\\\"https://api.doozie.ai/v1/api/items/search\\\",\\\"method\\\":\\\"GET\\\",\\\"headers\\\":{\\\"parameter_one\\\":\\\"value_one\\\",\\\"parameter_two\\\":\\\"value_two\\\",\\\"...\\\":\\\"...\\\"},\\\"query_parameters\\\":{\\\"parameter_one\\\":\\\"value_one\\\",\\\"parameter_two\\\":\\\"value_two\\\",\\\"...\\\":\\\"...\\\"},\\\"body_parameters\\\":{\\\"parameter_one\\\":\\\"value_one\\\",\\\"parameter_two\\\":\\\"value_two\\\",\\\"...\\\":\\\"...\\\"},\\\"response_items_key\\\":\\\"Items\\\",\\\"response_item_key\\\":\\\"Item\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"url\\\":\\\"https://api.doozie.ai/v1/api/items/search\\\",\\\"method\\\":\\\"GET\\\",\\\"headers\\\":{\\\"parameter_one\\\":\\\"value_one\\\",\\\"parameter_two\\\":\\\"value_two\\\",\\\"...\\\":\\\"...\\\"},\\\"query_parameters\\\":{\\\"parameter_one\\\":\\\"value_one\\\",\\\"parameter_two\\\":\\\"value_two\\\",\\\"...\\\":\\\"...\\\"},\\\"body_parameters\\\":{\\\"parameter_one\\\":\\\"value_one\\\",\\\"parameter_two\\\":\\\"value_two\\\",\\\"...\\\":\\\"...\\\"},\\\"response_items_key\\\":\\\"Items\\\",\\\"response_item_key\\\":\\\"Item\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/save/remote\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/items/save/remote\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"url\\\":\\\"https://api.doozie.ai/v1/api/items/search\\\",\\\"method\\\":\\\"GET\\\",\\\"headers\\\":{\\\"parameter_one\\\":\\\"value_one\\\",\\\"parameter_two\\\":\\\"value_two\\\",\\\"...\\\":\\\"...\\\"},\\\"query_parameters\\\":{\\\"parameter_one\\\":\\\"value_one\\\",\\\"parameter_two\\\":\\\"value_two\\\",\\\"...\\\":\\\"...\\\"},\\\"body_parameters\\\":{\\\"parameter_one\\\":\\\"value_one\\\",\\\"parameter_two\\\":\\\"value_two\\\",\\\"...\\\":\\\"...\\\"},\\\"response_items_key\\\":\\\"Items\\\",\\\"response_item_key\\\":\\\"Item\\\"}\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/save/remote\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"url\\\":\\\"https://api.doozie.ai/v1/api/items/search\\\",\\\"method\\\":\\\"GET\\\",\\\"headers\\\":{\\\"parameter_one\\\":\\\"value_one\\\",\\\"parameter_two\\\":\\\"value_two\\\",\\\"...\\\":\\\"...\\\"},\\\"query_parameters\\\":{\\\"parameter_one\\\":\\\"value_one\\\",\\\"parameter_two\\\":\\\"value_two\\\",\\\"...\\\":\\\"...\\\"},\\\"body_parameters\\\":{\\\"parameter_one\\\":\\\"value_one\\\",\\\"parameter_two\\\":\\\"value_two\\\",\\\"...\\\":\\\"...\\\"},\\\"response_items_key\\\":\\\"Items\\\",\\\"response_item_key\\\":\\\"Item\\\"}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = JSON.stringify({\n  \"url\": \"https://api.doozie.ai/v1/api/items/search\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"parameter_one\": \"value_one\",\n    \"parameter_two\": \"value_two\",\n    \"...\": \"...\"\n  },\n  \"query_parameters\": {\n    \"parameter_one\": \"value_one\",\n    \"parameter_two\": \"value_two\",\n    \"...\": \"...\"\n  },\n  \"body_parameters\": {\n    \"parameter_one\": \"value_one\",\n    \"parameter_two\": \"value_two\",\n    \"...\": \"...\"\n  },\n  \"response_items_key\": \"Items\",\n  \"response_item_key\": \"Item\"\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/save/remote\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/save/remote\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  url: 'https://api.doozie.ai/v1/api/items/search',\n  method: 'GET',\n  headers: {parameter_one: 'value_one', parameter_two: 'value_two', '...': '...'},\n  query_parameters: {parameter_one: 'value_one', parameter_two: 'value_two', '...': '...'},\n  body_parameters: {parameter_one: 'value_one', parameter_two: 'value_two', '...': '...'},\n  response_items_key: 'Items',\n  response_item_key: 'Item'\n}));\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/items/save/remote',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    url: 'https://api.doozie.ai/v1/api/items/search',\n    method: 'GET',\n    headers: {parameter_one: 'value_one', parameter_two: 'value_two', '...': '...'},\n    query_parameters: {parameter_one: 'value_one', parameter_two: 'value_two', '...': '...'},\n    body_parameters: {parameter_one: 'value_one', parameter_two: 'value_two', '...': '...'},\n    response_items_key: 'Items',\n    response_item_key: 'Item'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/save/remote\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"url\": \"https://api.doozie.ai/v1/api/items/search\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"parameter_one\": \"value_one\",\n    \"parameter_two\": \"value_two\",\n    \"...\": \"...\"\n  },\n  \"query_parameters\": {\n    \"parameter_one\": \"value_one\",\n    \"parameter_two\": \"value_two\",\n    \"...\": \"...\"\n  },\n  \"body_parameters\": {\n    \"parameter_one\": \"value_one\",\n    \"parameter_two\": \"value_two\",\n    \"...\": \"...\"\n  },\n  \"response_items_key\": \"Items\",\n  \"response_item_key\": \"Item\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"url\": @\"https://api.doozie.ai/v1/api/items/search\",\n                              @\"method\": @\"GET\",\n                              @\"headers\": @{ @\"parameter_one\": @\"value_one\", @\"parameter_two\": @\"value_two\", @\"...\": @\"...\" },\n                              @\"query_parameters\": @{ @\"parameter_one\": @\"value_one\", @\"parameter_two\": @\"value_two\", @\"...\": @\"...\" },\n                              @\"body_parameters\": @{ @\"parameter_one\": @\"value_one\", @\"parameter_two\": @\"value_two\", @\"...\": @\"...\" },\n                              @\"response_items_key\": @\"Items\",\n                              @\"response_item_key\": @\"Item\" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/save/remote\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/save/remote\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"url\\\":\\\"https://api.doozie.ai/v1/api/items/search\\\",\\\"method\\\":\\\"GET\\\",\\\"headers\\\":{\\\"parameter_one\\\":\\\"value_one\\\",\\\"parameter_two\\\":\\\"value_two\\\",\\\"...\\\":\\\"...\\\"},\\\"query_parameters\\\":{\\\"parameter_one\\\":\\\"value_one\\\",\\\"parameter_two\\\":\\\"value_two\\\",\\\"...\\\":\\\"...\\\"},\\\"body_parameters\\\":{\\\"parameter_one\\\":\\\"value_one\\\",\\\"parameter_two\\\":\\\"value_two\\\",\\\"...\\\":\\\"...\\\"},\\\"response_items_key\\\":\\\"Items\\\",\\\"response_item_key\\\":\\\"Item\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/save/remote');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"url\":\"https://api.doozie.ai/v1/api/items/search\",\"method\":\"GET\",\"headers\":{\"parameter_one\":\"value_one\",\"parameter_two\":\"value_two\",\"...\":\"...\"},\"query_parameters\":{\"parameter_one\":\"value_one\",\"parameter_two\":\"value_two\",\"...\":\"...\"},\"body_parameters\":{\"parameter_one\":\"value_one\",\"parameter_two\":\"value_two\",\"...\":\"...\"},\"response_items_key\":\"Items\",\"response_item_key\":\"Item\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"url\":\"https://api.doozie.ai/v1/api/items/search\",\"method\":\"GET\",\"headers\":{\"parameter_one\":\"value_one\",\"parameter_two\":\"value_two\",\"...\":\"...\"},\"query_parameters\":{\"parameter_one\":\"value_one\",\"parameter_two\":\"value_two\",\"...\":\"...\"},\"body_parameters\":{\"parameter_one\":\"value_one\",\"parameter_two\":\"value_two\",\"...\":\"...\"},\"response_items_key\":\"Items\",\"response_item_key\":\"Item\"}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/save/remote');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"url\\\":\\\"https://api.doozie.ai/v1/api/items/search\\\",\\\"method\\\":\\\"GET\\\",\\\"headers\\\":{\\\"parameter_one\\\":\\\"value_one\\\",\\\"parameter_two\\\":\\\"value_two\\\",\\\"...\\\":\\\"...\\\"},\\\"query_parameters\\\":{\\\"parameter_one\\\":\\\"value_one\\\",\\\"parameter_two\\\":\\\"value_two\\\",\\\"...\\\":\\\"...\\\"},\\\"body_parameters\\\":{\\\"parameter_one\\\":\\\"value_one\\\",\\\"parameter_two\\\":\\\"value_two\\\",\\\"...\\\":\\\"...\\\"},\\\"response_items_key\\\":\\\"Items\\\",\\\"response_item_key\\\":\\\"Item\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/items/save/remote\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/save/remote\"\n\npayload = {\n    \"url\": \"https://api.doozie.ai/v1/api/items/search\",\n    \"method\": \"GET\",\n    \"headers\": {\n        \"parameter_one\": \"value_one\",\n        \"parameter_two\": \"value_two\",\n        \"...\": \"...\"\n    },\n    \"query_parameters\": {\n        \"parameter_one\": \"value_one\",\n        \"parameter_two\": \"value_two\",\n        \"...\": \"...\"\n    },\n    \"body_parameters\": {\n        \"parameter_one\": \"value_one\",\n        \"parameter_two\": \"value_two\",\n        \"...\": \"...\"\n    },\n    \"response_items_key\": \"Items\",\n    \"response_item_key\": \"Item\"\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/save/remote\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"url\\\":\\\"https://api.doozie.ai/v1/api/items/search\\\",\\\"method\\\":\\\"GET\\\",\\\"headers\\\":{\\\"parameter_one\\\":\\\"value_one\\\",\\\"parameter_two\\\":\\\"value_two\\\",\\\"...\\\":\\\"...\\\"},\\\"query_parameters\\\":{\\\"parameter_one\\\":\\\"value_one\\\",\\\"parameter_two\\\":\\\"value_two\\\",\\\"...\\\":\\\"...\\\"},\\\"body_parameters\\\":{\\\"parameter_one\\\":\\\"value_one\\\",\\\"parameter_two\\\":\\\"value_two\\\",\\\"...\\\":\\\"...\\\"},\\\"response_items_key\\\":\\\"Items\\\",\\\"response_item_key\\\":\\\"Item\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/items/save/remote \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"url\":\"https://api.doozie.ai/v1/api/items/search\",\"method\":\"GET\",\"headers\":{\"parameter_one\":\"value_one\",\"parameter_two\":\"value_two\",\"...\":\"...\"},\"query_parameters\":{\"parameter_one\":\"value_one\",\"parameter_two\":\"value_two\",\"...\":\"...\"},\"body_parameters\":{\"parameter_one\":\"value_one\",\"parameter_two\":\"value_two\",\"...\":\"...\"},\"response_items_key\":\"Items\",\"response_item_key\":\"Item\"}'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"url\": \"https://api.doozie.ai/v1/api/items/search\",\n  \"method\": \"GET\",\n  \"headers\": [\n    \"parameter_one\": \"value_one\",\n    \"parameter_two\": \"value_two\",\n    \"...\": \"...\"\n  ],\n  \"query_parameters\": [\n    \"parameter_one\": \"value_one\",\n    \"parameter_two\": \"value_two\",\n    \"...\": \"...\"\n  ],\n  \"body_parameters\": [\n    \"parameter_one\": \"value_one\",\n    \"parameter_two\": \"value_two\",\n    \"...\": \"...\"\n  ],\n  \"response_items_key\": \"Items\",\n  \"response_item_key\": \"Item\"\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/save/remote\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/items/train": {
            "get": {
                "tags": [
                    "Training"
                ],
                "summary": "Trains item data and generates a graph of relations",
                "description": "This endpoint trains item data and generates intelligence from it.\nItem data are trained automatically on a regular time interval. This endpoint\ncan be used to train item data manually.",
                "operationId": "item_train_v1_items_train_get",
                "parameters": [
                    {
                        "required": false,
                        "schema": {
                            "title": "Train All",
                            "type": "boolean",
                            "default": false
                        },
                        "name": "train_all",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Train From",
                            "type": "string"
                        },
                        "name": "train_from",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Train To",
                            "type": "string"
                        },
                        "name": "train_to",
                        "in": "query"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/train?train_all=SOME_BOOLEAN_VALUE&train_from=SOME_STRING_VALUE&train_to=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/train?train_all=SOME_BOOLEAN_VALUE&train_from=SOME_STRING_VALUE&train_to=SOME_STRING_VALUE\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/train?train_all=SOME_BOOLEAN_VALUE&train_from=SOME_STRING_VALUE&train_to=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/train?train_all=SOME_BOOLEAN_VALUE&train_from=SOME_STRING_VALUE&train_to=SOME_STRING_VALUE\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/items/train?train_all=SOME_BOOLEAN_VALUE&train_from=SOME_STRING_VALUE&train_to=SOME_STRING_VALUE\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/train?train_all=SOME_BOOLEAN_VALUE&train_from=SOME_STRING_VALUE&train_to=SOME_STRING_VALUE\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/items/train?train_all=SOME_BOOLEAN_VALUE&train_from=SOME_STRING_VALUE&train_to=SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/train?train_all=SOME_BOOLEAN_VALUE&train_from=SOME_STRING_VALUE&train_to=SOME_STRING_VALUE\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/items/train',\n  qs: {\n    train_all: 'SOME_BOOLEAN_VALUE',\n    train_from: 'SOME_STRING_VALUE',\n    train_to: 'SOME_STRING_VALUE'\n  },\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/items/train\");\n\nreq.query({\n  \"train_all\": \"SOME_BOOLEAN_VALUE\",\n  \"train_from\": \"SOME_STRING_VALUE\",\n  \"train_to\": \"SOME_STRING_VALUE\"\n});\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/train?train_all=SOME_BOOLEAN_VALUE&train_from=SOME_STRING_VALUE&train_to=SOME_STRING_VALUE\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/train?train_all=SOME_BOOLEAN_VALUE&train_from=SOME_STRING_VALUE&train_to=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/train');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData([\n  'train_all' => 'SOME_BOOLEAN_VALUE',\n  'train_from' => 'SOME_STRING_VALUE',\n  'train_to' => 'SOME_STRING_VALUE'\n]);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/train');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString([\n  'train_all' => 'SOME_BOOLEAN_VALUE',\n  'train_from' => 'SOME_STRING_VALUE',\n  'train_to' => 'SOME_STRING_VALUE'\n]));\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/items/train?train_all=SOME_BOOLEAN_VALUE&train_from=SOME_STRING_VALUE&train_to=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/train\"\n\nquerystring = {\"train_all\":\"SOME_BOOLEAN_VALUE\",\"train_from\":\"SOME_STRING_VALUE\",\"train_to\":\"SOME_STRING_VALUE\"}\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/train?train_all=SOME_BOOLEAN_VALUE&train_from=SOME_STRING_VALUE&train_to=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request GET \\\n  --url 'https://api.recommender.gigalogy.com/v1/items/train?train_all=SOME_BOOLEAN_VALUE&train_from=SOME_STRING_VALUE&train_to=SOME_STRING_VALUE' \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/train?train_all=SOME_BOOLEAN_VALUE&train_from=SOME_STRING_VALUE&train_to=SOME_STRING_VALUE\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/items": {
            "post": {
                "tags": [
                    "Catalog Integration"
                ],
                "summary": "Get a list of item details by their ids",
                "description": "Get searched items with item details by passing list of item ids.\nPlease check out the schema from the request body section for details about the\nkey type and supported values.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| ids | List[str] | str | List of item ids. |",
                "operationId": "items_v1_items_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ItemSearchByIdSchema"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"ids\\\":[\\\"thones:10001072\\\",\\\"menz-style:10017133\\\"]}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"ids\\\":[\\\"thones:10001072\\\",\\\"menz-style:10017133\\\"]}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items\"\n\n\tpayload := strings.NewReader(\"{\\\"ids\\\":[\\\"thones:10001072\\\",\\\"menz-style:10017133\\\"]}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"ids\\\":[\\\"thones:10001072\\\",\\\"menz-style:10017133\\\"]}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/items\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"ids\\\":[\\\"thones:10001072\\\",\\\"menz-style:10017133\\\"]}\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"ids\\\":[\\\"thones:10001072\\\",\\\"menz-style:10017133\\\"]}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = JSON.stringify({\n  \"ids\": [\n    \"thones:10001072\",\n    \"menz-style:10017133\"\n  ]\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/items\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({ids: ['thones:10001072', 'menz-style:10017133']}));\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/items',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {ids: ['thones:10001072', 'menz-style:10017133']},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/items\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"ids\": [\n    \"thones:10001072\",\n    \"menz-style:10017133\"\n  ]\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"ids\": @[ @\"thones:10001072\", @\"menz-style:10017133\" ] };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"ids\\\":[\\\"thones:10001072\\\",\\\"menz-style:10017133\\\"]}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"ids\":[\"thones:10001072\",\"menz-style:10017133\"]}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"ids\":[\"thones:10001072\",\"menz-style:10017133\"]}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"ids\\\":[\\\"thones:10001072\\\",\\\"menz-style:10017133\\\"]}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/items\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items\"\n\npayload = {\"ids\": [\"thones:10001072\", \"menz-style:10017133\"]}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"ids\\\":[\\\"thones:10001072\\\",\\\"menz-style:10017133\\\"]}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/items \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"ids\":[\"thones:10001072\",\"menz-style:10017133\"]}'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\"ids\": [\"thones:10001072\", \"menz-style:10017133\"]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/images/train": {
            "post": {
                "tags": [
                    "Training"
                ],
                "summary": "Trains image model",
                "description": "This endpoint takes image data from the database and generates intelligence from\nit. It takes start_date and end_date as optional parameters.\nImage model is trained automatically on a regular time interval. This endpoint\ncan be used to train image model manually.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| start_date | Optional[str] | str | Initial date of date range based on which you want to train image model. |\n| end_date |Optional[str] | str | End date of date range based on which you want to train image model. |",
                "operationId": "process_v1_images_train_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ImageTrainSchema"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/images/train\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"start_date\\\":\\\"2021-08-05\\\",\\\"end_date\\\":\\\"2021-08-06\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/images/train\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"start_date\\\":\\\"2021-08-05\\\",\\\"end_date\\\":\\\"2021-08-06\\\"}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/images/train\"\n\n\tpayload := strings.NewReader(\"{\\\"start_date\\\":\\\"2021-08-05\\\",\\\"end_date\\\":\\\"2021-08-06\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"start_date\\\":\\\"2021-08-05\\\",\\\"end_date\\\":\\\"2021-08-06\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/images/train\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/images/train\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"start_date\\\":\\\"2021-08-05\\\",\\\"end_date\\\":\\\"2021-08-06\\\"}\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/images/train\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"start_date\\\":\\\"2021-08-05\\\",\\\"end_date\\\":\\\"2021-08-06\\\"}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = JSON.stringify({\n  \"start_date\": \"2021-08-05\",\n  \"end_date\": \"2021-08-06\"\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/images/train\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/images/train\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({start_date: '2021-08-05', end_date: '2021-08-06'}));\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/images/train',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {start_date: '2021-08-05', end_date: '2021-08-06'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/images/train\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"start_date\": \"2021-08-05\",\n  \"end_date\": \"2021-08-06\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"start_date\": @\"2021-08-05\",\n                              @\"end_date\": @\"2021-08-06\" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/images/train\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/images/train\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"start_date\\\":\\\"2021-08-05\\\",\\\"end_date\\\":\\\"2021-08-06\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/images/train');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"start_date\":\"2021-08-05\",\"end_date\":\"2021-08-06\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"start_date\":\"2021-08-05\",\"end_date\":\"2021-08-06\"}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/images/train');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"start_date\\\":\\\"2021-08-05\\\",\\\"end_date\\\":\\\"2021-08-06\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/images/train\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/images/train\"\n\npayload = {\n    \"start_date\": \"2021-08-05\",\n    \"end_date\": \"2021-08-06\"\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/images/train\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"start_date\\\":\\\"2021-08-05\\\",\\\"end_date\\\":\\\"2021-08-06\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/images/train \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"start_date\":\"2021-08-05\",\"end_date\":\"2021-08-06\"}'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"start_date\": \"2021-08-05\",\n  \"end_date\": \"2021-08-06\"\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/images/train\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/ranks/train": {
            "post": {
                "tags": [
                    "Training"
                ],
                "summary": "Trains ranking model that predicts the trending items",
                "description": "This endpoint considers user behavior, item relations and train ranking model to\npredict most trending items.\nRanking model is trained automatically on a regular time interval. This endpoint\ncan be used to train ranking model manually.",
                "operationId": "rank_train_v1_ranks_train_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/ranks/train\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/ranks/train\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/ranks/train\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/ranks/train\")\n  .post(null)\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/ranks/train\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/ranks/train\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/ranks/train\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/ranks/train\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/ranks/train',\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/ranks/train\");\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/ranks/train\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/ranks/train\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/ranks/train');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/ranks/train');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/ranks/train\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/ranks/train\"\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/ranks/train\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/ranks/train \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/ranks/train\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/items/nearby": {
            "post": {
                "tags": [
                    "Search"
                ],
                "summary": "Returns nearest items in terms of distance",
                "description": "This endpoint finds the nearest items in terms of distance from a specific item \ngiven as an input. Input parameters are item_id, radius, filters and excludes. \nPlease check out the schema from the request body section for\ndetails about the key type and supported values.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| item_id | str | str | Represents the id of the item. |\n| radius | Dict | Dict | Radius contains d_from and d_to. Based on these values nearest items will be returned |\n| filters | List | str | You can pass categories (multiple supported) here. Based on the supported values the response will be filtered |\n| excludes | List | str | You can exclude categories (multiple supported) with this parameter. |",
                "operationId": "item_search_details_v1_items_nearby_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ItemNearbySchema"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/nearby\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"item_id\\\":\\\"1000757666\\\",\\\"radius\\\":{\\\"d_from\\\":1,\\\"d_to\\\":900},\\\"filters\\\":[\\\"レストラン\\\"],\\\"excludes\\\":[\\\"宿泊施設\\\"],\\\"search_size\\\":1000,\\\"keywords_filter\\\":false,\\\"details\\\":true,\\\"start\\\":0,\\\"size\\\":10}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/nearby\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"item_id\\\":\\\"1000757666\\\",\\\"radius\\\":{\\\"d_from\\\":1,\\\"d_to\\\":900},\\\"filters\\\":[\\\"レストラン\\\"],\\\"excludes\\\":[\\\"宿泊施設\\\"],\\\"search_size\\\":1000,\\\"keywords_filter\\\":false,\\\"details\\\":true,\\\"start\\\":0,\\\"size\\\":10}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/nearby\"\n\n\tpayload := strings.NewReader(\"{\\\"item_id\\\":\\\"1000757666\\\",\\\"radius\\\":{\\\"d_from\\\":1,\\\"d_to\\\":900},\\\"filters\\\":[\\\"レストラン\\\"],\\\"excludes\\\":[\\\"宿泊施設\\\"],\\\"search_size\\\":1000,\\\"keywords_filter\\\":false,\\\"details\\\":true,\\\"start\\\":0,\\\"size\\\":10}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"item_id\\\":\\\"1000757666\\\",\\\"radius\\\":{\\\"d_from\\\":1,\\\"d_to\\\":900},\\\"filters\\\":[\\\"レストラン\\\"],\\\"excludes\\\":[\\\"宿泊施設\\\"],\\\"search_size\\\":1000,\\\"keywords_filter\\\":false,\\\"details\\\":true,\\\"start\\\":0,\\\"size\\\":10}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/nearby\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/items/nearby\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"item_id\\\":\\\"1000757666\\\",\\\"radius\\\":{\\\"d_from\\\":1,\\\"d_to\\\":900},\\\"filters\\\":[\\\"レストラン\\\"],\\\"excludes\\\":[\\\"宿泊施設\\\"],\\\"search_size\\\":1000,\\\"keywords_filter\\\":false,\\\"details\\\":true,\\\"start\\\":0,\\\"size\\\":10}\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/nearby\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"item_id\\\":\\\"1000757666\\\",\\\"radius\\\":{\\\"d_from\\\":1,\\\"d_to\\\":900},\\\"filters\\\":[\\\"レストラン\\\"],\\\"excludes\\\":[\\\"宿泊施設\\\"],\\\"search_size\\\":1000,\\\"keywords_filter\\\":false,\\\"details\\\":true,\\\"start\\\":0,\\\"size\\\":10}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = JSON.stringify({\n  \"item_id\": \"1000757666\",\n  \"radius\": {\n    \"d_from\": 1,\n    \"d_to\": 900\n  },\n  \"filters\": [\n    \"レストラン\"\n  ],\n  \"excludes\": [\n    \"宿泊施設\"\n  ],\n  \"search_size\": 1000,\n  \"keywords_filter\": false,\n  \"details\": true,\n  \"start\": 0,\n  \"size\": 10\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/nearby\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/nearby\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  item_id: '1000757666',\n  radius: {d_from: 1, d_to: 900},\n  filters: ['レストラン'],\n  excludes: ['宿泊施設'],\n  search_size: 1000,\n  keywords_filter: false,\n  details: true,\n  start: 0,\n  size: 10\n}));\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/items/nearby',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    item_id: '1000757666',\n    radius: {d_from: 1, d_to: 900},\n    filters: ['レストラン'],\n    excludes: ['宿泊施設'],\n    search_size: 1000,\n    keywords_filter: false,\n    details: true,\n    start: 0,\n    size: 10\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/nearby\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"item_id\": \"1000757666\",\n  \"radius\": {\n    \"d_from\": 1,\n    \"d_to\": 900\n  },\n  \"filters\": [\n    \"レストラン\"\n  ],\n  \"excludes\": [\n    \"宿泊施設\"\n  ],\n  \"search_size\": 1000,\n  \"keywords_filter\": false,\n  \"details\": true,\n  \"start\": 0,\n  \"size\": 10\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"item_id\": @\"1000757666\",\n                              @\"radius\": @{ @\"d_from\": @1, @\"d_to\": @900 },\n                              @\"filters\": @[ @\"レストラン\" ],\n                              @\"excludes\": @[ @\"宿泊施設\" ],\n                              @\"search_size\": @1000,\n                              @\"keywords_filter\": @NO,\n                              @\"details\": @YES,\n                              @\"start\": @0,\n                              @\"size\": @10 };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/nearby\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/nearby\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"item_id\\\":\\\"1000757666\\\",\\\"radius\\\":{\\\"d_from\\\":1,\\\"d_to\\\":900},\\\"filters\\\":[\\\"レストラン\\\"],\\\"excludes\\\":[\\\"宿泊施設\\\"],\\\"search_size\\\":1000,\\\"keywords_filter\\\":false,\\\"details\\\":true,\\\"start\\\":0,\\\"size\\\":10}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/nearby');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"item_id\":\"1000757666\",\"radius\":{\"d_from\":1,\"d_to\":900},\"filters\":[\"レストラン\"],\"excludes\":[\"宿泊施設\"],\"search_size\":1000,\"keywords_filter\":false,\"details\":true,\"start\":0,\"size\":10}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"item_id\":\"1000757666\",\"radius\":{\"d_from\":1,\"d_to\":900},\"filters\":[\"レストラン\"],\"excludes\":[\"宿泊施設\"],\"search_size\":1000,\"keywords_filter\":false,\"details\":true,\"start\":0,\"size\":10}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/nearby');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"item_id\\\":\\\"1000757666\\\",\\\"radius\\\":{\\\"d_from\\\":1,\\\"d_to\\\":900},\\\"filters\\\":[\\\"レストラン\\\"],\\\"excludes\\\":[\\\"宿泊施設\\\"],\\\"search_size\\\":1000,\\\"keywords_filter\\\":false,\\\"details\\\":true,\\\"start\\\":0,\\\"size\\\":10}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/items/nearby\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/nearby\"\n\npayload = {\n    \"item_id\": \"1000757666\",\n    \"radius\": {\n        \"d_from\": 1,\n        \"d_to\": 900\n    },\n    \"filters\": [\"レストラン\"],\n    \"excludes\": [\"宿泊施設\"],\n    \"search_size\": 1000,\n    \"keywords_filter\": False,\n    \"details\": True,\n    \"start\": 0,\n    \"size\": 10\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/nearby\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"item_id\\\":\\\"1000757666\\\",\\\"radius\\\":{\\\"d_from\\\":1,\\\"d_to\\\":900},\\\"filters\\\":[\\\"レストラン\\\"],\\\"excludes\\\":[\\\"宿泊施設\\\"],\\\"search_size\\\":1000,\\\"keywords_filter\\\":false,\\\"details\\\":true,\\\"start\\\":0,\\\"size\\\":10}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/items/nearby \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"item_id\":\"1000757666\",\"radius\":{\"d_from\":1,\"d_to\":900},\"filters\":[\"レストラン\"],\"excludes\":[\"宿泊施設\"],\"search_size\":1000,\"keywords_filter\":false,\"details\":true,\"start\":0,\"size\":10}'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"item_id\": \"1000757666\",\n  \"radius\": [\n    \"d_from\": 1,\n    \"d_to\": 900\n  ],\n  \"filters\": [\"レストラン\"],\n  \"excludes\": [\"宿泊施設\"],\n  \"search_size\": 1000,\n  \"keywords_filter\": false,\n  \"details\": true,\n  \"start\": 0,\n  \"size\": 10\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/nearby\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/images/search": {
            "post": {
                "tags": [
                    "Search"
                ],
                "summary": "Image search engine",
                "description": "This endpoint generates search results based on image similarity. It takes an\nimage, user_id, start, size and details as required parameter and member_id as\noptional parameter. Please check out the schema from the request body section for\ndetails about the key type and supported values.\nThis endpoint can be used along with personalized search engine to provide users\noptions to execute their search experience.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| user_id | str | str | Represents the id of a logged-out unique user. |\n| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |\n| image | str($bin) | file | Represents the image for finding items that are similar to the one it captured. Supports webp, jpeg, jpg, and png formats. |\n| start | Optional[int] | int | Represents the initial point of pagination. If you want to see first items of index in the first position of your search result it will be 0. |\n| size | Optional[int] | int | Represents the size or number of items to show in search result. Size 10 means it will show first 10 items from index in your search result. |\n| details | bool | bool | If you want to get recommended items with details this parameter would be `True` otherwise it would be `False`. |",
                "operationId": "image_search_v1_images_search_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_image_search_v1_images_search_post"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/images/search\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"multipart/form-data\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/images/search\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/images/search\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"multipart/form-data\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/images/search\")\n  .post(null)\n  .addHeader(\"content-type\", \"multipart/form-data\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/images/search\")\n  .header(\"content-type\", \"multipart/form-data\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/images/search\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/images/search\");\nxhr.setRequestHeader(\"content-type\", \"multipart/form-data\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/images/search\",\n  \"headers\": {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/images/search',\n  headers: {\n    'content-type': 'multipart/form-data',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/images/search\");\n\nreq.headers({\n  \"content-type\": \"multipart/form-data\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"multipart/form-data\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/images/search\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/images/search\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: multipart/form-data\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/images/search');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'multipart/form-data',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/images/search');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'content-type' => 'multipart/form-data',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'content-type': \"multipart/form-data\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/images/search\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/images/search\"\n\nheaders = {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/images/search\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'multipart/form-data'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/images/search \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: multipart/form-data' \\\n  --header 'project-key: SOME_STRING_VALUE'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"multipart/form-data\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/images/search\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/users/keywords": {
            "get": {
                "tags": [
                    "Search"
                ],
                "summary": "Get all searched keywords by a specific user",
                "description": "Get the searched keywords by a specific user in your application.\nThis endpoint can be used to analyze / learn trends show infographics to users.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| user_id | str | str | Represents the id of a logged-out unique user. |\n| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |",
                "operationId": "keywords_v1_users_keywords_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "User Id",
                            "type": "string"
                        },
                        "name": "user_id",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Member Id",
                            "type": "string"
                        },
                        "name": "member_id",
                        "in": "query"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/users/keywords?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/users/keywords?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/users/keywords?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/users/keywords?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/users/keywords?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/users/keywords?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/users/keywords?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/users/keywords?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/users/keywords',\n  qs: {user_id: 'SOME_STRING_VALUE', member_id: 'SOME_STRING_VALUE'},\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/users/keywords\");\n\nreq.query({\n  \"user_id\": \"SOME_STRING_VALUE\",\n  \"member_id\": \"SOME_STRING_VALUE\"\n});\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/users/keywords?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/users/keywords?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/users/keywords');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData([\n  'user_id' => 'SOME_STRING_VALUE',\n  'member_id' => 'SOME_STRING_VALUE'\n]);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/users/keywords');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString([\n  'user_id' => 'SOME_STRING_VALUE',\n  'member_id' => 'SOME_STRING_VALUE'\n]));\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/users/keywords?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/users/keywords\"\n\nquerystring = {\"user_id\":\"SOME_STRING_VALUE\",\"member_id\":\"SOME_STRING_VALUE\"}\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/users/keywords?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request GET \\\n  --url 'https://api.recommender.gigalogy.com/v1/users/keywords?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE' \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/users/keywords?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/categories/keywords": {
            "get": {
                "tags": [
                    "Search"
                ],
                "summary": "Get top keywords by categories",
                "description": "Get the searched keywords by a specific user in your application.\nThis endpoint can be used to analyze / learn trends show infographics to users.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| user_id | str | str | Represents the id of a logged-out unique user. |\n| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |",
                "operationId": "keywords_v1_categories_keywords_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/categories/keywords\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/categories/keywords\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/categories/keywords\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/categories/keywords\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/categories/keywords\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/categories/keywords\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/categories/keywords\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/categories/keywords\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/categories/keywords',\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/categories/keywords\");\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/categories/keywords\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/categories/keywords\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/categories/keywords');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/categories/keywords');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/categories/keywords\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/categories/keywords\"\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/categories/keywords\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request GET \\\n  --url https://api.recommender.gigalogy.com/v1/categories/keywords \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/categories/keywords\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/items/browse/client": {
            "post": {
                "tags": [
                    "User Data Collection"
                ],
                "summary": "Captures user browsing information",
                "description": "This endpoint captures user browsing information and saves them to the database.\nIt takes user_id and item_id as required parameters and member_id as optional parameter.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| user_id | str | str | Represents the id of a logged-out unique user. |\n| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |\n| item_id | str | str | Represents the id of the browsed item. |",
                "operationId": "post_browse_v1_items_browse_client_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Client-Key",
                            "type": "string"
                        },
                        "name": "client-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BrowseSchema"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/browse/client\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"client-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/browse/client\"),\n    Headers =\n    {\n        { \"client-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\"}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/browse/client\"\n\n\tpayload := strings.NewReader(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"client-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/browse/client\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"client-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/items/browse/client\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"client-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\"}\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/browse/client\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"client-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\"}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = JSON.stringify({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"item_id\": \"1000764491\"\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/browse/client\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"client-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/browse/client\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"client-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n  member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n  item_id: '1000764491'\n}));\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/items/browse/client',\n  headers: {'content-type': 'application/json', 'client-key': 'SOME_STRING_VALUE'},\n  body: {\n    user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n    member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n    item_id: '1000764491'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/browse/client\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"client-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"item_id\": \"1000764491\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"client-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"user_id\": @\"a0cc6beb-2909-459b-be55-62196af78ce4\",\n                              @\"member_id\": @\"df3456tg-2909-459b-be55-62196afedf85\",\n                              @\"item_id\": @\"1000764491\" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/browse/client\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/browse/client\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"client-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/browse/client');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'client-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\"}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/browse/client');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'client-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'client-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/items/browse/client\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/browse/client\"\n\npayload = {\n    \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n    \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n    \"item_id\": \"1000764491\"\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"client-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/browse/client\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"client-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/items/browse/client \\\n  --header 'client-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --data '{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\"}'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"client-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"item_id\": \"1000764491\"\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/browse/client\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/items/browse": {
            "get": {
                "tags": [
                    "User Data Collection"
                ],
                "summary": "Get browsed info by user id",
                "description": "Get browsed information by id\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| user_id | str | str | Represents the id of a logged-out unique user. |\n| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |",
                "operationId": "get_v1_items_browse_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "User Id",
                            "type": "string"
                        },
                        "name": "user_id",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Member Id",
                            "type": "string"
                        },
                        "name": "member_id",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Start",
                            "type": "integer"
                        },
                        "name": "start",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Size",
                            "type": "integer"
                        },
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/browse?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/browse?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/browse?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/browse?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/items/browse?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/browse?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/items/browse?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/browse?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/items/browse',\n  qs: {\n    user_id: 'SOME_STRING_VALUE',\n    member_id: 'SOME_STRING_VALUE',\n    start: 'SOME_INTEGER_VALUE',\n    size: 'SOME_INTEGER_VALUE'\n  },\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/items/browse\");\n\nreq.query({\n  \"user_id\": \"SOME_STRING_VALUE\",\n  \"member_id\": \"SOME_STRING_VALUE\",\n  \"start\": \"SOME_INTEGER_VALUE\",\n  \"size\": \"SOME_INTEGER_VALUE\"\n});\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/browse?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/browse?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/browse');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData([\n  'user_id' => 'SOME_STRING_VALUE',\n  'member_id' => 'SOME_STRING_VALUE',\n  'start' => 'SOME_INTEGER_VALUE',\n  'size' => 'SOME_INTEGER_VALUE'\n]);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/browse');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString([\n  'user_id' => 'SOME_STRING_VALUE',\n  'member_id' => 'SOME_STRING_VALUE',\n  'start' => 'SOME_INTEGER_VALUE',\n  'size' => 'SOME_INTEGER_VALUE'\n]));\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/items/browse?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/browse\"\n\nquerystring = {\"user_id\":\"SOME_STRING_VALUE\",\"member_id\":\"SOME_STRING_VALUE\",\"start\":\"SOME_INTEGER_VALUE\",\"size\":\"SOME_INTEGER_VALUE\"}\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/browse?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request GET \\\n  --url 'https://api.recommender.gigalogy.com/v1/items/browse?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE' \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/browse?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            },
            "post": {
                "tags": [
                    "User Data Collection"
                ],
                "summary": "Captures user browsing information",
                "description": "This endpoint captures user browsing information and saves them to the database.\nIt takes user_id and item_id as required parameters and member_id as optional parameter.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| user_id | str | str | Represents the id of a logged-out unique user. |\n| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |\n| item_id | str | str | Represents the id of the browsed item. |",
                "operationId": "post_v1_items_browse_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BrowseSchema"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/browse\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/browse\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\"}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/browse\"\n\n\tpayload := strings.NewReader(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/browse\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/items/browse\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\"}\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/browse\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\"}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = JSON.stringify({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"item_id\": \"1000764491\"\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/browse\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/browse\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n  member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n  item_id: '1000764491'\n}));\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/items/browse',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n    member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n    item_id: '1000764491'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/browse\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"item_id\": \"1000764491\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"user_id\": @\"a0cc6beb-2909-459b-be55-62196af78ce4\",\n                              @\"member_id\": @\"df3456tg-2909-459b-be55-62196afedf85\",\n                              @\"item_id\": @\"1000764491\" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/browse\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/browse\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/browse');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\"}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/browse');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/items/browse\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/browse\"\n\npayload = {\n    \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n    \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n    \"item_id\": \"1000764491\"\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/browse\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/items/browse \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\"}'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"item_id\": \"1000764491\"\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/browse\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/items/browse/save": {
            "post": {
                "tags": [
                    "Historical User Data Collection"
                ],
                "summary": "Upload a CSV file and save data in browse index",
                "description": "This endpoint uploads and saves data from the CSV file in the browse index. It only\ntakes text or CSV files as a required parameter. If you want to upload your\nbrowse data from a CSV file with our recommender system this endpoint will upload\nthe file and save them to the database.",
                "operationId": "post_browse_csv_v1_items_browse_save_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_post_browse_csv_v1_items_browse_save_post"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/browse/save\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"multipart/form-data\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/browse/save\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/browse/save\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"multipart/form-data\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/browse/save\")\n  .post(null)\n  .addHeader(\"content-type\", \"multipart/form-data\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/items/browse/save\")\n  .header(\"content-type\", \"multipart/form-data\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/browse/save\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/browse/save\");\nxhr.setRequestHeader(\"content-type\", \"multipart/form-data\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/browse/save\",\n  \"headers\": {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/items/browse/save',\n  headers: {\n    'content-type': 'multipart/form-data',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/browse/save\");\n\nreq.headers({\n  \"content-type\": \"multipart/form-data\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"multipart/form-data\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/browse/save\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/browse/save\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: multipart/form-data\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/browse/save');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'multipart/form-data',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/browse/save');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'content-type' => 'multipart/form-data',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'content-type': \"multipart/form-data\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/items/browse/save\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/browse/save\"\n\nheaders = {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/browse/save\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'multipart/form-data'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/items/browse/save \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: multipart/form-data' \\\n  --header 'project-key: SOME_STRING_VALUE'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"multipart/form-data\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/browse/save\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/items/purchase/client": {
            "post": {
                "tags": [
                    "User Data Collection"
                ],
                "summary": "Captures user purchase information and save them",
                "description": "This endpoints captures user purchase info and save it to the database. It takes\nuser_id, item_list which includes item_id, price, quantity for a specific item as\nrequired parameters and member_id as an optional parameter.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| user_id | str | str | Represents the id of a logged-out unique user. |\n| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |\n| item_list | List[Dict[str,str]] | str | Represents item list of purchased items including item_id, price, quantity. |\n| item_id | str | str | Represents the id of the purchased item. |\n| price | str | str | Price of that purchased item. |\n| quantity | str | str | Number of items that are purchased for specific item id. |",
                "operationId": "purchase_client_v1_items_purchase_client_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Client-Key",
                            "type": "string"
                        },
                        "name": "client-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PurchaseSchema"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/purchase/client\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"client-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_list\\\":[{\\\"item_id\\\":\\\"1000757666\\\",\\\"price\\\":5000,\\\"quantity\\\":1},{\\\"item_id\\\":\\\"1000764491\\\",\\\"price\\\":400,\\\"quantity\\\":7}]}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/purchase/client\"),\n    Headers =\n    {\n        { \"client-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_list\\\":[{\\\"item_id\\\":\\\"1000757666\\\",\\\"price\\\":5000,\\\"quantity\\\":1},{\\\"item_id\\\":\\\"1000764491\\\",\\\"price\\\":400,\\\"quantity\\\":7}]}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/purchase/client\"\n\n\tpayload := strings.NewReader(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_list\\\":[{\\\"item_id\\\":\\\"1000757666\\\",\\\"price\\\":5000,\\\"quantity\\\":1},{\\\"item_id\\\":\\\"1000764491\\\",\\\"price\\\":400,\\\"quantity\\\":7}]}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"client-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_list\\\":[{\\\"item_id\\\":\\\"1000757666\\\",\\\"price\\\":5000,\\\"quantity\\\":1},{\\\"item_id\\\":\\\"1000764491\\\",\\\"price\\\":400,\\\"quantity\\\":7}]}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/purchase/client\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"client-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/items/purchase/client\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"client-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_list\\\":[{\\\"item_id\\\":\\\"1000757666\\\",\\\"price\\\":5000,\\\"quantity\\\":1},{\\\"item_id\\\":\\\"1000764491\\\",\\\"price\\\":400,\\\"quantity\\\":7}]}\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/purchase/client\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"client-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_list\\\":[{\\\"item_id\\\":\\\"1000757666\\\",\\\"price\\\":5000,\\\"quantity\\\":1},{\\\"item_id\\\":\\\"1000764491\\\",\\\"price\\\":400,\\\"quantity\\\":7}]}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = JSON.stringify({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"item_list\": [\n    {\n      \"item_id\": \"1000757666\",\n      \"price\": 5000,\n      \"quantity\": 1\n    },\n    {\n      \"item_id\": \"1000764491\",\n      \"price\": 400,\n      \"quantity\": 7\n    }\n  ]\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/purchase/client\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"client-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/purchase/client\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"client-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n  member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n  item_list: [\n    {item_id: '1000757666', price: 5000, quantity: 1},\n    {item_id: '1000764491', price: 400, quantity: 7}\n  ]\n}));\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/items/purchase/client',\n  headers: {'content-type': 'application/json', 'client-key': 'SOME_STRING_VALUE'},\n  body: {\n    user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n    member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n    item_list: [\n      {item_id: '1000757666', price: 5000, quantity: 1},\n      {item_id: '1000764491', price: 400, quantity: 7}\n    ]\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/purchase/client\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"client-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"item_list\": [\n    {\n      \"item_id\": \"1000757666\",\n      \"price\": 5000,\n      \"quantity\": 1\n    },\n    {\n      \"item_id\": \"1000764491\",\n      \"price\": 400,\n      \"quantity\": 7\n    }\n  ]\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"client-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"user_id\": @\"a0cc6beb-2909-459b-be55-62196af78ce4\",\n                              @\"member_id\": @\"df3456tg-2909-459b-be55-62196afedf85\",\n                              @\"item_list\": @[ @{ @\"item_id\": @\"1000757666\", @\"price\": @5000, @\"quantity\": @1 }, @{ @\"item_id\": @\"1000764491\", @\"price\": @400, @\"quantity\": @7 } ] };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/purchase/client\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/purchase/client\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_list\\\":[{\\\"item_id\\\":\\\"1000757666\\\",\\\"price\\\":5000,\\\"quantity\\\":1},{\\\"item_id\\\":\\\"1000764491\\\",\\\"price\\\":400,\\\"quantity\\\":7}]}\",\n  CURLOPT_HTTPHEADER => [\n    \"client-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/purchase/client');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'client-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_list\":[{\"item_id\":\"1000757666\",\"price\":5000,\"quantity\":1},{\"item_id\":\"1000764491\",\"price\":400,\"quantity\":7}]}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_list\":[{\"item_id\":\"1000757666\",\"price\":5000,\"quantity\":1},{\"item_id\":\"1000764491\",\"price\":400,\"quantity\":7}]}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/purchase/client');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'client-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_list\\\":[{\\\"item_id\\\":\\\"1000757666\\\",\\\"price\\\":5000,\\\"quantity\\\":1},{\\\"item_id\\\":\\\"1000764491\\\",\\\"price\\\":400,\\\"quantity\\\":7}]}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'client-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/items/purchase/client\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/purchase/client\"\n\npayload = {\n    \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n    \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n    \"item_list\": [\n        {\n            \"item_id\": \"1000757666\",\n            \"price\": 5000,\n            \"quantity\": 1\n        },\n        {\n            \"item_id\": \"1000764491\",\n            \"price\": 400,\n            \"quantity\": 7\n        }\n    ]\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"client-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/purchase/client\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"client-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_list\\\":[{\\\"item_id\\\":\\\"1000757666\\\",\\\"price\\\":5000,\\\"quantity\\\":1},{\\\"item_id\\\":\\\"1000764491\\\",\\\"price\\\":400,\\\"quantity\\\":7}]}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/items/purchase/client \\\n  --header 'client-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --data '{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_list\":[{\"item_id\":\"1000757666\",\"price\":5000,\"quantity\":1},{\"item_id\":\"1000764491\",\"price\":400,\"quantity\":7}]}'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"client-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"item_list\": [\n    [\n      \"item_id\": \"1000757666\",\n      \"price\": 5000,\n      \"quantity\": 1\n    ],\n    [\n      \"item_id\": \"1000764491\",\n      \"price\": 400,\n      \"quantity\": 7\n    ]\n  ]\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/purchase/client\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/items/purchase": {
            "get": {
                "tags": [
                    "User Data Collection"
                ],
                "summary": "Get purchased info by user id",
                "description": "Get purchased information by id\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| user_id | str | str | Represents the id of a logged-out unique user. |\n| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |",
                "operationId": "get_v1_items_purchase_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "User Id",
                            "type": "string"
                        },
                        "name": "user_id",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Member Id",
                            "type": "string"
                        },
                        "name": "member_id",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Start",
                            "type": "integer"
                        },
                        "name": "start",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Size",
                            "type": "integer"
                        },
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/purchase?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/purchase?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/purchase?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/purchase?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/items/purchase?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/purchase?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/items/purchase?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/purchase?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/items/purchase',\n  qs: {\n    user_id: 'SOME_STRING_VALUE',\n    member_id: 'SOME_STRING_VALUE',\n    start: 'SOME_INTEGER_VALUE',\n    size: 'SOME_INTEGER_VALUE'\n  },\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/items/purchase\");\n\nreq.query({\n  \"user_id\": \"SOME_STRING_VALUE\",\n  \"member_id\": \"SOME_STRING_VALUE\",\n  \"start\": \"SOME_INTEGER_VALUE\",\n  \"size\": \"SOME_INTEGER_VALUE\"\n});\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/purchase?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/purchase?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/purchase');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData([\n  'user_id' => 'SOME_STRING_VALUE',\n  'member_id' => 'SOME_STRING_VALUE',\n  'start' => 'SOME_INTEGER_VALUE',\n  'size' => 'SOME_INTEGER_VALUE'\n]);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/purchase');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString([\n  'user_id' => 'SOME_STRING_VALUE',\n  'member_id' => 'SOME_STRING_VALUE',\n  'start' => 'SOME_INTEGER_VALUE',\n  'size' => 'SOME_INTEGER_VALUE'\n]));\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/items/purchase?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/purchase\"\n\nquerystring = {\"user_id\":\"SOME_STRING_VALUE\",\"member_id\":\"SOME_STRING_VALUE\",\"start\":\"SOME_INTEGER_VALUE\",\"size\":\"SOME_INTEGER_VALUE\"}\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/purchase?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request GET \\\n  --url 'https://api.recommender.gigalogy.com/v1/items/purchase?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE' \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/purchase?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            },
            "post": {
                "tags": [
                    "User Data Collection"
                ],
                "summary": "Captures user purchase information and save them",
                "description": "This endpoints captures user purchase info and save it to the database. It takes\nuser_id, item_list which includes item_id, price, quantity for a specific item as\nrequired parameters and member_id as an optional parameter.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| user_id | str | str | Represents the id of a logged-out unique user. |\n| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |\n| item_list | List[Dict[str,str]] | str | Represents item list of purchased items including item_id, price, quantity. |\n| item_id | str | str | Represents the id of the purchased item. |\n| price | str | str | Price of that purchased item. |\n| quantity | str | str | Number of items that are purchased for specific item id. |",
                "operationId": "purchase_v1_items_purchase_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PurchaseSchema"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/purchase\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_list\\\":[{\\\"item_id\\\":\\\"1000757666\\\",\\\"price\\\":5000,\\\"quantity\\\":1},{\\\"item_id\\\":\\\"1000764491\\\",\\\"price\\\":400,\\\"quantity\\\":7}]}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/purchase\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_list\\\":[{\\\"item_id\\\":\\\"1000757666\\\",\\\"price\\\":5000,\\\"quantity\\\":1},{\\\"item_id\\\":\\\"1000764491\\\",\\\"price\\\":400,\\\"quantity\\\":7}]}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/purchase\"\n\n\tpayload := strings.NewReader(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_list\\\":[{\\\"item_id\\\":\\\"1000757666\\\",\\\"price\\\":5000,\\\"quantity\\\":1},{\\\"item_id\\\":\\\"1000764491\\\",\\\"price\\\":400,\\\"quantity\\\":7}]}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_list\\\":[{\\\"item_id\\\":\\\"1000757666\\\",\\\"price\\\":5000,\\\"quantity\\\":1},{\\\"item_id\\\":\\\"1000764491\\\",\\\"price\\\":400,\\\"quantity\\\":7}]}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/purchase\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/items/purchase\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_list\\\":[{\\\"item_id\\\":\\\"1000757666\\\",\\\"price\\\":5000,\\\"quantity\\\":1},{\\\"item_id\\\":\\\"1000764491\\\",\\\"price\\\":400,\\\"quantity\\\":7}]}\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/purchase\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_list\\\":[{\\\"item_id\\\":\\\"1000757666\\\",\\\"price\\\":5000,\\\"quantity\\\":1},{\\\"item_id\\\":\\\"1000764491\\\",\\\"price\\\":400,\\\"quantity\\\":7}]}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = JSON.stringify({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"item_list\": [\n    {\n      \"item_id\": \"1000757666\",\n      \"price\": 5000,\n      \"quantity\": 1\n    },\n    {\n      \"item_id\": \"1000764491\",\n      \"price\": 400,\n      \"quantity\": 7\n    }\n  ]\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/purchase\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/purchase\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n  member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n  item_list: [\n    {item_id: '1000757666', price: 5000, quantity: 1},\n    {item_id: '1000764491', price: 400, quantity: 7}\n  ]\n}));\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/items/purchase',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n    member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n    item_list: [\n      {item_id: '1000757666', price: 5000, quantity: 1},\n      {item_id: '1000764491', price: 400, quantity: 7}\n    ]\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/purchase\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"item_list\": [\n    {\n      \"item_id\": \"1000757666\",\n      \"price\": 5000,\n      \"quantity\": 1\n    },\n    {\n      \"item_id\": \"1000764491\",\n      \"price\": 400,\n      \"quantity\": 7\n    }\n  ]\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"user_id\": @\"a0cc6beb-2909-459b-be55-62196af78ce4\",\n                              @\"member_id\": @\"df3456tg-2909-459b-be55-62196afedf85\",\n                              @\"item_list\": @[ @{ @\"item_id\": @\"1000757666\", @\"price\": @5000, @\"quantity\": @1 }, @{ @\"item_id\": @\"1000764491\", @\"price\": @400, @\"quantity\": @7 } ] };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/purchase\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/purchase\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_list\\\":[{\\\"item_id\\\":\\\"1000757666\\\",\\\"price\\\":5000,\\\"quantity\\\":1},{\\\"item_id\\\":\\\"1000764491\\\",\\\"price\\\":400,\\\"quantity\\\":7}]}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/purchase');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_list\":[{\"item_id\":\"1000757666\",\"price\":5000,\"quantity\":1},{\"item_id\":\"1000764491\",\"price\":400,\"quantity\":7}]}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_list\":[{\"item_id\":\"1000757666\",\"price\":5000,\"quantity\":1},{\"item_id\":\"1000764491\",\"price\":400,\"quantity\":7}]}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/purchase');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_list\\\":[{\\\"item_id\\\":\\\"1000757666\\\",\\\"price\\\":5000,\\\"quantity\\\":1},{\\\"item_id\\\":\\\"1000764491\\\",\\\"price\\\":400,\\\"quantity\\\":7}]}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/items/purchase\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/purchase\"\n\npayload = {\n    \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n    \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n    \"item_list\": [\n        {\n            \"item_id\": \"1000757666\",\n            \"price\": 5000,\n            \"quantity\": 1\n        },\n        {\n            \"item_id\": \"1000764491\",\n            \"price\": 400,\n            \"quantity\": 7\n        }\n    ]\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/purchase\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_list\\\":[{\\\"item_id\\\":\\\"1000757666\\\",\\\"price\\\":5000,\\\"quantity\\\":1},{\\\"item_id\\\":\\\"1000764491\\\",\\\"price\\\":400,\\\"quantity\\\":7}]}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/items/purchase \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_list\":[{\"item_id\":\"1000757666\",\"price\":5000,\"quantity\":1},{\"item_id\":\"1000764491\",\"price\":400,\"quantity\":7}]}'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"item_list\": [\n    [\n      \"item_id\": \"1000757666\",\n      \"price\": 5000,\n      \"quantity\": 1\n    ],\n    [\n      \"item_id\": \"1000764491\",\n      \"price\": 400,\n      \"quantity\": 7\n    ]\n  ]\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/purchase\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/items/purchase/save": {
            "post": {
                "tags": [
                    "Historical User Data Collection"
                ],
                "summary": "Upload a CSV file and save data in purchase index",
                "description": "This endpoint uploads and saves data from the CSV file in the purchase index. It only\ntakes text or CSV files as a required parameter. If you want to upload your\npurchase data from a CSV file with our recommender system this endpoint will upload\nthe file and save them to the database.",
                "operationId": "post_purchase_csv_v1_items_purchase_save_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_post_purchase_csv_v1_items_purchase_save_post"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/purchase/save\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"multipart/form-data\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/purchase/save\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/purchase/save\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"multipart/form-data\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/purchase/save\")\n  .post(null)\n  .addHeader(\"content-type\", \"multipart/form-data\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/items/purchase/save\")\n  .header(\"content-type\", \"multipart/form-data\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/purchase/save\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/purchase/save\");\nxhr.setRequestHeader(\"content-type\", \"multipart/form-data\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/purchase/save\",\n  \"headers\": {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/items/purchase/save',\n  headers: {\n    'content-type': 'multipart/form-data',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/purchase/save\");\n\nreq.headers({\n  \"content-type\": \"multipart/form-data\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"multipart/form-data\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/purchase/save\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/purchase/save\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: multipart/form-data\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/purchase/save');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'multipart/form-data',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/purchase/save');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'content-type' => 'multipart/form-data',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'content-type': \"multipart/form-data\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/items/purchase/save\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/purchase/save\"\n\nheaders = {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/purchase/save\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'multipart/form-data'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/items/purchase/save \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: multipart/form-data' \\\n  --header 'project-key: SOME_STRING_VALUE'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"multipart/form-data\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/purchase/save\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/items/rating": {
            "get": {
                "tags": [
                    "User Data Collection"
                ],
                "summary": "Get rating info by user id",
                "description": "Get ratings information by id\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| user_id | str | str | Represents the id of a logged-out unique user. |\n| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |",
                "operationId": "get_v1_items_rating_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "User Id",
                            "type": "string"
                        },
                        "name": "user_id",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Member Id",
                            "type": "string"
                        },
                        "name": "member_id",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Start",
                            "type": "integer"
                        },
                        "name": "start",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Size",
                            "type": "integer"
                        },
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/rating?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/rating?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/rating?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/rating?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/items/rating?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/rating?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/items/rating?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/rating?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/items/rating',\n  qs: {\n    user_id: 'SOME_STRING_VALUE',\n    member_id: 'SOME_STRING_VALUE',\n    start: 'SOME_INTEGER_VALUE',\n    size: 'SOME_INTEGER_VALUE'\n  },\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/items/rating\");\n\nreq.query({\n  \"user_id\": \"SOME_STRING_VALUE\",\n  \"member_id\": \"SOME_STRING_VALUE\",\n  \"start\": \"SOME_INTEGER_VALUE\",\n  \"size\": \"SOME_INTEGER_VALUE\"\n});\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/rating?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/rating?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/rating');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData([\n  'user_id' => 'SOME_STRING_VALUE',\n  'member_id' => 'SOME_STRING_VALUE',\n  'start' => 'SOME_INTEGER_VALUE',\n  'size' => 'SOME_INTEGER_VALUE'\n]);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/rating');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString([\n  'user_id' => 'SOME_STRING_VALUE',\n  'member_id' => 'SOME_STRING_VALUE',\n  'start' => 'SOME_INTEGER_VALUE',\n  'size' => 'SOME_INTEGER_VALUE'\n]));\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/items/rating?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/rating\"\n\nquerystring = {\"user_id\":\"SOME_STRING_VALUE\",\"member_id\":\"SOME_STRING_VALUE\",\"start\":\"SOME_INTEGER_VALUE\",\"size\":\"SOME_INTEGER_VALUE\"}\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/rating?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request GET \\\n  --url 'https://api.recommender.gigalogy.com/v1/items/rating?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE' \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/rating?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            },
            "post": {
                "tags": [
                    "User Data Collection"
                ],
                "summary": "Capture user's given ratings on specific item and save them",
                "description": "This endpoint captures users given ratings positive (1) or negative (0) on\na specific item and save them to the database. It takes user_id, item_id, and\nrating for the specific item as required parameters and member_id as an optional parameter.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| user_id | str | str | Represents the id of a logged-out unique user. |\n| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |\n| item_id | str | str | Represents the id of the rated item. |\n| rating | str | str | Represents the rating for specific items. The value should be either \"1\" or \"0\" where \"1\" represents positive rating and \"0\" represents negative rating. |",
                "operationId": "post_v1_items_rating_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RatingSchema"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/rating\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\",\\\"rating\\\":\\\"1\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/rating\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\",\\\"rating\\\":\\\"1\\\"}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/rating\"\n\n\tpayload := strings.NewReader(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\",\\\"rating\\\":\\\"1\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\",\\\"rating\\\":\\\"1\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/rating\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/items/rating\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\",\\\"rating\\\":\\\"1\\\"}\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/rating\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\",\\\"rating\\\":\\\"1\\\"}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = JSON.stringify({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"item_id\": \"1000764491\",\n  \"rating\": \"1\"\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/rating\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/rating\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n  member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n  item_id: '1000764491',\n  rating: '1'\n}));\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/items/rating',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n    member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n    item_id: '1000764491',\n    rating: '1'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/rating\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"item_id\": \"1000764491\",\n  \"rating\": \"1\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"user_id\": @\"a0cc6beb-2909-459b-be55-62196af78ce4\",\n                              @\"member_id\": @\"df3456tg-2909-459b-be55-62196afedf85\",\n                              @\"item_id\": @\"1000764491\",\n                              @\"rating\": @\"1\" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/rating\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/rating\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\",\\\"rating\\\":\\\"1\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/rating');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\",\"rating\":\"1\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\",\"rating\":\"1\"}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/rating');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\",\\\"rating\\\":\\\"1\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/items/rating\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/rating\"\n\npayload = {\n    \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n    \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n    \"item_id\": \"1000764491\",\n    \"rating\": \"1\"\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/rating\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\",\\\"rating\\\":\\\"1\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/items/rating \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\",\"rating\":\"1\"}'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"item_id\": \"1000764491\",\n  \"rating\": \"1\"\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/rating\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/items/rating/client": {
            "post": {
                "tags": [
                    "User Data Collection"
                ],
                "summary": "Capture user's given ratings on specific item and save them using client-key",
                "description": "This endpoint captures users given ratings positive (1) or negative (0) on\na specific item and save them to the database. It takes user_id, item_id, and\nrating for the specific item as required parameters and member_id as an optional parameter.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| user_id | str | str | Represents the id of a logged-out unique user. |\n| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |\n| item_id | str | str | Represents the id of the rated item. |\n| rating | str | str | Represents the rating for specific items. The value should be either \"1\" or \"0\" where \"1\" represents positive rating and \"0\" represents negative rating. |",
                "operationId": "post_client_v1_items_rating_client_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Client-Key",
                            "type": "string"
                        },
                        "name": "client-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RatingSchema"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/rating/client\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"client-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\",\\\"rating\\\":\\\"1\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/rating/client\"),\n    Headers =\n    {\n        { \"client-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\",\\\"rating\\\":\\\"1\\\"}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/rating/client\"\n\n\tpayload := strings.NewReader(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\",\\\"rating\\\":\\\"1\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"client-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\",\\\"rating\\\":\\\"1\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/rating/client\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"client-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/items/rating/client\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"client-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\",\\\"rating\\\":\\\"1\\\"}\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/rating/client\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"client-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\",\\\"rating\\\":\\\"1\\\"}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = JSON.stringify({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"item_id\": \"1000764491\",\n  \"rating\": \"1\"\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/rating/client\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"client-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/rating/client\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"client-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n  member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n  item_id: '1000764491',\n  rating: '1'\n}));\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/items/rating/client',\n  headers: {'content-type': 'application/json', 'client-key': 'SOME_STRING_VALUE'},\n  body: {\n    user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n    member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n    item_id: '1000764491',\n    rating: '1'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/rating/client\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"client-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"item_id\": \"1000764491\",\n  \"rating\": \"1\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"client-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"user_id\": @\"a0cc6beb-2909-459b-be55-62196af78ce4\",\n                              @\"member_id\": @\"df3456tg-2909-459b-be55-62196afedf85\",\n                              @\"item_id\": @\"1000764491\",\n                              @\"rating\": @\"1\" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/rating/client\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/rating/client\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\",\\\"rating\\\":\\\"1\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"client-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/rating/client');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'client-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\",\"rating\":\"1\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\",\"rating\":\"1\"}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/rating/client');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'client-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\",\\\"rating\\\":\\\"1\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'client-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/items/rating/client\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/rating/client\"\n\npayload = {\n    \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n    \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n    \"item_id\": \"1000764491\",\n    \"rating\": \"1\"\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"client-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/rating/client\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"client-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\",\\\"rating\\\":\\\"1\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/items/rating/client \\\n  --header 'client-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --data '{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\",\"rating\":\"1\"}'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"client-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"item_id\": \"1000764491\",\n  \"rating\": \"1\"\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/rating/client\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/items/rating/save": {
            "post": {
                "tags": [
                    "Historical User Data Collection"
                ],
                "summary": "Upload a CSV file and save data in rating index",
                "description": "This endpoint uploads and saves data from the CSV file in the rating index. It only\ntakes text or CSV files as a required parameter. If you want to upload your\nrating data from a CSV file with our recommender system this endpoint will upload\nthe file and save them to the database.",
                "operationId": "post_rating_csv_v1_items_rating_save_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_post_rating_csv_v1_items_rating_save_post"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/rating/save\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"multipart/form-data\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/rating/save\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/rating/save\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"multipart/form-data\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/rating/save\")\n  .post(null)\n  .addHeader(\"content-type\", \"multipart/form-data\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/items/rating/save\")\n  .header(\"content-type\", \"multipart/form-data\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/rating/save\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/rating/save\");\nxhr.setRequestHeader(\"content-type\", \"multipart/form-data\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/rating/save\",\n  \"headers\": {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/items/rating/save',\n  headers: {\n    'content-type': 'multipart/form-data',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/rating/save\");\n\nreq.headers({\n  \"content-type\": \"multipart/form-data\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"multipart/form-data\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/rating/save\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/rating/save\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: multipart/form-data\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/rating/save');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'multipart/form-data',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/rating/save');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'content-type' => 'multipart/form-data',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'content-type': \"multipart/form-data\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/items/rating/save\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/rating/save\"\n\nheaders = {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/rating/save\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'multipart/form-data'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/items/rating/save \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: multipart/form-data' \\\n  --header 'project-key: SOME_STRING_VALUE'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"multipart/form-data\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/rating/save\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/users/generate/id": {
            "get": {
                "tags": [
                    "User Data Collection"
                ],
                "summary": "Generate an unique user id",
                "description": "This end point generates an unique user id.",
                "operationId": "get_v1_users_generate_id_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/users/generate/id\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/users/generate/id\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/users/generate/id\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/users/generate/id\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/users/generate/id\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/users/generate/id\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/users/generate/id\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/users/generate/id\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/users/generate/id',\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/users/generate/id\");\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/users/generate/id\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/users/generate/id\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/users/generate/id');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/users/generate/id');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/users/generate/id\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/users/generate/id\"\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/users/generate/id\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request GET \\\n  --url https://api.recommender.gigalogy.com/v1/users/generate/id \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/users/generate/id\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/users": {
            "get": {
                "tags": [
                    "User Data Collection"
                ],
                "summary": "Get user info by user id",
                "description": "Get user information by id\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| user_id | str | str | Represents the id of a logged-out unique user. |\n| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |",
                "operationId": "get_v1_users_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "User Id",
                            "type": "string"
                        },
                        "name": "user_id",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Member Id",
                            "type": "string"
                        },
                        "name": "member_id",
                        "in": "query"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/users?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/users?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/users?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/users?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/users?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/users?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/users?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/users?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/users',\n  qs: {user_id: 'SOME_STRING_VALUE', member_id: 'SOME_STRING_VALUE'},\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/users\");\n\nreq.query({\n  \"user_id\": \"SOME_STRING_VALUE\",\n  \"member_id\": \"SOME_STRING_VALUE\"\n});\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/users?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/users?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/users');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData([\n  'user_id' => 'SOME_STRING_VALUE',\n  'member_id' => 'SOME_STRING_VALUE'\n]);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/users');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString([\n  'user_id' => 'SOME_STRING_VALUE',\n  'member_id' => 'SOME_STRING_VALUE'\n]));\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/users?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/users\"\n\nquerystring = {\"user_id\":\"SOME_STRING_VALUE\",\"member_id\":\"SOME_STRING_VALUE\"}\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/users?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request GET \\\n  --url 'https://api.recommender.gigalogy.com/v1/users?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE' \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/users?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            },
            "put": {
                "tags": [
                    "User Data Collection"
                ],
                "summary": "Updates user information",
                "description": "This endpoint captures user information and saves them to the database.\nIt takes user_id and user_info as required parameters and member_id as optional\nparameter.\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| user_id | str | str | Represents the id of a unique user. |\n| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |\n| address | Optional[str] | str | Represents address of the unique user. |\n| gender | Optional[int] | int | Represents gender of the unique user. 1 for male or 2 for female or 3 for others. |\n| age | Optional[int] | int | Represents age of the user. |\n| key_name | str | str | Represents the type or preference of the user. If you have multiple values for user preference you can assign them here. |\n| separator | Optional[str] | str | If one key contains multiple parameter with separator in your data source please assign the separator here. If there is no separator in column value you can pass `null` or remove the key from the request body. |",
                "operationId": "put_v1_users_put",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserSchema"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/users\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"user_info\\\":{\\\"address\\\":\\\"string\\\",\\\"gender\\\":\\\"integer --> 1 for male or 2 for female or 3 for others\\\",\\\"age\\\":25,\\\"user_type\\\":[{\\\"key_name1\\\":\\\"value1_value2\\\",\\\"separator\\\":\\\"_\\\"},{\\\"key_name2\\\":\\\"value3\\\"}]}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Put,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/users\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"user_info\\\":{\\\"address\\\":\\\"string\\\",\\\"gender\\\":\\\"integer --> 1 for male or 2 for female or 3 for others\\\",\\\"age\\\":25,\\\"user_type\\\":[{\\\"key_name1\\\":\\\"value1_value2\\\",\\\"separator\\\":\\\"_\\\"},{\\\"key_name2\\\":\\\"value3\\\"}]}}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/users\"\n\n\tpayload := strings.NewReader(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"user_info\\\":{\\\"address\\\":\\\"string\\\",\\\"gender\\\":\\\"integer --> 1 for male or 2 for female or 3 for others\\\",\\\"age\\\":25,\\\"user_type\\\":[{\\\"key_name1\\\":\\\"value1_value2\\\",\\\"separator\\\":\\\"_\\\"},{\\\"key_name2\\\":\\\"value3\\\"}]}}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"user_info\\\":{\\\"address\\\":\\\"string\\\",\\\"gender\\\":\\\"integer --> 1 for male or 2 for female or 3 for others\\\",\\\"age\\\":25,\\\"user_type\\\":[{\\\"key_name1\\\":\\\"value1_value2\\\",\\\"separator\\\":\\\"_\\\"},{\\\"key_name2\\\":\\\"value3\\\"}]}}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/users\")\n  .put(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.put(\"https://api.recommender.gigalogy.com/v1/users\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"user_info\\\":{\\\"address\\\":\\\"string\\\",\\\"gender\\\":\\\"integer --> 1 for male or 2 for female or 3 for others\\\",\\\"age\\\":25,\\\"user_type\\\":[{\\\"key_name1\\\":\\\"value1_value2\\\",\\\"separator\\\":\\\"_\\\"},{\\\"key_name2\\\":\\\"value3\\\"}]}}\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/users\",\n  \"method\": \"PUT\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"user_info\\\":{\\\"address\\\":\\\"string\\\",\\\"gender\\\":\\\"integer --> 1 for male or 2 for female or 3 for others\\\",\\\"age\\\":25,\\\"user_type\\\":[{\\\"key_name1\\\":\\\"value1_value2\\\",\\\"separator\\\":\\\"_\\\"},{\\\"key_name2\\\":\\\"value3\\\"}]}}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = JSON.stringify({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"user_info\": {\n    \"address\": \"string\",\n    \"gender\": \"integer --> 1 for male or 2 for female or 3 for others\",\n    \"age\": 25,\n    \"user_type\": [\n      {\n        \"key_name1\": \"value1_value2\",\n        \"separator\": \"_\"\n      },\n      {\n        \"key_name2\": \"value3\"\n      }\n    ]\n  }\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PUT\", \"https://api.recommender.gigalogy.com/v1/users\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/users\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n  member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n  user_info: {\n    address: 'string',\n    gender: 'integer --> 1 for male or 2 for female or 3 for others',\n    age: 25,\n    user_type: [{key_name1: 'value1_value2', separator: '_'}, {key_name2: 'value3'}]\n  }\n}));\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.recommender.gigalogy.com/v1/users',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n    member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n    user_info: {\n      address: 'string',\n      gender: 'integer --> 1 for male or 2 for female or 3 for others',\n      age: 25,\n      user_type: [{key_name1: 'value1_value2', separator: '_'}, {key_name2: 'value3'}]\n    }\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"PUT\", \"https://api.recommender.gigalogy.com/v1/users\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"user_info\": {\n    \"address\": \"string\",\n    \"gender\": \"integer --> 1 for male or 2 for female or 3 for others\",\n    \"age\": 25,\n    \"user_type\": [\n      {\n        \"key_name1\": \"value1_value2\",\n        \"separator\": \"_\"\n      },\n      {\n        \"key_name2\": \"value3\"\n      }\n    ]\n  }\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"user_id\": @\"a0cc6beb-2909-459b-be55-62196af78ce4\",\n                              @\"member_id\": @\"df3456tg-2909-459b-be55-62196afedf85\",\n                              @\"user_info\": @{ @\"address\": @\"string\", @\"gender\": @\"integer --> 1 for male or 2 for female or 3 for others\", @\"age\": @25, @\"user_type\": @[ @{ @\"key_name1\": @\"value1_value2\", @\"separator\": @\"_\" }, @{ @\"key_name2\": @\"value3\" } ] } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/users\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PUT\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/users\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"user_info\\\":{\\\"address\\\":\\\"string\\\",\\\"gender\\\":\\\"integer --> 1 for male or 2 for female or 3 for others\\\",\\\"age\\\":25,\\\"user_type\\\":[{\\\"key_name1\\\":\\\"value1_value2\\\",\\\"separator\\\":\\\"_\\\"},{\\\"key_name2\\\":\\\"value3\\\"}]}}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/users');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"user_info\":{\"address\":\"string\",\"gender\":\"integer --> 1 for male or 2 for female or 3 for others\",\"age\":25,\"user_type\":[{\"key_name1\":\"value1_value2\",\"separator\":\"_\"},{\"key_name2\":\"value3\"}]}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"user_info\":{\"address\":\"string\",\"gender\":\"integer --> 1 for male or 2 for female or 3 for others\",\"age\":25,\"user_type\":[{\"key_name1\":\"value1_value2\",\"separator\":\"_\"},{\"key_name2\":\"value3\"}]}}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/users');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"user_info\\\":{\\\"address\\\":\\\"string\\\",\\\"gender\\\":\\\"integer --> 1 for male or 2 for female or 3 for others\\\",\\\"age\\\":25,\\\"user_type\\\":[{\\\"key_name1\\\":\\\"value1_value2\\\",\\\"separator\\\":\\\"_\\\"},{\\\"key_name2\\\":\\\"value3\\\"}]}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"PUT\", \"/v1/users\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/users\"\n\npayload = {\n    \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n    \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n    \"user_info\": {\n        \"address\": \"string\",\n        \"gender\": \"integer --> 1 for male or 2 for female or 3 for others\",\n        \"age\": 25,\n        \"user_type\": [{\n                \"key_name1\": \"value1_value2\",\n                \"separator\": \"_\"\n            }, {\"key_name2\": \"value3\"}]\n    }\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"PUT\", url, json=payload, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/users\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"user_info\\\":{\\\"address\\\":\\\"string\\\",\\\"gender\\\":\\\"integer --> 1 for male or 2 for female or 3 for others\\\",\\\"age\\\":25,\\\"user_type\\\":[{\\\"key_name1\\\":\\\"value1_value2\\\",\\\"separator\\\":\\\"_\\\"},{\\\"key_name2\\\":\\\"value3\\\"}]}}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request PUT \\\n  --url https://api.recommender.gigalogy.com/v1/users \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"user_info\":{\"address\":\"string\",\"gender\":\"integer --> 1 for male or 2 for female or 3 for others\",\"age\":25,\"user_type\":[{\"key_name1\":\"value1_value2\",\"separator\":\"_\"},{\"key_name2\":\"value3\"}]}}'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"user_info\": [\n    \"address\": \"string\",\n    \"gender\": \"integer --> 1 for male or 2 for female or 3 for others\",\n    \"age\": 25,\n    \"user_type\": [[\n        \"key_name1\": \"value1_value2\",\n        \"separator\": \"_\"\n      ], [\"key_name2\": \"value3\"]]\n  ]\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/users\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"PUT\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            },
            "post": {
                "tags": [
                    "User Data Collection"
                ],
                "summary": "Captures user information",
                "description": "This endpoint captures user information and saves them to the database.\nIt takes user_id and user_info as required parameters and member_id as optional\nparameter.\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| user_id | str | str | Represents the id of a unique user. |\n| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |\n| address | Optional[str] | str | Represents address of the unique user. |\n| gender | Optional[int] | int | Represents gender of the unique user. 1 for male or 2 for female or 3 for others. |\n| age | Optional[int] | int | Represents age of the user. |\n| key_name | str | str | Represents the type or preference of the user. If you have multiple values for user preference you can assign them here. |\n| separator | Optional[str] | str | If one key contains multiple parameter with separator in your data source please assign the separator here. If there is no separator in column value you can pass `null` or remove the key from the request body. |",
                "operationId": "post_v1_users_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserSchema"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/users\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"user_info\\\":{\\\"address\\\":\\\"string\\\",\\\"gender\\\":\\\"integer --> 1 for male or 2 for female or 3 for others\\\",\\\"age\\\":25,\\\"user_type\\\":[{\\\"key_name1\\\":\\\"value1_value2\\\",\\\"separator\\\":\\\"_\\\"},{\\\"key_name2\\\":\\\"value3\\\"}]}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/users\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"user_info\\\":{\\\"address\\\":\\\"string\\\",\\\"gender\\\":\\\"integer --> 1 for male or 2 for female or 3 for others\\\",\\\"age\\\":25,\\\"user_type\\\":[{\\\"key_name1\\\":\\\"value1_value2\\\",\\\"separator\\\":\\\"_\\\"},{\\\"key_name2\\\":\\\"value3\\\"}]}}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/users\"\n\n\tpayload := strings.NewReader(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"user_info\\\":{\\\"address\\\":\\\"string\\\",\\\"gender\\\":\\\"integer --> 1 for male or 2 for female or 3 for others\\\",\\\"age\\\":25,\\\"user_type\\\":[{\\\"key_name1\\\":\\\"value1_value2\\\",\\\"separator\\\":\\\"_\\\"},{\\\"key_name2\\\":\\\"value3\\\"}]}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"user_info\\\":{\\\"address\\\":\\\"string\\\",\\\"gender\\\":\\\"integer --> 1 for male or 2 for female or 3 for others\\\",\\\"age\\\":25,\\\"user_type\\\":[{\\\"key_name1\\\":\\\"value1_value2\\\",\\\"separator\\\":\\\"_\\\"},{\\\"key_name2\\\":\\\"value3\\\"}]}}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/users\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/users\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"user_info\\\":{\\\"address\\\":\\\"string\\\",\\\"gender\\\":\\\"integer --> 1 for male or 2 for female or 3 for others\\\",\\\"age\\\":25,\\\"user_type\\\":[{\\\"key_name1\\\":\\\"value1_value2\\\",\\\"separator\\\":\\\"_\\\"},{\\\"key_name2\\\":\\\"value3\\\"}]}}\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/users\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"user_info\\\":{\\\"address\\\":\\\"string\\\",\\\"gender\\\":\\\"integer --> 1 for male or 2 for female or 3 for others\\\",\\\"age\\\":25,\\\"user_type\\\":[{\\\"key_name1\\\":\\\"value1_value2\\\",\\\"separator\\\":\\\"_\\\"},{\\\"key_name2\\\":\\\"value3\\\"}]}}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = JSON.stringify({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"user_info\": {\n    \"address\": \"string\",\n    \"gender\": \"integer --> 1 for male or 2 for female or 3 for others\",\n    \"age\": 25,\n    \"user_type\": [\n      {\n        \"key_name1\": \"value1_value2\",\n        \"separator\": \"_\"\n      },\n      {\n        \"key_name2\": \"value3\"\n      }\n    ]\n  }\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/users\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/users\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n  member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n  user_info: {\n    address: 'string',\n    gender: 'integer --> 1 for male or 2 for female or 3 for others',\n    age: 25,\n    user_type: [{key_name1: 'value1_value2', separator: '_'}, {key_name2: 'value3'}]\n  }\n}));\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/users',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n    member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n    user_info: {\n      address: 'string',\n      gender: 'integer --> 1 for male or 2 for female or 3 for others',\n      age: 25,\n      user_type: [{key_name1: 'value1_value2', separator: '_'}, {key_name2: 'value3'}]\n    }\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/users\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"user_info\": {\n    \"address\": \"string\",\n    \"gender\": \"integer --> 1 for male or 2 for female or 3 for others\",\n    \"age\": 25,\n    \"user_type\": [\n      {\n        \"key_name1\": \"value1_value2\",\n        \"separator\": \"_\"\n      },\n      {\n        \"key_name2\": \"value3\"\n      }\n    ]\n  }\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"user_id\": @\"a0cc6beb-2909-459b-be55-62196af78ce4\",\n                              @\"member_id\": @\"df3456tg-2909-459b-be55-62196afedf85\",\n                              @\"user_info\": @{ @\"address\": @\"string\", @\"gender\": @\"integer --> 1 for male or 2 for female or 3 for others\", @\"age\": @25, @\"user_type\": @[ @{ @\"key_name1\": @\"value1_value2\", @\"separator\": @\"_\" }, @{ @\"key_name2\": @\"value3\" } ] } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/users\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/users\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"user_info\\\":{\\\"address\\\":\\\"string\\\",\\\"gender\\\":\\\"integer --> 1 for male or 2 for female or 3 for others\\\",\\\"age\\\":25,\\\"user_type\\\":[{\\\"key_name1\\\":\\\"value1_value2\\\",\\\"separator\\\":\\\"_\\\"},{\\\"key_name2\\\":\\\"value3\\\"}]}}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/users');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"user_info\":{\"address\":\"string\",\"gender\":\"integer --> 1 for male or 2 for female or 3 for others\",\"age\":25,\"user_type\":[{\"key_name1\":\"value1_value2\",\"separator\":\"_\"},{\"key_name2\":\"value3\"}]}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"user_info\":{\"address\":\"string\",\"gender\":\"integer --> 1 for male or 2 for female or 3 for others\",\"age\":25,\"user_type\":[{\"key_name1\":\"value1_value2\",\"separator\":\"_\"},{\"key_name2\":\"value3\"}]}}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/users');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"user_info\\\":{\\\"address\\\":\\\"string\\\",\\\"gender\\\":\\\"integer --> 1 for male or 2 for female or 3 for others\\\",\\\"age\\\":25,\\\"user_type\\\":[{\\\"key_name1\\\":\\\"value1_value2\\\",\\\"separator\\\":\\\"_\\\"},{\\\"key_name2\\\":\\\"value3\\\"}]}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/users\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/users\"\n\npayload = {\n    \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n    \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n    \"user_info\": {\n        \"address\": \"string\",\n        \"gender\": \"integer --> 1 for male or 2 for female or 3 for others\",\n        \"age\": 25,\n        \"user_type\": [{\n                \"key_name1\": \"value1_value2\",\n                \"separator\": \"_\"\n            }, {\"key_name2\": \"value3\"}]\n    }\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/users\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"user_info\\\":{\\\"address\\\":\\\"string\\\",\\\"gender\\\":\\\"integer --> 1 for male or 2 for female or 3 for others\\\",\\\"age\\\":25,\\\"user_type\\\":[{\\\"key_name1\\\":\\\"value1_value2\\\",\\\"separator\\\":\\\"_\\\"},{\\\"key_name2\\\":\\\"value3\\\"}]}}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/users \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"user_info\":{\"address\":\"string\",\"gender\":\"integer --> 1 for male or 2 for female or 3 for others\",\"age\":25,\"user_type\":[{\"key_name1\":\"value1_value2\",\"separator\":\"_\"},{\"key_name2\":\"value3\"}]}}'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"user_info\": [\n    \"address\": \"string\",\n    \"gender\": \"integer --> 1 for male or 2 for female or 3 for others\",\n    \"age\": 25,\n    \"user_type\": [[\n        \"key_name1\": \"value1_value2\",\n        \"separator\": \"_\"\n      ], [\"key_name2\": \"value3\"]]\n  ]\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/users\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/users/client": {
            "post": {
                "tags": [
                    "User Data Collection"
                ],
                "summary": "Captures user information using client key",
                "description": "This endpoint captures user information and saves them to the database.\nIt takes user_id and user_info as required parameters and member_id as optional\nparameter.\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| user_id | str | str | Represents the id of a unique user. |\n| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |\n| address | Optional[str] | str | Represents address of the unique user. |\n| gender | Optional[int] | int | Represents gender of the unique user. 1 for male or 2 for female or 3 for others. |\n| age | Optional[int] | int | Represents age of the user. |\n| key_name | str | str | Represents the type or preference of the user. If you have multiple values for user preference you can assign them here. |\n| separator | Optional[str] | str | If one key contains multiple parameter with separator in your data source please assign the separator here. If there is no separator in column value you can pass `null` or remove the key from the request body. |",
                "operationId": "post_client_v1_users_client_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Client-Key",
                            "type": "string"
                        },
                        "name": "client-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserSchema"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/users/client\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"client-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"user_info\\\":{\\\"address\\\":\\\"string\\\",\\\"gender\\\":\\\"integer --> 1 for male or 2 for female or 3 for others\\\",\\\"age\\\":25,\\\"user_type\\\":[{\\\"key_name1\\\":\\\"value1_value2\\\",\\\"separator\\\":\\\"_\\\"},{\\\"key_name2\\\":\\\"value3\\\"}]}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/users/client\"),\n    Headers =\n    {\n        { \"client-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"user_info\\\":{\\\"address\\\":\\\"string\\\",\\\"gender\\\":\\\"integer --> 1 for male or 2 for female or 3 for others\\\",\\\"age\\\":25,\\\"user_type\\\":[{\\\"key_name1\\\":\\\"value1_value2\\\",\\\"separator\\\":\\\"_\\\"},{\\\"key_name2\\\":\\\"value3\\\"}]}}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/users/client\"\n\n\tpayload := strings.NewReader(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"user_info\\\":{\\\"address\\\":\\\"string\\\",\\\"gender\\\":\\\"integer --> 1 for male or 2 for female or 3 for others\\\",\\\"age\\\":25,\\\"user_type\\\":[{\\\"key_name1\\\":\\\"value1_value2\\\",\\\"separator\\\":\\\"_\\\"},{\\\"key_name2\\\":\\\"value3\\\"}]}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"client-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"user_info\\\":{\\\"address\\\":\\\"string\\\",\\\"gender\\\":\\\"integer --> 1 for male or 2 for female or 3 for others\\\",\\\"age\\\":25,\\\"user_type\\\":[{\\\"key_name1\\\":\\\"value1_value2\\\",\\\"separator\\\":\\\"_\\\"},{\\\"key_name2\\\":\\\"value3\\\"}]}}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/users/client\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"client-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/users/client\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"client-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"user_info\\\":{\\\"address\\\":\\\"string\\\",\\\"gender\\\":\\\"integer --> 1 for male or 2 for female or 3 for others\\\",\\\"age\\\":25,\\\"user_type\\\":[{\\\"key_name1\\\":\\\"value1_value2\\\",\\\"separator\\\":\\\"_\\\"},{\\\"key_name2\\\":\\\"value3\\\"}]}}\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/users/client\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"client-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"user_info\\\":{\\\"address\\\":\\\"string\\\",\\\"gender\\\":\\\"integer --> 1 for male or 2 for female or 3 for others\\\",\\\"age\\\":25,\\\"user_type\\\":[{\\\"key_name1\\\":\\\"value1_value2\\\",\\\"separator\\\":\\\"_\\\"},{\\\"key_name2\\\":\\\"value3\\\"}]}}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = JSON.stringify({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"user_info\": {\n    \"address\": \"string\",\n    \"gender\": \"integer --> 1 for male or 2 for female or 3 for others\",\n    \"age\": 25,\n    \"user_type\": [\n      {\n        \"key_name1\": \"value1_value2\",\n        \"separator\": \"_\"\n      },\n      {\n        \"key_name2\": \"value3\"\n      }\n    ]\n  }\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/users/client\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"client-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/users/client\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"client-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n  member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n  user_info: {\n    address: 'string',\n    gender: 'integer --> 1 for male or 2 for female or 3 for others',\n    age: 25,\n    user_type: [{key_name1: 'value1_value2', separator: '_'}, {key_name2: 'value3'}]\n  }\n}));\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/users/client',\n  headers: {'content-type': 'application/json', 'client-key': 'SOME_STRING_VALUE'},\n  body: {\n    user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n    member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n    user_info: {\n      address: 'string',\n      gender: 'integer --> 1 for male or 2 for female or 3 for others',\n      age: 25,\n      user_type: [{key_name1: 'value1_value2', separator: '_'}, {key_name2: 'value3'}]\n    }\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/users/client\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"client-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"user_info\": {\n    \"address\": \"string\",\n    \"gender\": \"integer --> 1 for male or 2 for female or 3 for others\",\n    \"age\": 25,\n    \"user_type\": [\n      {\n        \"key_name1\": \"value1_value2\",\n        \"separator\": \"_\"\n      },\n      {\n        \"key_name2\": \"value3\"\n      }\n    ]\n  }\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"client-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"user_id\": @\"a0cc6beb-2909-459b-be55-62196af78ce4\",\n                              @\"member_id\": @\"df3456tg-2909-459b-be55-62196afedf85\",\n                              @\"user_info\": @{ @\"address\": @\"string\", @\"gender\": @\"integer --> 1 for male or 2 for female or 3 for others\", @\"age\": @25, @\"user_type\": @[ @{ @\"key_name1\": @\"value1_value2\", @\"separator\": @\"_\" }, @{ @\"key_name2\": @\"value3\" } ] } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/users/client\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/users/client\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"user_info\\\":{\\\"address\\\":\\\"string\\\",\\\"gender\\\":\\\"integer --> 1 for male or 2 for female or 3 for others\\\",\\\"age\\\":25,\\\"user_type\\\":[{\\\"key_name1\\\":\\\"value1_value2\\\",\\\"separator\\\":\\\"_\\\"},{\\\"key_name2\\\":\\\"value3\\\"}]}}\",\n  CURLOPT_HTTPHEADER => [\n    \"client-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/users/client');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'client-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"user_info\":{\"address\":\"string\",\"gender\":\"integer --> 1 for male or 2 for female or 3 for others\",\"age\":25,\"user_type\":[{\"key_name1\":\"value1_value2\",\"separator\":\"_\"},{\"key_name2\":\"value3\"}]}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"user_info\":{\"address\":\"string\",\"gender\":\"integer --> 1 for male or 2 for female or 3 for others\",\"age\":25,\"user_type\":[{\"key_name1\":\"value1_value2\",\"separator\":\"_\"},{\"key_name2\":\"value3\"}]}}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/users/client');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'client-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"user_info\\\":{\\\"address\\\":\\\"string\\\",\\\"gender\\\":\\\"integer --> 1 for male or 2 for female or 3 for others\\\",\\\"age\\\":25,\\\"user_type\\\":[{\\\"key_name1\\\":\\\"value1_value2\\\",\\\"separator\\\":\\\"_\\\"},{\\\"key_name2\\\":\\\"value3\\\"}]}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'client-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/users/client\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/users/client\"\n\npayload = {\n    \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n    \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n    \"user_info\": {\n        \"address\": \"string\",\n        \"gender\": \"integer --> 1 for male or 2 for female or 3 for others\",\n        \"age\": 25,\n        \"user_type\": [{\n                \"key_name1\": \"value1_value2\",\n                \"separator\": \"_\"\n            }, {\"key_name2\": \"value3\"}]\n    }\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"client-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/users/client\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"client-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"user_info\\\":{\\\"address\\\":\\\"string\\\",\\\"gender\\\":\\\"integer --> 1 for male or 2 for female or 3 for others\\\",\\\"age\\\":25,\\\"user_type\\\":[{\\\"key_name1\\\":\\\"value1_value2\\\",\\\"separator\\\":\\\"_\\\"},{\\\"key_name2\\\":\\\"value3\\\"}]}}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/users/client \\\n  --header 'client-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --data '{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"user_info\":{\"address\":\"string\",\"gender\":\"integer --> 1 for male or 2 for female or 3 for others\",\"age\":25,\"user_type\":[{\"key_name1\":\"value1_value2\",\"separator\":\"_\"},{\"key_name2\":\"value3\"}]}}'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"client-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"user_info\": [\n    \"address\": \"string\",\n    \"gender\": \"integer --> 1 for male or 2 for female or 3 for others\",\n    \"age\": 25,\n    \"user_type\": [[\n        \"key_name1\": \"value1_value2\",\n        \"separator\": \"_\"\n      ], [\"key_name2\": \"value3\"]]\n  ]\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/users/client\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/users/save": {
            "post": {
                "tags": [
                    "Historical User Data Collection"
                ],
                "summary": "Upload a CSV file and save data in user index",
                "description": "This endpoint uploads and saves data from the CSV file in the user index. It only\ntakes text or CSV files as a required parameter. If you want to upload your\nuser information data from a CSV file with our recommender system this endpoint will upload\nthe file and save them to the database.",
                "operationId": "post_user_csv_v1_users_save_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_post_user_csv_v1_users_save_post"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/users/save\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"multipart/form-data\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/users/save\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/users/save\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"multipart/form-data\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/users/save\")\n  .post(null)\n  .addHeader(\"content-type\", \"multipart/form-data\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/users/save\")\n  .header(\"content-type\", \"multipart/form-data\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/users/save\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/users/save\");\nxhr.setRequestHeader(\"content-type\", \"multipart/form-data\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/users/save\",\n  \"headers\": {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/users/save',\n  headers: {\n    'content-type': 'multipart/form-data',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/users/save\");\n\nreq.headers({\n  \"content-type\": \"multipart/form-data\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"multipart/form-data\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/users/save\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/users/save\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: multipart/form-data\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/users/save');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'multipart/form-data',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/users/save');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'content-type' => 'multipart/form-data',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'content-type': \"multipart/form-data\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/users/save\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/users/save\"\n\nheaders = {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/users/save\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'multipart/form-data'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/users/save \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: multipart/form-data' \\\n  --header 'project-key: SOME_STRING_VALUE'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"multipart/form-data\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/users/save\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/items/recommend": {
            "post": {
                "tags": [
                    "Recommendation"
                ],
                "summary": "recommend the most similar items to our input item_id in terms of content",
                "description": "This endpoint understands the content of your item and returns the most similar\nitems as response. It takes user_id, item_id, details as required parameter\nand member_id as optional parameter.\nThis endpoint can be used on product details page.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| user_id | str | str | Represents the id of a logged-out unique user. |\n| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |\n| item_id | str | str | Represents the id of an item. |\n| details | bool | bool | If you want to get recommended items with details this parameter would be `True` otherwise it would be `False`. |",
                "operationId": "item_recommend_details_v1_items_recommend_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ItemRecommendSchema"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/recommend\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000757666\\\",\\\"details\\\":true}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/recommend\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000757666\\\",\\\"details\\\":true}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/recommend\"\n\n\tpayload := strings.NewReader(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000757666\\\",\\\"details\\\":true}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000757666\\\",\\\"details\\\":true}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/recommend\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/items/recommend\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000757666\\\",\\\"details\\\":true}\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/recommend\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000757666\\\",\\\"details\\\":true}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = JSON.stringify({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"item_id\": \"1000757666\",\n  \"details\": true\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/recommend\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/recommend\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n  member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n  item_id: '1000757666',\n  details: true\n}));\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/items/recommend',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n    member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n    item_id: '1000757666',\n    details: true\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/recommend\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"item_id\": \"1000757666\",\n  \"details\": true\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"user_id\": @\"a0cc6beb-2909-459b-be55-62196af78ce4\",\n                              @\"member_id\": @\"df3456tg-2909-459b-be55-62196afedf85\",\n                              @\"item_id\": @\"1000757666\",\n                              @\"details\": @YES };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/recommend\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/recommend\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000757666\\\",\\\"details\\\":true}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/recommend');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000757666\",\"details\":true}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000757666\",\"details\":true}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/recommend');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000757666\\\",\\\"details\\\":true}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/items/recommend\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/recommend\"\n\npayload = {\n    \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n    \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n    \"item_id\": \"1000757666\",\n    \"details\": True\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/recommend\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000757666\\\",\\\"details\\\":true}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/items/recommend \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000757666\",\"details\":true}'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"item_id\": \"1000757666\",\n  \"details\": true\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/recommend\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/items/purchased/together": {
            "post": {
                "tags": [
                    "Recommendation"
                ],
                "summary": "recommend items those are purchased together",
                "description": "This endpoint returns items those are frequently purchased together. \nIt takes user_id, item_id, details as required parameter\nand member_id as optional parameter.\nThis endpoint can be used on product details page.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| user_id | str | str | Represents the id of a logged-out unique user. |\n| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |\n| item_id | str | str | Represents the id of an item. |\n| details | bool | bool | If you want to get recommended items with details this parameter would be `True` otherwise it would be `False`. |",
                "operationId": "item_purchased_together_v1_items_purchased_together_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ItemRecommendSchema"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/purchased/together\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000757666\\\",\\\"details\\\":true}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/purchased/together\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000757666\\\",\\\"details\\\":true}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/purchased/together\"\n\n\tpayload := strings.NewReader(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000757666\\\",\\\"details\\\":true}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000757666\\\",\\\"details\\\":true}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/purchased/together\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/items/purchased/together\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000757666\\\",\\\"details\\\":true}\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/purchased/together\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000757666\\\",\\\"details\\\":true}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = JSON.stringify({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"item_id\": \"1000757666\",\n  \"details\": true\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/purchased/together\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/purchased/together\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n  member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n  item_id: '1000757666',\n  details: true\n}));\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/items/purchased/together',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n    member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n    item_id: '1000757666',\n    details: true\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/purchased/together\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"item_id\": \"1000757666\",\n  \"details\": true\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"user_id\": @\"a0cc6beb-2909-459b-be55-62196af78ce4\",\n                              @\"member_id\": @\"df3456tg-2909-459b-be55-62196afedf85\",\n                              @\"item_id\": @\"1000757666\",\n                              @\"details\": @YES };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/purchased/together\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/purchased/together\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000757666\\\",\\\"details\\\":true}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/purchased/together');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000757666\",\"details\":true}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000757666\",\"details\":true}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/purchased/together');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000757666\\\",\\\"details\\\":true}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/items/purchased/together\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/purchased/together\"\n\npayload = {\n    \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n    \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n    \"item_id\": \"1000757666\",\n    \"details\": True\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/purchased/together\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000757666\\\",\\\"details\\\":true}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/items/purchased/together \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000757666\",\"details\":true}'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"item_id\": \"1000757666\",\n  \"details\": true\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/purchased/together\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/users/recommend": {
            "post": {
                "tags": [
                    "Recommendation"
                ],
                "summary": "recommend the most suitable items based on user behavior",
                "description": "This endpoint understands user behavior such as browse, purchase, favorites,\ntime spent in your application and returns the most suitable items for them\nas response. It takes user_id, details, interval, top_n_items as required parameter and member_id as\noptional parameter.\nThis endpoint can be used on user feed, top page, personalized suggestions etc.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| user_id | str | str | Represents the id of a logged-out unique user. |\n| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |\n| interval | Enum | Selected enum value | Represents the time range depending which it will predict trending and top recommended items. Available values are `weekly`, `bi-weekly`, `monthly`, `quarterly`, `yearly`. Interval should be similar to the interval parameter of `../rank/settings` endpoint.\n| top_n_item | int | int | Represents number of top ranked items in given time interval. |\n| details | bool | bool | If you want to get recommended items with details this parameter would be `True` otherwise it would be `False`. |",
                "operationId": "behavior_recommend_details_v1_users_recommend_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BehaviorRecommendSchema"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/users/recommend\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"top_n_item\\\":100,\\\"interval\\\":\\\"weekly\\\",\\\"start\\\":0,\\\"size\\\":10,\\\"details\\\":true}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/users/recommend\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"top_n_item\\\":100,\\\"interval\\\":\\\"weekly\\\",\\\"start\\\":0,\\\"size\\\":10,\\\"details\\\":true}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/users/recommend\"\n\n\tpayload := strings.NewReader(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"top_n_item\\\":100,\\\"interval\\\":\\\"weekly\\\",\\\"start\\\":0,\\\"size\\\":10,\\\"details\\\":true}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"top_n_item\\\":100,\\\"interval\\\":\\\"weekly\\\",\\\"start\\\":0,\\\"size\\\":10,\\\"details\\\":true}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/users/recommend\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/users/recommend\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"top_n_item\\\":100,\\\"interval\\\":\\\"weekly\\\",\\\"start\\\":0,\\\"size\\\":10,\\\"details\\\":true}\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/users/recommend\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"top_n_item\\\":100,\\\"interval\\\":\\\"weekly\\\",\\\"start\\\":0,\\\"size\\\":10,\\\"details\\\":true}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = JSON.stringify({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"top_n_item\": 100,\n  \"interval\": \"weekly\",\n  \"start\": 0,\n  \"size\": 10,\n  \"details\": true\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/users/recommend\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/users/recommend\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n  member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n  top_n_item: 100,\n  interval: 'weekly',\n  start: 0,\n  size: 10,\n  details: true\n}));\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/users/recommend',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n    member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n    top_n_item: 100,\n    interval: 'weekly',\n    start: 0,\n    size: 10,\n    details: true\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/users/recommend\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"top_n_item\": 100,\n  \"interval\": \"weekly\",\n  \"start\": 0,\n  \"size\": 10,\n  \"details\": true\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"user_id\": @\"a0cc6beb-2909-459b-be55-62196af78ce4\",\n                              @\"member_id\": @\"df3456tg-2909-459b-be55-62196afedf85\",\n                              @\"top_n_item\": @100,\n                              @\"interval\": @\"weekly\",\n                              @\"start\": @0,\n                              @\"size\": @10,\n                              @\"details\": @YES };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/users/recommend\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/users/recommend\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"top_n_item\\\":100,\\\"interval\\\":\\\"weekly\\\",\\\"start\\\":0,\\\"size\\\":10,\\\"details\\\":true}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/users/recommend');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"top_n_item\":100,\"interval\":\"weekly\",\"start\":0,\"size\":10,\"details\":true}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"top_n_item\":100,\"interval\":\"weekly\",\"start\":0,\"size\":10,\"details\":true}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/users/recommend');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"top_n_item\\\":100,\\\"interval\\\":\\\"weekly\\\",\\\"start\\\":0,\\\"size\\\":10,\\\"details\\\":true}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/users/recommend\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/users/recommend\"\n\npayload = {\n    \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n    \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n    \"top_n_item\": 100,\n    \"interval\": \"weekly\",\n    \"start\": 0,\n    \"size\": 10,\n    \"details\": True\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/users/recommend\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"top_n_item\\\":100,\\\"interval\\\":\\\"weekly\\\",\\\"start\\\":0,\\\"size\\\":10,\\\"details\\\":true}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/users/recommend \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"top_n_item\":100,\"interval\":\"weekly\",\"start\":0,\"size\":10,\"details\":true}'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"top_n_item\": 100,\n  \"interval\": \"weekly\",\n  \"start\": 0,\n  \"size\": 10,\n  \"details\": true\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/users/recommend\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/items/trending": {
            "post": {
                "tags": [
                    "Recommendation"
                ],
                "summary": "recommend the latest trending items",
                "description": "This endpoint considers all sorts of possible parameters in your application\nsuch as user behavior, item co-relation, external impact, business impact and\nreturns the trending items for given interval as response. It takes top_n_item,\ninterval, details as required parameters.\nThis endpoint can be used on user feed, top page, personalized suggestions etc.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| top_n_item | int | int | Represents number of top ranked items in given time interval. |\n| interval | Enum | Selected enum value | Represents the time range depending which it will predict trending and top recommended items. Available values are `weekly`, `bi-weekly`, `monthly`, `quarterly`, `yearly`. Interval should be similar to the interval parameter of `../rank/settings` endpoint. |\n| details | bool | bool | If you want to get recommended items with details this parameter would be `True` otherwise it would be `False`. |",
                "operationId": "rank_recommend_v1_items_trending_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RankRecommendSchema"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/trending\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"top_n_item\\\":100,\\\"interval\\\":\\\"weekly\\\",\\\"details\\\":true}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/trending\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"top_n_item\\\":100,\\\"interval\\\":\\\"weekly\\\",\\\"details\\\":true}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/trending\"\n\n\tpayload := strings.NewReader(\"{\\\"top_n_item\\\":100,\\\"interval\\\":\\\"weekly\\\",\\\"details\\\":true}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"top_n_item\\\":100,\\\"interval\\\":\\\"weekly\\\",\\\"details\\\":true}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/trending\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/items/trending\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"top_n_item\\\":100,\\\"interval\\\":\\\"weekly\\\",\\\"details\\\":true}\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/trending\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"top_n_item\\\":100,\\\"interval\\\":\\\"weekly\\\",\\\"details\\\":true}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = JSON.stringify({\n  \"top_n_item\": 100,\n  \"interval\": \"weekly\",\n  \"details\": true\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/trending\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/trending\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({top_n_item: 100, interval: 'weekly', details: true}));\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/items/trending',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {top_n_item: 100, interval: 'weekly', details: true},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/trending\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"top_n_item\": 100,\n  \"interval\": \"weekly\",\n  \"details\": true\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"top_n_item\": @100,\n                              @\"interval\": @\"weekly\",\n                              @\"details\": @YES };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/trending\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/trending\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"top_n_item\\\":100,\\\"interval\\\":\\\"weekly\\\",\\\"details\\\":true}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/trending');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"top_n_item\":100,\"interval\":\"weekly\",\"details\":true}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"top_n_item\":100,\"interval\":\"weekly\",\"details\":true}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/trending');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"top_n_item\\\":100,\\\"interval\\\":\\\"weekly\\\",\\\"details\\\":true}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/items/trending\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/trending\"\n\npayload = {\n    \"top_n_item\": 100,\n    \"interval\": \"weekly\",\n    \"details\": True\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/trending\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"top_n_item\\\":100,\\\"interval\\\":\\\"weekly\\\",\\\"details\\\":true}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/items/trending \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"top_n_item\":100,\"interval\":\"weekly\",\"details\":true}'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"top_n_item\": 100,\n  \"interval\": \"weekly\",\n  \"details\": true\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/trending\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/items/image/recommend": {
            "post": {
                "tags": [
                    "Recommendation"
                ],
                "summary": "recommend items based on image similarity",
                "description": "This endpoint understands the features your input image contains and returns the\nmost similar items in your catalog in terms of the image features. It also considers\nuser behavior to boost the result. It takes user_id, item_id, details as required\nparameter and member_id, image_url as optional parameter.\nThis endpoint can be used on product details page.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| user_id | str | str | Represents the id of a logged-out unique user. |\n| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |\n| item_id | str | str | Represents the id of an item. |\n| ItemDetails | Optional[Dict[str, str]] | str | Represents the item details. If you use unknown item_id which does not exist in your data source then you have to pass item details to get most similar items. |\n| image_url | str | str | Represents the image url of an item from this url it generate features will find the most similar items. |\n| price | int | int | Represents the price of the given image_urls item. |\n| category | Optional[List[str]] | int | Represents the list of categories of the given image_urls item. This category values has to be matched with the previously added items data |\n| details | bool | bool | If you want to get recommended items with details this parameter would be `True` otherwise it would be `False`. |",
                "operationId": "image_recommend_v1_items_image_recommend_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ImageRecommendSchema"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/image/recommend\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000757666\\\",\\\"item_details\\\":{\\\"image_url\\\":\\\"https://picsum.photos/200/300\\\",\\\"price\\\":8525,\\\"category\\\":[\\\"304904\\\",\\\"304029\\\",\\\"302536\\\"]},\\\"details\\\":true}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/image/recommend\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000757666\\\",\\\"item_details\\\":{\\\"image_url\\\":\\\"https://picsum.photos/200/300\\\",\\\"price\\\":8525,\\\"category\\\":[\\\"304904\\\",\\\"304029\\\",\\\"302536\\\"]},\\\"details\\\":true}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/image/recommend\"\n\n\tpayload := strings.NewReader(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000757666\\\",\\\"item_details\\\":{\\\"image_url\\\":\\\"https://picsum.photos/200/300\\\",\\\"price\\\":8525,\\\"category\\\":[\\\"304904\\\",\\\"304029\\\",\\\"302536\\\"]},\\\"details\\\":true}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000757666\\\",\\\"item_details\\\":{\\\"image_url\\\":\\\"https://picsum.photos/200/300\\\",\\\"price\\\":8525,\\\"category\\\":[\\\"304904\\\",\\\"304029\\\",\\\"302536\\\"]},\\\"details\\\":true}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/image/recommend\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/items/image/recommend\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000757666\\\",\\\"item_details\\\":{\\\"image_url\\\":\\\"https://picsum.photos/200/300\\\",\\\"price\\\":8525,\\\"category\\\":[\\\"304904\\\",\\\"304029\\\",\\\"302536\\\"]},\\\"details\\\":true}\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/image/recommend\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000757666\\\",\\\"item_details\\\":{\\\"image_url\\\":\\\"https://picsum.photos/200/300\\\",\\\"price\\\":8525,\\\"category\\\":[\\\"304904\\\",\\\"304029\\\",\\\"302536\\\"]},\\\"details\\\":true}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = JSON.stringify({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"item_id\": \"1000757666\",\n  \"item_details\": {\n    \"image_url\": \"https://picsum.photos/200/300\",\n    \"price\": 8525,\n    \"category\": [\n      \"304904\",\n      \"304029\",\n      \"302536\"\n    ]\n  },\n  \"details\": true\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/image/recommend\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/image/recommend\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n  member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n  item_id: '1000757666',\n  item_details: {\n    image_url: 'https://picsum.photos/200/300',\n    price: 8525,\n    category: ['304904', '304029', '302536']\n  },\n  details: true\n}));\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/items/image/recommend',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n    member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n    item_id: '1000757666',\n    item_details: {\n      image_url: 'https://picsum.photos/200/300',\n      price: 8525,\n      category: ['304904', '304029', '302536']\n    },\n    details: true\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/image/recommend\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"item_id\": \"1000757666\",\n  \"item_details\": {\n    \"image_url\": \"https://picsum.photos/200/300\",\n    \"price\": 8525,\n    \"category\": [\n      \"304904\",\n      \"304029\",\n      \"302536\"\n    ]\n  },\n  \"details\": true\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"user_id\": @\"a0cc6beb-2909-459b-be55-62196af78ce4\",\n                              @\"member_id\": @\"df3456tg-2909-459b-be55-62196afedf85\",\n                              @\"item_id\": @\"1000757666\",\n                              @\"item_details\": @{ @\"image_url\": @\"https://picsum.photos/200/300\", @\"price\": @8525, @\"category\": @[ @\"304904\", @\"304029\", @\"302536\" ] },\n                              @\"details\": @YES };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/image/recommend\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/image/recommend\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000757666\\\",\\\"item_details\\\":{\\\"image_url\\\":\\\"https://picsum.photos/200/300\\\",\\\"price\\\":8525,\\\"category\\\":[\\\"304904\\\",\\\"304029\\\",\\\"302536\\\"]},\\\"details\\\":true}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/image/recommend');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000757666\",\"item_details\":{\"image_url\":\"https://picsum.photos/200/300\",\"price\":8525,\"category\":[\"304904\",\"304029\",\"302536\"]},\"details\":true}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000757666\",\"item_details\":{\"image_url\":\"https://picsum.photos/200/300\",\"price\":8525,\"category\":[\"304904\",\"304029\",\"302536\"]},\"details\":true}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/image/recommend');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000757666\\\",\\\"item_details\\\":{\\\"image_url\\\":\\\"https://picsum.photos/200/300\\\",\\\"price\\\":8525,\\\"category\\\":[\\\"304904\\\",\\\"304029\\\",\\\"302536\\\"]},\\\"details\\\":true}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/items/image/recommend\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/image/recommend\"\n\npayload = {\n    \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n    \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n    \"item_id\": \"1000757666\",\n    \"item_details\": {\n        \"image_url\": \"https://picsum.photos/200/300\",\n        \"price\": 8525,\n        \"category\": [\"304904\", \"304029\", \"302536\"]\n    },\n    \"details\": True\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/image/recommend\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000757666\\\",\\\"item_details\\\":{\\\"image_url\\\":\\\"https://picsum.photos/200/300\\\",\\\"price\\\":8525,\\\"category\\\":[\\\"304904\\\",\\\"304029\\\",\\\"302536\\\"]},\\\"details\\\":true}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/items/image/recommend \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000757666\",\"item_details\":{\"image_url\":\"https://picsum.photos/200/300\",\"price\":8525,\"category\":[\"304904\",\"304029\",\"302536\"]},\"details\":true}'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"item_id\": \"1000757666\",\n  \"item_details\": [\n    \"image_url\": \"https://picsum.photos/200/300\",\n    \"price\": 8525,\n    \"category\": [\"304904\", \"304029\", \"302536\"]\n  ],\n  \"details\": true\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/image/recommend\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/users/search/recommend": {
            "post": {
                "tags": [
                    "Recommendation"
                ],
                "summary": "recommend items based on user search history",
                "description": "This endpoint understands user behavior based on their search history and returns\nthe most suitable items for them as response. It takes user_id, type, storage, details as required\nparameter and member_id as optional parameter. This endpoint can be used on user\nfeed, top page, personalized suggestions etc.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| user_id | str | str | Represents the id of a logged-out unique user. |\n| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |\n| type | Enum | Selected enum value | Represents the type of GPT search. Available values are `individual` and `group`. |\n| storage | Enum | Selected enum value | Represents the type of Storage. Available values are `memory` and `database`. |\n| details | bool | bool | If you want to get recommended items with details this parameter would be `True` otherwise it would be `False`. |",
                "operationId": "search_recommend_details_v1_users_search_recommend_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SearchRecommendSchema"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/users/search/recommend\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"type\\\":\\\"individual\\\",\\\"storage\\\":\\\"memory\\\",\\\"search_size\\\":1000,\\\"start\\\":0,\\\"size\\\":10,\\\"language\\\":\\\"en\\\",\\\"is_keyword_enabled\\\":false,\\\"details\\\":true}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/users/search/recommend\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"type\\\":\\\"individual\\\",\\\"storage\\\":\\\"memory\\\",\\\"search_size\\\":1000,\\\"start\\\":0,\\\"size\\\":10,\\\"language\\\":\\\"en\\\",\\\"is_keyword_enabled\\\":false,\\\"details\\\":true}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/users/search/recommend\"\n\n\tpayload := strings.NewReader(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"type\\\":\\\"individual\\\",\\\"storage\\\":\\\"memory\\\",\\\"search_size\\\":1000,\\\"start\\\":0,\\\"size\\\":10,\\\"language\\\":\\\"en\\\",\\\"is_keyword_enabled\\\":false,\\\"details\\\":true}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"type\\\":\\\"individual\\\",\\\"storage\\\":\\\"memory\\\",\\\"search_size\\\":1000,\\\"start\\\":0,\\\"size\\\":10,\\\"language\\\":\\\"en\\\",\\\"is_keyword_enabled\\\":false,\\\"details\\\":true}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/users/search/recommend\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/users/search/recommend\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"type\\\":\\\"individual\\\",\\\"storage\\\":\\\"memory\\\",\\\"search_size\\\":1000,\\\"start\\\":0,\\\"size\\\":10,\\\"language\\\":\\\"en\\\",\\\"is_keyword_enabled\\\":false,\\\"details\\\":true}\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/users/search/recommend\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"type\\\":\\\"individual\\\",\\\"storage\\\":\\\"memory\\\",\\\"search_size\\\":1000,\\\"start\\\":0,\\\"size\\\":10,\\\"language\\\":\\\"en\\\",\\\"is_keyword_enabled\\\":false,\\\"details\\\":true}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = JSON.stringify({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"type\": \"individual\",\n  \"storage\": \"memory\",\n  \"search_size\": 1000,\n  \"start\": 0,\n  \"size\": 10,\n  \"language\": \"en\",\n  \"is_keyword_enabled\": false,\n  \"details\": true\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/users/search/recommend\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/users/search/recommend\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n  member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n  type: 'individual',\n  storage: 'memory',\n  search_size: 1000,\n  start: 0,\n  size: 10,\n  language: 'en',\n  is_keyword_enabled: false,\n  details: true\n}));\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/users/search/recommend',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n    member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n    type: 'individual',\n    storage: 'memory',\n    search_size: 1000,\n    start: 0,\n    size: 10,\n    language: 'en',\n    is_keyword_enabled: false,\n    details: true\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/users/search/recommend\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"type\": \"individual\",\n  \"storage\": \"memory\",\n  \"search_size\": 1000,\n  \"start\": 0,\n  \"size\": 10,\n  \"language\": \"en\",\n  \"is_keyword_enabled\": false,\n  \"details\": true\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"user_id\": @\"a0cc6beb-2909-459b-be55-62196af78ce4\",\n                              @\"member_id\": @\"df3456tg-2909-459b-be55-62196afedf85\",\n                              @\"type\": @\"individual\",\n                              @\"storage\": @\"memory\",\n                              @\"search_size\": @1000,\n                              @\"start\": @0,\n                              @\"size\": @10,\n                              @\"language\": @\"en\",\n                              @\"is_keyword_enabled\": @NO,\n                              @\"details\": @YES };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/users/search/recommend\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/users/search/recommend\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"type\\\":\\\"individual\\\",\\\"storage\\\":\\\"memory\\\",\\\"search_size\\\":1000,\\\"start\\\":0,\\\"size\\\":10,\\\"language\\\":\\\"en\\\",\\\"is_keyword_enabled\\\":false,\\\"details\\\":true}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/users/search/recommend');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"type\":\"individual\",\"storage\":\"memory\",\"search_size\":1000,\"start\":0,\"size\":10,\"language\":\"en\",\"is_keyword_enabled\":false,\"details\":true}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"type\":\"individual\",\"storage\":\"memory\",\"search_size\":1000,\"start\":0,\"size\":10,\"language\":\"en\",\"is_keyword_enabled\":false,\"details\":true}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/users/search/recommend');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"type\\\":\\\"individual\\\",\\\"storage\\\":\\\"memory\\\",\\\"search_size\\\":1000,\\\"start\\\":0,\\\"size\\\":10,\\\"language\\\":\\\"en\\\",\\\"is_keyword_enabled\\\":false,\\\"details\\\":true}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/users/search/recommend\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/users/search/recommend\"\n\npayload = {\n    \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n    \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n    \"type\": \"individual\",\n    \"storage\": \"memory\",\n    \"search_size\": 1000,\n    \"start\": 0,\n    \"size\": 10,\n    \"language\": \"en\",\n    \"is_keyword_enabled\": False,\n    \"details\": True\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/users/search/recommend\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"type\\\":\\\"individual\\\",\\\"storage\\\":\\\"memory\\\",\\\"search_size\\\":1000,\\\"start\\\":0,\\\"size\\\":10,\\\"language\\\":\\\"en\\\",\\\"is_keyword_enabled\\\":false,\\\"details\\\":true}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/users/search/recommend \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"type\":\"individual\",\"storage\":\"memory\",\"search_size\":1000,\"start\":0,\"size\":10,\"language\":\"en\",\"is_keyword_enabled\":false,\"details\":true}'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"type\": \"individual\",\n  \"storage\": \"memory\",\n  \"search_size\": 1000,\n  \"start\": 0,\n  \"size\": 10,\n  \"language\": \"en\",\n  \"is_keyword_enabled\": false,\n  \"details\": true\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/users/search/recommend\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/questionnaire/recommend": {
            "post": {
                "tags": [
                    "Recommendation"
                ],
                "summary": "Get product recommendation with questionnaire result from users.",
                "description": "Get product recommendation with questionnaire result from users.",
                "operationId": "post_questionnaire_recommend_v1_questionnaire_recommend_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/QuestionnaireRequestSchema"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/questionnaire/recommend\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"questionnaire_id\\\":\\\"c8e9fd30-1d85-4bd6-929a-47cc509c5756\\\",\\\"values\\\":{\\\"section_name\\\":{\\\"q1\\\":\\\"c\\\",\\\"q2\\\":\\\"a\\\",\\\"q3\\\":\\\"b\\\"}}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/questionnaire/recommend\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"questionnaire_id\\\":\\\"c8e9fd30-1d85-4bd6-929a-47cc509c5756\\\",\\\"values\\\":{\\\"section_name\\\":{\\\"q1\\\":\\\"c\\\",\\\"q2\\\":\\\"a\\\",\\\"q3\\\":\\\"b\\\"}}}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/questionnaire/recommend\"\n\n\tpayload := strings.NewReader(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"questionnaire_id\\\":\\\"c8e9fd30-1d85-4bd6-929a-47cc509c5756\\\",\\\"values\\\":{\\\"section_name\\\":{\\\"q1\\\":\\\"c\\\",\\\"q2\\\":\\\"a\\\",\\\"q3\\\":\\\"b\\\"}}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"questionnaire_id\\\":\\\"c8e9fd30-1d85-4bd6-929a-47cc509c5756\\\",\\\"values\\\":{\\\"section_name\\\":{\\\"q1\\\":\\\"c\\\",\\\"q2\\\":\\\"a\\\",\\\"q3\\\":\\\"b\\\"}}}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/questionnaire/recommend\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/questionnaire/recommend\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"questionnaire_id\\\":\\\"c8e9fd30-1d85-4bd6-929a-47cc509c5756\\\",\\\"values\\\":{\\\"section_name\\\":{\\\"q1\\\":\\\"c\\\",\\\"q2\\\":\\\"a\\\",\\\"q3\\\":\\\"b\\\"}}}\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/questionnaire/recommend\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"questionnaire_id\\\":\\\"c8e9fd30-1d85-4bd6-929a-47cc509c5756\\\",\\\"values\\\":{\\\"section_name\\\":{\\\"q1\\\":\\\"c\\\",\\\"q2\\\":\\\"a\\\",\\\"q3\\\":\\\"b\\\"}}}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = JSON.stringify({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"questionnaire_id\": \"c8e9fd30-1d85-4bd6-929a-47cc509c5756\",\n  \"values\": {\n    \"section_name\": {\n      \"q1\": \"c\",\n      \"q2\": \"a\",\n      \"q3\": \"b\"\n    }\n  }\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/questionnaire/recommend\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/questionnaire/recommend\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n  member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n  questionnaire_id: 'c8e9fd30-1d85-4bd6-929a-47cc509c5756',\n  values: {section_name: {q1: 'c', q2: 'a', q3: 'b'}}\n}));\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/questionnaire/recommend',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n    member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n    questionnaire_id: 'c8e9fd30-1d85-4bd6-929a-47cc509c5756',\n    values: {section_name: {q1: 'c', q2: 'a', q3: 'b'}}\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/questionnaire/recommend\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"questionnaire_id\": \"c8e9fd30-1d85-4bd6-929a-47cc509c5756\",\n  \"values\": {\n    \"section_name\": {\n      \"q1\": \"c\",\n      \"q2\": \"a\",\n      \"q3\": \"b\"\n    }\n  }\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"user_id\": @\"a0cc6beb-2909-459b-be55-62196af78ce4\",\n                              @\"member_id\": @\"df3456tg-2909-459b-be55-62196afedf85\",\n                              @\"questionnaire_id\": @\"c8e9fd30-1d85-4bd6-929a-47cc509c5756\",\n                              @\"values\": @{ @\"section_name\": @{ @\"q1\": @\"c\", @\"q2\": @\"a\", @\"q3\": @\"b\" } } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/questionnaire/recommend\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/questionnaire/recommend\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"questionnaire_id\\\":\\\"c8e9fd30-1d85-4bd6-929a-47cc509c5756\\\",\\\"values\\\":{\\\"section_name\\\":{\\\"q1\\\":\\\"c\\\",\\\"q2\\\":\\\"a\\\",\\\"q3\\\":\\\"b\\\"}}}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/questionnaire/recommend');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"questionnaire_id\":\"c8e9fd30-1d85-4bd6-929a-47cc509c5756\",\"values\":{\"section_name\":{\"q1\":\"c\",\"q2\":\"a\",\"q3\":\"b\"}}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"questionnaire_id\":\"c8e9fd30-1d85-4bd6-929a-47cc509c5756\",\"values\":{\"section_name\":{\"q1\":\"c\",\"q2\":\"a\",\"q3\":\"b\"}}}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/questionnaire/recommend');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"questionnaire_id\\\":\\\"c8e9fd30-1d85-4bd6-929a-47cc509c5756\\\",\\\"values\\\":{\\\"section_name\\\":{\\\"q1\\\":\\\"c\\\",\\\"q2\\\":\\\"a\\\",\\\"q3\\\":\\\"b\\\"}}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/questionnaire/recommend\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/questionnaire/recommend\"\n\npayload = {\n    \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n    \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n    \"questionnaire_id\": \"c8e9fd30-1d85-4bd6-929a-47cc509c5756\",\n    \"values\": {\"section_name\": {\n            \"q1\": \"c\",\n            \"q2\": \"a\",\n            \"q3\": \"b\"\n        }}\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/questionnaire/recommend\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"questionnaire_id\\\":\\\"c8e9fd30-1d85-4bd6-929a-47cc509c5756\\\",\\\"values\\\":{\\\"section_name\\\":{\\\"q1\\\":\\\"c\\\",\\\"q2\\\":\\\"a\\\",\\\"q3\\\":\\\"b\\\"}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/questionnaire/recommend \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"questionnaire_id\":\"c8e9fd30-1d85-4bd6-929a-47cc509c5756\",\"values\":{\"section_name\":{\"q1\":\"c\",\"q2\":\"a\",\"q3\":\"b\"}}}'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"questionnaire_id\": \"c8e9fd30-1d85-4bd6-929a-47cc509c5756\",\n  \"values\": [\"section_name\": [\n      \"q1\": \"c\",\n      \"q2\": \"a\",\n      \"q3\": \"b\"\n    ]]\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/questionnaire/recommend\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/questionnaires": {
            "post": {
                "tags": [
                    "questionnaire"
                ],
                "summary": "Create a new questionnaire",
                "description": "Create a new questionnaire.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| name | str | str | name of the questionnaire |\n| questions | dict[str, dict] | obj | questions object hold sections and its list of questions. Each question will in their separate object. key of the question objects should be like `q1`, `q2`, `q3` and so on|\n| question_text | str | str | the question string |\n| type | str | str | type of the question; e.g. radio/checkbox/free text..... |\n| options | str | list[str] | a list of possible answers of the question and their serial|\n\nA successful response includes a questionnaire id.",
                "operationId": "post_questionnaire_v1_questionnaires_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/QuestionnaireInsertSchema"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/questionnaires\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"name\\\":\\\"Name of your questionnaire\\\",\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"question\\\":\\\"whats your age?\\\",\\\"type\\\":\\\"text\\\",\\\"options\\\":{\\\"age\\\":\\\"\\\"}},\\\"q2\\\":{\\\"question\\\":\\\"whats your gender?\\\",\\\"type\\\":\\\"radio\\\",\\\"options\\\":{\\\"a\\\":\\\"male\\\",\\\"b\\\":\\\"female\\\"}}},\\\"skincare_goal\\\":{\\\"q1\\\":{\\\"question\\\":\\\"what is your skincare concern?\\\",\\\"type\\\":\\\"checkbox\\\",\\\"options\\\":{\\\"a\\\":\\\"acne\\\",\\\"b\\\":\\\"anti-aging\\\",\\\"c\\\":\\\"Closed comedons(blackheads, whiteheads)\\\",\\\"d\\\":\\\"Hyperpigmentation\\\",\\\"e\\\":\\\"Dullness\\\",\\\"f\\\":\\\"Dehydrated skin\\\"}}}}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/questionnaires\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"name\\\":\\\"Name of your questionnaire\\\",\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"question\\\":\\\"whats your age?\\\",\\\"type\\\":\\\"text\\\",\\\"options\\\":{\\\"age\\\":\\\"\\\"}},\\\"q2\\\":{\\\"question\\\":\\\"whats your gender?\\\",\\\"type\\\":\\\"radio\\\",\\\"options\\\":{\\\"a\\\":\\\"male\\\",\\\"b\\\":\\\"female\\\"}}},\\\"skincare_goal\\\":{\\\"q1\\\":{\\\"question\\\":\\\"what is your skincare concern?\\\",\\\"type\\\":\\\"checkbox\\\",\\\"options\\\":{\\\"a\\\":\\\"acne\\\",\\\"b\\\":\\\"anti-aging\\\",\\\"c\\\":\\\"Closed comedons(blackheads, whiteheads)\\\",\\\"d\\\":\\\"Hyperpigmentation\\\",\\\"e\\\":\\\"Dullness\\\",\\\"f\\\":\\\"Dehydrated skin\\\"}}}}}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/questionnaires\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"Name of your questionnaire\\\",\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"question\\\":\\\"whats your age?\\\",\\\"type\\\":\\\"text\\\",\\\"options\\\":{\\\"age\\\":\\\"\\\"}},\\\"q2\\\":{\\\"question\\\":\\\"whats your gender?\\\",\\\"type\\\":\\\"radio\\\",\\\"options\\\":{\\\"a\\\":\\\"male\\\",\\\"b\\\":\\\"female\\\"}}},\\\"skincare_goal\\\":{\\\"q1\\\":{\\\"question\\\":\\\"what is your skincare concern?\\\",\\\"type\\\":\\\"checkbox\\\",\\\"options\\\":{\\\"a\\\":\\\"acne\\\",\\\"b\\\":\\\"anti-aging\\\",\\\"c\\\":\\\"Closed comedons(blackheads, whiteheads)\\\",\\\"d\\\":\\\"Hyperpigmentation\\\",\\\"e\\\":\\\"Dullness\\\",\\\"f\\\":\\\"Dehydrated skin\\\"}}}}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"name\\\":\\\"Name of your questionnaire\\\",\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"question\\\":\\\"whats your age?\\\",\\\"type\\\":\\\"text\\\",\\\"options\\\":{\\\"age\\\":\\\"\\\"}},\\\"q2\\\":{\\\"question\\\":\\\"whats your gender?\\\",\\\"type\\\":\\\"radio\\\",\\\"options\\\":{\\\"a\\\":\\\"male\\\",\\\"b\\\":\\\"female\\\"}}},\\\"skincare_goal\\\":{\\\"q1\\\":{\\\"question\\\":\\\"what is your skincare concern?\\\",\\\"type\\\":\\\"checkbox\\\",\\\"options\\\":{\\\"a\\\":\\\"acne\\\",\\\"b\\\":\\\"anti-aging\\\",\\\"c\\\":\\\"Closed comedons(blackheads, whiteheads)\\\",\\\"d\\\":\\\"Hyperpigmentation\\\",\\\"e\\\":\\\"Dullness\\\",\\\"f\\\":\\\"Dehydrated skin\\\"}}}}}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/questionnaires\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/questionnaires\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"name\\\":\\\"Name of your questionnaire\\\",\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"question\\\":\\\"whats your age?\\\",\\\"type\\\":\\\"text\\\",\\\"options\\\":{\\\"age\\\":\\\"\\\"}},\\\"q2\\\":{\\\"question\\\":\\\"whats your gender?\\\",\\\"type\\\":\\\"radio\\\",\\\"options\\\":{\\\"a\\\":\\\"male\\\",\\\"b\\\":\\\"female\\\"}}},\\\"skincare_goal\\\":{\\\"q1\\\":{\\\"question\\\":\\\"what is your skincare concern?\\\",\\\"type\\\":\\\"checkbox\\\",\\\"options\\\":{\\\"a\\\":\\\"acne\\\",\\\"b\\\":\\\"anti-aging\\\",\\\"c\\\":\\\"Closed comedons(blackheads, whiteheads)\\\",\\\"d\\\":\\\"Hyperpigmentation\\\",\\\"e\\\":\\\"Dullness\\\",\\\"f\\\":\\\"Dehydrated skin\\\"}}}}}\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/questionnaires\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"name\\\":\\\"Name of your questionnaire\\\",\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"question\\\":\\\"whats your age?\\\",\\\"type\\\":\\\"text\\\",\\\"options\\\":{\\\"age\\\":\\\"\\\"}},\\\"q2\\\":{\\\"question\\\":\\\"whats your gender?\\\",\\\"type\\\":\\\"radio\\\",\\\"options\\\":{\\\"a\\\":\\\"male\\\",\\\"b\\\":\\\"female\\\"}}},\\\"skincare_goal\\\":{\\\"q1\\\":{\\\"question\\\":\\\"what is your skincare concern?\\\",\\\"type\\\":\\\"checkbox\\\",\\\"options\\\":{\\\"a\\\":\\\"acne\\\",\\\"b\\\":\\\"anti-aging\\\",\\\"c\\\":\\\"Closed comedons(blackheads, whiteheads)\\\",\\\"d\\\":\\\"Hyperpigmentation\\\",\\\"e\\\":\\\"Dullness\\\",\\\"f\\\":\\\"Dehydrated skin\\\"}}}}}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = JSON.stringify({\n  \"name\": \"Name of your questionnaire\",\n  \"questions\": {\n    \"skincare_history\": {\n      \"q1\": {\n        \"question\": \"whats your age?\",\n        \"type\": \"text\",\n        \"options\": {\n          \"age\": \"\"\n        }\n      },\n      \"q2\": {\n        \"question\": \"whats your gender?\",\n        \"type\": \"radio\",\n        \"options\": {\n          \"a\": \"male\",\n          \"b\": \"female\"\n        }\n      }\n    },\n    \"skincare_goal\": {\n      \"q1\": {\n        \"question\": \"what is your skincare concern?\",\n        \"type\": \"checkbox\",\n        \"options\": {\n          \"a\": \"acne\",\n          \"b\": \"anti-aging\",\n          \"c\": \"Closed comedons(blackheads, whiteheads)\",\n          \"d\": \"Hyperpigmentation\",\n          \"e\": \"Dullness\",\n          \"f\": \"Dehydrated skin\"\n        }\n      }\n    }\n  }\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/questionnaires\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/questionnaires\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  name: 'Name of your questionnaire',\n  questions: {\n    skincare_history: {\n      q1: {question: 'whats your age?', type: 'text', options: {age: ''}},\n      q2: {\n        question: 'whats your gender?',\n        type: 'radio',\n        options: {a: 'male', b: 'female'}\n      }\n    },\n    skincare_goal: {\n      q1: {\n        question: 'what is your skincare concern?',\n        type: 'checkbox',\n        options: {\n          a: 'acne',\n          b: 'anti-aging',\n          c: 'Closed comedons(blackheads, whiteheads)',\n          d: 'Hyperpigmentation',\n          e: 'Dullness',\n          f: 'Dehydrated skin'\n        }\n      }\n    }\n  }\n}));\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/questionnaires',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    name: 'Name of your questionnaire',\n    questions: {\n      skincare_history: {\n        q1: {question: 'whats your age?', type: 'text', options: {age: ''}},\n        q2: {\n          question: 'whats your gender?',\n          type: 'radio',\n          options: {a: 'male', b: 'female'}\n        }\n      },\n      skincare_goal: {\n        q1: {\n          question: 'what is your skincare concern?',\n          type: 'checkbox',\n          options: {\n            a: 'acne',\n            b: 'anti-aging',\n            c: 'Closed comedons(blackheads, whiteheads)',\n            d: 'Hyperpigmentation',\n            e: 'Dullness',\n            f: 'Dehydrated skin'\n          }\n        }\n      }\n    }\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/questionnaires\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"name\": \"Name of your questionnaire\",\n  \"questions\": {\n    \"skincare_history\": {\n      \"q1\": {\n        \"question\": \"whats your age?\",\n        \"type\": \"text\",\n        \"options\": {\n          \"age\": \"\"\n        }\n      },\n      \"q2\": {\n        \"question\": \"whats your gender?\",\n        \"type\": \"radio\",\n        \"options\": {\n          \"a\": \"male\",\n          \"b\": \"female\"\n        }\n      }\n    },\n    \"skincare_goal\": {\n      \"q1\": {\n        \"question\": \"what is your skincare concern?\",\n        \"type\": \"checkbox\",\n        \"options\": {\n          \"a\": \"acne\",\n          \"b\": \"anti-aging\",\n          \"c\": \"Closed comedons(blackheads, whiteheads)\",\n          \"d\": \"Hyperpigmentation\",\n          \"e\": \"Dullness\",\n          \"f\": \"Dehydrated skin\"\n        }\n      }\n    }\n  }\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"name\": @\"Name of your questionnaire\",\n                              @\"questions\": @{ @\"skincare_history\": @{ @\"q1\": @{ @\"question\": @\"whats your age?\", @\"type\": @\"text\", @\"options\": @{ @\"age\": @\"\" } }, @\"q2\": @{ @\"question\": @\"whats your gender?\", @\"type\": @\"radio\", @\"options\": @{ @\"a\": @\"male\", @\"b\": @\"female\" } } }, @\"skincare_goal\": @{ @\"q1\": @{ @\"question\": @\"what is your skincare concern?\", @\"type\": @\"checkbox\", @\"options\": @{ @\"a\": @\"acne\", @\"b\": @\"anti-aging\", @\"c\": @\"Closed comedons(blackheads, whiteheads)\", @\"d\": @\"Hyperpigmentation\", @\"e\": @\"Dullness\", @\"f\": @\"Dehydrated skin\" } } } } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/questionnaires\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/questionnaires\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"name\\\":\\\"Name of your questionnaire\\\",\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"question\\\":\\\"whats your age?\\\",\\\"type\\\":\\\"text\\\",\\\"options\\\":{\\\"age\\\":\\\"\\\"}},\\\"q2\\\":{\\\"question\\\":\\\"whats your gender?\\\",\\\"type\\\":\\\"radio\\\",\\\"options\\\":{\\\"a\\\":\\\"male\\\",\\\"b\\\":\\\"female\\\"}}},\\\"skincare_goal\\\":{\\\"q1\\\":{\\\"question\\\":\\\"what is your skincare concern?\\\",\\\"type\\\":\\\"checkbox\\\",\\\"options\\\":{\\\"a\\\":\\\"acne\\\",\\\"b\\\":\\\"anti-aging\\\",\\\"c\\\":\\\"Closed comedons(blackheads, whiteheads)\\\",\\\"d\\\":\\\"Hyperpigmentation\\\",\\\"e\\\":\\\"Dullness\\\",\\\"f\\\":\\\"Dehydrated skin\\\"}}}}}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/questionnaires');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"name\":\"Name of your questionnaire\",\"questions\":{\"skincare_history\":{\"q1\":{\"question\":\"whats your age?\",\"type\":\"text\",\"options\":{\"age\":\"\"}},\"q2\":{\"question\":\"whats your gender?\",\"type\":\"radio\",\"options\":{\"a\":\"male\",\"b\":\"female\"}}},\"skincare_goal\":{\"q1\":{\"question\":\"what is your skincare concern?\",\"type\":\"checkbox\",\"options\":{\"a\":\"acne\",\"b\":\"anti-aging\",\"c\":\"Closed comedons(blackheads, whiteheads)\",\"d\":\"Hyperpigmentation\",\"e\":\"Dullness\",\"f\":\"Dehydrated skin\"}}}}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"name\":\"Name of your questionnaire\",\"questions\":{\"skincare_history\":{\"q1\":{\"question\":\"whats your age?\",\"type\":\"text\",\"options\":{\"age\":\"\"}},\"q2\":{\"question\":\"whats your gender?\",\"type\":\"radio\",\"options\":{\"a\":\"male\",\"b\":\"female\"}}},\"skincare_goal\":{\"q1\":{\"question\":\"what is your skincare concern?\",\"type\":\"checkbox\",\"options\":{\"a\":\"acne\",\"b\":\"anti-aging\",\"c\":\"Closed comedons(blackheads, whiteheads)\",\"d\":\"Hyperpigmentation\",\"e\":\"Dullness\",\"f\":\"Dehydrated skin\"}}}}}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/questionnaires');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"name\\\":\\\"Name of your questionnaire\\\",\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"question\\\":\\\"whats your age?\\\",\\\"type\\\":\\\"text\\\",\\\"options\\\":{\\\"age\\\":\\\"\\\"}},\\\"q2\\\":{\\\"question\\\":\\\"whats your gender?\\\",\\\"type\\\":\\\"radio\\\",\\\"options\\\":{\\\"a\\\":\\\"male\\\",\\\"b\\\":\\\"female\\\"}}},\\\"skincare_goal\\\":{\\\"q1\\\":{\\\"question\\\":\\\"what is your skincare concern?\\\",\\\"type\\\":\\\"checkbox\\\",\\\"options\\\":{\\\"a\\\":\\\"acne\\\",\\\"b\\\":\\\"anti-aging\\\",\\\"c\\\":\\\"Closed comedons(blackheads, whiteheads)\\\",\\\"d\\\":\\\"Hyperpigmentation\\\",\\\"e\\\":\\\"Dullness\\\",\\\"f\\\":\\\"Dehydrated skin\\\"}}}}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/questionnaires\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/questionnaires\"\n\npayload = {\n    \"name\": \"Name of your questionnaire\",\n    \"questions\": {\n        \"skincare_history\": {\n            \"q1\": {\n                \"question\": \"whats your age?\",\n                \"type\": \"text\",\n                \"options\": {\"age\": \"\"}\n            },\n            \"q2\": {\n                \"question\": \"whats your gender?\",\n                \"type\": \"radio\",\n                \"options\": {\n                    \"a\": \"male\",\n                    \"b\": \"female\"\n                }\n            }\n        },\n        \"skincare_goal\": {\"q1\": {\n                \"question\": \"what is your skincare concern?\",\n                \"type\": \"checkbox\",\n                \"options\": {\n                    \"a\": \"acne\",\n                    \"b\": \"anti-aging\",\n                    \"c\": \"Closed comedons(blackheads, whiteheads)\",\n                    \"d\": \"Hyperpigmentation\",\n                    \"e\": \"Dullness\",\n                    \"f\": \"Dehydrated skin\"\n                }\n            }}\n    }\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/questionnaires\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"name\\\":\\\"Name of your questionnaire\\\",\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"question\\\":\\\"whats your age?\\\",\\\"type\\\":\\\"text\\\",\\\"options\\\":{\\\"age\\\":\\\"\\\"}},\\\"q2\\\":{\\\"question\\\":\\\"whats your gender?\\\",\\\"type\\\":\\\"radio\\\",\\\"options\\\":{\\\"a\\\":\\\"male\\\",\\\"b\\\":\\\"female\\\"}}},\\\"skincare_goal\\\":{\\\"q1\\\":{\\\"question\\\":\\\"what is your skincare concern?\\\",\\\"type\\\":\\\"checkbox\\\",\\\"options\\\":{\\\"a\\\":\\\"acne\\\",\\\"b\\\":\\\"anti-aging\\\",\\\"c\\\":\\\"Closed comedons(blackheads, whiteheads)\\\",\\\"d\\\":\\\"Hyperpigmentation\\\",\\\"e\\\":\\\"Dullness\\\",\\\"f\\\":\\\"Dehydrated skin\\\"}}}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/questionnaires \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"name\":\"Name of your questionnaire\",\"questions\":{\"skincare_history\":{\"q1\":{\"question\":\"whats your age?\",\"type\":\"text\",\"options\":{\"age\":\"\"}},\"q2\":{\"question\":\"whats your gender?\",\"type\":\"radio\",\"options\":{\"a\":\"male\",\"b\":\"female\"}}},\"skincare_goal\":{\"q1\":{\"question\":\"what is your skincare concern?\",\"type\":\"checkbox\",\"options\":{\"a\":\"acne\",\"b\":\"anti-aging\",\"c\":\"Closed comedons(blackheads, whiteheads)\",\"d\":\"Hyperpigmentation\",\"e\":\"Dullness\",\"f\":\"Dehydrated skin\"}}}}}'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"name\": \"Name of your questionnaire\",\n  \"questions\": [\n    \"skincare_history\": [\n      \"q1\": [\n        \"question\": \"whats your age?\",\n        \"type\": \"text\",\n        \"options\": [\"age\": \"\"]\n      ],\n      \"q2\": [\n        \"question\": \"whats your gender?\",\n        \"type\": \"radio\",\n        \"options\": [\n          \"a\": \"male\",\n          \"b\": \"female\"\n        ]\n      ]\n    ],\n    \"skincare_goal\": [\"q1\": [\n        \"question\": \"what is your skincare concern?\",\n        \"type\": \"checkbox\",\n        \"options\": [\n          \"a\": \"acne\",\n          \"b\": \"anti-aging\",\n          \"c\": \"Closed comedons(blackheads, whiteheads)\",\n          \"d\": \"Hyperpigmentation\",\n          \"e\": \"Dullness\",\n          \"f\": \"Dehydrated skin\"\n        ]\n      ]]\n  ]\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/questionnaires\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/questionnaires/list": {
            "get": {
                "tags": [
                    "questionnaire"
                ],
                "summary": "Get all questionnaires",
                "description": "Get all questionnaires.\n\n### Parameters\n----------\n\nReturns all questionnaires associated with the project.",
                "operationId": "get_all_questionnaires_v1_questionnaires_list_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/questionnaires/list\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/questionnaires/list\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/questionnaires/list\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/questionnaires/list\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/questionnaires/list\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/questionnaires/list\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/questionnaires/list\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/questionnaires/list\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/questionnaires/list',\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/questionnaires/list\");\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/questionnaires/list\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/questionnaires/list\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/questionnaires/list');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/questionnaires/list');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/questionnaires/list\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/questionnaires/list\"\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/questionnaires/list\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request GET \\\n  --url https://api.recommender.gigalogy.com/v1/questionnaires/list \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/questionnaires/list\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/questionnaires/{questionnaire_id}": {
            "get": {
                "tags": [
                    "questionnaire"
                ],
                "summary": "Get details of a questionnaire.",
                "description": "Get details of a questionnaire.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| questionnaire_id | str | str | The ID of the questionnaire to retrieve. (Required) |\n\nReturns a questionnaire given the questionnaire id.",
                "operationId": "get_a_questionnaires_v1_questionnaires__questionnaire_id__get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Questionnaire Id",
                            "type": "string"
                        },
                        "name": "questionnaire_id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/questionnaires/%7Bquestionnaire_id%7D\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D',\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\");\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/questionnaires/%7Bquestionnaire_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\"\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request GET \\\n  --url https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            },
            "put": {
                "tags": [
                    "questionnaire"
                ],
                "summary": "Update a questionnaire.",
                "description": "Update a questionnaire.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| name | str | str | name of the questionnaire |\n| questions | dict[str, dict] | obj | questions object hold sections and its list of questions. Each question will in their separate object. key of the question objects should be like `q1`, `q2`, `q3` and so on|\n| question_text | str | str | the question string |\n| type | str | str | type of the question; e.g. radio/checkbox/free text..... |\n| options | str | list[str] | a list of possible answers of the question and their serial|",
                "operationId": "put_questionnaire_v1_questionnaires__questionnaire_id__put",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Questionnaire Id",
                            "type": "string"
                        },
                        "name": "questionnaire_id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/QuestionnaireUpdateSchema"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"name\\\":\\\"Name of your questionnaire\\\",\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"question\\\":\\\"whats your age?\\\",\\\"type\\\":\\\"text\\\",\\\"options\\\":{\\\"age\\\":\\\"\\\"}},\\\"q2\\\":{\\\"question\\\":\\\"whats your gender?\\\",\\\"type\\\":\\\"radio\\\",\\\"options\\\":{\\\"a\\\":\\\"male\\\",\\\"b\\\":\\\"female\\\"}}},\\\"skincare_goal\\\":{\\\"q1\\\":{\\\"question\\\":\\\"what is your skincare concern?\\\",\\\"type\\\":\\\"checkbox\\\",\\\"options\\\":{\\\"a\\\":\\\"acne\\\",\\\"b\\\":\\\"anti-aging\\\",\\\"c\\\":\\\"Closed comedons(blackheads, whiteheads)\\\",\\\"d\\\":\\\"Hyperpigmentation\\\",\\\"e\\\":\\\"Dullness\\\",\\\"f\\\":\\\"Dehydrated skin\\\"}}}}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Put,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"name\\\":\\\"Name of your questionnaire\\\",\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"question\\\":\\\"whats your age?\\\",\\\"type\\\":\\\"text\\\",\\\"options\\\":{\\\"age\\\":\\\"\\\"}},\\\"q2\\\":{\\\"question\\\":\\\"whats your gender?\\\",\\\"type\\\":\\\"radio\\\",\\\"options\\\":{\\\"a\\\":\\\"male\\\",\\\"b\\\":\\\"female\\\"}}},\\\"skincare_goal\\\":{\\\"q1\\\":{\\\"question\\\":\\\"what is your skincare concern?\\\",\\\"type\\\":\\\"checkbox\\\",\\\"options\\\":{\\\"a\\\":\\\"acne\\\",\\\"b\\\":\\\"anti-aging\\\",\\\"c\\\":\\\"Closed comedons(blackheads, whiteheads)\\\",\\\"d\\\":\\\"Hyperpigmentation\\\",\\\"e\\\":\\\"Dullness\\\",\\\"f\\\":\\\"Dehydrated skin\\\"}}}}}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"Name of your questionnaire\\\",\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"question\\\":\\\"whats your age?\\\",\\\"type\\\":\\\"text\\\",\\\"options\\\":{\\\"age\\\":\\\"\\\"}},\\\"q2\\\":{\\\"question\\\":\\\"whats your gender?\\\",\\\"type\\\":\\\"radio\\\",\\\"options\\\":{\\\"a\\\":\\\"male\\\",\\\"b\\\":\\\"female\\\"}}},\\\"skincare_goal\\\":{\\\"q1\\\":{\\\"question\\\":\\\"what is your skincare concern?\\\",\\\"type\\\":\\\"checkbox\\\",\\\"options\\\":{\\\"a\\\":\\\"acne\\\",\\\"b\\\":\\\"anti-aging\\\",\\\"c\\\":\\\"Closed comedons(blackheads, whiteheads)\\\",\\\"d\\\":\\\"Hyperpigmentation\\\",\\\"e\\\":\\\"Dullness\\\",\\\"f\\\":\\\"Dehydrated skin\\\"}}}}}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"name\\\":\\\"Name of your questionnaire\\\",\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"question\\\":\\\"whats your age?\\\",\\\"type\\\":\\\"text\\\",\\\"options\\\":{\\\"age\\\":\\\"\\\"}},\\\"q2\\\":{\\\"question\\\":\\\"whats your gender?\\\",\\\"type\\\":\\\"radio\\\",\\\"options\\\":{\\\"a\\\":\\\"male\\\",\\\"b\\\":\\\"female\\\"}}},\\\"skincare_goal\\\":{\\\"q1\\\":{\\\"question\\\":\\\"what is your skincare concern?\\\",\\\"type\\\":\\\"checkbox\\\",\\\"options\\\":{\\\"a\\\":\\\"acne\\\",\\\"b\\\":\\\"anti-aging\\\",\\\"c\\\":\\\"Closed comedons(blackheads, whiteheads)\\\",\\\"d\\\":\\\"Hyperpigmentation\\\",\\\"e\\\":\\\"Dullness\\\",\\\"f\\\":\\\"Dehydrated skin\\\"}}}}}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\")\n  .put(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.put(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"name\\\":\\\"Name of your questionnaire\\\",\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"question\\\":\\\"whats your age?\\\",\\\"type\\\":\\\"text\\\",\\\"options\\\":{\\\"age\\\":\\\"\\\"}},\\\"q2\\\":{\\\"question\\\":\\\"whats your gender?\\\",\\\"type\\\":\\\"radio\\\",\\\"options\\\":{\\\"a\\\":\\\"male\\\",\\\"b\\\":\\\"female\\\"}}},\\\"skincare_goal\\\":{\\\"q1\\\":{\\\"question\\\":\\\"what is your skincare concern?\\\",\\\"type\\\":\\\"checkbox\\\",\\\"options\\\":{\\\"a\\\":\\\"acne\\\",\\\"b\\\":\\\"anti-aging\\\",\\\"c\\\":\\\"Closed comedons(blackheads, whiteheads)\\\",\\\"d\\\":\\\"Hyperpigmentation\\\",\\\"e\\\":\\\"Dullness\\\",\\\"f\\\":\\\"Dehydrated skin\\\"}}}}}\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\",\n  \"method\": \"PUT\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"name\\\":\\\"Name of your questionnaire\\\",\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"question\\\":\\\"whats your age?\\\",\\\"type\\\":\\\"text\\\",\\\"options\\\":{\\\"age\\\":\\\"\\\"}},\\\"q2\\\":{\\\"question\\\":\\\"whats your gender?\\\",\\\"type\\\":\\\"radio\\\",\\\"options\\\":{\\\"a\\\":\\\"male\\\",\\\"b\\\":\\\"female\\\"}}},\\\"skincare_goal\\\":{\\\"q1\\\":{\\\"question\\\":\\\"what is your skincare concern?\\\",\\\"type\\\":\\\"checkbox\\\",\\\"options\\\":{\\\"a\\\":\\\"acne\\\",\\\"b\\\":\\\"anti-aging\\\",\\\"c\\\":\\\"Closed comedons(blackheads, whiteheads)\\\",\\\"d\\\":\\\"Hyperpigmentation\\\",\\\"e\\\":\\\"Dullness\\\",\\\"f\\\":\\\"Dehydrated skin\\\"}}}}}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = JSON.stringify({\n  \"name\": \"Name of your questionnaire\",\n  \"questions\": {\n    \"skincare_history\": {\n      \"q1\": {\n        \"question\": \"whats your age?\",\n        \"type\": \"text\",\n        \"options\": {\n          \"age\": \"\"\n        }\n      },\n      \"q2\": {\n        \"question\": \"whats your gender?\",\n        \"type\": \"radio\",\n        \"options\": {\n          \"a\": \"male\",\n          \"b\": \"female\"\n        }\n      }\n    },\n    \"skincare_goal\": {\n      \"q1\": {\n        \"question\": \"what is your skincare concern?\",\n        \"type\": \"checkbox\",\n        \"options\": {\n          \"a\": \"acne\",\n          \"b\": \"anti-aging\",\n          \"c\": \"Closed comedons(blackheads, whiteheads)\",\n          \"d\": \"Hyperpigmentation\",\n          \"e\": \"Dullness\",\n          \"f\": \"Dehydrated skin\"\n        }\n      }\n    }\n  }\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PUT\", \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/questionnaires/%7Bquestionnaire_id%7D\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  name: 'Name of your questionnaire',\n  questions: {\n    skincare_history: {\n      q1: {question: 'whats your age?', type: 'text', options: {age: ''}},\n      q2: {\n        question: 'whats your gender?',\n        type: 'radio',\n        options: {a: 'male', b: 'female'}\n      }\n    },\n    skincare_goal: {\n      q1: {\n        question: 'what is your skincare concern?',\n        type: 'checkbox',\n        options: {\n          a: 'acne',\n          b: 'anti-aging',\n          c: 'Closed comedons(blackheads, whiteheads)',\n          d: 'Hyperpigmentation',\n          e: 'Dullness',\n          f: 'Dehydrated skin'\n        }\n      }\n    }\n  }\n}));\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    name: 'Name of your questionnaire',\n    questions: {\n      skincare_history: {\n        q1: {question: 'whats your age?', type: 'text', options: {age: ''}},\n        q2: {\n          question: 'whats your gender?',\n          type: 'radio',\n          options: {a: 'male', b: 'female'}\n        }\n      },\n      skincare_goal: {\n        q1: {\n          question: 'what is your skincare concern?',\n          type: 'checkbox',\n          options: {\n            a: 'acne',\n            b: 'anti-aging',\n            c: 'Closed comedons(blackheads, whiteheads)',\n            d: 'Hyperpigmentation',\n            e: 'Dullness',\n            f: 'Dehydrated skin'\n          }\n        }\n      }\n    }\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"PUT\", \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"name\": \"Name of your questionnaire\",\n  \"questions\": {\n    \"skincare_history\": {\n      \"q1\": {\n        \"question\": \"whats your age?\",\n        \"type\": \"text\",\n        \"options\": {\n          \"age\": \"\"\n        }\n      },\n      \"q2\": {\n        \"question\": \"whats your gender?\",\n        \"type\": \"radio\",\n        \"options\": {\n          \"a\": \"male\",\n          \"b\": \"female\"\n        }\n      }\n    },\n    \"skincare_goal\": {\n      \"q1\": {\n        \"question\": \"what is your skincare concern?\",\n        \"type\": \"checkbox\",\n        \"options\": {\n          \"a\": \"acne\",\n          \"b\": \"anti-aging\",\n          \"c\": \"Closed comedons(blackheads, whiteheads)\",\n          \"d\": \"Hyperpigmentation\",\n          \"e\": \"Dullness\",\n          \"f\": \"Dehydrated skin\"\n        }\n      }\n    }\n  }\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"name\": @\"Name of your questionnaire\",\n                              @\"questions\": @{ @\"skincare_history\": @{ @\"q1\": @{ @\"question\": @\"whats your age?\", @\"type\": @\"text\", @\"options\": @{ @\"age\": @\"\" } }, @\"q2\": @{ @\"question\": @\"whats your gender?\", @\"type\": @\"radio\", @\"options\": @{ @\"a\": @\"male\", @\"b\": @\"female\" } } }, @\"skincare_goal\": @{ @\"q1\": @{ @\"question\": @\"what is your skincare concern?\", @\"type\": @\"checkbox\", @\"options\": @{ @\"a\": @\"acne\", @\"b\": @\"anti-aging\", @\"c\": @\"Closed comedons(blackheads, whiteheads)\", @\"d\": @\"Hyperpigmentation\", @\"e\": @\"Dullness\", @\"f\": @\"Dehydrated skin\" } } } } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PUT\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"name\\\":\\\"Name of your questionnaire\\\",\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"question\\\":\\\"whats your age?\\\",\\\"type\\\":\\\"text\\\",\\\"options\\\":{\\\"age\\\":\\\"\\\"}},\\\"q2\\\":{\\\"question\\\":\\\"whats your gender?\\\",\\\"type\\\":\\\"radio\\\",\\\"options\\\":{\\\"a\\\":\\\"male\\\",\\\"b\\\":\\\"female\\\"}}},\\\"skincare_goal\\\":{\\\"q1\\\":{\\\"question\\\":\\\"what is your skincare concern?\\\",\\\"type\\\":\\\"checkbox\\\",\\\"options\\\":{\\\"a\\\":\\\"acne\\\",\\\"b\\\":\\\"anti-aging\\\",\\\"c\\\":\\\"Closed comedons(blackheads, whiteheads)\\\",\\\"d\\\":\\\"Hyperpigmentation\\\",\\\"e\\\":\\\"Dullness\\\",\\\"f\\\":\\\"Dehydrated skin\\\"}}}}}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"name\":\"Name of your questionnaire\",\"questions\":{\"skincare_history\":{\"q1\":{\"question\":\"whats your age?\",\"type\":\"text\",\"options\":{\"age\":\"\"}},\"q2\":{\"question\":\"whats your gender?\",\"type\":\"radio\",\"options\":{\"a\":\"male\",\"b\":\"female\"}}},\"skincare_goal\":{\"q1\":{\"question\":\"what is your skincare concern?\",\"type\":\"checkbox\",\"options\":{\"a\":\"acne\",\"b\":\"anti-aging\",\"c\":\"Closed comedons(blackheads, whiteheads)\",\"d\":\"Hyperpigmentation\",\"e\":\"Dullness\",\"f\":\"Dehydrated skin\"}}}}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"name\":\"Name of your questionnaire\",\"questions\":{\"skincare_history\":{\"q1\":{\"question\":\"whats your age?\",\"type\":\"text\",\"options\":{\"age\":\"\"}},\"q2\":{\"question\":\"whats your gender?\",\"type\":\"radio\",\"options\":{\"a\":\"male\",\"b\":\"female\"}}},\"skincare_goal\":{\"q1\":{\"question\":\"what is your skincare concern?\",\"type\":\"checkbox\",\"options\":{\"a\":\"acne\",\"b\":\"anti-aging\",\"c\":\"Closed comedons(blackheads, whiteheads)\",\"d\":\"Hyperpigmentation\",\"e\":\"Dullness\",\"f\":\"Dehydrated skin\"}}}}}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"name\\\":\\\"Name of your questionnaire\\\",\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"question\\\":\\\"whats your age?\\\",\\\"type\\\":\\\"text\\\",\\\"options\\\":{\\\"age\\\":\\\"\\\"}},\\\"q2\\\":{\\\"question\\\":\\\"whats your gender?\\\",\\\"type\\\":\\\"radio\\\",\\\"options\\\":{\\\"a\\\":\\\"male\\\",\\\"b\\\":\\\"female\\\"}}},\\\"skincare_goal\\\":{\\\"q1\\\":{\\\"question\\\":\\\"what is your skincare concern?\\\",\\\"type\\\":\\\"checkbox\\\",\\\"options\\\":{\\\"a\\\":\\\"acne\\\",\\\"b\\\":\\\"anti-aging\\\",\\\"c\\\":\\\"Closed comedons(blackheads, whiteheads)\\\",\\\"d\\\":\\\"Hyperpigmentation\\\",\\\"e\\\":\\\"Dullness\\\",\\\"f\\\":\\\"Dehydrated skin\\\"}}}}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"PUT\", \"/v1/questionnaires/%7Bquestionnaire_id%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\"\n\npayload = {\n    \"name\": \"Name of your questionnaire\",\n    \"questions\": {\n        \"skincare_history\": {\n            \"q1\": {\n                \"question\": \"whats your age?\",\n                \"type\": \"text\",\n                \"options\": {\"age\": \"\"}\n            },\n            \"q2\": {\n                \"question\": \"whats your gender?\",\n                \"type\": \"radio\",\n                \"options\": {\n                    \"a\": \"male\",\n                    \"b\": \"female\"\n                }\n            }\n        },\n        \"skincare_goal\": {\"q1\": {\n                \"question\": \"what is your skincare concern?\",\n                \"type\": \"checkbox\",\n                \"options\": {\n                    \"a\": \"acne\",\n                    \"b\": \"anti-aging\",\n                    \"c\": \"Closed comedons(blackheads, whiteheads)\",\n                    \"d\": \"Hyperpigmentation\",\n                    \"e\": \"Dullness\",\n                    \"f\": \"Dehydrated skin\"\n                }\n            }}\n    }\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"PUT\", url, json=payload, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"name\\\":\\\"Name of your questionnaire\\\",\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"question\\\":\\\"whats your age?\\\",\\\"type\\\":\\\"text\\\",\\\"options\\\":{\\\"age\\\":\\\"\\\"}},\\\"q2\\\":{\\\"question\\\":\\\"whats your gender?\\\",\\\"type\\\":\\\"radio\\\",\\\"options\\\":{\\\"a\\\":\\\"male\\\",\\\"b\\\":\\\"female\\\"}}},\\\"skincare_goal\\\":{\\\"q1\\\":{\\\"question\\\":\\\"what is your skincare concern?\\\",\\\"type\\\":\\\"checkbox\\\",\\\"options\\\":{\\\"a\\\":\\\"acne\\\",\\\"b\\\":\\\"anti-aging\\\",\\\"c\\\":\\\"Closed comedons(blackheads, whiteheads)\\\",\\\"d\\\":\\\"Hyperpigmentation\\\",\\\"e\\\":\\\"Dullness\\\",\\\"f\\\":\\\"Dehydrated skin\\\"}}}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request PUT \\\n  --url https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"name\":\"Name of your questionnaire\",\"questions\":{\"skincare_history\":{\"q1\":{\"question\":\"whats your age?\",\"type\":\"text\",\"options\":{\"age\":\"\"}},\"q2\":{\"question\":\"whats your gender?\",\"type\":\"radio\",\"options\":{\"a\":\"male\",\"b\":\"female\"}}},\"skincare_goal\":{\"q1\":{\"question\":\"what is your skincare concern?\",\"type\":\"checkbox\",\"options\":{\"a\":\"acne\",\"b\":\"anti-aging\",\"c\":\"Closed comedons(blackheads, whiteheads)\",\"d\":\"Hyperpigmentation\",\"e\":\"Dullness\",\"f\":\"Dehydrated skin\"}}}}}'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"name\": \"Name of your questionnaire\",\n  \"questions\": [\n    \"skincare_history\": [\n      \"q1\": [\n        \"question\": \"whats your age?\",\n        \"type\": \"text\",\n        \"options\": [\"age\": \"\"]\n      ],\n      \"q2\": [\n        \"question\": \"whats your gender?\",\n        \"type\": \"radio\",\n        \"options\": [\n          \"a\": \"male\",\n          \"b\": \"female\"\n        ]\n      ]\n    ],\n    \"skincare_goal\": [\"q1\": [\n        \"question\": \"what is your skincare concern?\",\n        \"type\": \"checkbox\",\n        \"options\": [\n          \"a\": \"acne\",\n          \"b\": \"anti-aging\",\n          \"c\": \"Closed comedons(blackheads, whiteheads)\",\n          \"d\": \"Hyperpigmentation\",\n          \"e\": \"Dullness\",\n          \"f\": \"Dehydrated skin\"\n        ]\n      ]]\n  ]\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"PUT\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "questionnaire"
                ],
                "summary": "Delete a questionnaire.",
                "description": "Delete a questionnaire.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| questionnaire_id | str | str | The ID of the questionnaire to retrieve. (Required) |\n\nReturns the delete status.",
                "operationId": "delete_a_questionnaires_v1_questionnaires__questionnaire_id__delete",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Questionnaire Id",
                            "type": "string"
                        },
                        "name": "questionnaire_id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Delete,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\")\n  .delete(null)\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.delete(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\",\n  \"method\": \"DELETE\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"DELETE\", \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/questionnaires/%7Bquestionnaire_id%7D\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D',\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"DELETE\", \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\");\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"DELETE\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"DELETE\", \"/v1/questionnaires/%7Bquestionnaire_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\"\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"DELETE\", url, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request DELETE \\\n  --url https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"DELETE\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/questionnaires/{questionnaire_id}/mapper": {
            "get": {
                "tags": [
                    "questionnaire"
                ],
                "summary": "Get the mapper of a questionnaire.",
                "description": "Get details of a questionnaire mapper.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| questionnaire_id | str | str | The ID of the questionnaire to retrieve. (Required) |\n\nReturns the mapper of a questionnaire given the questionnaire id.",
                "operationId": "get_a_mapper_v1_questionnaires__questionnaire_id__mapper_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Questionnaire Id",
                            "type": "string"
                        },
                        "name": "questionnaire_id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper',\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\");\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\"\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request GET \\\n  --url https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            },
            "put": {
                "tags": [
                    "questionnaire"
                ],
                "summary": "Update a mapper.",
                "description": "Update a mapper.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| questionnaire_id | str | str | The ID of the questionnaire to retrieve. (Required) |\n| prompt_sections | str | Dict[str, str] | List of the prompt sections. Each section will have its own key, these key will used in mapper |\n| prompt_order | str | List[str] | A list of prompt sections key in the order they should be in the resultant prompt |\n| questions | str | Dict[str, Dict] | Contains the question sections and their questions |\n| mapper | str | Dict[str, Dict] | maps different answers to decisions. |\n| model | str | Selected enum value | Represents the the model to be used for recommendation generation. |\n| max_token_size | int | int | expected max token size for the reply |\n| intro | str | str | Share a little context about the questionnaire|\n| system | str | str | You are an expert on ...|\n\nReturns mapper update status.",
                "operationId": "put_mapper_v1_questionnaires__questionnaire_id__mapper_put",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Questionnaire Id",
                            "type": "string"
                        },
                        "name": "questionnaire_id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MapperUpdateSchema"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"mapper\\\":{\\\"any\\\":{\\\"age\\\":\\\"\\\"}}},\\\"q2\\\":{\\\"mapper\\\":{\\\"a\\\":{\\\"gender\\\":\\\"male\\\"},\\\"b\\\":{\\\"gender\\\":\\\"female\\\"}}},\\\"q7\\\":{\\\"mapper\\\":{\\\"~\\\":{\\\"a|b|c\\\":{\\\"exclude\\\":[\\\"Retinol\\\"]}}}}}},\\\"exclusive\\\":{\\\"prompt_key-1\\\":\\\"prompt_key-2\\\"},\\\"prompt_sections\\\":{\\\"skincare_history\\\":\\\"I am {age} years old {gender}\\\",\\\"skin_type\\\":\\\"My skin type is {skin_type}\\\",\\\"include\\\":\\\"include these category {include}\\\"},\\\"prompt_order\\\":[\\\"skincare_history\\\",\\\"include\\\",\\\"skin_type\\\"],\\\"gpt_settings\\\":{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"search_max_token\\\":2500,\\\"intro\\\":\\\"Share a little context about the question\\\",\\\"system\\\":\\\"You are an expert on ...\\\",\\\"temperature\\\":0,\\\"top_p\\\":1,\\\"frequency_penalty\\\":0,\\\"presence_penalty\\\":0,\\\"stop\\\":[\\\"AI:\\\",\\\"Human:\\\"]}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Put,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"mapper\\\":{\\\"any\\\":{\\\"age\\\":\\\"\\\"}}},\\\"q2\\\":{\\\"mapper\\\":{\\\"a\\\":{\\\"gender\\\":\\\"male\\\"},\\\"b\\\":{\\\"gender\\\":\\\"female\\\"}}},\\\"q7\\\":{\\\"mapper\\\":{\\\"~\\\":{\\\"a|b|c\\\":{\\\"exclude\\\":[\\\"Retinol\\\"]}}}}}},\\\"exclusive\\\":{\\\"prompt_key-1\\\":\\\"prompt_key-2\\\"},\\\"prompt_sections\\\":{\\\"skincare_history\\\":\\\"I am {age} years old {gender}\\\",\\\"skin_type\\\":\\\"My skin type is {skin_type}\\\",\\\"include\\\":\\\"include these category {include}\\\"},\\\"prompt_order\\\":[\\\"skincare_history\\\",\\\"include\\\",\\\"skin_type\\\"],\\\"gpt_settings\\\":{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"search_max_token\\\":2500,\\\"intro\\\":\\\"Share a little context about the question\\\",\\\"system\\\":\\\"You are an expert on ...\\\",\\\"temperature\\\":0,\\\"top_p\\\":1,\\\"frequency_penalty\\\":0,\\\"presence_penalty\\\":0,\\\"stop\\\":[\\\"AI:\\\",\\\"Human:\\\"]}}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\"\n\n\tpayload := strings.NewReader(\"{\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"mapper\\\":{\\\"any\\\":{\\\"age\\\":\\\"\\\"}}},\\\"q2\\\":{\\\"mapper\\\":{\\\"a\\\":{\\\"gender\\\":\\\"male\\\"},\\\"b\\\":{\\\"gender\\\":\\\"female\\\"}}},\\\"q7\\\":{\\\"mapper\\\":{\\\"~\\\":{\\\"a|b|c\\\":{\\\"exclude\\\":[\\\"Retinol\\\"]}}}}}},\\\"exclusive\\\":{\\\"prompt_key-1\\\":\\\"prompt_key-2\\\"},\\\"prompt_sections\\\":{\\\"skincare_history\\\":\\\"I am {age} years old {gender}\\\",\\\"skin_type\\\":\\\"My skin type is {skin_type}\\\",\\\"include\\\":\\\"include these category {include}\\\"},\\\"prompt_order\\\":[\\\"skincare_history\\\",\\\"include\\\",\\\"skin_type\\\"],\\\"gpt_settings\\\":{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"search_max_token\\\":2500,\\\"intro\\\":\\\"Share a little context about the question\\\",\\\"system\\\":\\\"You are an expert on ...\\\",\\\"temperature\\\":0,\\\"top_p\\\":1,\\\"frequency_penalty\\\":0,\\\"presence_penalty\\\":0,\\\"stop\\\":[\\\"AI:\\\",\\\"Human:\\\"]}}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"mapper\\\":{\\\"any\\\":{\\\"age\\\":\\\"\\\"}}},\\\"q2\\\":{\\\"mapper\\\":{\\\"a\\\":{\\\"gender\\\":\\\"male\\\"},\\\"b\\\":{\\\"gender\\\":\\\"female\\\"}}},\\\"q7\\\":{\\\"mapper\\\":{\\\"~\\\":{\\\"a|b|c\\\":{\\\"exclude\\\":[\\\"Retinol\\\"]}}}}}},\\\"exclusive\\\":{\\\"prompt_key-1\\\":\\\"prompt_key-2\\\"},\\\"prompt_sections\\\":{\\\"skincare_history\\\":\\\"I am {age} years old {gender}\\\",\\\"skin_type\\\":\\\"My skin type is {skin_type}\\\",\\\"include\\\":\\\"include these category {include}\\\"},\\\"prompt_order\\\":[\\\"skincare_history\\\",\\\"include\\\",\\\"skin_type\\\"],\\\"gpt_settings\\\":{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"search_max_token\\\":2500,\\\"intro\\\":\\\"Share a little context about the question\\\",\\\"system\\\":\\\"You are an expert on ...\\\",\\\"temperature\\\":0,\\\"top_p\\\":1,\\\"frequency_penalty\\\":0,\\\"presence_penalty\\\":0,\\\"stop\\\":[\\\"AI:\\\",\\\"Human:\\\"]}}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\")\n  .put(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.put(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"mapper\\\":{\\\"any\\\":{\\\"age\\\":\\\"\\\"}}},\\\"q2\\\":{\\\"mapper\\\":{\\\"a\\\":{\\\"gender\\\":\\\"male\\\"},\\\"b\\\":{\\\"gender\\\":\\\"female\\\"}}},\\\"q7\\\":{\\\"mapper\\\":{\\\"~\\\":{\\\"a|b|c\\\":{\\\"exclude\\\":[\\\"Retinol\\\"]}}}}}},\\\"exclusive\\\":{\\\"prompt_key-1\\\":\\\"prompt_key-2\\\"},\\\"prompt_sections\\\":{\\\"skincare_history\\\":\\\"I am {age} years old {gender}\\\",\\\"skin_type\\\":\\\"My skin type is {skin_type}\\\",\\\"include\\\":\\\"include these category {include}\\\"},\\\"prompt_order\\\":[\\\"skincare_history\\\",\\\"include\\\",\\\"skin_type\\\"],\\\"gpt_settings\\\":{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"search_max_token\\\":2500,\\\"intro\\\":\\\"Share a little context about the question\\\",\\\"system\\\":\\\"You are an expert on ...\\\",\\\"temperature\\\":0,\\\"top_p\\\":1,\\\"frequency_penalty\\\":0,\\\"presence_penalty\\\":0,\\\"stop\\\":[\\\"AI:\\\",\\\"Human:\\\"]}}\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\",\n  \"method\": \"PUT\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"mapper\\\":{\\\"any\\\":{\\\"age\\\":\\\"\\\"}}},\\\"q2\\\":{\\\"mapper\\\":{\\\"a\\\":{\\\"gender\\\":\\\"male\\\"},\\\"b\\\":{\\\"gender\\\":\\\"female\\\"}}},\\\"q7\\\":{\\\"mapper\\\":{\\\"~\\\":{\\\"a|b|c\\\":{\\\"exclude\\\":[\\\"Retinol\\\"]}}}}}},\\\"exclusive\\\":{\\\"prompt_key-1\\\":\\\"prompt_key-2\\\"},\\\"prompt_sections\\\":{\\\"skincare_history\\\":\\\"I am {age} years old {gender}\\\",\\\"skin_type\\\":\\\"My skin type is {skin_type}\\\",\\\"include\\\":\\\"include these category {include}\\\"},\\\"prompt_order\\\":[\\\"skincare_history\\\",\\\"include\\\",\\\"skin_type\\\"],\\\"gpt_settings\\\":{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"search_max_token\\\":2500,\\\"intro\\\":\\\"Share a little context about the question\\\",\\\"system\\\":\\\"You are an expert on ...\\\",\\\"temperature\\\":0,\\\"top_p\\\":1,\\\"frequency_penalty\\\":0,\\\"presence_penalty\\\":0,\\\"stop\\\":[\\\"AI:\\\",\\\"Human:\\\"]}}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = JSON.stringify({\n  \"questions\": {\n    \"skincare_history\": {\n      \"q1\": {\n        \"mapper\": {\n          \"any\": {\n            \"age\": \"\"\n          }\n        }\n      },\n      \"q2\": {\n        \"mapper\": {\n          \"a\": {\n            \"gender\": \"male\"\n          },\n          \"b\": {\n            \"gender\": \"female\"\n          }\n        }\n      },\n      \"q7\": {\n        \"mapper\": {\n          \"~\": {\n            \"a|b|c\": {\n              \"exclude\": [\n                \"Retinol\"\n              ]\n            }\n          }\n        }\n      }\n    }\n  },\n  \"exclusive\": {\n    \"prompt_key-1\": \"prompt_key-2\"\n  },\n  \"prompt_sections\": {\n    \"skincare_history\": \"I am {age} years old {gender}\",\n    \"skin_type\": \"My skin type is {skin_type}\",\n    \"include\": \"include these category {include}\"\n  },\n  \"prompt_order\": [\n    \"skincare_history\",\n    \"include\",\n    \"skin_type\"\n  ],\n  \"gpt_settings\": {\n    \"model\": \"gpt-3.5-turbo-0613\",\n    \"search_max_token\": 2500,\n    \"intro\": \"Share a little context about the question\",\n    \"system\": \"You are an expert on ...\",\n    \"temperature\": 0,\n    \"top_p\": 1,\n    \"frequency_penalty\": 0,\n    \"presence_penalty\": 0,\n    \"stop\": [\n      \"AI:\",\n      \"Human:\"\n    ]\n  }\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PUT\", \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  questions: {\n    skincare_history: {\n      q1: {mapper: {any: {age: ''}}},\n      q2: {mapper: {a: {gender: 'male'}, b: {gender: 'female'}}},\n      q7: {mapper: {'~': {'a|b|c': {exclude: ['Retinol']}}}}\n    }\n  },\n  exclusive: {'prompt_key-1': 'prompt_key-2'},\n  prompt_sections: {\n    skincare_history: 'I am {age} years old {gender}',\n    skin_type: 'My skin type is {skin_type}',\n    include: 'include these category {include}'\n  },\n  prompt_order: ['skincare_history', 'include', 'skin_type'],\n  gpt_settings: {\n    model: 'gpt-3.5-turbo-0613',\n    search_max_token: 2500,\n    intro: 'Share a little context about the question',\n    system: 'You are an expert on ...',\n    temperature: 0,\n    top_p: 1,\n    frequency_penalty: 0,\n    presence_penalty: 0,\n    stop: ['AI:', 'Human:']\n  }\n}));\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    questions: {\n      skincare_history: {\n        q1: {mapper: {any: {age: ''}}},\n        q2: {mapper: {a: {gender: 'male'}, b: {gender: 'female'}}},\n        q7: {mapper: {'~': {'a|b|c': {exclude: ['Retinol']}}}}\n      }\n    },\n    exclusive: {'prompt_key-1': 'prompt_key-2'},\n    prompt_sections: {\n      skincare_history: 'I am {age} years old {gender}',\n      skin_type: 'My skin type is {skin_type}',\n      include: 'include these category {include}'\n    },\n    prompt_order: ['skincare_history', 'include', 'skin_type'],\n    gpt_settings: {\n      model: 'gpt-3.5-turbo-0613',\n      search_max_token: 2500,\n      intro: 'Share a little context about the question',\n      system: 'You are an expert on ...',\n      temperature: 0,\n      top_p: 1,\n      frequency_penalty: 0,\n      presence_penalty: 0,\n      stop: ['AI:', 'Human:']\n    }\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"PUT\", \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"questions\": {\n    \"skincare_history\": {\n      \"q1\": {\n        \"mapper\": {\n          \"any\": {\n            \"age\": \"\"\n          }\n        }\n      },\n      \"q2\": {\n        \"mapper\": {\n          \"a\": {\n            \"gender\": \"male\"\n          },\n          \"b\": {\n            \"gender\": \"female\"\n          }\n        }\n      },\n      \"q7\": {\n        \"mapper\": {\n          \"~\": {\n            \"a|b|c\": {\n              \"exclude\": [\n                \"Retinol\"\n              ]\n            }\n          }\n        }\n      }\n    }\n  },\n  \"exclusive\": {\n    \"prompt_key-1\": \"prompt_key-2\"\n  },\n  \"prompt_sections\": {\n    \"skincare_history\": \"I am {age} years old {gender}\",\n    \"skin_type\": \"My skin type is {skin_type}\",\n    \"include\": \"include these category {include}\"\n  },\n  \"prompt_order\": [\n    \"skincare_history\",\n    \"include\",\n    \"skin_type\"\n  ],\n  \"gpt_settings\": {\n    \"model\": \"gpt-3.5-turbo-0613\",\n    \"search_max_token\": 2500,\n    \"intro\": \"Share a little context about the question\",\n    \"system\": \"You are an expert on ...\",\n    \"temperature\": 0,\n    \"top_p\": 1,\n    \"frequency_penalty\": 0,\n    \"presence_penalty\": 0,\n    \"stop\": [\n      \"AI:\",\n      \"Human:\"\n    ]\n  }\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"questions\": @{ @\"skincare_history\": @{ @\"q1\": @{ @\"mapper\": @{ @\"any\": @{ @\"age\": @\"\" } } }, @\"q2\": @{ @\"mapper\": @{ @\"a\": @{ @\"gender\": @\"male\" }, @\"b\": @{ @\"gender\": @\"female\" } } }, @\"q7\": @{ @\"mapper\": @{ @\"~\": @{ @\"a|b|c\": @{ @\"exclude\": @[ @\"Retinol\" ] } } } } } },\n                              @\"exclusive\": @{ @\"prompt_key-1\": @\"prompt_key-2\" },\n                              @\"prompt_sections\": @{ @\"skincare_history\": @\"I am {age} years old {gender}\", @\"skin_type\": @\"My skin type is {skin_type}\", @\"include\": @\"include these category {include}\" },\n                              @\"prompt_order\": @[ @\"skincare_history\", @\"include\", @\"skin_type\" ],\n                              @\"gpt_settings\": @{ @\"model\": @\"gpt-3.5-turbo-0613\", @\"search_max_token\": @2500, @\"intro\": @\"Share a little context about the question\", @\"system\": @\"You are an expert on ...\", @\"temperature\": @0, @\"top_p\": @1, @\"frequency_penalty\": @0, @\"presence_penalty\": @0, @\"stop\": @[ @\"AI:\", @\"Human:\" ] } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PUT\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"mapper\\\":{\\\"any\\\":{\\\"age\\\":\\\"\\\"}}},\\\"q2\\\":{\\\"mapper\\\":{\\\"a\\\":{\\\"gender\\\":\\\"male\\\"},\\\"b\\\":{\\\"gender\\\":\\\"female\\\"}}},\\\"q7\\\":{\\\"mapper\\\":{\\\"~\\\":{\\\"a|b|c\\\":{\\\"exclude\\\":[\\\"Retinol\\\"]}}}}}},\\\"exclusive\\\":{\\\"prompt_key-1\\\":\\\"prompt_key-2\\\"},\\\"prompt_sections\\\":{\\\"skincare_history\\\":\\\"I am {age} years old {gender}\\\",\\\"skin_type\\\":\\\"My skin type is {skin_type}\\\",\\\"include\\\":\\\"include these category {include}\\\"},\\\"prompt_order\\\":[\\\"skincare_history\\\",\\\"include\\\",\\\"skin_type\\\"],\\\"gpt_settings\\\":{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"search_max_token\\\":2500,\\\"intro\\\":\\\"Share a little context about the question\\\",\\\"system\\\":\\\"You are an expert on ...\\\",\\\"temperature\\\":0,\\\"top_p\\\":1,\\\"frequency_penalty\\\":0,\\\"presence_penalty\\\":0,\\\"stop\\\":[\\\"AI:\\\",\\\"Human:\\\"]}}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"questions\":{\"skincare_history\":{\"q1\":{\"mapper\":{\"any\":{\"age\":\"\"}}},\"q2\":{\"mapper\":{\"a\":{\"gender\":\"male\"},\"b\":{\"gender\":\"female\"}}},\"q7\":{\"mapper\":{\"~\":{\"a|b|c\":{\"exclude\":[\"Retinol\"]}}}}}},\"exclusive\":{\"prompt_key-1\":\"prompt_key-2\"},\"prompt_sections\":{\"skincare_history\":\"I am {age} years old {gender}\",\"skin_type\":\"My skin type is {skin_type}\",\"include\":\"include these category {include}\"},\"prompt_order\":[\"skincare_history\",\"include\",\"skin_type\"],\"gpt_settings\":{\"model\":\"gpt-3.5-turbo-0613\",\"search_max_token\":2500,\"intro\":\"Share a little context about the question\",\"system\":\"You are an expert on ...\",\"temperature\":0,\"top_p\":1,\"frequency_penalty\":0,\"presence_penalty\":0,\"stop\":[\"AI:\",\"Human:\"]}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"questions\":{\"skincare_history\":{\"q1\":{\"mapper\":{\"any\":{\"age\":\"\"}}},\"q2\":{\"mapper\":{\"a\":{\"gender\":\"male\"},\"b\":{\"gender\":\"female\"}}},\"q7\":{\"mapper\":{\"~\":{\"a|b|c\":{\"exclude\":[\"Retinol\"]}}}}}},\"exclusive\":{\"prompt_key-1\":\"prompt_key-2\"},\"prompt_sections\":{\"skincare_history\":\"I am {age} years old {gender}\",\"skin_type\":\"My skin type is {skin_type}\",\"include\":\"include these category {include}\"},\"prompt_order\":[\"skincare_history\",\"include\",\"skin_type\"],\"gpt_settings\":{\"model\":\"gpt-3.5-turbo-0613\",\"search_max_token\":2500,\"intro\":\"Share a little context about the question\",\"system\":\"You are an expert on ...\",\"temperature\":0,\"top_p\":1,\"frequency_penalty\":0,\"presence_penalty\":0,\"stop\":[\"AI:\",\"Human:\"]}}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"mapper\\\":{\\\"any\\\":{\\\"age\\\":\\\"\\\"}}},\\\"q2\\\":{\\\"mapper\\\":{\\\"a\\\":{\\\"gender\\\":\\\"male\\\"},\\\"b\\\":{\\\"gender\\\":\\\"female\\\"}}},\\\"q7\\\":{\\\"mapper\\\":{\\\"~\\\":{\\\"a|b|c\\\":{\\\"exclude\\\":[\\\"Retinol\\\"]}}}}}},\\\"exclusive\\\":{\\\"prompt_key-1\\\":\\\"prompt_key-2\\\"},\\\"prompt_sections\\\":{\\\"skincare_history\\\":\\\"I am {age} years old {gender}\\\",\\\"skin_type\\\":\\\"My skin type is {skin_type}\\\",\\\"include\\\":\\\"include these category {include}\\\"},\\\"prompt_order\\\":[\\\"skincare_history\\\",\\\"include\\\",\\\"skin_type\\\"],\\\"gpt_settings\\\":{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"search_max_token\\\":2500,\\\"intro\\\":\\\"Share a little context about the question\\\",\\\"system\\\":\\\"You are an expert on ...\\\",\\\"temperature\\\":0,\\\"top_p\\\":1,\\\"frequency_penalty\\\":0,\\\"presence_penalty\\\":0,\\\"stop\\\":[\\\"AI:\\\",\\\"Human:\\\"]}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"PUT\", \"/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\"\n\npayload = {\n    \"questions\": {\"skincare_history\": {\n            \"q1\": {\"mapper\": {\"any\": {\"age\": \"\"}}},\n            \"q2\": {\"mapper\": {\n                    \"a\": {\"gender\": \"male\"},\n                    \"b\": {\"gender\": \"female\"}\n                }},\n            \"q7\": {\"mapper\": {\"~\": {\"a|b|c\": {\"exclude\": [\"Retinol\"]}}}}\n        }},\n    \"exclusive\": {\"prompt_key-1\": \"prompt_key-2\"},\n    \"prompt_sections\": {\n        \"skincare_history\": \"I am {age} years old {gender}\",\n        \"skin_type\": \"My skin type is {skin_type}\",\n        \"include\": \"include these category {include}\"\n    },\n    \"prompt_order\": [\"skincare_history\", \"include\", \"skin_type\"],\n    \"gpt_settings\": {\n        \"model\": \"gpt-3.5-turbo-0613\",\n        \"search_max_token\": 2500,\n        \"intro\": \"Share a little context about the question\",\n        \"system\": \"You are an expert on ...\",\n        \"temperature\": 0,\n        \"top_p\": 1,\n        \"frequency_penalty\": 0,\n        \"presence_penalty\": 0,\n        \"stop\": [\"AI:\", \"Human:\"]\n    }\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"PUT\", url, json=payload, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"mapper\\\":{\\\"any\\\":{\\\"age\\\":\\\"\\\"}}},\\\"q2\\\":{\\\"mapper\\\":{\\\"a\\\":{\\\"gender\\\":\\\"male\\\"},\\\"b\\\":{\\\"gender\\\":\\\"female\\\"}}},\\\"q7\\\":{\\\"mapper\\\":{\\\"~\\\":{\\\"a|b|c\\\":{\\\"exclude\\\":[\\\"Retinol\\\"]}}}}}},\\\"exclusive\\\":{\\\"prompt_key-1\\\":\\\"prompt_key-2\\\"},\\\"prompt_sections\\\":{\\\"skincare_history\\\":\\\"I am {age} years old {gender}\\\",\\\"skin_type\\\":\\\"My skin type is {skin_type}\\\",\\\"include\\\":\\\"include these category {include}\\\"},\\\"prompt_order\\\":[\\\"skincare_history\\\",\\\"include\\\",\\\"skin_type\\\"],\\\"gpt_settings\\\":{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"search_max_token\\\":2500,\\\"intro\\\":\\\"Share a little context about the question\\\",\\\"system\\\":\\\"You are an expert on ...\\\",\\\"temperature\\\":0,\\\"top_p\\\":1,\\\"frequency_penalty\\\":0,\\\"presence_penalty\\\":0,\\\"stop\\\":[\\\"AI:\\\",\\\"Human:\\\"]}}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request PUT \\\n  --url https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"questions\":{\"skincare_history\":{\"q1\":{\"mapper\":{\"any\":{\"age\":\"\"}}},\"q2\":{\"mapper\":{\"a\":{\"gender\":\"male\"},\"b\":{\"gender\":\"female\"}}},\"q7\":{\"mapper\":{\"~\":{\"a|b|c\":{\"exclude\":[\"Retinol\"]}}}}}},\"exclusive\":{\"prompt_key-1\":\"prompt_key-2\"},\"prompt_sections\":{\"skincare_history\":\"I am {age} years old {gender}\",\"skin_type\":\"My skin type is {skin_type}\",\"include\":\"include these category {include}\"},\"prompt_order\":[\"skincare_history\",\"include\",\"skin_type\"],\"gpt_settings\":{\"model\":\"gpt-3.5-turbo-0613\",\"search_max_token\":2500,\"intro\":\"Share a little context about the question\",\"system\":\"You are an expert on ...\",\"temperature\":0,\"top_p\":1,\"frequency_penalty\":0,\"presence_penalty\":0,\"stop\":[\"AI:\",\"Human:\"]}}'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"questions\": [\"skincare_history\": [\n      \"q1\": [\"mapper\": [\"any\": [\"age\": \"\"]]],\n      \"q2\": [\"mapper\": [\n          \"a\": [\"gender\": \"male\"],\n          \"b\": [\"gender\": \"female\"]\n        ]],\n      \"q7\": [\"mapper\": [\"~\": [\"a|b|c\": [\"exclude\": [\"Retinol\"]]]]]\n    ]],\n  \"exclusive\": [\"prompt_key-1\": \"prompt_key-2\"],\n  \"prompt_sections\": [\n    \"skincare_history\": \"I am {age} years old {gender}\",\n    \"skin_type\": \"My skin type is {skin_type}\",\n    \"include\": \"include these category {include}\"\n  ],\n  \"prompt_order\": [\"skincare_history\", \"include\", \"skin_type\"],\n  \"gpt_settings\": [\n    \"model\": \"gpt-3.5-turbo-0613\",\n    \"search_max_token\": 2500,\n    \"intro\": \"Share a little context about the question\",\n    \"system\": \"You are an expert on ...\",\n    \"temperature\": 0,\n    \"top_p\": 1,\n    \"frequency_penalty\": 0,\n    \"presence_penalty\": 0,\n    \"stop\": [\"AI:\", \"Human:\"]\n  ]\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"PUT\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            },
            "post": {
                "tags": [
                    "questionnaire"
                ],
                "summary": "Add mapper for a questionnaire.",
                "description": "Add a mapper for a questionnaire.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| questionnaire_id | str | str | The ID of the questionnaire to retrieve. (Required) |\n| prompt_sections | str | Dict[str, str] | List of the prompt sections. Each section will have its own key, these key will used in mapper |\n| prompt_order | str | List[str] | A list of prompt sections key in the order they should be in the resultant prompt |\n| questions | str | Dict[str, Dict] | Contains the question sections and their questions |\n| mapper | str | Dict[str, Dict] | maps different answers to decisions. |\n| model | str | Selected enum value | Represents the the model to be used for recommendation generation. |\n| max_token_size | int | int | expected max token size for the reply |\n| intro | str | str | Share a little context about the questionnaire|\n| system | str | str | You are an expert on ...|\n\nReturns mapper add status.",
                "operationId": "add_a_questionnaire_mapper_v1_questionnaires__questionnaire_id__mapper_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Questionnaire Id",
                            "type": "string"
                        },
                        "name": "questionnaire_id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MapperInsertSchema"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"mapper\\\":{\\\"any\\\":{\\\"age\\\":\\\"\\\"}}},\\\"q2\\\":{\\\"mapper\\\":{\\\"a\\\":{\\\"gender\\\":\\\"male\\\"},\\\"b\\\":{\\\"gender\\\":\\\"female\\\"}}},\\\"q7\\\":{\\\"mapper\\\":{\\\"~\\\":{\\\"a|b|c\\\":{\\\"exclude\\\":[\\\"Retinol\\\"]}}}}}},\\\"exclusive\\\":{\\\"prompt_key-1\\\":\\\"prompt_key-2\\\"},\\\"prompt_sections\\\":{\\\"skincare_history\\\":\\\"I am {age} years old {gender}\\\",\\\"skin_type\\\":\\\"My skin type is {skin_type}\\\",\\\"include\\\":\\\"include these category {include}\\\"},\\\"prompt_order\\\":[\\\"skincare_history\\\",\\\"include\\\",\\\"skin_type\\\"],\\\"gpt_settings\\\":{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"search_max_token\\\":2500,\\\"intro\\\":\\\"Share a little context about the question\\\",\\\"system\\\":\\\"You are an expert on ...\\\",\\\"temperature\\\":0,\\\"top_p\\\":1,\\\"frequency_penalty\\\":0,\\\"presence_penalty\\\":0,\\\"stop\\\":[\\\"AI:\\\",\\\"Human:\\\"]}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"mapper\\\":{\\\"any\\\":{\\\"age\\\":\\\"\\\"}}},\\\"q2\\\":{\\\"mapper\\\":{\\\"a\\\":{\\\"gender\\\":\\\"male\\\"},\\\"b\\\":{\\\"gender\\\":\\\"female\\\"}}},\\\"q7\\\":{\\\"mapper\\\":{\\\"~\\\":{\\\"a|b|c\\\":{\\\"exclude\\\":[\\\"Retinol\\\"]}}}}}},\\\"exclusive\\\":{\\\"prompt_key-1\\\":\\\"prompt_key-2\\\"},\\\"prompt_sections\\\":{\\\"skincare_history\\\":\\\"I am {age} years old {gender}\\\",\\\"skin_type\\\":\\\"My skin type is {skin_type}\\\",\\\"include\\\":\\\"include these category {include}\\\"},\\\"prompt_order\\\":[\\\"skincare_history\\\",\\\"include\\\",\\\"skin_type\\\"],\\\"gpt_settings\\\":{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"search_max_token\\\":2500,\\\"intro\\\":\\\"Share a little context about the question\\\",\\\"system\\\":\\\"You are an expert on ...\\\",\\\"temperature\\\":0,\\\"top_p\\\":1,\\\"frequency_penalty\\\":0,\\\"presence_penalty\\\":0,\\\"stop\\\":[\\\"AI:\\\",\\\"Human:\\\"]}}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\"\n\n\tpayload := strings.NewReader(\"{\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"mapper\\\":{\\\"any\\\":{\\\"age\\\":\\\"\\\"}}},\\\"q2\\\":{\\\"mapper\\\":{\\\"a\\\":{\\\"gender\\\":\\\"male\\\"},\\\"b\\\":{\\\"gender\\\":\\\"female\\\"}}},\\\"q7\\\":{\\\"mapper\\\":{\\\"~\\\":{\\\"a|b|c\\\":{\\\"exclude\\\":[\\\"Retinol\\\"]}}}}}},\\\"exclusive\\\":{\\\"prompt_key-1\\\":\\\"prompt_key-2\\\"},\\\"prompt_sections\\\":{\\\"skincare_history\\\":\\\"I am {age} years old {gender}\\\",\\\"skin_type\\\":\\\"My skin type is {skin_type}\\\",\\\"include\\\":\\\"include these category {include}\\\"},\\\"prompt_order\\\":[\\\"skincare_history\\\",\\\"include\\\",\\\"skin_type\\\"],\\\"gpt_settings\\\":{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"search_max_token\\\":2500,\\\"intro\\\":\\\"Share a little context about the question\\\",\\\"system\\\":\\\"You are an expert on ...\\\",\\\"temperature\\\":0,\\\"top_p\\\":1,\\\"frequency_penalty\\\":0,\\\"presence_penalty\\\":0,\\\"stop\\\":[\\\"AI:\\\",\\\"Human:\\\"]}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"mapper\\\":{\\\"any\\\":{\\\"age\\\":\\\"\\\"}}},\\\"q2\\\":{\\\"mapper\\\":{\\\"a\\\":{\\\"gender\\\":\\\"male\\\"},\\\"b\\\":{\\\"gender\\\":\\\"female\\\"}}},\\\"q7\\\":{\\\"mapper\\\":{\\\"~\\\":{\\\"a|b|c\\\":{\\\"exclude\\\":[\\\"Retinol\\\"]}}}}}},\\\"exclusive\\\":{\\\"prompt_key-1\\\":\\\"prompt_key-2\\\"},\\\"prompt_sections\\\":{\\\"skincare_history\\\":\\\"I am {age} years old {gender}\\\",\\\"skin_type\\\":\\\"My skin type is {skin_type}\\\",\\\"include\\\":\\\"include these category {include}\\\"},\\\"prompt_order\\\":[\\\"skincare_history\\\",\\\"include\\\",\\\"skin_type\\\"],\\\"gpt_settings\\\":{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"search_max_token\\\":2500,\\\"intro\\\":\\\"Share a little context about the question\\\",\\\"system\\\":\\\"You are an expert on ...\\\",\\\"temperature\\\":0,\\\"top_p\\\":1,\\\"frequency_penalty\\\":0,\\\"presence_penalty\\\":0,\\\"stop\\\":[\\\"AI:\\\",\\\"Human:\\\"]}}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"mapper\\\":{\\\"any\\\":{\\\"age\\\":\\\"\\\"}}},\\\"q2\\\":{\\\"mapper\\\":{\\\"a\\\":{\\\"gender\\\":\\\"male\\\"},\\\"b\\\":{\\\"gender\\\":\\\"female\\\"}}},\\\"q7\\\":{\\\"mapper\\\":{\\\"~\\\":{\\\"a|b|c\\\":{\\\"exclude\\\":[\\\"Retinol\\\"]}}}}}},\\\"exclusive\\\":{\\\"prompt_key-1\\\":\\\"prompt_key-2\\\"},\\\"prompt_sections\\\":{\\\"skincare_history\\\":\\\"I am {age} years old {gender}\\\",\\\"skin_type\\\":\\\"My skin type is {skin_type}\\\",\\\"include\\\":\\\"include these category {include}\\\"},\\\"prompt_order\\\":[\\\"skincare_history\\\",\\\"include\\\",\\\"skin_type\\\"],\\\"gpt_settings\\\":{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"search_max_token\\\":2500,\\\"intro\\\":\\\"Share a little context about the question\\\",\\\"system\\\":\\\"You are an expert on ...\\\",\\\"temperature\\\":0,\\\"top_p\\\":1,\\\"frequency_penalty\\\":0,\\\"presence_penalty\\\":0,\\\"stop\\\":[\\\"AI:\\\",\\\"Human:\\\"]}}\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"mapper\\\":{\\\"any\\\":{\\\"age\\\":\\\"\\\"}}},\\\"q2\\\":{\\\"mapper\\\":{\\\"a\\\":{\\\"gender\\\":\\\"male\\\"},\\\"b\\\":{\\\"gender\\\":\\\"female\\\"}}},\\\"q7\\\":{\\\"mapper\\\":{\\\"~\\\":{\\\"a|b|c\\\":{\\\"exclude\\\":[\\\"Retinol\\\"]}}}}}},\\\"exclusive\\\":{\\\"prompt_key-1\\\":\\\"prompt_key-2\\\"},\\\"prompt_sections\\\":{\\\"skincare_history\\\":\\\"I am {age} years old {gender}\\\",\\\"skin_type\\\":\\\"My skin type is {skin_type}\\\",\\\"include\\\":\\\"include these category {include}\\\"},\\\"prompt_order\\\":[\\\"skincare_history\\\",\\\"include\\\",\\\"skin_type\\\"],\\\"gpt_settings\\\":{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"search_max_token\\\":2500,\\\"intro\\\":\\\"Share a little context about the question\\\",\\\"system\\\":\\\"You are an expert on ...\\\",\\\"temperature\\\":0,\\\"top_p\\\":1,\\\"frequency_penalty\\\":0,\\\"presence_penalty\\\":0,\\\"stop\\\":[\\\"AI:\\\",\\\"Human:\\\"]}}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = JSON.stringify({\n  \"questions\": {\n    \"skincare_history\": {\n      \"q1\": {\n        \"mapper\": {\n          \"any\": {\n            \"age\": \"\"\n          }\n        }\n      },\n      \"q2\": {\n        \"mapper\": {\n          \"a\": {\n            \"gender\": \"male\"\n          },\n          \"b\": {\n            \"gender\": \"female\"\n          }\n        }\n      },\n      \"q7\": {\n        \"mapper\": {\n          \"~\": {\n            \"a|b|c\": {\n              \"exclude\": [\n                \"Retinol\"\n              ]\n            }\n          }\n        }\n      }\n    }\n  },\n  \"exclusive\": {\n    \"prompt_key-1\": \"prompt_key-2\"\n  },\n  \"prompt_sections\": {\n    \"skincare_history\": \"I am {age} years old {gender}\",\n    \"skin_type\": \"My skin type is {skin_type}\",\n    \"include\": \"include these category {include}\"\n  },\n  \"prompt_order\": [\n    \"skincare_history\",\n    \"include\",\n    \"skin_type\"\n  ],\n  \"gpt_settings\": {\n    \"model\": \"gpt-3.5-turbo-0613\",\n    \"search_max_token\": 2500,\n    \"intro\": \"Share a little context about the question\",\n    \"system\": \"You are an expert on ...\",\n    \"temperature\": 0,\n    \"top_p\": 1,\n    \"frequency_penalty\": 0,\n    \"presence_penalty\": 0,\n    \"stop\": [\n      \"AI:\",\n      \"Human:\"\n    ]\n  }\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  questions: {\n    skincare_history: {\n      q1: {mapper: {any: {age: ''}}},\n      q2: {mapper: {a: {gender: 'male'}, b: {gender: 'female'}}},\n      q7: {mapper: {'~': {'a|b|c': {exclude: ['Retinol']}}}}\n    }\n  },\n  exclusive: {'prompt_key-1': 'prompt_key-2'},\n  prompt_sections: {\n    skincare_history: 'I am {age} years old {gender}',\n    skin_type: 'My skin type is {skin_type}',\n    include: 'include these category {include}'\n  },\n  prompt_order: ['skincare_history', 'include', 'skin_type'],\n  gpt_settings: {\n    model: 'gpt-3.5-turbo-0613',\n    search_max_token: 2500,\n    intro: 'Share a little context about the question',\n    system: 'You are an expert on ...',\n    temperature: 0,\n    top_p: 1,\n    frequency_penalty: 0,\n    presence_penalty: 0,\n    stop: ['AI:', 'Human:']\n  }\n}));\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    questions: {\n      skincare_history: {\n        q1: {mapper: {any: {age: ''}}},\n        q2: {mapper: {a: {gender: 'male'}, b: {gender: 'female'}}},\n        q7: {mapper: {'~': {'a|b|c': {exclude: ['Retinol']}}}}\n      }\n    },\n    exclusive: {'prompt_key-1': 'prompt_key-2'},\n    prompt_sections: {\n      skincare_history: 'I am {age} years old {gender}',\n      skin_type: 'My skin type is {skin_type}',\n      include: 'include these category {include}'\n    },\n    prompt_order: ['skincare_history', 'include', 'skin_type'],\n    gpt_settings: {\n      model: 'gpt-3.5-turbo-0613',\n      search_max_token: 2500,\n      intro: 'Share a little context about the question',\n      system: 'You are an expert on ...',\n      temperature: 0,\n      top_p: 1,\n      frequency_penalty: 0,\n      presence_penalty: 0,\n      stop: ['AI:', 'Human:']\n    }\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"questions\": {\n    \"skincare_history\": {\n      \"q1\": {\n        \"mapper\": {\n          \"any\": {\n            \"age\": \"\"\n          }\n        }\n      },\n      \"q2\": {\n        \"mapper\": {\n          \"a\": {\n            \"gender\": \"male\"\n          },\n          \"b\": {\n            \"gender\": \"female\"\n          }\n        }\n      },\n      \"q7\": {\n        \"mapper\": {\n          \"~\": {\n            \"a|b|c\": {\n              \"exclude\": [\n                \"Retinol\"\n              ]\n            }\n          }\n        }\n      }\n    }\n  },\n  \"exclusive\": {\n    \"prompt_key-1\": \"prompt_key-2\"\n  },\n  \"prompt_sections\": {\n    \"skincare_history\": \"I am {age} years old {gender}\",\n    \"skin_type\": \"My skin type is {skin_type}\",\n    \"include\": \"include these category {include}\"\n  },\n  \"prompt_order\": [\n    \"skincare_history\",\n    \"include\",\n    \"skin_type\"\n  ],\n  \"gpt_settings\": {\n    \"model\": \"gpt-3.5-turbo-0613\",\n    \"search_max_token\": 2500,\n    \"intro\": \"Share a little context about the question\",\n    \"system\": \"You are an expert on ...\",\n    \"temperature\": 0,\n    \"top_p\": 1,\n    \"frequency_penalty\": 0,\n    \"presence_penalty\": 0,\n    \"stop\": [\n      \"AI:\",\n      \"Human:\"\n    ]\n  }\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"questions\": @{ @\"skincare_history\": @{ @\"q1\": @{ @\"mapper\": @{ @\"any\": @{ @\"age\": @\"\" } } }, @\"q2\": @{ @\"mapper\": @{ @\"a\": @{ @\"gender\": @\"male\" }, @\"b\": @{ @\"gender\": @\"female\" } } }, @\"q7\": @{ @\"mapper\": @{ @\"~\": @{ @\"a|b|c\": @{ @\"exclude\": @[ @\"Retinol\" ] } } } } } },\n                              @\"exclusive\": @{ @\"prompt_key-1\": @\"prompt_key-2\" },\n                              @\"prompt_sections\": @{ @\"skincare_history\": @\"I am {age} years old {gender}\", @\"skin_type\": @\"My skin type is {skin_type}\", @\"include\": @\"include these category {include}\" },\n                              @\"prompt_order\": @[ @\"skincare_history\", @\"include\", @\"skin_type\" ],\n                              @\"gpt_settings\": @{ @\"model\": @\"gpt-3.5-turbo-0613\", @\"search_max_token\": @2500, @\"intro\": @\"Share a little context about the question\", @\"system\": @\"You are an expert on ...\", @\"temperature\": @0, @\"top_p\": @1, @\"frequency_penalty\": @0, @\"presence_penalty\": @0, @\"stop\": @[ @\"AI:\", @\"Human:\" ] } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"mapper\\\":{\\\"any\\\":{\\\"age\\\":\\\"\\\"}}},\\\"q2\\\":{\\\"mapper\\\":{\\\"a\\\":{\\\"gender\\\":\\\"male\\\"},\\\"b\\\":{\\\"gender\\\":\\\"female\\\"}}},\\\"q7\\\":{\\\"mapper\\\":{\\\"~\\\":{\\\"a|b|c\\\":{\\\"exclude\\\":[\\\"Retinol\\\"]}}}}}},\\\"exclusive\\\":{\\\"prompt_key-1\\\":\\\"prompt_key-2\\\"},\\\"prompt_sections\\\":{\\\"skincare_history\\\":\\\"I am {age} years old {gender}\\\",\\\"skin_type\\\":\\\"My skin type is {skin_type}\\\",\\\"include\\\":\\\"include these category {include}\\\"},\\\"prompt_order\\\":[\\\"skincare_history\\\",\\\"include\\\",\\\"skin_type\\\"],\\\"gpt_settings\\\":{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"search_max_token\\\":2500,\\\"intro\\\":\\\"Share a little context about the question\\\",\\\"system\\\":\\\"You are an expert on ...\\\",\\\"temperature\\\":0,\\\"top_p\\\":1,\\\"frequency_penalty\\\":0,\\\"presence_penalty\\\":0,\\\"stop\\\":[\\\"AI:\\\",\\\"Human:\\\"]}}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"questions\":{\"skincare_history\":{\"q1\":{\"mapper\":{\"any\":{\"age\":\"\"}}},\"q2\":{\"mapper\":{\"a\":{\"gender\":\"male\"},\"b\":{\"gender\":\"female\"}}},\"q7\":{\"mapper\":{\"~\":{\"a|b|c\":{\"exclude\":[\"Retinol\"]}}}}}},\"exclusive\":{\"prompt_key-1\":\"prompt_key-2\"},\"prompt_sections\":{\"skincare_history\":\"I am {age} years old {gender}\",\"skin_type\":\"My skin type is {skin_type}\",\"include\":\"include these category {include}\"},\"prompt_order\":[\"skincare_history\",\"include\",\"skin_type\"],\"gpt_settings\":{\"model\":\"gpt-3.5-turbo-0613\",\"search_max_token\":2500,\"intro\":\"Share a little context about the question\",\"system\":\"You are an expert on ...\",\"temperature\":0,\"top_p\":1,\"frequency_penalty\":0,\"presence_penalty\":0,\"stop\":[\"AI:\",\"Human:\"]}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"questions\":{\"skincare_history\":{\"q1\":{\"mapper\":{\"any\":{\"age\":\"\"}}},\"q2\":{\"mapper\":{\"a\":{\"gender\":\"male\"},\"b\":{\"gender\":\"female\"}}},\"q7\":{\"mapper\":{\"~\":{\"a|b|c\":{\"exclude\":[\"Retinol\"]}}}}}},\"exclusive\":{\"prompt_key-1\":\"prompt_key-2\"},\"prompt_sections\":{\"skincare_history\":\"I am {age} years old {gender}\",\"skin_type\":\"My skin type is {skin_type}\",\"include\":\"include these category {include}\"},\"prompt_order\":[\"skincare_history\",\"include\",\"skin_type\"],\"gpt_settings\":{\"model\":\"gpt-3.5-turbo-0613\",\"search_max_token\":2500,\"intro\":\"Share a little context about the question\",\"system\":\"You are an expert on ...\",\"temperature\":0,\"top_p\":1,\"frequency_penalty\":0,\"presence_penalty\":0,\"stop\":[\"AI:\",\"Human:\"]}}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"mapper\\\":{\\\"any\\\":{\\\"age\\\":\\\"\\\"}}},\\\"q2\\\":{\\\"mapper\\\":{\\\"a\\\":{\\\"gender\\\":\\\"male\\\"},\\\"b\\\":{\\\"gender\\\":\\\"female\\\"}}},\\\"q7\\\":{\\\"mapper\\\":{\\\"~\\\":{\\\"a|b|c\\\":{\\\"exclude\\\":[\\\"Retinol\\\"]}}}}}},\\\"exclusive\\\":{\\\"prompt_key-1\\\":\\\"prompt_key-2\\\"},\\\"prompt_sections\\\":{\\\"skincare_history\\\":\\\"I am {age} years old {gender}\\\",\\\"skin_type\\\":\\\"My skin type is {skin_type}\\\",\\\"include\\\":\\\"include these category {include}\\\"},\\\"prompt_order\\\":[\\\"skincare_history\\\",\\\"include\\\",\\\"skin_type\\\"],\\\"gpt_settings\\\":{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"search_max_token\\\":2500,\\\"intro\\\":\\\"Share a little context about the question\\\",\\\"system\\\":\\\"You are an expert on ...\\\",\\\"temperature\\\":0,\\\"top_p\\\":1,\\\"frequency_penalty\\\":0,\\\"presence_penalty\\\":0,\\\"stop\\\":[\\\"AI:\\\",\\\"Human:\\\"]}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\"\n\npayload = {\n    \"questions\": {\"skincare_history\": {\n            \"q1\": {\"mapper\": {\"any\": {\"age\": \"\"}}},\n            \"q2\": {\"mapper\": {\n                    \"a\": {\"gender\": \"male\"},\n                    \"b\": {\"gender\": \"female\"}\n                }},\n            \"q7\": {\"mapper\": {\"~\": {\"a|b|c\": {\"exclude\": [\"Retinol\"]}}}}\n        }},\n    \"exclusive\": {\"prompt_key-1\": \"prompt_key-2\"},\n    \"prompt_sections\": {\n        \"skincare_history\": \"I am {age} years old {gender}\",\n        \"skin_type\": \"My skin type is {skin_type}\",\n        \"include\": \"include these category {include}\"\n    },\n    \"prompt_order\": [\"skincare_history\", \"include\", \"skin_type\"],\n    \"gpt_settings\": {\n        \"model\": \"gpt-3.5-turbo-0613\",\n        \"search_max_token\": 2500,\n        \"intro\": \"Share a little context about the question\",\n        \"system\": \"You are an expert on ...\",\n        \"temperature\": 0,\n        \"top_p\": 1,\n        \"frequency_penalty\": 0,\n        \"presence_penalty\": 0,\n        \"stop\": [\"AI:\", \"Human:\"]\n    }\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"mapper\\\":{\\\"any\\\":{\\\"age\\\":\\\"\\\"}}},\\\"q2\\\":{\\\"mapper\\\":{\\\"a\\\":{\\\"gender\\\":\\\"male\\\"},\\\"b\\\":{\\\"gender\\\":\\\"female\\\"}}},\\\"q7\\\":{\\\"mapper\\\":{\\\"~\\\":{\\\"a|b|c\\\":{\\\"exclude\\\":[\\\"Retinol\\\"]}}}}}},\\\"exclusive\\\":{\\\"prompt_key-1\\\":\\\"prompt_key-2\\\"},\\\"prompt_sections\\\":{\\\"skincare_history\\\":\\\"I am {age} years old {gender}\\\",\\\"skin_type\\\":\\\"My skin type is {skin_type}\\\",\\\"include\\\":\\\"include these category {include}\\\"},\\\"prompt_order\\\":[\\\"skincare_history\\\",\\\"include\\\",\\\"skin_type\\\"],\\\"gpt_settings\\\":{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"search_max_token\\\":2500,\\\"intro\\\":\\\"Share a little context about the question\\\",\\\"system\\\":\\\"You are an expert on ...\\\",\\\"temperature\\\":0,\\\"top_p\\\":1,\\\"frequency_penalty\\\":0,\\\"presence_penalty\\\":0,\\\"stop\\\":[\\\"AI:\\\",\\\"Human:\\\"]}}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"questions\":{\"skincare_history\":{\"q1\":{\"mapper\":{\"any\":{\"age\":\"\"}}},\"q2\":{\"mapper\":{\"a\":{\"gender\":\"male\"},\"b\":{\"gender\":\"female\"}}},\"q7\":{\"mapper\":{\"~\":{\"a|b|c\":{\"exclude\":[\"Retinol\"]}}}}}},\"exclusive\":{\"prompt_key-1\":\"prompt_key-2\"},\"prompt_sections\":{\"skincare_history\":\"I am {age} years old {gender}\",\"skin_type\":\"My skin type is {skin_type}\",\"include\":\"include these category {include}\"},\"prompt_order\":[\"skincare_history\",\"include\",\"skin_type\"],\"gpt_settings\":{\"model\":\"gpt-3.5-turbo-0613\",\"search_max_token\":2500,\"intro\":\"Share a little context about the question\",\"system\":\"You are an expert on ...\",\"temperature\":0,\"top_p\":1,\"frequency_penalty\":0,\"presence_penalty\":0,\"stop\":[\"AI:\",\"Human:\"]}}'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"questions\": [\"skincare_history\": [\n      \"q1\": [\"mapper\": [\"any\": [\"age\": \"\"]]],\n      \"q2\": [\"mapper\": [\n          \"a\": [\"gender\": \"male\"],\n          \"b\": [\"gender\": \"female\"]\n        ]],\n      \"q7\": [\"mapper\": [\"~\": [\"a|b|c\": [\"exclude\": [\"Retinol\"]]]]]\n    ]],\n  \"exclusive\": [\"prompt_key-1\": \"prompt_key-2\"],\n  \"prompt_sections\": [\n    \"skincare_history\": \"I am {age} years old {gender}\",\n    \"skin_type\": \"My skin type is {skin_type}\",\n    \"include\": \"include these category {include}\"\n  ],\n  \"prompt_order\": [\"skincare_history\", \"include\", \"skin_type\"],\n  \"gpt_settings\": [\n    \"model\": \"gpt-3.5-turbo-0613\",\n    \"search_max_token\": 2500,\n    \"intro\": \"Share a little context about the question\",\n    \"system\": \"You are an expert on ...\",\n    \"temperature\": 0,\n    \"top_p\": 1,\n    \"frequency_penalty\": 0,\n    \"presence_penalty\": 0,\n    \"stop\": [\"AI:\", \"Human:\"]\n  ]\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "questionnaire"
                ],
                "summary": "Delete a mapper.",
                "description": "Delete a mapper.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| questionnaire_id | str | str | The ID of the questionnaire to retrieve. (Required) |\n\nReturns the delete status.",
                "operationId": "delete_mapper_v1_questionnaires__questionnaire_id__mapper_delete",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Questionnaire Id",
                            "type": "string"
                        },
                        "name": "questionnaire_id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Delete,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\")\n  .delete(null)\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.delete(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\",\n  \"method\": \"DELETE\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"DELETE\", \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper',\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"DELETE\", \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\");\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"DELETE\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"DELETE\", \"/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\"\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"DELETE\", url, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request DELETE \\\n  --url https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"DELETE\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/questionnaires/{questionnaire_id}/logs": {
            "get": {
                "tags": [
                    "questionnaire"
                ],
                "summary": "Get logs of responses against a questionnaire.",
                "description": "Get logs of responses against a questionnaire.\n\n### Parameters\n----------\n\nReturns all prompts, response and request assoicated with a questionnaire.",
                "operationId": "get_all_questionnaire_recommendation_log_v1_questionnaires__questionnaire_id__logs_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Questionnaire Id",
                            "type": "string"
                        },
                        "name": "questionnaire_id",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Request Id",
                            "type": "string"
                        },
                        "name": "request_id",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Start",
                            "type": "integer",
                            "default": 0
                        },
                        "name": "start",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Size",
                            "type": "integer",
                            "default": 10
                        },
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/logs?request_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/logs?request_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/logs?request_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/logs?request_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/logs?request_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/logs?request_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/logs?request_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/questionnaires/%7Bquestionnaire_id%7D/logs?request_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/logs',\n  qs: {\n    request_id: 'SOME_STRING_VALUE',\n    start: 'SOME_INTEGER_VALUE',\n    size: 'SOME_INTEGER_VALUE'\n  },\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/logs\");\n\nreq.query({\n  \"request_id\": \"SOME_STRING_VALUE\",\n  \"start\": \"SOME_INTEGER_VALUE\",\n  \"size\": \"SOME_INTEGER_VALUE\"\n});\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/logs?request_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/logs?request_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/logs');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData([\n  'request_id' => 'SOME_STRING_VALUE',\n  'start' => 'SOME_INTEGER_VALUE',\n  'size' => 'SOME_INTEGER_VALUE'\n]);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/logs');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString([\n  'request_id' => 'SOME_STRING_VALUE',\n  'start' => 'SOME_INTEGER_VALUE',\n  'size' => 'SOME_INTEGER_VALUE'\n]));\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/questionnaires/%7Bquestionnaire_id%7D/logs?request_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/logs\"\n\nquerystring = {\"request_id\":\"SOME_STRING_VALUE\",\"start\":\"SOME_INTEGER_VALUE\",\"size\":\"SOME_INTEGER_VALUE\"}\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/logs?request_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request GET \\\n  --url 'https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/logs?request_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE' \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/logs?request_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/tasks/{task_id}": {
            "get": {
                "tags": [
                    "task"
                ],
                "summary": "Get a task by its id",
                "description": "Get the latest status of a background task by passing task id as a query parameter.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| task_id | str | str | Represents the id of a background task. |",
                "operationId": "get_task_v1_tasks__task_id__get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Task Id",
                            "type": "string"
                        },
                        "name": "task_id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/tasks/%7Btask_id%7D\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/tasks/%7Btask_id%7D\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/tasks/%7Btask_id%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/tasks/%7Btask_id%7D\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/tasks/%7Btask_id%7D\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/tasks/%7Btask_id%7D\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/tasks/%7Btask_id%7D\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/tasks/%7Btask_id%7D\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/tasks/%7Btask_id%7D',\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/tasks/%7Btask_id%7D\");\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/tasks/%7Btask_id%7D\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/tasks/%7Btask_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/tasks/%7Btask_id%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/tasks/%7Btask_id%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/tasks/%7Btask_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/tasks/%7Btask_id%7D\"\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/tasks/%7Btask_id%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request GET \\\n  --url https://api.recommender.gigalogy.com/v1/tasks/%7Btask_id%7D \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/tasks/%7Btask_id%7D\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/tasks": {
            "get": {
                "tags": [
                    "task"
                ],
                "summary": "get all task by type and status",
                "description": "Get a list of all tasks by a specific type. By default this endpoint will return\nlatest 100 tasks with their details.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| task_type | Enum | Selected enum value | Available values are `item_train`, `image_train`, `rank_train`, `insight_process`. |\n| task_status | Enum | Selected enum value | Available values are `claimable`, `pending`, `success`, `cancelled`, `failed`. |",
                "operationId": "get_tasks_v1_tasks_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "TaskType",
                            "enum": [
                                "item_train",
                                "image_train",
                                "rank_train",
                                "insight_process"
                            ],
                            "type": "string",
                            "description": "An enumeration."
                        },
                        "name": "task_type",
                        "in": "query"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Status",
                            "enum": [
                                "claimable",
                                "pending",
                                "success",
                                "cancelled",
                                "failed"
                            ],
                            "type": "string",
                            "description": "An enumeration."
                        },
                        "name": "task_status",
                        "in": "query"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/tasks?task_type=SOME_STRING_VALUE&task_status=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/tasks?task_type=SOME_STRING_VALUE&task_status=SOME_STRING_VALUE\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/tasks?task_type=SOME_STRING_VALUE&task_status=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/tasks?task_type=SOME_STRING_VALUE&task_status=SOME_STRING_VALUE\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/tasks?task_type=SOME_STRING_VALUE&task_status=SOME_STRING_VALUE\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/tasks?task_type=SOME_STRING_VALUE&task_status=SOME_STRING_VALUE\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/tasks?task_type=SOME_STRING_VALUE&task_status=SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/tasks?task_type=SOME_STRING_VALUE&task_status=SOME_STRING_VALUE\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/tasks',\n  qs: {task_type: 'SOME_STRING_VALUE', task_status: 'SOME_STRING_VALUE'},\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/tasks\");\n\nreq.query({\n  \"task_type\": \"SOME_STRING_VALUE\",\n  \"task_status\": \"SOME_STRING_VALUE\"\n});\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/tasks?task_type=SOME_STRING_VALUE&task_status=SOME_STRING_VALUE\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/tasks?task_type=SOME_STRING_VALUE&task_status=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/tasks');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData([\n  'task_type' => 'SOME_STRING_VALUE',\n  'task_status' => 'SOME_STRING_VALUE'\n]);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/tasks');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString([\n  'task_type' => 'SOME_STRING_VALUE',\n  'task_status' => 'SOME_STRING_VALUE'\n]));\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/tasks?task_type=SOME_STRING_VALUE&task_status=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/tasks\"\n\nquerystring = {\"task_type\":\"SOME_STRING_VALUE\",\"task_status\":\"SOME_STRING_VALUE\"}\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/tasks?task_type=SOME_STRING_VALUE&task_status=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request GET \\\n  --url 'https://api.recommender.gigalogy.com/v1/tasks?task_type=SOME_STRING_VALUE&task_status=SOME_STRING_VALUE' \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/tasks?task_type=SOME_STRING_VALUE&task_status=SOME_STRING_VALUE\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/reach": {
            "post": {
                "tags": [
                    "reach"
                ],
                "summary": "Shows user reach of recommender API",
                "description": "This endpoint will show the stats of user reach for browsing, purchasing,\nand rating items. User need to choose the unit for getting respected response.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| reach_type | Enum | Selected enum value | Represents the unit for counting the user reach for browsing, purchasing and rating. Available values are `total` and `daily.` |\n| start_date | Optional[str] | str | Initial date of date range based on which it will show major KPIs of our recommender system. |\n| end_date |Optional[str] | str | End date of date range based on which it will show major KPIs of our recommender system. |",
                "operationId": "post_v1_reach_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "ReachType",
                            "enum": [
                                "total",
                                "daily"
                            ],
                            "type": "string",
                            "description": "An enumeration."
                        },
                        "name": "reach_type",
                        "in": "query"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ReachSchema"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/reach?reach_type=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"start_date\\\":\\\"2021-08-05\\\",\\\"end_date\\\":\\\"2021-08-06\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/reach?reach_type=SOME_STRING_VALUE\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"start_date\\\":\\\"2021-08-05\\\",\\\"end_date\\\":\\\"2021-08-06\\\"}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/reach?reach_type=SOME_STRING_VALUE\"\n\n\tpayload := strings.NewReader(\"{\\\"start_date\\\":\\\"2021-08-05\\\",\\\"end_date\\\":\\\"2021-08-06\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"start_date\\\":\\\"2021-08-05\\\",\\\"end_date\\\":\\\"2021-08-06\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/reach?reach_type=SOME_STRING_VALUE\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/reach?reach_type=SOME_STRING_VALUE\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"start_date\\\":\\\"2021-08-05\\\",\\\"end_date\\\":\\\"2021-08-06\\\"}\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/reach?reach_type=SOME_STRING_VALUE\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"start_date\\\":\\\"2021-08-05\\\",\\\"end_date\\\":\\\"2021-08-06\\\"}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = JSON.stringify({\n  \"start_date\": \"2021-08-05\",\n  \"end_date\": \"2021-08-06\"\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/reach?reach_type=SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/reach?reach_type=SOME_STRING_VALUE\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({start_date: '2021-08-05', end_date: '2021-08-06'}));\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/reach',\n  qs: {reach_type: 'SOME_STRING_VALUE'},\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {start_date: '2021-08-05', end_date: '2021-08-06'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/reach\");\n\nreq.query({\n  \"reach_type\": \"SOME_STRING_VALUE\"\n});\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"start_date\": \"2021-08-05\",\n  \"end_date\": \"2021-08-06\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"start_date\": @\"2021-08-05\",\n                              @\"end_date\": @\"2021-08-06\" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/reach?reach_type=SOME_STRING_VALUE\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/reach?reach_type=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"start_date\\\":\\\"2021-08-05\\\",\\\"end_date\\\":\\\"2021-08-06\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/reach');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setQueryData([\n  'reach_type' => 'SOME_STRING_VALUE'\n]);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"start_date\":\"2021-08-05\",\"end_date\":\"2021-08-06\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"start_date\":\"2021-08-05\",\"end_date\":\"2021-08-06\"}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/reach');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setQuery(new http\\QueryString([\n  'reach_type' => 'SOME_STRING_VALUE'\n]));\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"start_date\\\":\\\"2021-08-05\\\",\\\"end_date\\\":\\\"2021-08-06\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/reach?reach_type=SOME_STRING_VALUE\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/reach\"\n\nquerystring = {\"reach_type\":\"SOME_STRING_VALUE\"}\n\npayload = {\n    \"start_date\": \"2021-08-05\",\n    \"end_date\": \"2021-08-06\"\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers, params=querystring)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/reach?reach_type=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"start_date\\\":\\\"2021-08-05\\\",\\\"end_date\\\":\\\"2021-08-06\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request POST \\\n  --url 'https://api.recommender.gigalogy.com/v1/reach?reach_type=SOME_STRING_VALUE' \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"start_date\":\"2021-08-05\",\"end_date\":\"2021-08-06\"}'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"start_date\": \"2021-08-05\",\n  \"end_date\": \"2021-08-06\"\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/reach?reach_type=SOME_STRING_VALUE\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/stats": {
            "post": {
                "tags": [
                    "stats"
                ],
                "summary": "Save document in the stats index",
                "description": "This endpoint will create the a document stats index.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| start_date | str | str | Initial date of date range based on which you want to save stats. |\n| end_date |str | str | End date of date range based on which you want to save stats. |",
                "operationId": "post_stats_v1_stats_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SaveStatSchema"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/stats\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"start_date\\\":\\\"2021-08-05\\\",\\\"end_date\\\":\\\"2021-08-06\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/stats\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"start_date\\\":\\\"2021-08-05\\\",\\\"end_date\\\":\\\"2021-08-06\\\"}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/stats\"\n\n\tpayload := strings.NewReader(\"{\\\"start_date\\\":\\\"2021-08-05\\\",\\\"end_date\\\":\\\"2021-08-06\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"start_date\\\":\\\"2021-08-05\\\",\\\"end_date\\\":\\\"2021-08-06\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/stats\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/stats\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"start_date\\\":\\\"2021-08-05\\\",\\\"end_date\\\":\\\"2021-08-06\\\"}\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/stats\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"start_date\\\":\\\"2021-08-05\\\",\\\"end_date\\\":\\\"2021-08-06\\\"}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = JSON.stringify({\n  \"start_date\": \"2021-08-05\",\n  \"end_date\": \"2021-08-06\"\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/stats\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/stats\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({start_date: '2021-08-05', end_date: '2021-08-06'}));\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/stats',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {start_date: '2021-08-05', end_date: '2021-08-06'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/stats\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"start_date\": \"2021-08-05\",\n  \"end_date\": \"2021-08-06\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"start_date\": @\"2021-08-05\",\n                              @\"end_date\": @\"2021-08-06\" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/stats\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/stats\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"start_date\\\":\\\"2021-08-05\\\",\\\"end_date\\\":\\\"2021-08-06\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/stats');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"start_date\":\"2021-08-05\",\"end_date\":\"2021-08-06\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"start_date\":\"2021-08-05\",\"end_date\":\"2021-08-06\"}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/stats');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"start_date\\\":\\\"2021-08-05\\\",\\\"end_date\\\":\\\"2021-08-06\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/stats\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/stats\"\n\npayload = {\n    \"start_date\": \"2021-08-05\",\n    \"end_date\": \"2021-08-06\"\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/stats\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"start_date\\\":\\\"2021-08-05\\\",\\\"end_date\\\":\\\"2021-08-06\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/stats \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"start_date\":\"2021-08-05\",\"end_date\":\"2021-08-06\"}'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"start_date\": \"2021-08-05\",\n  \"end_date\": \"2021-08-06\"\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/stats\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/stats/{date}": {
            "get": {
                "tags": [
                    "stats"
                ],
                "summary": "Get document from the stats index",
                "operationId": "get_stats_v1_stats__date__get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Date",
                            "type": "string"
                        },
                        "name": "date",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/stats/%7Bdate%7D\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D',\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\");\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/stats/%7Bdate%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\"\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request GET \\\n  --url https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            },
            "put": {
                "tags": [
                    "stats"
                ],
                "summary": "Update document in the stats index",
                "description": "This endpoint will update the existing document.",
                "operationId": "put_stats_v1_stats__date__put",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Date",
                            "type": "string"
                        },
                        "name": "date",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Put,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\"\n\n\treq, _ := http.NewRequest(\"PUT\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\")\n  .put(null)\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.put(\"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\",\n  \"method\": \"PUT\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PUT\", \"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/stats/%7Bdate%7D\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D',\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"PUT\", \"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\");\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PUT\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D');\n$request->setRequestMethod('PUT');\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"PUT\", \"/v1/stats/%7Bdate%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\"\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"PUT\", url, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request PUT \\\n  --url https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"PUT\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "stats"
                ],
                "summary": "Delete document in the stats index",
                "operationId": "delete_stats_v1_stats__date__delete",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Date",
                            "type": "string"
                        },
                        "name": "date",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Delete,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\")\n  .delete(null)\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.delete(\"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\",\n  \"method\": \"DELETE\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"DELETE\", \"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/stats/%7Bdate%7D\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D',\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"DELETE\", \"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\");\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"DELETE\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"DELETE\", \"/v1/stats/%7Bdate%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\"\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"DELETE\", url, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request DELETE \\\n  --url https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"DELETE\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/gpt/dataset/train": {
            "post": {
                "tags": [
                    "MyGPT Dataset"
                ],
                "summary": "Train dataset to produce pre-processed data and embeddings and save it in vector db",
                "description": "GPT train for a specific dataset.",
                "operationId": "gpt_dataset_train_v1_gpt_dataset_train_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_gpt_dataset_train_v1_gpt_dataset_train_post"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/gpt/dataset/train\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/x-www-form-urlencoded\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/gpt/dataset/train\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/gpt/dataset/train\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/x-www-form-urlencoded\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/gpt/dataset/train\")\n  .post(null)\n  .addHeader(\"content-type\", \"application/x-www-form-urlencoded\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/gpt/dataset/train\")\n  .header(\"content-type\", \"application/x-www-form-urlencoded\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/gpt/dataset/train\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/x-www-form-urlencoded\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/gpt/dataset/train\");\nxhr.setRequestHeader(\"content-type\", \"application/x-www-form-urlencoded\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/gpt/dataset/train\",\n  \"headers\": {\n    \"content-type\": \"application/x-www-form-urlencoded\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/gpt/dataset/train',\n  headers: {\n    'content-type': 'application/x-www-form-urlencoded',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/gpt/dataset/train\");\n\nreq.headers({\n  \"content-type\": \"application/x-www-form-urlencoded\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/x-www-form-urlencoded\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/gpt/dataset/train\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/gpt/dataset/train\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/x-www-form-urlencoded\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/gpt/dataset/train');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/x-www-form-urlencoded',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/dataset/train');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'content-type' => 'application/x-www-form-urlencoded',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'content-type': \"application/x-www-form-urlencoded\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/gpt/dataset/train\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/gpt/dataset/train\"\n\nheaders = {\n    \"content-type\": \"application/x-www-form-urlencoded\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/gpt/dataset/train\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/x-www-form-urlencoded'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/gpt/dataset/train \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/x-www-form-urlencoded' \\\n  --header 'project-key: SOME_STRING_VALUE'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"application/x-www-form-urlencoded\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/gpt/dataset/train\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/gpt/save": {
            "post": {
                "tags": [
                    "MyGPT"
                ],
                "summary": "Upload a CSV file",
                "description": "Saves GPT related files",
                "operationId": "post_gpt_csv_v1_gpt_save_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_post_gpt_csv_v1_gpt_save_post"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/gpt/save\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"multipart/form-data\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/gpt/save\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/gpt/save\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"multipart/form-data\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/gpt/save\")\n  .post(null)\n  .addHeader(\"content-type\", \"multipart/form-data\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/gpt/save\")\n  .header(\"content-type\", \"multipart/form-data\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/gpt/save\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/gpt/save\");\nxhr.setRequestHeader(\"content-type\", \"multipart/form-data\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/gpt/save\",\n  \"headers\": {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/gpt/save',\n  headers: {\n    'content-type': 'multipart/form-data',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/gpt/save\");\n\nreq.headers({\n  \"content-type\": \"multipart/form-data\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"multipart/form-data\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/gpt/save\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/gpt/save\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: multipart/form-data\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/gpt/save');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'multipart/form-data',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/save');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'content-type' => 'multipart/form-data',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'content-type': \"multipart/form-data\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/gpt/save\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/gpt/save\"\n\nheaders = {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/gpt/save\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'multipart/form-data'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/gpt/save \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: multipart/form-data' \\\n  --header 'project-key: SOME_STRING_VALUE'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"multipart/form-data\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/gpt/save\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/gpt/ask": {
            "post": {
                "tags": [
                    "MyGPT"
                ],
                "summary": "Ask a question and receive an answer",
                "description": "Response from GPTFlow",
                "operationId": "post_gpt_response_v1_gpt_ask_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GPTRequestSchema"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/gpt/ask\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"query\\\":\\\"What is life?\\\",\\\"intro\\\":\\\"Share a little context about the question\\\",\\\"system\\\":\\\"You are an expert on ...\\\",\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"storage\\\":\\\"memory\\\",\\\"search_max_token\\\":2500,\\\"temperature\\\":0,\\\"top_p\\\":1,\\\"frequency_penalty\\\":0,\\\"presence_penalty\\\":0,\\\"stop\\\":[\\\"AI:\\\",\\\"Human:\\\"],\\\"preferred_content\\\":{\\\"dataset_id\\\":\\\"1234\\\"}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/gpt/ask\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"query\\\":\\\"What is life?\\\",\\\"intro\\\":\\\"Share a little context about the question\\\",\\\"system\\\":\\\"You are an expert on ...\\\",\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"storage\\\":\\\"memory\\\",\\\"search_max_token\\\":2500,\\\"temperature\\\":0,\\\"top_p\\\":1,\\\"frequency_penalty\\\":0,\\\"presence_penalty\\\":0,\\\"stop\\\":[\\\"AI:\\\",\\\"Human:\\\"],\\\"preferred_content\\\":{\\\"dataset_id\\\":\\\"1234\\\"}}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/gpt/ask\"\n\n\tpayload := strings.NewReader(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"query\\\":\\\"What is life?\\\",\\\"intro\\\":\\\"Share a little context about the question\\\",\\\"system\\\":\\\"You are an expert on ...\\\",\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"storage\\\":\\\"memory\\\",\\\"search_max_token\\\":2500,\\\"temperature\\\":0,\\\"top_p\\\":1,\\\"frequency_penalty\\\":0,\\\"presence_penalty\\\":0,\\\"stop\\\":[\\\"AI:\\\",\\\"Human:\\\"],\\\"preferred_content\\\":{\\\"dataset_id\\\":\\\"1234\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"query\\\":\\\"What is life?\\\",\\\"intro\\\":\\\"Share a little context about the question\\\",\\\"system\\\":\\\"You are an expert on ...\\\",\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"storage\\\":\\\"memory\\\",\\\"search_max_token\\\":2500,\\\"temperature\\\":0,\\\"top_p\\\":1,\\\"frequency_penalty\\\":0,\\\"presence_penalty\\\":0,\\\"stop\\\":[\\\"AI:\\\",\\\"Human:\\\"],\\\"preferred_content\\\":{\\\"dataset_id\\\":\\\"1234\\\"}}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/gpt/ask\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/gpt/ask\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"query\\\":\\\"What is life?\\\",\\\"intro\\\":\\\"Share a little context about the question\\\",\\\"system\\\":\\\"You are an expert on ...\\\",\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"storage\\\":\\\"memory\\\",\\\"search_max_token\\\":2500,\\\"temperature\\\":0,\\\"top_p\\\":1,\\\"frequency_penalty\\\":0,\\\"presence_penalty\\\":0,\\\"stop\\\":[\\\"AI:\\\",\\\"Human:\\\"],\\\"preferred_content\\\":{\\\"dataset_id\\\":\\\"1234\\\"}}\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/gpt/ask\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"query\\\":\\\"What is life?\\\",\\\"intro\\\":\\\"Share a little context about the question\\\",\\\"system\\\":\\\"You are an expert on ...\\\",\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"storage\\\":\\\"memory\\\",\\\"search_max_token\\\":2500,\\\"temperature\\\":0,\\\"top_p\\\":1,\\\"frequency_penalty\\\":0,\\\"presence_penalty\\\":0,\\\"stop\\\":[\\\"AI:\\\",\\\"Human:\\\"],\\\"preferred_content\\\":{\\\"dataset_id\\\":\\\"1234\\\"}}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = JSON.stringify({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"query\": \"What is life?\",\n  \"intro\": \"Share a little context about the question\",\n  \"system\": \"You are an expert on ...\",\n  \"model\": \"gpt-3.5-turbo-0613\",\n  \"storage\": \"memory\",\n  \"search_max_token\": 2500,\n  \"temperature\": 0,\n  \"top_p\": 1,\n  \"frequency_penalty\": 0,\n  \"presence_penalty\": 0,\n  \"stop\": [\n    \"AI:\",\n    \"Human:\"\n  ],\n  \"preferred_content\": {\n    \"dataset_id\": \"1234\"\n  }\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/gpt/ask\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/gpt/ask\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n  member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n  query: 'What is life?',\n  intro: 'Share a little context about the question',\n  system: 'You are an expert on ...',\n  model: 'gpt-3.5-turbo-0613',\n  storage: 'memory',\n  search_max_token: 2500,\n  temperature: 0,\n  top_p: 1,\n  frequency_penalty: 0,\n  presence_penalty: 0,\n  stop: ['AI:', 'Human:'],\n  preferred_content: {dataset_id: '1234'}\n}));\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/gpt/ask',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n    member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n    query: 'What is life?',\n    intro: 'Share a little context about the question',\n    system: 'You are an expert on ...',\n    model: 'gpt-3.5-turbo-0613',\n    storage: 'memory',\n    search_max_token: 2500,\n    temperature: 0,\n    top_p: 1,\n    frequency_penalty: 0,\n    presence_penalty: 0,\n    stop: ['AI:', 'Human:'],\n    preferred_content: {dataset_id: '1234'}\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/gpt/ask\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"query\": \"What is life?\",\n  \"intro\": \"Share a little context about the question\",\n  \"system\": \"You are an expert on ...\",\n  \"model\": \"gpt-3.5-turbo-0613\",\n  \"storage\": \"memory\",\n  \"search_max_token\": 2500,\n  \"temperature\": 0,\n  \"top_p\": 1,\n  \"frequency_penalty\": 0,\n  \"presence_penalty\": 0,\n  \"stop\": [\n    \"AI:\",\n    \"Human:\"\n  ],\n  \"preferred_content\": {\n    \"dataset_id\": \"1234\"\n  }\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"user_id\": @\"a0cc6beb-2909-459b-be55-62196af78ce4\",\n                              @\"member_id\": @\"df3456tg-2909-459b-be55-62196afedf85\",\n                              @\"query\": @\"What is life?\",\n                              @\"intro\": @\"Share a little context about the question\",\n                              @\"system\": @\"You are an expert on ...\",\n                              @\"model\": @\"gpt-3.5-turbo-0613\",\n                              @\"storage\": @\"memory\",\n                              @\"search_max_token\": @2500,\n                              @\"temperature\": @0,\n                              @\"top_p\": @1,\n                              @\"frequency_penalty\": @0,\n                              @\"presence_penalty\": @0,\n                              @\"stop\": @[ @\"AI:\", @\"Human:\" ],\n                              @\"preferred_content\": @{ @\"dataset_id\": @\"1234\" } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/gpt/ask\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/gpt/ask\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"query\\\":\\\"What is life?\\\",\\\"intro\\\":\\\"Share a little context about the question\\\",\\\"system\\\":\\\"You are an expert on ...\\\",\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"storage\\\":\\\"memory\\\",\\\"search_max_token\\\":2500,\\\"temperature\\\":0,\\\"top_p\\\":1,\\\"frequency_penalty\\\":0,\\\"presence_penalty\\\":0,\\\"stop\\\":[\\\"AI:\\\",\\\"Human:\\\"],\\\"preferred_content\\\":{\\\"dataset_id\\\":\\\"1234\\\"}}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/gpt/ask');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"query\":\"What is life?\",\"intro\":\"Share a little context about the question\",\"system\":\"You are an expert on ...\",\"model\":\"gpt-3.5-turbo-0613\",\"storage\":\"memory\",\"search_max_token\":2500,\"temperature\":0,\"top_p\":1,\"frequency_penalty\":0,\"presence_penalty\":0,\"stop\":[\"AI:\",\"Human:\"],\"preferred_content\":{\"dataset_id\":\"1234\"}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"query\":\"What is life?\",\"intro\":\"Share a little context about the question\",\"system\":\"You are an expert on ...\",\"model\":\"gpt-3.5-turbo-0613\",\"storage\":\"memory\",\"search_max_token\":2500,\"temperature\":0,\"top_p\":1,\"frequency_penalty\":0,\"presence_penalty\":0,\"stop\":[\"AI:\",\"Human:\"],\"preferred_content\":{\"dataset_id\":\"1234\"}}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/ask');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"query\\\":\\\"What is life?\\\",\\\"intro\\\":\\\"Share a little context about the question\\\",\\\"system\\\":\\\"You are an expert on ...\\\",\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"storage\\\":\\\"memory\\\",\\\"search_max_token\\\":2500,\\\"temperature\\\":0,\\\"top_p\\\":1,\\\"frequency_penalty\\\":0,\\\"presence_penalty\\\":0,\\\"stop\\\":[\\\"AI:\\\",\\\"Human:\\\"],\\\"preferred_content\\\":{\\\"dataset_id\\\":\\\"1234\\\"}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/gpt/ask\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/gpt/ask\"\n\npayload = {\n    \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n    \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n    \"query\": \"What is life?\",\n    \"intro\": \"Share a little context about the question\",\n    \"system\": \"You are an expert on ...\",\n    \"model\": \"gpt-3.5-turbo-0613\",\n    \"storage\": \"memory\",\n    \"search_max_token\": 2500,\n    \"temperature\": 0,\n    \"top_p\": 1,\n    \"frequency_penalty\": 0,\n    \"presence_penalty\": 0,\n    \"stop\": [\"AI:\", \"Human:\"],\n    \"preferred_content\": {\"dataset_id\": \"1234\"}\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/gpt/ask\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"query\\\":\\\"What is life?\\\",\\\"intro\\\":\\\"Share a little context about the question\\\",\\\"system\\\":\\\"You are an expert on ...\\\",\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"storage\\\":\\\"memory\\\",\\\"search_max_token\\\":2500,\\\"temperature\\\":0,\\\"top_p\\\":1,\\\"frequency_penalty\\\":0,\\\"presence_penalty\\\":0,\\\"stop\\\":[\\\"AI:\\\",\\\"Human:\\\"],\\\"preferred_content\\\":{\\\"dataset_id\\\":\\\"1234\\\"}}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/gpt/ask \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"query\":\"What is life?\",\"intro\":\"Share a little context about the question\",\"system\":\"You are an expert on ...\",\"model\":\"gpt-3.5-turbo-0613\",\"storage\":\"memory\",\"search_max_token\":2500,\"temperature\":0,\"top_p\":1,\"frequency_penalty\":0,\"presence_penalty\":0,\"stop\":[\"AI:\",\"Human:\"],\"preferred_content\":{\"dataset_id\":\"1234\"}}'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"query\": \"What is life?\",\n  \"intro\": \"Share a little context about the question\",\n  \"system\": \"You are an expert on ...\",\n  \"model\": \"gpt-3.5-turbo-0613\",\n  \"storage\": \"memory\",\n  \"search_max_token\": 2500,\n  \"temperature\": 0,\n  \"top_p\": 1,\n  \"frequency_penalty\": 0,\n  \"presence_penalty\": 0,\n  \"stop\": [\"AI:\", \"Human:\"],\n  \"preferred_content\": [\"dataset_id\": \"1234\"]\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/gpt/ask\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/gpt/ask/vision": {
            "post": {
                "tags": [
                    "MyGPT"
                ],
                "summary": "Ask GPT with Image",
                "description": "This endpoint generates search results based on image similarity and your query.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| image | str($bin) | file | Represents the image file used to search/ask. Supports webp, jpeg, jpg, and png formats. |\n| query | str | str | Query to ask to gpt |",
                "operationId": "image_gpt_ask_v1_gpt_ask_vision_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_image_gpt_ask_v1_gpt_ask_vision_post"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/gpt/ask/vision\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"multipart/form-data\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/gpt/ask/vision\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/gpt/ask/vision\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"multipart/form-data\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/gpt/ask/vision\")\n  .post(null)\n  .addHeader(\"content-type\", \"multipart/form-data\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/gpt/ask/vision\")\n  .header(\"content-type\", \"multipart/form-data\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/gpt/ask/vision\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/gpt/ask/vision\");\nxhr.setRequestHeader(\"content-type\", \"multipart/form-data\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/gpt/ask/vision\",\n  \"headers\": {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/gpt/ask/vision',\n  headers: {\n    'content-type': 'multipart/form-data',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/gpt/ask/vision\");\n\nreq.headers({\n  \"content-type\": \"multipart/form-data\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"multipart/form-data\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/gpt/ask/vision\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/gpt/ask/vision\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: multipart/form-data\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/gpt/ask/vision');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'multipart/form-data',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/ask/vision');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'content-type' => 'multipart/form-data',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'content-type': \"multipart/form-data\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/gpt/ask/vision\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/gpt/ask/vision\"\n\nheaders = {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/gpt/ask/vision\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'multipart/form-data'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/gpt/ask/vision \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: multipart/form-data' \\\n  --header 'project-key: SOME_STRING_VALUE'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"multipart/form-data\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/gpt/ask/vision\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/items/search": {
            "post": {
                "tags": [
                    "Search"
                ],
                "summary": "Advance search with gpt models",
                "description": "Search using GPT models",
                "operationId": "post_gpt_search_v1_items_search_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GPTSearchSchema"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/search\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"message\\\":\\\"What is life?\\\",\\\"type\\\":\\\"individual\\\",\\\"search_size\\\":1000,\\\"start\\\":0,\\\"size\\\":10,\\\"price_lower\\\":1,\\\"price_upper\\\":10000,\\\"categories\\\":[\\\"category1\\\",\\\"category2\\\"],\\\"flags\\\":{\\\"flag1\\\":true,\\\"flag2\\\":false},\\\"sort\\\":{\\\"column_name\\\":\\\"asc / desc\\\"},\\\"storage\\\":\\\"memory\\\",\\\"dynamic_filtering\\\":[\\\"column1\\\",\\\"column2\\\"],\\\"is_keyword_enabled\\\":true,\\\"details\\\":false}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/search\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"message\\\":\\\"What is life?\\\",\\\"type\\\":\\\"individual\\\",\\\"search_size\\\":1000,\\\"start\\\":0,\\\"size\\\":10,\\\"price_lower\\\":1,\\\"price_upper\\\":10000,\\\"categories\\\":[\\\"category1\\\",\\\"category2\\\"],\\\"flags\\\":{\\\"flag1\\\":true,\\\"flag2\\\":false},\\\"sort\\\":{\\\"column_name\\\":\\\"asc / desc\\\"},\\\"storage\\\":\\\"memory\\\",\\\"dynamic_filtering\\\":[\\\"column1\\\",\\\"column2\\\"],\\\"is_keyword_enabled\\\":true,\\\"details\\\":false}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/search\"\n\n\tpayload := strings.NewReader(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"message\\\":\\\"What is life?\\\",\\\"type\\\":\\\"individual\\\",\\\"search_size\\\":1000,\\\"start\\\":0,\\\"size\\\":10,\\\"price_lower\\\":1,\\\"price_upper\\\":10000,\\\"categories\\\":[\\\"category1\\\",\\\"category2\\\"],\\\"flags\\\":{\\\"flag1\\\":true,\\\"flag2\\\":false},\\\"sort\\\":{\\\"column_name\\\":\\\"asc / desc\\\"},\\\"storage\\\":\\\"memory\\\",\\\"dynamic_filtering\\\":[\\\"column1\\\",\\\"column2\\\"],\\\"is_keyword_enabled\\\":true,\\\"details\\\":false}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"message\\\":\\\"What is life?\\\",\\\"type\\\":\\\"individual\\\",\\\"search_size\\\":1000,\\\"start\\\":0,\\\"size\\\":10,\\\"price_lower\\\":1,\\\"price_upper\\\":10000,\\\"categories\\\":[\\\"category1\\\",\\\"category2\\\"],\\\"flags\\\":{\\\"flag1\\\":true,\\\"flag2\\\":false},\\\"sort\\\":{\\\"column_name\\\":\\\"asc / desc\\\"},\\\"storage\\\":\\\"memory\\\",\\\"dynamic_filtering\\\":[\\\"column1\\\",\\\"column2\\\"],\\\"is_keyword_enabled\\\":true,\\\"details\\\":false}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/search\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/items/search\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"message\\\":\\\"What is life?\\\",\\\"type\\\":\\\"individual\\\",\\\"search_size\\\":1000,\\\"start\\\":0,\\\"size\\\":10,\\\"price_lower\\\":1,\\\"price_upper\\\":10000,\\\"categories\\\":[\\\"category1\\\",\\\"category2\\\"],\\\"flags\\\":{\\\"flag1\\\":true,\\\"flag2\\\":false},\\\"sort\\\":{\\\"column_name\\\":\\\"asc / desc\\\"},\\\"storage\\\":\\\"memory\\\",\\\"dynamic_filtering\\\":[\\\"column1\\\",\\\"column2\\\"],\\\"is_keyword_enabled\\\":true,\\\"details\\\":false}\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/search\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"message\\\":\\\"What is life?\\\",\\\"type\\\":\\\"individual\\\",\\\"search_size\\\":1000,\\\"start\\\":0,\\\"size\\\":10,\\\"price_lower\\\":1,\\\"price_upper\\\":10000,\\\"categories\\\":[\\\"category1\\\",\\\"category2\\\"],\\\"flags\\\":{\\\"flag1\\\":true,\\\"flag2\\\":false},\\\"sort\\\":{\\\"column_name\\\":\\\"asc / desc\\\"},\\\"storage\\\":\\\"memory\\\",\\\"dynamic_filtering\\\":[\\\"column1\\\",\\\"column2\\\"],\\\"is_keyword_enabled\\\":true,\\\"details\\\":false}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = JSON.stringify({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"message\": \"What is life?\",\n  \"type\": \"individual\",\n  \"search_size\": 1000,\n  \"start\": 0,\n  \"size\": 10,\n  \"price_lower\": 1,\n  \"price_upper\": 10000,\n  \"categories\": [\n    \"category1\",\n    \"category2\"\n  ],\n  \"flags\": {\n    \"flag1\": true,\n    \"flag2\": false\n  },\n  \"sort\": {\n    \"column_name\": \"asc / desc\"\n  },\n  \"storage\": \"memory\",\n  \"dynamic_filtering\": [\n    \"column1\",\n    \"column2\"\n  ],\n  \"is_keyword_enabled\": true,\n  \"details\": false\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/search\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/search\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n  member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n  message: 'What is life?',\n  type: 'individual',\n  search_size: 1000,\n  start: 0,\n  size: 10,\n  price_lower: 1,\n  price_upper: 10000,\n  categories: ['category1', 'category2'],\n  flags: {flag1: true, flag2: false},\n  sort: {column_name: 'asc / desc'},\n  storage: 'memory',\n  dynamic_filtering: ['column1', 'column2'],\n  is_keyword_enabled: true,\n  details: false\n}));\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/items/search',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n    member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n    message: 'What is life?',\n    type: 'individual',\n    search_size: 1000,\n    start: 0,\n    size: 10,\n    price_lower: 1,\n    price_upper: 10000,\n    categories: ['category1', 'category2'],\n    flags: {flag1: true, flag2: false},\n    sort: {column_name: 'asc / desc'},\n    storage: 'memory',\n    dynamic_filtering: ['column1', 'column2'],\n    is_keyword_enabled: true,\n    details: false\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/search\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"message\": \"What is life?\",\n  \"type\": \"individual\",\n  \"search_size\": 1000,\n  \"start\": 0,\n  \"size\": 10,\n  \"price_lower\": 1,\n  \"price_upper\": 10000,\n  \"categories\": [\n    \"category1\",\n    \"category2\"\n  ],\n  \"flags\": {\n    \"flag1\": true,\n    \"flag2\": false\n  },\n  \"sort\": {\n    \"column_name\": \"asc / desc\"\n  },\n  \"storage\": \"memory\",\n  \"dynamic_filtering\": [\n    \"column1\",\n    \"column2\"\n  ],\n  \"is_keyword_enabled\": true,\n  \"details\": false\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"user_id\": @\"a0cc6beb-2909-459b-be55-62196af78ce4\",\n                              @\"member_id\": @\"df3456tg-2909-459b-be55-62196afedf85\",\n                              @\"message\": @\"What is life?\",\n                              @\"type\": @\"individual\",\n                              @\"search_size\": @1000,\n                              @\"start\": @0,\n                              @\"size\": @10,\n                              @\"price_lower\": @1,\n                              @\"price_upper\": @10000,\n                              @\"categories\": @[ @\"category1\", @\"category2\" ],\n                              @\"flags\": @{ @\"flag1\": @YES, @\"flag2\": @NO },\n                              @\"sort\": @{ @\"column_name\": @\"asc / desc\" },\n                              @\"storage\": @\"memory\",\n                              @\"dynamic_filtering\": @[ @\"column1\", @\"column2\" ],\n                              @\"is_keyword_enabled\": @YES,\n                              @\"details\": @NO };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/search\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/search\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"message\\\":\\\"What is life?\\\",\\\"type\\\":\\\"individual\\\",\\\"search_size\\\":1000,\\\"start\\\":0,\\\"size\\\":10,\\\"price_lower\\\":1,\\\"price_upper\\\":10000,\\\"categories\\\":[\\\"category1\\\",\\\"category2\\\"],\\\"flags\\\":{\\\"flag1\\\":true,\\\"flag2\\\":false},\\\"sort\\\":{\\\"column_name\\\":\\\"asc / desc\\\"},\\\"storage\\\":\\\"memory\\\",\\\"dynamic_filtering\\\":[\\\"column1\\\",\\\"column2\\\"],\\\"is_keyword_enabled\\\":true,\\\"details\\\":false}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/search');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"message\":\"What is life?\",\"type\":\"individual\",\"search_size\":1000,\"start\":0,\"size\":10,\"price_lower\":1,\"price_upper\":10000,\"categories\":[\"category1\",\"category2\"],\"flags\":{\"flag1\":true,\"flag2\":false},\"sort\":{\"column_name\":\"asc / desc\"},\"storage\":\"memory\",\"dynamic_filtering\":[\"column1\",\"column2\"],\"is_keyword_enabled\":true,\"details\":false}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"message\":\"What is life?\",\"type\":\"individual\",\"search_size\":1000,\"start\":0,\"size\":10,\"price_lower\":1,\"price_upper\":10000,\"categories\":[\"category1\",\"category2\"],\"flags\":{\"flag1\":true,\"flag2\":false},\"sort\":{\"column_name\":\"asc / desc\"},\"storage\":\"memory\",\"dynamic_filtering\":[\"column1\",\"column2\"],\"is_keyword_enabled\":true,\"details\":false}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/search');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"message\\\":\\\"What is life?\\\",\\\"type\\\":\\\"individual\\\",\\\"search_size\\\":1000,\\\"start\\\":0,\\\"size\\\":10,\\\"price_lower\\\":1,\\\"price_upper\\\":10000,\\\"categories\\\":[\\\"category1\\\",\\\"category2\\\"],\\\"flags\\\":{\\\"flag1\\\":true,\\\"flag2\\\":false},\\\"sort\\\":{\\\"column_name\\\":\\\"asc / desc\\\"},\\\"storage\\\":\\\"memory\\\",\\\"dynamic_filtering\\\":[\\\"column1\\\",\\\"column2\\\"],\\\"is_keyword_enabled\\\":true,\\\"details\\\":false}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/items/search\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/search\"\n\npayload = {\n    \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n    \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n    \"message\": \"What is life?\",\n    \"type\": \"individual\",\n    \"search_size\": 1000,\n    \"start\": 0,\n    \"size\": 10,\n    \"price_lower\": 1,\n    \"price_upper\": 10000,\n    \"categories\": [\"category1\", \"category2\"],\n    \"flags\": {\n        \"flag1\": True,\n        \"flag2\": False\n    },\n    \"sort\": {\"column_name\": \"asc / desc\"},\n    \"storage\": \"memory\",\n    \"dynamic_filtering\": [\"column1\", \"column2\"],\n    \"is_keyword_enabled\": True,\n    \"details\": False\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/search\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"message\\\":\\\"What is life?\\\",\\\"type\\\":\\\"individual\\\",\\\"search_size\\\":1000,\\\"start\\\":0,\\\"size\\\":10,\\\"price_lower\\\":1,\\\"price_upper\\\":10000,\\\"categories\\\":[\\\"category1\\\",\\\"category2\\\"],\\\"flags\\\":{\\\"flag1\\\":true,\\\"flag2\\\":false},\\\"sort\\\":{\\\"column_name\\\":\\\"asc / desc\\\"},\\\"storage\\\":\\\"memory\\\",\\\"dynamic_filtering\\\":[\\\"column1\\\",\\\"column2\\\"],\\\"is_keyword_enabled\\\":true,\\\"details\\\":false}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/items/search \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"message\":\"What is life?\",\"type\":\"individual\",\"search_size\":1000,\"start\":0,\"size\":10,\"price_lower\":1,\"price_upper\":10000,\"categories\":[\"category1\",\"category2\"],\"flags\":{\"flag1\":true,\"flag2\":false},\"sort\":{\"column_name\":\"asc / desc\"},\"storage\":\"memory\",\"dynamic_filtering\":[\"column1\",\"column2\"],\"is_keyword_enabled\":true,\"details\":false}'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"message\": \"What is life?\",\n  \"type\": \"individual\",\n  \"search_size\": 1000,\n  \"start\": 0,\n  \"size\": 10,\n  \"price_lower\": 1,\n  \"price_upper\": 10000,\n  \"categories\": [\"category1\", \"category2\"],\n  \"flags\": [\n    \"flag1\": true,\n    \"flag2\": false\n  ],\n  \"sort\": [\"column_name\": \"asc / desc\"],\n  \"storage\": \"memory\",\n  \"dynamic_filtering\": [\"column1\", \"column2\"],\n  \"is_keyword_enabled\": true,\n  \"details\": false\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/search\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/gpt/train": {
            "get": {
                "tags": [
                    "MyGPT"
                ],
                "summary": "Train with pre-processed data and embeddings and save it in vector db",
                "description": "GPT train",
                "operationId": "item_train_v1_gpt_train_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/gpt/train\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/gpt/train\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/gpt/train\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/gpt/train\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/gpt/train\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/gpt/train\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/gpt/train\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/gpt/train\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/gpt/train',\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/gpt/train\");\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/gpt/train\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/gpt/train\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/gpt/train');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/train');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/gpt/train\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/gpt/train\"\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/gpt/train\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request GET \\\n  --url https://api.recommender.gigalogy.com/v1/gpt/train \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/gpt/train\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/gpt/conversations/{conversation_id}": {
            "get": {
                "tags": [
                    "MyGPT"
                ],
                "summary": "Get details of a conversation",
                "description": "Get details of a GPT conversation.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| conversation_id | str | str | The ID of the conversation to retrieve. (Required) |",
                "operationId": "get_gpt_conversation_v1_gpt_conversations__conversation_id__get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Conversation Id",
                            "type": "string"
                        },
                        "name": "conversation_id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/gpt/conversations/%7Bconversation_id%7D\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/gpt/conversations/%7Bconversation_id%7D\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/gpt/conversations/%7Bconversation_id%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/gpt/conversations/%7Bconversation_id%7D\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/gpt/conversations/%7Bconversation_id%7D\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/gpt/conversations/%7Bconversation_id%7D\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/gpt/conversations/%7Bconversation_id%7D\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/gpt/conversations/%7Bconversation_id%7D\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/gpt/conversations/%7Bconversation_id%7D',\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/gpt/conversations/%7Bconversation_id%7D\");\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/gpt/conversations/%7Bconversation_id%7D\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/gpt/conversations/%7Bconversation_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/gpt/conversations/%7Bconversation_id%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/conversations/%7Bconversation_id%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/gpt/conversations/%7Bconversation_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/gpt/conversations/%7Bconversation_id%7D\"\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/gpt/conversations/%7Bconversation_id%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request GET \\\n  --url https://api.recommender.gigalogy.com/v1/gpt/conversations/%7Bconversation_id%7D \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/gpt/conversations/%7Bconversation_id%7D\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/gpt/conversations": {
            "get": {
                "tags": [
                    "MyGPT"
                ],
                "summary": "Get gpt conversations of the project",
                "description": "Provides a list of conversations. It takes to optional parameter: start_date and end_date to indicate the range of conversations. \nBy default it assumes a delta of 7 days.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| start_date | Optional[str] | str | Initial date of the conversation date range. |\n| end_date |Optional[str] | str | End date of the conversation date range. |",
                "operationId": "get_gpt_conversation_list_v1_gpt_conversations_get",
                "parameters": [
                    {
                        "required": false,
                        "schema": {
                            "title": "Start Date",
                            "type": "string",
                            "format": "date"
                        },
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "End Date",
                            "type": "string",
                            "format": "date"
                        },
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/gpt/conversations?start_date=SOME_STRING_VALUE&end_date=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/gpt/conversations?start_date=SOME_STRING_VALUE&end_date=SOME_STRING_VALUE\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/gpt/conversations?start_date=SOME_STRING_VALUE&end_date=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/gpt/conversations?start_date=SOME_STRING_VALUE&end_date=SOME_STRING_VALUE\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/gpt/conversations?start_date=SOME_STRING_VALUE&end_date=SOME_STRING_VALUE\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/gpt/conversations?start_date=SOME_STRING_VALUE&end_date=SOME_STRING_VALUE\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/gpt/conversations?start_date=SOME_STRING_VALUE&end_date=SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/gpt/conversations?start_date=SOME_STRING_VALUE&end_date=SOME_STRING_VALUE\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/gpt/conversations',\n  qs: {start_date: 'SOME_STRING_VALUE', end_date: 'SOME_STRING_VALUE'},\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/gpt/conversations\");\n\nreq.query({\n  \"start_date\": \"SOME_STRING_VALUE\",\n  \"end_date\": \"SOME_STRING_VALUE\"\n});\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/gpt/conversations?start_date=SOME_STRING_VALUE&end_date=SOME_STRING_VALUE\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/gpt/conversations?start_date=SOME_STRING_VALUE&end_date=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/gpt/conversations');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData([\n  'start_date' => 'SOME_STRING_VALUE',\n  'end_date' => 'SOME_STRING_VALUE'\n]);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/conversations');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString([\n  'start_date' => 'SOME_STRING_VALUE',\n  'end_date' => 'SOME_STRING_VALUE'\n]));\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/gpt/conversations?start_date=SOME_STRING_VALUE&end_date=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/gpt/conversations\"\n\nquerystring = {\"start_date\":\"SOME_STRING_VALUE\",\"end_date\":\"SOME_STRING_VALUE\"}\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/gpt/conversations?start_date=SOME_STRING_VALUE&end_date=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request GET \\\n  --url 'https://api.recommender.gigalogy.com/v1/gpt/conversations?start_date=SOME_STRING_VALUE&end_date=SOME_STRING_VALUE' \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/gpt/conversations?start_date=SOME_STRING_VALUE&end_date=SOME_STRING_VALUE\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            },
            "put": {
                "tags": [
                    "MyGPT"
                ],
                "summary": "Send your feedback for a received answer",
                "description": "Feedback for GPTFlow response\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| conversation_id | str | str | ID of the conversation to provide feedback for. |\n| message | optional[str] | str | Feedback message describing the user's experience of the GPT response. |\n| type | str | str | Type of feedback (e.g., positive, negative). |",
                "operationId": "put_gpt_response_feedback_v1_gpt_conversations_put",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GPTConversationFeedbackSchema"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/gpt/conversations\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"conversation_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"message\\\":\\\"Tell us your experience of the GPT response\\\",\\\"type\\\":\\\"positive\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Put,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/gpt/conversations\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"conversation_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"message\\\":\\\"Tell us your experience of the GPT response\\\",\\\"type\\\":\\\"positive\\\"}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/gpt/conversations\"\n\n\tpayload := strings.NewReader(\"{\\\"conversation_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"message\\\":\\\"Tell us your experience of the GPT response\\\",\\\"type\\\":\\\"positive\\\"}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"conversation_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"message\\\":\\\"Tell us your experience of the GPT response\\\",\\\"type\\\":\\\"positive\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/gpt/conversations\")\n  .put(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.put(\"https://api.recommender.gigalogy.com/v1/gpt/conversations\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"conversation_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"message\\\":\\\"Tell us your experience of the GPT response\\\",\\\"type\\\":\\\"positive\\\"}\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/gpt/conversations\",\n  \"method\": \"PUT\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"conversation_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"message\\\":\\\"Tell us your experience of the GPT response\\\",\\\"type\\\":\\\"positive\\\"}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = JSON.stringify({\n  \"conversation_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"message\": \"Tell us your experience of the GPT response\",\n  \"type\": \"positive\"\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PUT\", \"https://api.recommender.gigalogy.com/v1/gpt/conversations\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/gpt/conversations\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  conversation_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n  message: 'Tell us your experience of the GPT response',\n  type: 'positive'\n}));\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.recommender.gigalogy.com/v1/gpt/conversations',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    conversation_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n    message: 'Tell us your experience of the GPT response',\n    type: 'positive'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"PUT\", \"https://api.recommender.gigalogy.com/v1/gpt/conversations\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"conversation_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"message\": \"Tell us your experience of the GPT response\",\n  \"type\": \"positive\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"conversation_id\": @\"a0cc6beb-2909-459b-be55-62196af78ce4\",\n                              @\"message\": @\"Tell us your experience of the GPT response\",\n                              @\"type\": @\"positive\" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/gpt/conversations\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PUT\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/gpt/conversations\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"conversation_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"message\\\":\\\"Tell us your experience of the GPT response\\\",\\\"type\\\":\\\"positive\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/gpt/conversations');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"conversation_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"message\":\"Tell us your experience of the GPT response\",\"type\":\"positive\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"conversation_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"message\":\"Tell us your experience of the GPT response\",\"type\":\"positive\"}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/conversations');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"conversation_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"message\\\":\\\"Tell us your experience of the GPT response\\\",\\\"type\\\":\\\"positive\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"PUT\", \"/v1/gpt/conversations\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/gpt/conversations\"\n\npayload = {\n    \"conversation_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n    \"message\": \"Tell us your experience of the GPT response\",\n    \"type\": \"positive\"\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"PUT\", url, json=payload, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/gpt/conversations\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"conversation_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"message\\\":\\\"Tell us your experience of the GPT response\\\",\\\"type\\\":\\\"positive\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request PUT \\\n  --url https://api.recommender.gigalogy.com/v1/gpt/conversations \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"conversation_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"message\":\"Tell us your experience of the GPT response\",\"type\":\"positive\"}'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"conversation_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"message\": \"Tell us your experience of the GPT response\",\n  \"type\": \"positive\"\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/gpt/conversations\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"PUT\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/gpt/settings": {
            "get": {
                "tags": [
                    "MyGPT Settings"
                ],
                "summary": "Get GPT settings",
                "description": "Get your saved GPT settings.",
                "operationId": "get_rank_settings_v1_gpt_settings_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/gpt/settings\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/gpt/settings\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/gpt/settings\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/gpt/settings\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/gpt/settings\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/gpt/settings\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/gpt/settings\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/gpt/settings\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/gpt/settings',\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/gpt/settings\");\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/gpt/settings\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/gpt/settings\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/gpt/settings');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/settings');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/gpt/settings\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/gpt/settings\"\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/gpt/settings\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request GET \\\n  --url https://api.recommender.gigalogy.com/v1/gpt/settings \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/gpt/settings\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            },
            "put": {
                "tags": [
                    "MyGPT Settings"
                ],
                "summary": "Update gpt settings",
                "description": "Update the project wide settings for GPT. It takes following parameters. \n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| model | str | str | The name of model. Supported models are `gpt-3.5-turbo-0613`, `text-davinci-003`, `gpt-3.5-turbo-instruct`, `gpt-3.5-turbo-16k-0613` and `gpt-4-0613` |\n| bot_mode_strict | bool | bool | If the bot mode is strict or not (default is False). |\n| system | str | str | setup the bot persona e.g. You are an expert on .... |",
                "operationId": "update_gpt_settings_v1_gpt_settings_put",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GPTSettingsUpdateSchema"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/gpt/settings\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"bot_mode_strict\\\":false,\\\"system\\\":\\\"You are an expert on ...\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Put,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/gpt/settings\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"bot_mode_strict\\\":false,\\\"system\\\":\\\"You are an expert on ...\\\"}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/gpt/settings\"\n\n\tpayload := strings.NewReader(\"{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"bot_mode_strict\\\":false,\\\"system\\\":\\\"You are an expert on ...\\\"}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"bot_mode_strict\\\":false,\\\"system\\\":\\\"You are an expert on ...\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/gpt/settings\")\n  .put(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.put(\"https://api.recommender.gigalogy.com/v1/gpt/settings\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"bot_mode_strict\\\":false,\\\"system\\\":\\\"You are an expert on ...\\\"}\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/gpt/settings\",\n  \"method\": \"PUT\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"bot_mode_strict\\\":false,\\\"system\\\":\\\"You are an expert on ...\\\"}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = JSON.stringify({\n  \"model\": \"gpt-3.5-turbo-0613\",\n  \"bot_mode_strict\": false,\n  \"system\": \"You are an expert on ...\"\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PUT\", \"https://api.recommender.gigalogy.com/v1/gpt/settings\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/gpt/settings\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  model: 'gpt-3.5-turbo-0613',\n  bot_mode_strict: false,\n  system: 'You are an expert on ...'\n}));\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.recommender.gigalogy.com/v1/gpt/settings',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    model: 'gpt-3.5-turbo-0613',\n    bot_mode_strict: false,\n    system: 'You are an expert on ...'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"PUT\", \"https://api.recommender.gigalogy.com/v1/gpt/settings\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"model\": \"gpt-3.5-turbo-0613\",\n  \"bot_mode_strict\": false,\n  \"system\": \"You are an expert on ...\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"model\": @\"gpt-3.5-turbo-0613\",\n                              @\"bot_mode_strict\": @NO,\n                              @\"system\": @\"You are an expert on ...\" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/gpt/settings\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PUT\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/gpt/settings\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"bot_mode_strict\\\":false,\\\"system\\\":\\\"You are an expert on ...\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/gpt/settings');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"model\":\"gpt-3.5-turbo-0613\",\"bot_mode_strict\":false,\"system\":\"You are an expert on ...\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"model\":\"gpt-3.5-turbo-0613\",\"bot_mode_strict\":false,\"system\":\"You are an expert on ...\"}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/settings');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"bot_mode_strict\\\":false,\\\"system\\\":\\\"You are an expert on ...\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"PUT\", \"/v1/gpt/settings\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/gpt/settings\"\n\npayload = {\n    \"model\": \"gpt-3.5-turbo-0613\",\n    \"bot_mode_strict\": False,\n    \"system\": \"You are an expert on ...\"\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"PUT\", url, json=payload, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/gpt/settings\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"bot_mode_strict\\\":false,\\\"system\\\":\\\"You are an expert on ...\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request PUT \\\n  --url https://api.recommender.gigalogy.com/v1/gpt/settings \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"model\":\"gpt-3.5-turbo-0613\",\"bot_mode_strict\":false,\"system\":\"You are an expert on ...\"}'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"model\": \"gpt-3.5-turbo-0613\",\n  \"bot_mode_strict\": false,\n  \"system\": \"You are an expert on ...\"\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/gpt/settings\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"PUT\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            },
            "post": {
                "tags": [
                    "MyGPT Settings"
                ],
                "summary": "Create GPT settings",
                "description": "This endpoint determines the project wide settings for GPT. It takes following parameters. \n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| model | str | str | The name of model. Supported models are `gpt-3.5-turbo-0613`, `text-davinci-003`, `gpt-3.5-turbo-instruct`, `gpt-3.5-turbo-16k-0613` and `gpt-4-0613` |\n| bot_mode_strict | bool | bool | If the bot mode is strict or not (default is False). |\n| system | str | str | setup the bot persona e.g. You are an expert on .... |",
                "operationId": "save_gpt_settings_v1_gpt_settings_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GPTSettingsSchema"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/gpt/settings\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"bot_mode_strict\\\":false,\\\"system\\\":\\\"You are an expert on ...\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/gpt/settings\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"bot_mode_strict\\\":false,\\\"system\\\":\\\"You are an expert on ...\\\"}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/gpt/settings\"\n\n\tpayload := strings.NewReader(\"{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"bot_mode_strict\\\":false,\\\"system\\\":\\\"You are an expert on ...\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"bot_mode_strict\\\":false,\\\"system\\\":\\\"You are an expert on ...\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/gpt/settings\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/gpt/settings\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"bot_mode_strict\\\":false,\\\"system\\\":\\\"You are an expert on ...\\\"}\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/gpt/settings\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"bot_mode_strict\\\":false,\\\"system\\\":\\\"You are an expert on ...\\\"}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = JSON.stringify({\n  \"model\": \"gpt-3.5-turbo-0613\",\n  \"bot_mode_strict\": false,\n  \"system\": \"You are an expert on ...\"\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/gpt/settings\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/gpt/settings\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  model: 'gpt-3.5-turbo-0613',\n  bot_mode_strict: false,\n  system: 'You are an expert on ...'\n}));\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/gpt/settings',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    model: 'gpt-3.5-turbo-0613',\n    bot_mode_strict: false,\n    system: 'You are an expert on ...'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/gpt/settings\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"model\": \"gpt-3.5-turbo-0613\",\n  \"bot_mode_strict\": false,\n  \"system\": \"You are an expert on ...\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"model\": @\"gpt-3.5-turbo-0613\",\n                              @\"bot_mode_strict\": @NO,\n                              @\"system\": @\"You are an expert on ...\" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/gpt/settings\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/gpt/settings\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"bot_mode_strict\\\":false,\\\"system\\\":\\\"You are an expert on ...\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/gpt/settings');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"model\":\"gpt-3.5-turbo-0613\",\"bot_mode_strict\":false,\"system\":\"You are an expert on ...\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"model\":\"gpt-3.5-turbo-0613\",\"bot_mode_strict\":false,\"system\":\"You are an expert on ...\"}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/settings');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"bot_mode_strict\\\":false,\\\"system\\\":\\\"You are an expert on ...\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/gpt/settings\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/gpt/settings\"\n\npayload = {\n    \"model\": \"gpt-3.5-turbo-0613\",\n    \"bot_mode_strict\": False,\n    \"system\": \"You are an expert on ...\"\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/gpt/settings\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"bot_mode_strict\\\":false,\\\"system\\\":\\\"You are an expert on ...\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/gpt/settings \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"model\":\"gpt-3.5-turbo-0613\",\"bot_mode_strict\":false,\"system\":\"You are an expert on ...\"}'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"model\": \"gpt-3.5-turbo-0613\",\n  \"bot_mode_strict\": false,\n  \"system\": \"You are an expert on ...\"\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/gpt/settings\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/gpt/datasets": {
            "get": {
                "tags": [
                    "MyGPT Dataset"
                ],
                "summary": "Get list of all datasets",
                "description": "Get metadata of all dataset.\n### Parameters\n----------\n| name   | key type            | value type  | description                                         |\n| :-----:| :------------------: | :---------: | :--------------------------------------------------: |\n| start  | Optional[int]       | int         | The starting index for dataset retrieval (default is 0, minimum is 0). |\n| size   | Optional[int]       | int         | The number of records to retrieve (default is 10, minimum is 1, maximum is 1000). |",
                "operationId": "get_gpt_datasets_list_v1_gpt_datasets_get",
                "parameters": [
                    {
                        "required": false,
                        "schema": {
                            "title": "Start",
                            "minimum": 0,
                            "type": "integer",
                            "default": 0
                        },
                        "name": "start",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Size",
                            "minimum": 1,
                            "type": "integer",
                            "default": 10
                        },
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/gpt/datasets?start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/gpt/datasets?start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/gpt/datasets?start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/gpt/datasets?start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/gpt/datasets?start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/gpt/datasets?start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/gpt/datasets?start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/gpt/datasets?start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/gpt/datasets',\n  qs: {start: 'SOME_INTEGER_VALUE', size: 'SOME_INTEGER_VALUE'},\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/gpt/datasets\");\n\nreq.query({\n  \"start\": \"SOME_INTEGER_VALUE\",\n  \"size\": \"SOME_INTEGER_VALUE\"\n});\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/gpt/datasets?start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/gpt/datasets?start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData([\n  'start' => 'SOME_INTEGER_VALUE',\n  'size' => 'SOME_INTEGER_VALUE'\n]);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString([\n  'start' => 'SOME_INTEGER_VALUE',\n  'size' => 'SOME_INTEGER_VALUE'\n]));\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/gpt/datasets?start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/gpt/datasets\"\n\nquerystring = {\"start\":\"SOME_INTEGER_VALUE\",\"size\":\"SOME_INTEGER_VALUE\"}\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/gpt/datasets?start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request GET \\\n  --url 'https://api.recommender.gigalogy.com/v1/gpt/datasets?start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE' \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/gpt/datasets?start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            },
            "post": {
                "tags": [
                    "MyGPT Dataset"
                ],
                "summary": "Upload your dataset for training. MyGPT supports CSV, JSON formats.",
                "description": "Upload dataset to train your GPT. `csv`, `json` file types are supported.\nidx_column identifies your data row/objects, if none given we will use `idx` as column name and give an UUID to each unit of data.\nProvide image_url_column if your data have image and you want to use vision api with this dataset. The parameter takes the column name containing data unit's image url.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| name | str | str | The name of the dataset. |\n| idx_column | Optional[str] | str | The index column of the dataset default is `idx`. |\n| is_idx_fillup_if_empty | bool | Should we fill up empty index values? |\n| secondary_idx_column | Optional[str] | str | The secondary index column of the dataset. |\n| image_url_column  | Optional[str] | str   | image url column or field name |\n| description | Optional[str] | str | The description of the dataset. |\n| dataset_file | Optional | Binary File | The **csv, json** file to be uploaded. |",
                "operationId": "post_gpt_dataset_v1_gpt_datasets_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_post_gpt_dataset_v1_gpt_datasets_post"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/gpt/datasets\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"multipart/form-data\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/gpt/datasets\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/gpt/datasets\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"multipart/form-data\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/gpt/datasets\")\n  .post(null)\n  .addHeader(\"content-type\", \"multipart/form-data\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/gpt/datasets\")\n  .header(\"content-type\", \"multipart/form-data\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/gpt/datasets\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/gpt/datasets\");\nxhr.setRequestHeader(\"content-type\", \"multipart/form-data\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/gpt/datasets\",\n  \"headers\": {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/gpt/datasets',\n  headers: {\n    'content-type': 'multipart/form-data',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/gpt/datasets\");\n\nreq.headers({\n  \"content-type\": \"multipart/form-data\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"multipart/form-data\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/gpt/datasets\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/gpt/datasets\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: multipart/form-data\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'multipart/form-data',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'content-type' => 'multipart/form-data',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'content-type': \"multipart/form-data\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/gpt/datasets\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/gpt/datasets\"\n\nheaders = {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/gpt/datasets\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'multipart/form-data'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/gpt/datasets \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: multipart/form-data' \\\n  --header 'project-key: SOME_STRING_VALUE'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"multipart/form-data\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/gpt/datasets\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/gpt/datasets/{dataset_id}": {
            "get": {
                "tags": [
                    "MyGPT Dataset"
                ],
                "summary": "Get summary of a dataset",
                "description": "Get details of a dataset. The response includes both metadata and documents summaries like, \na. Total document count\nb. Total text trained document count\nc. Total image trained document count\nd. Active document count\n\n### Parameters\n----------\n| name   | key type            | value type  | description                                         |\n| :-----:| :------------------: | :---------: | :--------------------------------------------------: |\n| dataset_id | str | str | ID of the dataset |",
                "operationId": "get_summary_of_a_dataset_v1_gpt_datasets__dataset_id__get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Dataset Id",
                            "type": "string"
                        },
                        "name": "dataset_id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/gpt/datasets/%7Bdataset_id%7D\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D',\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\");\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/gpt/datasets/%7Bdataset_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\"\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request GET \\\n  --url https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            },
            "put": {
                "tags": [
                    "MyGPT Dataset"
                ],
                "summary": "Update a dataset",
                "description": "Update a dataset meta data and/or add documents from csv/json file.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| dataset_id | str | str | ID of the dataset to be updated |\n| name | str | str | The name of the dataset. |\n| is_idx_fillup_if_empty | bool | Should we fill up empty index values? |\n| secondary_idx_column | Optional[str] | str | The secondary index column of the dataset. |\n| image_url_column  | Optional[str] | str   | image url column or field name |\n| description | Optional[str] | str | The description of the dataset. |\n| dataset_file | Optional | Binary File | The **csv, json** file to be uploaded. |",
                "operationId": "update_gpt_dataset_data_v1_gpt_datasets__dataset_id__put",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Dataset Id",
                            "type": "string"
                        },
                        "name": "dataset_id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_update_gpt_dataset_data_v1_gpt_datasets__dataset_id__put"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"multipart/form-data\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Put,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\"\n\n\treq, _ := http.NewRequest(\"PUT\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"multipart/form-data\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\")\n  .put(null)\n  .addHeader(\"content-type\", \"multipart/form-data\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.put(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\")\n  .header(\"content-type\", \"multipart/form-data\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\",\n  \"method\": \"PUT\",\n  \"headers\": {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PUT\", \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\");\nxhr.setRequestHeader(\"content-type\", \"multipart/form-data\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/gpt/datasets/%7Bdataset_id%7D\",\n  \"headers\": {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D',\n  headers: {\n    'content-type': 'multipart/form-data',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"PUT\", \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\");\n\nreq.headers({\n  \"content-type\": \"multipart/form-data\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"multipart/form-data\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PUT\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: multipart/form-data\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'multipart/form-data',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D');\n$request->setRequestMethod('PUT');\n$request->setHeaders([\n  'content-type' => 'multipart/form-data',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'content-type': \"multipart/form-data\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"PUT\", \"/v1/gpt/datasets/%7Bdataset_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\"\n\nheaders = {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"PUT\", url, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'multipart/form-data'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request PUT \\\n  --url https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: multipart/form-data' \\\n  --header 'project-key: SOME_STRING_VALUE'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"multipart/form-data\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"PUT\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "MyGPT Dataset"
                ],
                "summary": "Deletes the dataset",
                "description": "Deletes a dataset entierly. To clear a dataset use `/documents` endpoint.\n\n### Parameters\n----------\n| name   | key type            | value type  | description                                         |\n| :-----:| :------------------: | :---------: | :--------------------------------------------------: |\n| dataset_id | str | str | ID of the dataset |",
                "operationId": "gpt_dataset_delete_v1_gpt_datasets__dataset_id__delete",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Dataset Id",
                            "type": "string"
                        },
                        "name": "dataset_id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Delete,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\")\n  .delete(null)\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.delete(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\",\n  \"method\": \"DELETE\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"DELETE\", \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/gpt/datasets/%7Bdataset_id%7D\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D',\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"DELETE\", \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\");\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"DELETE\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"DELETE\", \"/v1/gpt/datasets/%7Bdataset_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\"\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"DELETE\", url, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request DELETE \\\n  --url https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"DELETE\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/gpt/datasets/{dataset_id}/documents": {
            "get": {
                "tags": [
                    "MyGPT Dataset"
                ],
                "summary": "Get data of a dataset",
                "description": "Get data of a dataset. Use query parameters to customize the search result.\n### Parameters\n----------\n| name   | key type            | value type  | description                                         |\n| :-----:| :------------------: | :---------: | :--------------------------------------------------: |\n| start  | Optional[int]       | int         | The starting index for dataset retrieval (default is 0, minimum is 0). |\n| size   | Optional[int]       | int         | The number of records to retrieve (default is 10, minimum is 1, maximum is 1000). |\n| text_training_status | Optional[str]       | str | The status of the dataset (possible values are `trained`, `untrained`). |\n| image_training_status | Optional[str] | str | The status of the dataset (possible values are `trained`, `untrained`). |\n| active_status   | Optional[str]       | str | The active status of the dataset (possible values are `archived`, `active`). |",
                "operationId": "get_gpt_dataset_documents_v1_gpt_datasets__dataset_id__documents_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Dataset Id",
                            "type": "string"
                        },
                        "name": "dataset_id",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Start",
                            "minimum": 0,
                            "type": "integer"
                        },
                        "name": "start",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Size",
                            "minimum": 1,
                            "type": "integer"
                        },
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "GPTTextTrainStatus",
                            "enum": [
                                "trained",
                                "untrained",
                                "failed"
                            ],
                            "type": "string",
                            "description": "An enumeration."
                        },
                        "name": "text_training_status",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "GPTImageTrainStatus",
                            "enum": [
                                "trained",
                                "untrained",
                                "failed"
                            ],
                            "type": "string",
                            "description": "An enumeration."
                        },
                        "name": "image_training_status",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "DocActiveStatus",
                            "enum": [
                                "archived",
                                "active"
                            ],
                            "type": "string",
                            "description": "An enumeration."
                        },
                        "name": "active_status",
                        "in": "query"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents?start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE&text_training_status=SOME_STRING_VALUE&image_training_status=SOME_STRING_VALUE&active_status=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents?start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE&text_training_status=SOME_STRING_VALUE&image_training_status=SOME_STRING_VALUE&active_status=SOME_STRING_VALUE\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents?start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE&text_training_status=SOME_STRING_VALUE&image_training_status=SOME_STRING_VALUE&active_status=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents?start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE&text_training_status=SOME_STRING_VALUE&image_training_status=SOME_STRING_VALUE&active_status=SOME_STRING_VALUE\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents?start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE&text_training_status=SOME_STRING_VALUE&image_training_status=SOME_STRING_VALUE&active_status=SOME_STRING_VALUE\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents?start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE&text_training_status=SOME_STRING_VALUE&image_training_status=SOME_STRING_VALUE&active_status=SOME_STRING_VALUE\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents?start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE&text_training_status=SOME_STRING_VALUE&image_training_status=SOME_STRING_VALUE&active_status=SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/gpt/datasets/%7Bdataset_id%7D/documents?start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE&text_training_status=SOME_STRING_VALUE&image_training_status=SOME_STRING_VALUE&active_status=SOME_STRING_VALUE\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents',\n  qs: {\n    start: 'SOME_INTEGER_VALUE',\n    size: 'SOME_INTEGER_VALUE',\n    text_training_status: 'SOME_STRING_VALUE',\n    image_training_status: 'SOME_STRING_VALUE',\n    active_status: 'SOME_STRING_VALUE'\n  },\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\");\n\nreq.query({\n  \"start\": \"SOME_INTEGER_VALUE\",\n  \"size\": \"SOME_INTEGER_VALUE\",\n  \"text_training_status\": \"SOME_STRING_VALUE\",\n  \"image_training_status\": \"SOME_STRING_VALUE\",\n  \"active_status\": \"SOME_STRING_VALUE\"\n});\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents?start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE&text_training_status=SOME_STRING_VALUE&image_training_status=SOME_STRING_VALUE&active_status=SOME_STRING_VALUE\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents?start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE&text_training_status=SOME_STRING_VALUE&image_training_status=SOME_STRING_VALUE&active_status=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData([\n  'start' => 'SOME_INTEGER_VALUE',\n  'size' => 'SOME_INTEGER_VALUE',\n  'text_training_status' => 'SOME_STRING_VALUE',\n  'image_training_status' => 'SOME_STRING_VALUE',\n  'active_status' => 'SOME_STRING_VALUE'\n]);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString([\n  'start' => 'SOME_INTEGER_VALUE',\n  'size' => 'SOME_INTEGER_VALUE',\n  'text_training_status' => 'SOME_STRING_VALUE',\n  'image_training_status' => 'SOME_STRING_VALUE',\n  'active_status' => 'SOME_STRING_VALUE'\n]));\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/gpt/datasets/%7Bdataset_id%7D/documents?start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE&text_training_status=SOME_STRING_VALUE&image_training_status=SOME_STRING_VALUE&active_status=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\"\n\nquerystring = {\"start\":\"SOME_INTEGER_VALUE\",\"size\":\"SOME_INTEGER_VALUE\",\"text_training_status\":\"SOME_STRING_VALUE\",\"image_training_status\":\"SOME_STRING_VALUE\",\"active_status\":\"SOME_STRING_VALUE\"}\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents?start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE&text_training_status=SOME_STRING_VALUE&image_training_status=SOME_STRING_VALUE&active_status=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request GET \\\n  --url 'https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents?start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE&text_training_status=SOME_STRING_VALUE&image_training_status=SOME_STRING_VALUE&active_status=SOME_STRING_VALUE' \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents?start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE&text_training_status=SOME_STRING_VALUE&image_training_status=SOME_STRING_VALUE&active_status=SOME_STRING_VALUE\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            },
            "put": {
                "tags": [
                    "MyGPT Dataset"
                ],
                "summary": "Update documents",
                "description": "Update documents under a dataset. User can update metadata in bulk with document ids.\nIf all is `true`, `ids` value is ignored.\n### Parameters\n----------\n| name   | key type            | value type  | description                                         |\n| :-----:| :------------------: | :---------: | :--------------------------------------------------: |\n| ids       | Optional[list[str]]         | list[str] | A list of idxs of the dataset which needs to be updated. |\n| all       | Optional[bool]         | bool | determines if all documents should be updated, default `false` |\n| metadata_updates | list[dict] | list[dict] | A list of objects containing data rows to update. |",
                "operationId": "put_dataset_update_documents_v1_gpt_datasets__dataset_id__documents_put",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Dataset Id",
                            "type": "string"
                        },
                        "name": "dataset_id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GPTDocumentsUpdateSchema"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"ids\\\":[\\\"idx-1\\\",\\\"idx-2\\\"],\\\"is_update_all\\\":false,\\\"updates\\\":[{\\\"field_name\\\":\\\"active_status\\\",\\\"value\\\":\\\"active\\\"},{\\\"field_name\\\":\\\"status\\\",\\\"value\\\":\\\"untrained\\\"},{\\\"field_name\\\":\\\"image_train_status\\\",\\\"value\\\":\\\"trained\\\"}]}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Put,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"ids\\\":[\\\"idx-1\\\",\\\"idx-2\\\"],\\\"is_update_all\\\":false,\\\"updates\\\":[{\\\"field_name\\\":\\\"active_status\\\",\\\"value\\\":\\\"active\\\"},{\\\"field_name\\\":\\\"status\\\",\\\"value\\\":\\\"untrained\\\"},{\\\"field_name\\\":\\\"image_train_status\\\",\\\"value\\\":\\\"trained\\\"}]}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\"\n\n\tpayload := strings.NewReader(\"{\\\"ids\\\":[\\\"idx-1\\\",\\\"idx-2\\\"],\\\"is_update_all\\\":false,\\\"updates\\\":[{\\\"field_name\\\":\\\"active_status\\\",\\\"value\\\":\\\"active\\\"},{\\\"field_name\\\":\\\"status\\\",\\\"value\\\":\\\"untrained\\\"},{\\\"field_name\\\":\\\"image_train_status\\\",\\\"value\\\":\\\"trained\\\"}]}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"ids\\\":[\\\"idx-1\\\",\\\"idx-2\\\"],\\\"is_update_all\\\":false,\\\"updates\\\":[{\\\"field_name\\\":\\\"active_status\\\",\\\"value\\\":\\\"active\\\"},{\\\"field_name\\\":\\\"status\\\",\\\"value\\\":\\\"untrained\\\"},{\\\"field_name\\\":\\\"image_train_status\\\",\\\"value\\\":\\\"trained\\\"}]}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\")\n  .put(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.put(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"ids\\\":[\\\"idx-1\\\",\\\"idx-2\\\"],\\\"is_update_all\\\":false,\\\"updates\\\":[{\\\"field_name\\\":\\\"active_status\\\",\\\"value\\\":\\\"active\\\"},{\\\"field_name\\\":\\\"status\\\",\\\"value\\\":\\\"untrained\\\"},{\\\"field_name\\\":\\\"image_train_status\\\",\\\"value\\\":\\\"trained\\\"}]}\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\",\n  \"method\": \"PUT\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"ids\\\":[\\\"idx-1\\\",\\\"idx-2\\\"],\\\"is_update_all\\\":false,\\\"updates\\\":[{\\\"field_name\\\":\\\"active_status\\\",\\\"value\\\":\\\"active\\\"},{\\\"field_name\\\":\\\"status\\\",\\\"value\\\":\\\"untrained\\\"},{\\\"field_name\\\":\\\"image_train_status\\\",\\\"value\\\":\\\"trained\\\"}]}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = JSON.stringify({\n  \"ids\": [\n    \"idx-1\",\n    \"idx-2\"\n  ],\n  \"is_update_all\": false,\n  \"updates\": [\n    {\n      \"field_name\": \"active_status\",\n      \"value\": \"active\"\n    },\n    {\n      \"field_name\": \"status\",\n      \"value\": \"untrained\"\n    },\n    {\n      \"field_name\": \"image_train_status\",\n      \"value\": \"trained\"\n    }\n  ]\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PUT\", \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/gpt/datasets/%7Bdataset_id%7D/documents\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  ids: ['idx-1', 'idx-2'],\n  is_update_all: false,\n  updates: [\n    {field_name: 'active_status', value: 'active'},\n    {field_name: 'status', value: 'untrained'},\n    {field_name: 'image_train_status', value: 'trained'}\n  ]\n}));\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    ids: ['idx-1', 'idx-2'],\n    is_update_all: false,\n    updates: [\n      {field_name: 'active_status', value: 'active'},\n      {field_name: 'status', value: 'untrained'},\n      {field_name: 'image_train_status', value: 'trained'}\n    ]\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"PUT\", \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"ids\": [\n    \"idx-1\",\n    \"idx-2\"\n  ],\n  \"is_update_all\": false,\n  \"updates\": [\n    {\n      \"field_name\": \"active_status\",\n      \"value\": \"active\"\n    },\n    {\n      \"field_name\": \"status\",\n      \"value\": \"untrained\"\n    },\n    {\n      \"field_name\": \"image_train_status\",\n      \"value\": \"trained\"\n    }\n  ]\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"ids\": @[ @\"idx-1\", @\"idx-2\" ],\n                              @\"is_update_all\": @NO,\n                              @\"updates\": @[ @{ @\"field_name\": @\"active_status\", @\"value\": @\"active\" }, @{ @\"field_name\": @\"status\", @\"value\": @\"untrained\" }, @{ @\"field_name\": @\"image_train_status\", @\"value\": @\"trained\" } ] };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PUT\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"ids\\\":[\\\"idx-1\\\",\\\"idx-2\\\"],\\\"is_update_all\\\":false,\\\"updates\\\":[{\\\"field_name\\\":\\\"active_status\\\",\\\"value\\\":\\\"active\\\"},{\\\"field_name\\\":\\\"status\\\",\\\"value\\\":\\\"untrained\\\"},{\\\"field_name\\\":\\\"image_train_status\\\",\\\"value\\\":\\\"trained\\\"}]}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"ids\":[\"idx-1\",\"idx-2\"],\"is_update_all\":false,\"updates\":[{\"field_name\":\"active_status\",\"value\":\"active\"},{\"field_name\":\"status\",\"value\":\"untrained\"},{\"field_name\":\"image_train_status\",\"value\":\"trained\"}]}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"ids\":[\"idx-1\",\"idx-2\"],\"is_update_all\":false,\"updates\":[{\"field_name\":\"active_status\",\"value\":\"active\"},{\"field_name\":\"status\",\"value\":\"untrained\"},{\"field_name\":\"image_train_status\",\"value\":\"trained\"}]}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"ids\\\":[\\\"idx-1\\\",\\\"idx-2\\\"],\\\"is_update_all\\\":false,\\\"updates\\\":[{\\\"field_name\\\":\\\"active_status\\\",\\\"value\\\":\\\"active\\\"},{\\\"field_name\\\":\\\"status\\\",\\\"value\\\":\\\"untrained\\\"},{\\\"field_name\\\":\\\"image_train_status\\\",\\\"value\\\":\\\"trained\\\"}]}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"PUT\", \"/v1/gpt/datasets/%7Bdataset_id%7D/documents\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\"\n\npayload = {\n    \"ids\": [\"idx-1\", \"idx-2\"],\n    \"is_update_all\": False,\n    \"updates\": [\n        {\n            \"field_name\": \"active_status\",\n            \"value\": \"active\"\n        },\n        {\n            \"field_name\": \"status\",\n            \"value\": \"untrained\"\n        },\n        {\n            \"field_name\": \"image_train_status\",\n            \"value\": \"trained\"\n        }\n    ]\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"PUT\", url, json=payload, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"ids\\\":[\\\"idx-1\\\",\\\"idx-2\\\"],\\\"is_update_all\\\":false,\\\"updates\\\":[{\\\"field_name\\\":\\\"active_status\\\",\\\"value\\\":\\\"active\\\"},{\\\"field_name\\\":\\\"status\\\",\\\"value\\\":\\\"untrained\\\"},{\\\"field_name\\\":\\\"image_train_status\\\",\\\"value\\\":\\\"trained\\\"}]}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request PUT \\\n  --url https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"ids\":[\"idx-1\",\"idx-2\"],\"is_update_all\":false,\"updates\":[{\"field_name\":\"active_status\",\"value\":\"active\"},{\"field_name\":\"status\",\"value\":\"untrained\"},{\"field_name\":\"image_train_status\",\"value\":\"trained\"}]}'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"ids\": [\"idx-1\", \"idx-2\"],\n  \"is_update_all\": false,\n  \"updates\": [\n    [\n      \"field_name\": \"active_status\",\n      \"value\": \"active\"\n    ],\n    [\n      \"field_name\": \"status\",\n      \"value\": \"untrained\"\n    ],\n    [\n      \"field_name\": \"image_train_status\",\n      \"value\": \"trained\"\n    ]\n  ]\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"PUT\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            },
            "post": {
                "tags": [
                    "MyGPT Dataset"
                ],
                "summary": "Create documents under a dataset",
                "description": "Create documents under a dataset.\n\n### Parameters\n----------\n| name   | key type            | value type  | description                                         |\n| :-----:| :------------------: | :---------: | :--------------------------------------------------: |\n| data_list | list[dict]       | list[dict] | A list of objects |",
                "operationId": "gpt_dataset_create_documents_v1_gpt_datasets__dataset_id__documents_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Dataset Id",
                            "type": "string"
                        },
                        "name": "dataset_id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GPTDocumentsListSchema"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"documents\\\":[{}]}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"documents\\\":[{}]}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\"\n\n\tpayload := strings.NewReader(\"{\\\"documents\\\":[{}]}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"documents\\\":[{}]}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"documents\\\":[{}]}\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"documents\\\":[{}]}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = JSON.stringify({\n  \"documents\": [\n    {}\n  ]\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/gpt/datasets/%7Bdataset_id%7D/documents\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({documents: [{}]}));\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {documents: [{}]},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"documents\": [\n    {}\n  ]\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"documents\": @[ @{  } ] };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"documents\\\":[{}]}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"documents\":[{}]}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"documents\":[{}]}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"documents\\\":[{}]}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/gpt/datasets/%7Bdataset_id%7D/documents\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\"\n\npayload = {\"documents\": [{}]}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"documents\\\":[{}]}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"documents\":[{}]}'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\"documents\": [[]]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "MyGPT Dataset"
                ],
                "summary": "Delete documents",
                "description": "delete documents under a dataset. User can delete documets in bulk with document ids.\nIf all is `true`, `ids` value is ignored.\n\n### Parameters\n----------\n| name   | key type            | value type  | description                                         |\n| :-----:| :------------------: | :---------: | :--------------------------------------------------: |\n| ids       | Optional[list[str]]         | list[str] | A list of idxs of the dataset which are to be deleted. |\n| all | Optional[bool]         | bool | `true` if all documents to be deleted from the dataset while keeping the dataset, default `false`|",
                "operationId": "delete_gpt_documents_v1_gpt_datasets__dataset_id__documents_delete",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Dataset Id",
                            "type": "string"
                        },
                        "name": "dataset_id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GPTDocumentsDeleteSchema"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"ids\\\":[\\\"string\\\"],\\\"is_delete_all\\\":false}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Delete,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"ids\\\":[\\\"string\\\"],\\\"is_delete_all\\\":false}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\"\n\n\tpayload := strings.NewReader(\"{\\\"ids\\\":[\\\"string\\\"],\\\"is_delete_all\\\":false}\")\n\n\treq, _ := http.NewRequest(\"DELETE\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"ids\\\":[\\\"string\\\"],\\\"is_delete_all\\\":false}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\")\n  .delete(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.delete(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"ids\\\":[\\\"string\\\"],\\\"is_delete_all\\\":false}\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\",\n  \"method\": \"DELETE\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"ids\\\":[\\\"string\\\"],\\\"is_delete_all\\\":false}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = JSON.stringify({\n  \"ids\": [\n    \"string\"\n  ],\n  \"is_delete_all\": false\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"DELETE\", \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/gpt/datasets/%7Bdataset_id%7D/documents\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({ids: ['string'], is_delete_all: false}));\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {ids: ['string'], is_delete_all: false},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"DELETE\", \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"ids\": [\n    \"string\"\n  ],\n  \"is_delete_all\": false\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"ids\": @[ @\"string\" ],\n                              @\"is_delete_all\": @NO };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"DELETE\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_POSTFIELDS => \"{\\\"ids\\\":[\\\"string\\\"],\\\"is_delete_all\\\":false}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"ids\":[\"string\"],\"is_delete_all\":false}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"ids\":[\"string\"],\"is_delete_all\":false}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents');\n$request->setRequestMethod('DELETE');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"ids\\\":[\\\"string\\\"],\\\"is_delete_all\\\":false}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"DELETE\", \"/v1/gpt/datasets/%7Bdataset_id%7D/documents\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\"\n\npayload = {\n    \"ids\": [\"string\"],\n    \"is_delete_all\": False\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"DELETE\", url, json=payload, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"ids\\\":[\\\"string\\\"],\\\"is_delete_all\\\":false}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request DELETE \\\n  --url https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"ids\":[\"string\"],\"is_delete_all\":false}'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"ids\": [\"string\"],\n  \"is_delete_all\": false\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"DELETE\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        },
        "/v1/gpt/datasets/{dataset_id}/{document_id}": {
            "get": {
                "tags": [
                    "MyGPT Dataset"
                ],
                "summary": "Get documents by its id.",
                "description": "get details of the document with ID.",
                "operationId": "get_single_document_v1_gpt_datasets__dataset_id___document_id__get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Dataset Id",
                            "type": "string"
                        },
                        "name": "dataset_id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Document Id",
                            "type": "string"
                        },
                        "name": "document_id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D',\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\");\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\"\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request GET \\\n  --url https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            },
            "put": {
                "tags": [
                    "MyGPT Dataset"
                ],
                "summary": "Update documents by its id.",
                "description": "Update a single document under the dataset",
                "operationId": "update_single_document_v1_gpt_datasets__dataset_id___document_id__put",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Dataset Id",
                            "type": "string"
                        },
                        "name": "dataset_id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Document Id",
                            "type": "string"
                        },
                        "name": "document_id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GPTSingleDocumentUpdateSchema"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"data\\\":{\\\"header\\\":\\\"\\\",\\\"content\\\":\\\"\\\"},\\\"status\\\":\\\"trained\\\",\\\"image_train_status\\\":\\\"trained\\\",\\\"active_status\\\":\\\"archived\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Put,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"data\\\":{\\\"header\\\":\\\"\\\",\\\"content\\\":\\\"\\\"},\\\"status\\\":\\\"trained\\\",\\\"image_train_status\\\":\\\"trained\\\",\\\"active_status\\\":\\\"archived\\\"}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"header\\\":\\\"\\\",\\\"content\\\":\\\"\\\"},\\\"status\\\":\\\"trained\\\",\\\"image_train_status\\\":\\\"trained\\\",\\\"active_status\\\":\\\"archived\\\"}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"data\\\":{\\\"header\\\":\\\"\\\",\\\"content\\\":\\\"\\\"},\\\"status\\\":\\\"trained\\\",\\\"image_train_status\\\":\\\"trained\\\",\\\"active_status\\\":\\\"archived\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\")\n  .put(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.put(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"data\\\":{\\\"header\\\":\\\"\\\",\\\"content\\\":\\\"\\\"},\\\"status\\\":\\\"trained\\\",\\\"image_train_status\\\":\\\"trained\\\",\\\"active_status\\\":\\\"archived\\\"}\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\",\n  \"method\": \"PUT\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"data\\\":{\\\"header\\\":\\\"\\\",\\\"content\\\":\\\"\\\"},\\\"status\\\":\\\"trained\\\",\\\"image_train_status\\\":\\\"trained\\\",\\\"active_status\\\":\\\"archived\\\"}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = JSON.stringify({\n  \"data\": {\n    \"header\": \"\",\n    \"content\": \"\"\n  },\n  \"status\": \"trained\",\n  \"image_train_status\": \"trained\",\n  \"active_status\": \"archived\"\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PUT\", \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  data: {header: '', content: ''},\n  status: 'trained',\n  image_train_status: 'trained',\n  active_status: 'archived'\n}));\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    data: {header: '', content: ''},\n    status: 'trained',\n    image_train_status: 'trained',\n    active_status: 'archived'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"PUT\", \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"data\": {\n    \"header\": \"\",\n    \"content\": \"\"\n  },\n  \"status\": \"trained\",\n  \"image_train_status\": \"trained\",\n  \"active_status\": \"archived\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"data\": @{ @\"header\": @\"\", @\"content\": @\"\" },\n                              @\"status\": @\"trained\",\n                              @\"image_train_status\": @\"trained\",\n                              @\"active_status\": @\"archived\" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PUT\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"data\\\":{\\\"header\\\":\\\"\\\",\\\"content\\\":\\\"\\\"},\\\"status\\\":\\\"trained\\\",\\\"image_train_status\\\":\\\"trained\\\",\\\"active_status\\\":\\\"archived\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"data\":{\"header\":\"\",\"content\":\"\"},\"status\":\"trained\",\"image_train_status\":\"trained\",\"active_status\":\"archived\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"data\":{\"header\":\"\",\"content\":\"\"},\"status\":\"trained\",\"image_train_status\":\"trained\",\"active_status\":\"archived\"}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"data\\\":{\\\"header\\\":\\\"\\\",\\\"content\\\":\\\"\\\"},\\\"status\\\":\\\"trained\\\",\\\"image_train_status\\\":\\\"trained\\\",\\\"active_status\\\":\\\"archived\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"PUT\", \"/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\"\n\npayload = {\n    \"data\": {\n        \"header\": \"\",\n        \"content\": \"\"\n    },\n    \"status\": \"trained\",\n    \"image_train_status\": \"trained\",\n    \"active_status\": \"archived\"\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"PUT\", url, json=payload, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"data\\\":{\\\"header\\\":\\\"\\\",\\\"content\\\":\\\"\\\"},\\\"status\\\":\\\"trained\\\",\\\"image_train_status\\\":\\\"trained\\\",\\\"active_status\\\":\\\"archived\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request PUT \\\n  --url https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"data\":{\"header\":\"\",\"content\":\"\"},\"status\":\"trained\",\"image_train_status\":\"trained\",\"active_status\":\"archived\"}'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"data\": [\n    \"header\": \"\",\n    \"content\": \"\"\n  ],\n  \"status\": \"trained\",\n  \"image_train_status\": \"trained\",\n  \"active_status\": \"archived\"\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"PUT\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            },
            "delete": {
                "tags": [
                    "MyGPT Dataset"
                ],
                "summary": "Delete single document by its id from the index",
                "description": "Delete a single document under the dataset",
                "operationId": "delete_single_document_v1_gpt_datasets__dataset_id___document_id__delete",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Dataset Id",
                            "type": "string"
                        },
                        "name": "dataset_id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Document Id",
                            "type": "string"
                        },
                        "name": "document_id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Project-Key",
                            "type": "string"
                        },
                        "name": "project-key",
                        "in": "header"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string"
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Success"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accepted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unauthorized"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Forbidden"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFound"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TooManyRequests"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Csharp + Restsharp",
                        "source": "var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"
                    },
                    {
                        "lang": "Csharp + Httpclient",
                        "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Delete,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
                    },
                    {
                        "lang": "Go + Native",
                        "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
                    },
                    {
                        "lang": "Java + Okhttp",
                        "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\")\n  .delete(null)\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
                    },
                    {
                        "lang": "Java + Unirest",
                        "source": "HttpResponse<String> response = Unirest.delete(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"
                    },
                    {
                        "lang": "Javascript + Jquery",
                        "source": "const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\",\n  \"method\": \"DELETE\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
                    },
                    {
                        "lang": "Javascript + Xhr",
                        "source": "const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"DELETE\", \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"
                    },
                    {
                        "lang": "Node + Native",
                        "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
                    },
                    {
                        "lang": "Node + Request",
                        "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D',\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
                    },
                    {
                        "lang": "Node + Unirest",
                        "source": "const unirest = require(\"unirest\");\n\nconst req = unirest(\"DELETE\", \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\");\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
                    },
                    {
                        "lang": "Objc + Nsurlsession",
                        "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"DELETE\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
                    },
                    {
                        "lang": "Php + Curl",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
                    },
                    {
                        "lang": "Php + Http1",
                        "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
                    },
                    {
                        "lang": "Php + Http2",
                        "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
                    },
                    {
                        "lang": "Python + Python3",
                        "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"DELETE\", \"/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
                    },
                    {
                        "lang": "Python + Requests",
                        "source": "import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\"\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"DELETE\", url, headers=headers)\n\nprint(response.text)"
                    },
                    {
                        "lang": "Ruby + Native",
                        "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"
                    },
                    {
                        "lang": "Shell + Curl",
                        "source": "curl --request DELETE \\\n  --url https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"
                    },
                    {
                        "lang": "Swift + Nsurlsession",
                        "source": "import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"DELETE\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "Accepted": {
                "title": "Accepted",
                "required": [
                    "detail"
                ],
                "type": "object",
                "properties": {
                    "detail": {
                        "title": "Detail",
                        "type": "object",
                        "example": {
                            "response": "Accepted"
                        }
                    }
                }
            },
            "ApiMethod": {
                "title": "ApiMethod",
                "enum": [
                    "GET",
                    "POST"
                ],
                "type": "string",
                "description": "An enumeration."
            },
            "BadRequest": {
                "title": "BadRequest",
                "required": [
                    "detail"
                ],
                "type": "object",
                "properties": {
                    "detail": {
                        "title": "Detail",
                        "type": "object",
                        "example": {
                            "response": "Bad Request",
                            "error": "error details"
                        }
                    }
                }
            },
            "BehaviorRecommendSchema": {
                "title": "BehaviorRecommendSchema",
                "required": [
                    "user_id",
                    "top_n_item",
                    "interval",
                    "details"
                ],
                "type": "object",
                "properties": {
                    "user_id": {
                        "title": "User Id",
                        "minLength": 1,
                        "type": "string",
                        "example": "a0cc6beb-2909-459b-be55-62196af78ce4"
                    },
                    "member_id": {
                        "title": "Member Id",
                        "type": "string",
                        "example": "df3456tg-2909-459b-be55-62196afedf85"
                    },
                    "top_n_item": {
                        "title": "Top N Item",
                        "type": "integer",
                        "example": 100
                    },
                    "interval": {
                        "$ref": "#/components/schemas/RankType"
                    },
                    "start": {
                        "title": "Start",
                        "type": "integer",
                        "default": 0,
                        "example": 0
                    },
                    "size": {
                        "title": "Size",
                        "type": "integer",
                        "default": 10,
                        "example": 10
                    },
                    "details": {
                        "title": "Details",
                        "type": "boolean",
                        "example": true
                    }
                }
            },
            "Body_gpt_dataset_train_v1_gpt_dataset_train_post": {
                "title": "Body_gpt_dataset_train_v1_gpt_dataset_train_post",
                "required": [
                    "dataset_id",
                    "train_type"
                ],
                "type": "object",
                "properties": {
                    "dataset_id": {
                        "title": "Dataset Id",
                        "type": "string"
                    },
                    "train_type": {
                        "$ref": "#/components/schemas/DataSetTrainType"
                    }
                }
            },
            "Body_image_gpt_ask_v1_gpt_ask_vision_post": {
                "title": "Body_image_gpt_ask_v1_gpt_ask_vision_post",
                "required": [
                    "image",
                    "query",
                    "user_id",
                    "intro",
                    "model"
                ],
                "type": "object",
                "properties": {
                    "image": {
                        "title": "Image",
                        "type": "string",
                        "format": "binary"
                    },
                    "query": {
                        "title": "Query",
                        "minLength": 1,
                        "type": "string"
                    },
                    "user_id": {
                        "title": "User Id",
                        "minLength": 1,
                        "type": "string"
                    },
                    "member_id": {
                        "title": "Member Id",
                        "type": "string"
                    },
                    "intro": {
                        "title": "Intro",
                        "minLength": 1,
                        "type": "string"
                    },
                    "model": {
                        "$ref": "#/components/schemas/GPTVisionModel"
                    },
                    "system": {
                        "title": "System",
                        "type": "string"
                    },
                    "search_max_token": {
                        "title": "Search Max Token",
                        "type": "integer",
                        "default": 2500
                    },
                    "is_image_context_enabled": {
                        "title": "Is Image Context Enabled",
                        "type": "boolean",
                        "default": true
                    },
                    "temperature": {
                        "title": "Temperature",
                        "maximum": 2,
                        "minimum": 0,
                        "type": "number",
                        "default": 0
                    },
                    "top_p": {
                        "title": "Top P",
                        "maximum": 1,
                        "minimum": 0,
                        "type": "number",
                        "default": 1
                    },
                    "frequency_penalty": {
                        "title": "Frequency Penalty",
                        "maximum": 2,
                        "minimum": 0,
                        "type": "number",
                        "default": 0
                    },
                    "presence_penalty": {
                        "title": "Presence Penalty",
                        "maximum": 2,
                        "minimum": 0,
                        "type": "number",
                        "default": 0
                    },
                    "stop": {
                        "title": "Stop",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "default": [
                            "AI:",
                            "Human:"
                        ]
                    }
                }
            },
            "Body_image_search_v1_images_search_post": {
                "title": "Body_image_search_v1_images_search_post",
                "required": [
                    "user_id",
                    "image",
                    "details"
                ],
                "type": "object",
                "properties": {
                    "user_id": {
                        "title": "User Id",
                        "type": "string"
                    },
                    "member_id": {
                        "title": "Member Id",
                        "type": "string"
                    },
                    "image": {
                        "title": "Image",
                        "type": "string",
                        "format": "binary"
                    },
                    "start": {
                        "title": "Start",
                        "type": "integer"
                    },
                    "size": {
                        "title": "Size",
                        "type": "integer"
                    },
                    "details": {
                        "title": "Details",
                        "type": "boolean"
                    }
                }
            },
            "Body_post_browse_csv_v1_items_browse_save_post": {
                "title": "Body_post_browse_csv_v1_items_browse_save_post",
                "required": [
                    "file"
                ],
                "type": "object",
                "properties": {
                    "file": {
                        "title": "File",
                        "type": "string",
                        "format": "binary"
                    }
                }
            },
            "Body_post_gpt_csv_v1_gpt_save_post": {
                "title": "Body_post_gpt_csv_v1_gpt_save_post",
                "required": [
                    "file_type",
                    "storage_type",
                    "file"
                ],
                "type": "object",
                "properties": {
                    "file_type": {
                        "title": "File Type",
                        "type": "string"
                    },
                    "storage_type": {
                        "title": "Storage Type",
                        "type": "string"
                    },
                    "file": {
                        "title": "File",
                        "type": "string",
                        "format": "binary"
                    }
                }
            },
            "Body_post_gpt_dataset_v1_gpt_datasets_post": {
                "title": "Body_post_gpt_dataset_v1_gpt_datasets_post",
                "required": [
                    "name",
                    "idx_column"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "title": "Name",
                        "type": "string",
                        "description": "Name of your dataset"
                    },
                    "idx_column": {
                        "title": "Idx Column",
                        "type": "string",
                        "description": "Name of your unique id column."
                    },
                    "is_idx_fillup_if_empty": {
                        "title": "Is Idx Fillup If Empty",
                        "type": "boolean",
                        "default": false
                    },
                    "secondary_idx_column": {
                        "title": "Secondary Idx Column",
                        "type": "string"
                    },
                    "image_url_column": {
                        "title": "Image Url Column",
                        "type": "string",
                        "description": "The column name containing data unit's image url"
                    },
                    "description": {
                        "title": "Description",
                        "type": "string",
                        "description": "Decribe your dataset"
                    },
                    "dataset_file": {
                        "title": "Dataset File",
                        "type": "string",
                        "description": "Upload data in a **csv or json** file",
                        "format": "binary"
                    }
                }
            },
            "Body_post_items_csv_v1_items_save_post": {
                "title": "Body_post_items_csv_v1_items_save_post",
                "required": [
                    "file"
                ],
                "type": "object",
                "properties": {
                    "file": {
                        "title": "File",
                        "type": "string",
                        "format": "binary"
                    }
                }
            },
            "Body_post_purchase_csv_v1_items_purchase_save_post": {
                "title": "Body_post_purchase_csv_v1_items_purchase_save_post",
                "required": [
                    "file"
                ],
                "type": "object",
                "properties": {
                    "file": {
                        "title": "File",
                        "type": "string",
                        "format": "binary"
                    }
                }
            },
            "Body_post_rating_csv_v1_items_rating_save_post": {
                "title": "Body_post_rating_csv_v1_items_rating_save_post",
                "required": [
                    "file"
                ],
                "type": "object",
                "properties": {
                    "file": {
                        "title": "File",
                        "type": "string",
                        "format": "binary"
                    }
                }
            },
            "Body_post_user_csv_v1_users_save_post": {
                "title": "Body_post_user_csv_v1_users_save_post",
                "required": [
                    "file"
                ],
                "type": "object",
                "properties": {
                    "file": {
                        "title": "File",
                        "type": "string",
                        "format": "binary"
                    }
                }
            },
            "Body_update_gpt_dataset_data_v1_gpt_datasets__dataset_id__put": {
                "title": "Body_update_gpt_dataset_data_v1_gpt_datasets__dataset_id__put",
                "type": "object",
                "properties": {
                    "name": {
                        "title": "Name",
                        "type": "string",
                        "description": "Name of your dataset"
                    },
                    "is_idx_fillup_if_empty": {
                        "title": "Is Idx Fillup If Empty",
                        "type": "boolean",
                        "description": "Should we fill up empty index values?"
                    },
                    "secondary_idx_column": {
                        "title": "Secondary Idx Column",
                        "type": "string"
                    },
                    "image_url_column": {
                        "title": "Image Url Column",
                        "type": "string",
                        "description": "The column name containing data unit's image url"
                    },
                    "description": {
                        "title": "Description",
                        "type": "string",
                        "description": "Decribe your dataset"
                    },
                    "dataset_file": {
                        "title": "Dataset File",
                        "type": "string",
                        "description": "Upload data in a **csv or json** file",
                        "format": "binary"
                    }
                }
            },
            "BrowseMap": {
                "title": "BrowseMap",
                "required": [
                    "user_id",
                    "item_id",
                    "date"
                ],
                "type": "object",
                "properties": {
                    "user_id": {
                        "title": "User Id",
                        "minLength": 1,
                        "type": "string",
                        "example": "user_id"
                    },
                    "member_id": {
                        "title": "Member Id",
                        "minLength": 1,
                        "type": "string",
                        "example": "member_id"
                    },
                    "item_id": {
                        "title": "Item Id",
                        "minLength": 1,
                        "type": "string",
                        "example": "item_id"
                    },
                    "date": {
                        "title": "Date",
                        "minLength": 1,
                        "type": "string",
                        "example": "browsed_at"
                    }
                }
            },
            "BrowseSchema": {
                "title": "BrowseSchema",
                "required": [
                    "user_id",
                    "item_id"
                ],
                "type": "object",
                "properties": {
                    "user_id": {
                        "title": "User Id",
                        "minLength": 1,
                        "type": "string",
                        "example": "a0cc6beb-2909-459b-be55-62196af78ce4"
                    },
                    "member_id": {
                        "title": "Member Id",
                        "type": "string",
                        "example": "df3456tg-2909-459b-be55-62196afedf85"
                    },
                    "item_id": {
                        "title": "Item Id",
                        "minLength": 1,
                        "type": "string",
                        "example": "1000764491"
                    }
                }
            },
            "Categories": {
                "title": "Categories",
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "title": "Name",
                        "type": "string"
                    },
                    "separator": {
                        "title": "Separator",
                        "type": "string"
                    }
                }
            },
            "CustomParameters": {
                "title": "CustomParameters",
                "required": [
                    "name",
                    "data_type"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "title": "Name",
                        "type": "string"
                    },
                    "data_type": {
                        "$ref": "#/components/schemas/DataType"
                    }
                }
            },
            "DataSetTrainType": {
                "title": "DataSetTrainType",
                "enum": [
                    "text",
                    "image"
                ],
                "type": "string",
                "description": "An enumeration."
            },
            "DataType": {
                "title": "DataType",
                "enum": [
                    "STR",
                    "INT",
                    "FLOAT"
                ],
                "type": "string",
                "description": "An enumeration."
            },
            "DocActiveStatus": {
                "title": "DocActiveStatus",
                "enum": [
                    "archived",
                    "active"
                ],
                "type": "string",
                "description": "An enumeration."
            },
            "FeedbcakType": {
                "title": "FeedbcakType",
                "enum": [
                    "positive",
                    "negative"
                ],
                "type": "string",
                "description": "An enumeration."
            },
            "Forbidden": {
                "title": "Forbidden",
                "required": [
                    "detail"
                ],
                "type": "object",
                "properties": {
                    "detail": {
                        "title": "Detail",
                        "type": "object",
                        "example": {
                            "response": "Forbidden",
                            "error": "error details"
                        }
                    }
                }
            },
            "GPTConversationFeedbackSchema": {
                "title": "GPTConversationFeedbackSchema",
                "required": [
                    "conversation_id",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "conversation_id": {
                        "title": "Conversation Id",
                        "minLength": 1,
                        "type": "string",
                        "example": "a0cc6beb-2909-459b-be55-62196af78ce4"
                    },
                    "message": {
                        "title": "Message",
                        "minLength": 1,
                        "type": "string",
                        "example": "Tell us your experience of the GPT response"
                    },
                    "type": {
                        "$ref": "#/components/schemas/FeedbcakType"
                    }
                }
            },
            "GPTDocumentsDeleteSchema": {
                "title": "GPTDocumentsDeleteSchema",
                "type": "object",
                "properties": {
                    "ids": {
                        "title": "Ids",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "is_delete_all": {
                        "title": "Is Delete All",
                        "type": "boolean",
                        "default": false
                    }
                }
            },
            "GPTDocumentsListSchema": {
                "title": "GPTDocumentsListSchema",
                "required": [
                    "documents"
                ],
                "type": "object",
                "properties": {
                    "documents": {
                        "title": "Documents",
                        "type": "array",
                        "items": {
                            "type": "object"
                        }
                    }
                }
            },
            "GPTDocumentsUpdateSchema": {
                "title": "GPTDocumentsUpdateSchema",
                "required": [
                    "updates"
                ],
                "type": "object",
                "properties": {
                    "ids": {
                        "title": "Ids",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "idx-1",
                            "idx-2"
                        ]
                    },
                    "is_update_all": {
                        "title": "Is Update All",
                        "type": "boolean",
                        "default": false
                    },
                    "updates": {
                        "title": "Updates",
                        "type": "array",
                        "items": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        },
                        "example": [
                            {
                                "field_name": "active_status",
                                "value": "active"
                            },
                            {
                                "field_name": "status",
                                "value": "untrained"
                            },
                            {
                                "field_name": "image_train_status",
                                "value": "trained"
                            }
                        ]
                    }
                }
            },
            "GPTImageTrainStatus": {
                "title": "GPTImageTrainStatus",
                "enum": [
                    "trained",
                    "untrained",
                    "failed"
                ],
                "type": "string",
                "description": "An enumeration."
            },
            "GPTModel": {
                "title": "GPTModel",
                "enum": [
                    "gpt-3.5-turbo-0613",
                    "text-davinci-003",
                    "gpt-3.5-turbo-instruct",
                    "gpt-3.5-turbo-16k-0613",
                    "gpt-3.5-turbo-1106",
                    "gpt-4-0613",
                    "gpt-4-1106-preview",
                    "gpt-4-0125-preview"
                ],
                "type": "string",
                "description": "An enumeration."
            },
            "GPTRequestSchema": {
                "title": "GPTRequestSchema",
                "required": [
                    "user_id",
                    "query",
                    "intro",
                    "model",
                    "storage"
                ],
                "type": "object",
                "properties": {
                    "user_id": {
                        "title": "User Id",
                        "minLength": 1,
                        "type": "string",
                        "example": "a0cc6beb-2909-459b-be55-62196af78ce4"
                    },
                    "member_id": {
                        "title": "Member Id",
                        "type": "string",
                        "example": "df3456tg-2909-459b-be55-62196afedf85"
                    },
                    "query": {
                        "title": "Query",
                        "minLength": 1,
                        "type": "string",
                        "example": "What is life?"
                    },
                    "intro": {
                        "title": "Intro",
                        "minLength": 1,
                        "type": "string",
                        "example": "Share a little context about the question"
                    },
                    "system": {
                        "title": "System",
                        "type": "string",
                        "example": "You are an expert on ..."
                    },
                    "model": {
                        "$ref": "#/components/schemas/GPTModel"
                    },
                    "storage": {
                        "$ref": "#/components/schemas/StorageType"
                    },
                    "search_max_token": {
                        "title": "Search Max Token",
                        "type": "integer",
                        "default": 2500,
                        "example": 2500
                    },
                    "temperature": {
                        "title": "Temperature",
                        "maximum": 2,
                        "minimum": 0,
                        "type": "number",
                        "default": 0,
                        "example": 0
                    },
                    "top_p": {
                        "title": "Top P",
                        "maximum": 1,
                        "minimum": 0,
                        "type": "number",
                        "default": 1,
                        "example": 1
                    },
                    "frequency_penalty": {
                        "title": "Frequency Penalty",
                        "maximum": 2,
                        "minimum": 0,
                        "type": "number",
                        "default": 0,
                        "example": 0
                    },
                    "presence_penalty": {
                        "title": "Presence Penalty",
                        "maximum": 2,
                        "minimum": 0,
                        "type": "number",
                        "default": 0,
                        "example": 0
                    },
                    "stop": {
                        "title": "Stop",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "default": [],
                        "example": [
                            "AI:",
                            "Human:"
                        ]
                    },
                    "preferred_content": {
                        "title": "Preferred Content",
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "example": {
                            "dataset_id": "1234"
                        }
                    }
                }
            },
            "GPTSearchSchema": {
                "title": "GPTSearchSchema",
                "required": [
                    "user_id",
                    "message",
                    "type",
                    "storage"
                ],
                "type": "object",
                "properties": {
                    "user_id": {
                        "title": "User Id",
                        "minLength": 1,
                        "type": "string",
                        "example": "a0cc6beb-2909-459b-be55-62196af78ce4"
                    },
                    "member_id": {
                        "title": "Member Id",
                        "type": "string",
                        "example": "df3456tg-2909-459b-be55-62196afedf85"
                    },
                    "message": {
                        "title": "Message",
                        "minLength": 1,
                        "type": "string",
                        "example": "What is life?"
                    },
                    "type": {
                        "$ref": "#/components/schemas/GPTSearchType"
                    },
                    "search_size": {
                        "title": "Search Size",
                        "type": "integer",
                        "default": 1000,
                        "example": 1000
                    },
                    "start": {
                        "title": "Start",
                        "type": "integer",
                        "default": 0,
                        "example": 0
                    },
                    "size": {
                        "title": "Size",
                        "type": "integer",
                        "default": 10,
                        "example": 10
                    },
                    "price_lower": {
                        "title": "Price Lower",
                        "type": "number",
                        "default": 0,
                        "example": 1
                    },
                    "price_upper": {
                        "title": "Price Upper",
                        "type": "number",
                        "default": 0,
                        "example": 10000
                    },
                    "categories": {
                        "title": "Categories",
                        "type": "array",
                        "items": {
                            "minLength": 1,
                            "type": "string"
                        },
                        "example": [
                            "category1",
                            "category2"
                        ]
                    },
                    "flags": {
                        "title": "Flags",
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "example": {
                            "flag1": true,
                            "flag2": false
                        }
                    },
                    "sort": {
                        "title": "Sort",
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "example": {
                            "column_name": "asc / desc"
                        }
                    },
                    "storage": {
                        "$ref": "#/components/schemas/StorageType"
                    },
                    "dynamic_filtering": {
                        "title": "Dynamic Filtering",
                        "type": "array",
                        "items": {
                            "minLength": 1,
                            "type": "string"
                        },
                        "example": [
                            "column1",
                            "column2"
                        ]
                    },
                    "is_keyword_enabled": {
                        "title": "Is Keyword Enabled",
                        "type": "boolean",
                        "default": true,
                        "example": true
                    },
                    "details": {
                        "title": "Details",
                        "type": "boolean",
                        "default": false,
                        "example": false
                    }
                }
            },
            "GPTSearchType": {
                "title": "GPTSearchType",
                "enum": [
                    "individual",
                    "group"
                ],
                "type": "string",
                "description": "An enumeration."
            },
            "GPTSettingsSchema": {
                "title": "GPTSettingsSchema",
                "required": [
                    "model"
                ],
                "type": "object",
                "properties": {
                    "model": {
                        "$ref": "#/components/schemas/GPTModel"
                    },
                    "bot_mode_strict": {
                        "title": "Bot Mode Strict",
                        "type": "boolean",
                        "default": false,
                        "example": false
                    },
                    "system": {
                        "title": "System",
                        "type": "string",
                        "example": "You are an expert on ..."
                    }
                }
            },
            "GPTSettingsUpdateSchema": {
                "title": "GPTSettingsUpdateSchema",
                "type": "object",
                "properties": {
                    "model": {
                        "$ref": "#/components/schemas/GPTModel"
                    },
                    "bot_mode_strict": {
                        "title": "Bot Mode Strict",
                        "type": "boolean",
                        "example": false
                    },
                    "system": {
                        "title": "System",
                        "type": "string",
                        "example": "You are an expert on ..."
                    }
                }
            },
            "GPTSingleDocumentUpdateSchema": {
                "title": "GPTSingleDocumentUpdateSchema",
                "type": "object",
                "properties": {
                    "data": {
                        "title": "Data",
                        "type": "object",
                        "example": {
                            "header": "",
                            "content": ""
                        }
                    },
                    "status": {
                        "$ref": "#/components/schemas/GPTTextTrainStatus"
                    },
                    "image_train_status": {
                        "$ref": "#/components/schemas/GPTImageTrainStatus"
                    },
                    "active_status": {
                        "$ref": "#/components/schemas/DocActiveStatus"
                    }
                }
            },
            "GPTTextTrainStatus": {
                "title": "GPTTextTrainStatus",
                "enum": [
                    "trained",
                    "untrained",
                    "failed"
                ],
                "type": "string",
                "description": "An enumeration."
            },
            "GPTVisionModel": {
                "title": "GPTVisionModel",
                "enum": [
                    "gpt-4-vision-preview"
                ],
                "type": "string",
                "description": "An enumeration."
            },
            "HTTPValidationError": {
                "title": "HTTPValidationError",
                "type": "object",
                "properties": {
                    "detail": {
                        "title": "Detail",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ValidationError"
                        }
                    }
                }
            },
            "ImageRecommendSchema": {
                "title": "ImageRecommendSchema",
                "required": [
                    "user_id",
                    "item_id",
                    "details"
                ],
                "type": "object",
                "properties": {
                    "user_id": {
                        "title": "User Id",
                        "minLength": 1,
                        "type": "string",
                        "example": "a0cc6beb-2909-459b-be55-62196af78ce4"
                    },
                    "member_id": {
                        "title": "Member Id",
                        "type": "string",
                        "example": "df3456tg-2909-459b-be55-62196afedf85"
                    },
                    "item_id": {
                        "title": "Item Id",
                        "minLength": 1,
                        "type": "string",
                        "example": "1000757666"
                    },
                    "item_details": {
                        "$ref": "#/components/schemas/ItemDetails"
                    },
                    "details": {
                        "title": "Details",
                        "type": "boolean",
                        "example": true
                    }
                }
            },
            "ImageTrainSchema": {
                "title": "ImageTrainSchema",
                "type": "object",
                "properties": {
                    "start_date": {
                        "title": "Start Date",
                        "type": "string",
                        "example": "2021-08-05"
                    },
                    "end_date": {
                        "title": "End Date",
                        "type": "string",
                        "example": "2021-08-06"
                    }
                }
            },
            "IndexDeleteSchema": {
                "title": "IndexDeleteSchema",
                "required": [
                    "index_type"
                ],
                "type": "object",
                "properties": {
                    "index_type": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/IndexType"
                            }
                        ],
                        "example": "Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper"
                    }
                }
            },
            "IndexType": {
                "title": "IndexType",
                "enum": [
                    "items",
                    "image_features",
                    "browse",
                    "purchase",
                    "ratings",
                    "search",
                    "settings",
                    "stats",
                    "user",
                    "tasks",
                    "logs",
                    "gpt_dataset",
                    "gpt_dataset_meta",
                    "questionnaire",
                    "questionnaire_mapper"
                ],
                "type": "string",
                "description": "An enumeration."
            },
            "ItemApiSaveSchema": {
                "title": "ItemApiSaveSchema",
                "required": [
                    "url",
                    "method",
                    "response_items_key"
                ],
                "type": "object",
                "properties": {
                    "url": {
                        "title": "Url",
                        "maxLength": 2083,
                        "minLength": 1,
                        "type": "string",
                        "format": "uri",
                        "example": "https://api.doozie.ai/v1/api/items/search"
                    },
                    "method": {
                        "$ref": "#/components/schemas/ApiMethod"
                    },
                    "headers": {
                        "title": "Headers",
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "example": {
                            "parameter_one": "value_one",
                            "parameter_two": "value_two",
                            "...": "..."
                        }
                    },
                    "query_parameters": {
                        "title": "Query Parameters",
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "example": {
                            "parameter_one": "value_one",
                            "parameter_two": "value_two",
                            "...": "..."
                        }
                    },
                    "body_parameters": {
                        "title": "Body Parameters",
                        "type": "object",
                        "example": {
                            "parameter_one": "value_one",
                            "parameter_two": "value_two",
                            "...": "..."
                        }
                    },
                    "response_items_key": {
                        "title": "Response Items Key",
                        "type": "string",
                        "example": "Items"
                    },
                    "response_item_key": {
                        "title": "Response Item Key",
                        "type": "string",
                        "example": "Item"
                    }
                }
            },
            "ItemDetails": {
                "title": "ItemDetails",
                "type": "object",
                "properties": {
                    "image_url": {
                        "title": "Image Url",
                        "maxLength": 65536,
                        "minLength": 1,
                        "type": "string",
                        "format": "uri",
                        "default": "https://picsum.photos/200/300"
                    },
                    "price": {
                        "title": "Price",
                        "type": "number",
                        "example": 8525
                    },
                    "category": {
                        "title": "Category",
                        "type": "array",
                        "items": {
                            "minLength": 1,
                            "type": "string"
                        },
                        "example": [
                            "304904",
                            "304029",
                            "302536"
                        ]
                    }
                }
            },
            "ItemNearbySchema": {
                "title": "ItemNearbySchema",
                "required": [
                    "item_id",
                    "radius",
                    "filters",
                    "excludes"
                ],
                "type": "object",
                "properties": {
                    "item_id": {
                        "title": "Item Id",
                        "minLength": 1,
                        "type": "string",
                        "example": "1000757666"
                    },
                    "radius": {
                        "title": "Radius",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Radius"
                            }
                        ],
                        "example": {
                            "d_from": 1,
                            "d_to": 900
                        }
                    },
                    "filters": {
                        "title": "Filters",
                        "type": "array",
                        "items": {
                            "minLength": 1,
                            "type": "string"
                        },
                        "example": [
                            "レストラン"
                        ]
                    },
                    "excludes": {
                        "title": "Excludes",
                        "type": "array",
                        "items": {
                            "minLength": 1,
                            "type": "string"
                        },
                        "example": [
                            "宿泊施設"
                        ]
                    },
                    "search_size": {
                        "title": "Search Size",
                        "type": "integer",
                        "default": 1000,
                        "example": 1000
                    },
                    "keywords_filter": {
                        "title": "Keywords Filter",
                        "type": "boolean",
                        "default": false,
                        "example": false
                    },
                    "details": {
                        "title": "Details",
                        "type": "boolean",
                        "default": true,
                        "example": true
                    },
                    "start": {
                        "title": "Start",
                        "type": "integer",
                        "default": 0,
                        "example": 0
                    },
                    "size": {
                        "title": "Size",
                        "type": "integer",
                        "default": 10,
                        "example": 10
                    }
                }
            },
            "ItemRecommendSchema": {
                "title": "ItemRecommendSchema",
                "required": [
                    "user_id",
                    "item_id",
                    "details"
                ],
                "type": "object",
                "properties": {
                    "user_id": {
                        "title": "User Id",
                        "minLength": 1,
                        "type": "string",
                        "example": "a0cc6beb-2909-459b-be55-62196af78ce4"
                    },
                    "member_id": {
                        "title": "Member Id",
                        "type": "string",
                        "example": "df3456tg-2909-459b-be55-62196afedf85"
                    },
                    "item_id": {
                        "title": "Item Id",
                        "minLength": 1,
                        "type": "string",
                        "example": "1000757666"
                    },
                    "details": {
                        "title": "Details",
                        "type": "boolean",
                        "example": true
                    }
                }
            },
            "ItemSearchByIdSchema": {
                "title": "ItemSearchByIdSchema",
                "required": [
                    "ids"
                ],
                "type": "object",
                "properties": {
                    "ids": {
                        "title": "Ids",
                        "type": "array",
                        "items": {
                            "minLength": 1,
                            "type": "string"
                        },
                        "example": [
                            "thones:10001072",
                            "menz-style:10017133"
                        ]
                    }
                }
            },
            "KeysSchema": {
                "title": "KeysSchema",
                "required": [
                    "keys"
                ],
                "type": "object",
                "properties": {
                    "keys": {
                        "title": "Keys",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "Map": {
                "title": "Map",
                "required": [
                    "item_id",
                    "title",
                    "availability",
                    "price",
                    "categories",
                    "flag"
                ],
                "type": "object",
                "properties": {
                    "item_id": {
                        "title": "Item Id",
                        "minLength": 1,
                        "type": "string",
                        "example": "item_id"
                    },
                    "title": {
                        "title": "Title",
                        "minLength": 1,
                        "type": "string",
                        "example": "title"
                    },
                    "second_title": {
                        "title": "Second Title",
                        "minLength": 1,
                        "type": "string"
                    },
                    "third_title": {
                        "title": "Third Title",
                        "minLength": 1,
                        "type": "string"
                    },
                    "fourth_title": {
                        "title": "Fourth Title",
                        "minLength": 1,
                        "type": "string"
                    },
                    "availability": {
                        "title": "Availability",
                        "minLength": 1,
                        "type": "string",
                        "example": "availability"
                    },
                    "description": {
                        "title": "Description",
                        "minLength": 1,
                        "type": "string"
                    },
                    "image_url": {
                        "title": "Image Url",
                        "minLength": 1,
                        "type": "string"
                    },
                    "image_url_type": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/UrlType"
                            }
                        ],
                        "example": "STR or LIST_STR or LIST_DICT or DICT"
                    },
                    "item_url": {
                        "title": "Item Url",
                        "minLength": 1,
                        "type": "string"
                    },
                    "price": {
                        "title": "Price",
                        "minLength": 1,
                        "type": "string",
                        "example": "price"
                    },
                    "categories": {
                        "title": "Categories",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Categories"
                        },
                        "example": [
                            {
                                "name": "category_1",
                                "separator": "_"
                            },
                            {
                                "name": "category_2",
                                "separator": ""
                            }
                        ]
                    },
                    "flag": {
                        "title": "Flag",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "condition"
                        ]
                    },
                    "average_rating": {
                        "title": "Average Rating",
                        "minLength": 1,
                        "type": "string"
                    },
                    "user_ratings_total": {
                        "title": "User Ratings Total",
                        "minLength": 1,
                        "type": "string"
                    },
                    "custom": {
                        "title": "Custom",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CustomParameters"
                        },
                        "example": [
                            {
                                "name": "colum3",
                                "data_type": "FLOAT"
                            },
                            {
                                "name": "column4",
                                "data_type": "INT"
                            }
                        ]
                    },
                    "item_nearby_calculation": {
                        "title": "Item Nearby Calculation",
                        "type": "boolean",
                        "default": false,
                        "example": false
                    },
                    "keywords_group_by": {
                        "title": "Keywords Group By",
                        "minLength": 1,
                        "type": "string"
                    },
                    "gpt_enabled": {
                        "title": "Gpt Enabled",
                        "type": "boolean",
                        "default": false,
                        "example": false
                    }
                },
                "description": "If any changes are made here, make sure to update the function named\ncheck_file_header in file client/app/models/item.py."
            },
            "MapperBrowseSchema": {
                "title": "MapperBrowseSchema",
                "required": [
                    "browse_key_map"
                ],
                "type": "object",
                "properties": {
                    "browse_key_map": {
                        "$ref": "#/components/schemas/BrowseMap"
                    }
                }
            },
            "MapperInsertSchema": {
                "title": "MapperInsertSchema",
                "required": [
                    "questions",
                    "prompt_sections",
                    "prompt_order",
                    "gpt_settings"
                ],
                "type": "object",
                "properties": {
                    "questions": {
                        "title": "Questions",
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/components/schemas/MapperQuestionSchema"
                            }
                        },
                        "example": {
                            "skincare_history": {
                                "q1": {
                                    "mapper": {
                                        "any": {
                                            "age": ""
                                        }
                                    }
                                },
                                "q2": {
                                    "mapper": {
                                        "a": {
                                            "gender": "male"
                                        },
                                        "b": {
                                            "gender": "female"
                                        }
                                    }
                                },
                                "q7": {
                                    "mapper": {
                                        "~": {
                                            "a|b|c": {
                                                "exclude": [
                                                    "Retinol"
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "exclusive": {
                        "title": "Exclusive",
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "example": {
                            "prompt_key-1": "prompt_key-2"
                        }
                    },
                    "prompt_sections": {
                        "title": "Prompt Sections",
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "example": {
                            "skincare_history": "I am {age} years old {gender}",
                            "skin_type": "My skin type is {skin_type}",
                            "include": "include these category {include}"
                        }
                    },
                    "prompt_order": {
                        "title": "Prompt Order",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "skincare_history",
                            "include",
                            "skin_type"
                        ]
                    },
                    "gpt_settings": {
                        "$ref": "#/components/schemas/QuestionnaireGPTSchema"
                    }
                }
            },
            "MapperPurchaseSchema": {
                "title": "MapperPurchaseSchema",
                "required": [
                    "purchase_key_map"
                ],
                "type": "object",
                "properties": {
                    "purchase_key_map": {
                        "$ref": "#/components/schemas/PurchaseMap"
                    }
                }
            },
            "MapperQuestionSchema": {
                "title": "MapperQuestionSchema",
                "required": [
                    "mapper"
                ],
                "type": "object",
                "properties": {
                    "mapper": {
                        "title": "Mapper",
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        }
                    }
                }
            },
            "MapperRatingSchema": {
                "title": "MapperRatingSchema",
                "required": [
                    "rating_key_map"
                ],
                "type": "object",
                "properties": {
                    "rating_key_map": {
                        "$ref": "#/components/schemas/RatingMap"
                    }
                }
            },
            "MapperSchema": {
                "title": "MapperSchema",
                "required": [
                    "key_map"
                ],
                "type": "object",
                "properties": {
                    "key_map": {
                        "$ref": "#/components/schemas/Map"
                    }
                }
            },
            "MapperUpdateSchema": {
                "title": "MapperUpdateSchema",
                "type": "object",
                "properties": {
                    "questions": {
                        "title": "Questions",
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/components/schemas/MapperQuestionSchema"
                            }
                        },
                        "example": {
                            "skincare_history": {
                                "q1": {
                                    "mapper": {
                                        "any": {
                                            "age": ""
                                        }
                                    }
                                },
                                "q2": {
                                    "mapper": {
                                        "a": {
                                            "gender": "male"
                                        },
                                        "b": {
                                            "gender": "female"
                                        }
                                    }
                                },
                                "q7": {
                                    "mapper": {
                                        "~": {
                                            "a|b|c": {
                                                "exclude": [
                                                    "Retinol"
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "exclusive": {
                        "title": "Exclusive",
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "example": {
                            "prompt_key-1": "prompt_key-2"
                        }
                    },
                    "prompt_sections": {
                        "title": "Prompt Sections",
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "example": {
                            "skincare_history": "I am {age} years old {gender}",
                            "skin_type": "My skin type is {skin_type}",
                            "include": "include these category {include}"
                        }
                    },
                    "prompt_order": {
                        "title": "Prompt Order",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "skincare_history",
                            "include",
                            "skin_type"
                        ]
                    },
                    "gpt_settings": {
                        "$ref": "#/components/schemas/QuestionnaireGPTOptionalSchema"
                    }
                }
            },
            "MapperUserSchema": {
                "title": "MapperUserSchema",
                "required": [
                    "user_key_map"
                ],
                "type": "object",
                "properties": {
                    "user_key_map": {
                        "$ref": "#/components/schemas/UserMap"
                    }
                }
            },
            "NotFound": {
                "title": "NotFound",
                "required": [
                    "detail"
                ],
                "type": "object",
                "properties": {
                    "detail": {
                        "title": "Detail",
                        "type": "object",
                        "example": {
                            "response": "Unauthorized",
                            "error": "error details"
                        }
                    }
                }
            },
            "PurchaseItems": {
                "title": "PurchaseItems",
                "required": [
                    "item_id",
                    "price",
                    "quantity"
                ],
                "type": "object",
                "properties": {
                    "item_id": {
                        "title": "Item Id",
                        "minLength": 1,
                        "type": "string"
                    },
                    "price": {
                        "title": "Price",
                        "type": "number"
                    },
                    "quantity": {
                        "title": "Quantity",
                        "type": "integer"
                    }
                }
            },
            "PurchaseMap": {
                "title": "PurchaseMap",
                "required": [
                    "user_id",
                    "item_id",
                    "price",
                    "quantity",
                    "date"
                ],
                "type": "object",
                "properties": {
                    "user_id": {
                        "title": "User Id",
                        "minLength": 1,
                        "type": "string",
                        "example": "user_id"
                    },
                    "member_id": {
                        "title": "Member Id",
                        "minLength": 1,
                        "type": "string",
                        "example": "member_id"
                    },
                    "item_id": {
                        "title": "Item Id",
                        "minLength": 1,
                        "type": "string",
                        "example": "item_id"
                    },
                    "price": {
                        "title": "Price",
                        "minLength": 1,
                        "type": "string",
                        "example": "price"
                    },
                    "quantity": {
                        "title": "Quantity",
                        "minLength": 1,
                        "type": "string",
                        "example": "quantity"
                    },
                    "date": {
                        "title": "Date",
                        "minLength": 1,
                        "type": "string",
                        "example": "purchased_at"
                    }
                }
            },
            "PurchaseSchema": {
                "title": "PurchaseSchema",
                "required": [
                    "user_id",
                    "item_list"
                ],
                "type": "object",
                "properties": {
                    "user_id": {
                        "title": "User Id",
                        "minLength": 1,
                        "type": "string",
                        "example": "a0cc6beb-2909-459b-be55-62196af78ce4"
                    },
                    "member_id": {
                        "title": "Member Id",
                        "type": "string",
                        "example": "df3456tg-2909-459b-be55-62196afedf85"
                    },
                    "item_list": {
                        "title": "Item List",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PurchaseItems"
                        },
                        "example": [
                            {
                                "item_id": "1000757666",
                                "price": 5000,
                                "quantity": 1
                            },
                            {
                                "item_id": "1000764491",
                                "price": 400,
                                "quantity": 7
                            }
                        ]
                    }
                }
            },
            "QuestionSchema": {
                "title": "QuestionSchema",
                "required": [
                    "question",
                    "options"
                ],
                "type": "object",
                "properties": {
                    "question": {
                        "title": "Question",
                        "minLength": 1,
                        "type": "string",
                        "example": "what is your favorite color?"
                    },
                    "type": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/QuestionType"
                            }
                        ],
                        "example": "radio/checkbox/free text....."
                    },
                    "options": {
                        "title": "Options",
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "example": {
                            "a": "value 1",
                            "b": "Value 2",
                            "c": "Value 3"
                        }
                    }
                }
            },
            "QuestionType": {
                "title": "QuestionType",
                "enum": [
                    "radio",
                    "checkbox",
                    "text"
                ],
                "type": "string",
                "description": "An enumeration."
            },
            "QuestionnaireGPTOptionalSchema": {
                "title": "QuestionnaireGPTOptionalSchema",
                "type": "object",
                "properties": {
                    "model": {
                        "$ref": "#/components/schemas/GPTModel"
                    },
                    "search_max_token": {
                        "title": "Search Max Token",
                        "type": "integer",
                        "default": 2500,
                        "example": 2500
                    },
                    "intro": {
                        "title": "Intro",
                        "minLength": 1,
                        "type": "string",
                        "example": "Share a little context about the question"
                    },
                    "system": {
                        "title": "System",
                        "type": "string",
                        "example": "You are an expert on ..."
                    },
                    "temperature": {
                        "title": "Temperature",
                        "maximum": 2,
                        "minimum": 0,
                        "type": "number",
                        "default": 0,
                        "example": 0
                    },
                    "top_p": {
                        "title": "Top P",
                        "maximum": 1,
                        "minimum": 0,
                        "type": "number",
                        "default": 1,
                        "example": 1
                    },
                    "frequency_penalty": {
                        "title": "Frequency Penalty",
                        "maximum": 2,
                        "minimum": 0,
                        "type": "number",
                        "default": 0,
                        "example": 0
                    },
                    "presence_penalty": {
                        "title": "Presence Penalty",
                        "maximum": 2,
                        "minimum": 0,
                        "type": "number",
                        "default": 0,
                        "example": 0
                    },
                    "stop": {
                        "title": "Stop",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "default": [
                            "AI:",
                            "Human:"
                        ],
                        "example": [
                            "AI:",
                            "Human:"
                        ]
                    }
                }
            },
            "QuestionnaireGPTSchema": {
                "title": "QuestionnaireGPTSchema",
                "required": [
                    "model",
                    "intro"
                ],
                "type": "object",
                "properties": {
                    "model": {
                        "$ref": "#/components/schemas/GPTModel"
                    },
                    "search_max_token": {
                        "title": "Search Max Token",
                        "type": "integer",
                        "default": 2500,
                        "example": 2500
                    },
                    "intro": {
                        "title": "Intro",
                        "minLength": 1,
                        "type": "string",
                        "example": "Share a little context about the question"
                    },
                    "system": {
                        "title": "System",
                        "type": "string",
                        "example": "You are an expert on ..."
                    },
                    "temperature": {
                        "title": "Temperature",
                        "maximum": 2,
                        "minimum": 0,
                        "type": "number",
                        "default": 0,
                        "example": 0
                    },
                    "top_p": {
                        "title": "Top P",
                        "maximum": 1,
                        "minimum": 0,
                        "type": "number",
                        "default": 1,
                        "example": 1
                    },
                    "frequency_penalty": {
                        "title": "Frequency Penalty",
                        "maximum": 2,
                        "minimum": 0,
                        "type": "number",
                        "default": 0,
                        "example": 0
                    },
                    "presence_penalty": {
                        "title": "Presence Penalty",
                        "maximum": 2,
                        "minimum": 0,
                        "type": "number",
                        "default": 0,
                        "example": 0
                    },
                    "stop": {
                        "title": "Stop",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "default": [
                            "AI:",
                            "Human:"
                        ],
                        "example": [
                            "AI:",
                            "Human:"
                        ]
                    }
                }
            },
            "QuestionnaireInsertSchema": {
                "title": "QuestionnaireInsertSchema",
                "required": [
                    "name",
                    "questions"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "title": "Name",
                        "type": "string",
                        "example": "Name of your questionnaire"
                    },
                    "questions": {
                        "title": "Questions",
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/components/schemas/QuestionSchema"
                            }
                        },
                        "example": {
                            "skincare_history": {
                                "q1": {
                                    "question": "whats your age?",
                                    "type": "text",
                                    "options": {
                                        "age": ""
                                    }
                                },
                                "q2": {
                                    "question": "whats your gender?",
                                    "type": "radio",
                                    "options": {
                                        "a": "male",
                                        "b": "female"
                                    }
                                }
                            },
                            "skincare_goal": {
                                "q1": {
                                    "question": "what is your skincare concern?",
                                    "type": "checkbox",
                                    "options": {
                                        "a": "acne",
                                        "b": "anti-aging",
                                        "c": "Closed comedons(blackheads, whiteheads)",
                                        "d": "Hyperpigmentation",
                                        "e": "Dullness",
                                        "f": "Dehydrated skin"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "QuestionnaireRequestSchema": {
                "title": "QuestionnaireRequestSchema",
                "required": [
                    "user_id",
                    "questionnaire_id",
                    "values"
                ],
                "type": "object",
                "properties": {
                    "user_id": {
                        "title": "User Id",
                        "minLength": 1,
                        "type": "string",
                        "example": "a0cc6beb-2909-459b-be55-62196af78ce4"
                    },
                    "member_id": {
                        "title": "Member Id",
                        "type": "string",
                        "example": "df3456tg-2909-459b-be55-62196afedf85"
                    },
                    "questionnaire_id": {
                        "title": "Questionnaire Id",
                        "type": "string",
                        "example": "c8e9fd30-1d85-4bd6-929a-47cc509c5756"
                    },
                    "values": {
                        "title": "Values",
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "example": {
                            "section_name": {
                                "q1": "c",
                                "q2": "a",
                                "q3": "b"
                            }
                        }
                    }
                }
            },
            "QuestionnaireUpdateSchema": {
                "title": "QuestionnaireUpdateSchema",
                "required": [
                    "questions"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "title": "Name",
                        "type": "string",
                        "example": "Name of your questionnaire"
                    },
                    "questions": {
                        "title": "Questions",
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/components/schemas/QuestionSchema"
                            }
                        },
                        "example": {
                            "skincare_history": {
                                "q1": {
                                    "question": "whats your age?",
                                    "type": "text",
                                    "options": {
                                        "age": ""
                                    }
                                },
                                "q2": {
                                    "question": "whats your gender?",
                                    "type": "radio",
                                    "options": {
                                        "a": "male",
                                        "b": "female"
                                    }
                                }
                            },
                            "skincare_goal": {
                                "q1": {
                                    "question": "what is your skincare concern?",
                                    "type": "checkbox",
                                    "options": {
                                        "a": "acne",
                                        "b": "anti-aging",
                                        "c": "Closed comedons(blackheads, whiteheads)",
                                        "d": "Hyperpigmentation",
                                        "e": "Dullness",
                                        "f": "Dehydrated skin"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "Radius": {
                "title": "Radius",
                "required": [
                    "d_from",
                    "d_to"
                ],
                "type": "object",
                "properties": {
                    "d_from": {
                        "title": "D From",
                        "type": "integer"
                    },
                    "d_to": {
                        "title": "D To",
                        "type": "integer"
                    }
                }
            },
            "RankFields": {
                "title": "RankFields",
                "required": [
                    "interval",
                    "split_size",
                    "epoch"
                ],
                "type": "object",
                "properties": {
                    "interval": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RankType"
                        },
                        "example": [
                            "weekly",
                            "bi-weekly",
                            "monthly",
                            "quarterly",
                            "yearly"
                        ]
                    },
                    "split_size": {
                        "title": "Split Size",
                        "type": "number",
                        "example": 0.1
                    },
                    "epoch": {
                        "title": "Epoch",
                        "type": "integer",
                        "example": 200
                    }
                }
            },
            "RankRecommendSchema": {
                "title": "RankRecommendSchema",
                "required": [
                    "top_n_item",
                    "interval",
                    "details"
                ],
                "type": "object",
                "properties": {
                    "top_n_item": {
                        "title": "Top N Item",
                        "type": "integer",
                        "example": 100
                    },
                    "interval": {
                        "$ref": "#/components/schemas/RankType"
                    },
                    "details": {
                        "title": "Details",
                        "type": "boolean",
                        "example": true
                    }
                }
            },
            "RankSchema": {
                "title": "RankSchema",
                "required": [
                    "rank_settings"
                ],
                "type": "object",
                "properties": {
                    "rank_settings": {
                        "$ref": "#/components/schemas/RankFields"
                    }
                }
            },
            "RankType": {
                "title": "RankType",
                "enum": [
                    "weekly",
                    "bi-weekly",
                    "monthly",
                    "quarterly",
                    "yearly"
                ],
                "type": "string",
                "description": "An enumeration."
            },
            "RatingMap": {
                "title": "RatingMap",
                "required": [
                    "user_id",
                    "item_id",
                    "rating",
                    "date"
                ],
                "type": "object",
                "properties": {
                    "user_id": {
                        "title": "User Id",
                        "minLength": 1,
                        "type": "string",
                        "example": "user_id"
                    },
                    "member_id": {
                        "title": "Member Id",
                        "minLength": 1,
                        "type": "string",
                        "example": "member_id"
                    },
                    "item_id": {
                        "title": "Item Id",
                        "minLength": 1,
                        "type": "string",
                        "example": "item_id"
                    },
                    "rating": {
                        "title": "Rating",
                        "minLength": 1,
                        "type": "string",
                        "example": "rating"
                    },
                    "date": {
                        "title": "Date",
                        "minLength": 1,
                        "type": "string",
                        "example": "rated_at"
                    }
                }
            },
            "RatingSchema": {
                "title": "RatingSchema",
                "required": [
                    "user_id",
                    "item_id",
                    "rating"
                ],
                "type": "object",
                "properties": {
                    "user_id": {
                        "title": "User Id",
                        "minLength": 1,
                        "type": "string",
                        "example": "a0cc6beb-2909-459b-be55-62196af78ce4"
                    },
                    "member_id": {
                        "title": "Member Id",
                        "type": "string",
                        "example": "df3456tg-2909-459b-be55-62196afedf85"
                    },
                    "item_id": {
                        "title": "Item Id",
                        "minLength": 1,
                        "type": "string",
                        "example": "1000764491"
                    },
                    "rating": {
                        "title": "Rating",
                        "minLength": 1,
                        "type": "string",
                        "example": "1"
                    }
                }
            },
            "ReachSchema": {
                "title": "ReachSchema",
                "type": "object",
                "properties": {
                    "start_date": {
                        "title": "Start Date",
                        "type": "string",
                        "example": "2021-08-05"
                    },
                    "end_date": {
                        "title": "End Date",
                        "type": "string",
                        "example": "2021-08-06"
                    }
                }
            },
            "ReachType": {
                "title": "ReachType",
                "enum": [
                    "total",
                    "daily"
                ],
                "type": "string",
                "description": "An enumeration."
            },
            "ReindexSchema": {
                "title": "ReindexSchema",
                "required": [
                    "index_type",
                    "mappings"
                ],
                "type": "object",
                "properties": {
                    "index_type": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/IndexType"
                            }
                        ],
                        "example": "Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire"
                    },
                    "mappings": {
                        "title": "Mappings",
                        "type": "object",
                        "example": {
                            "settings": {
                                "analysis": {}
                            },
                            "mappings": {
                                "properties": {
                                    "item": {
                                        "properties": {}
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "SaveStatSchema": {
                "title": "SaveStatSchema",
                "type": "object",
                "properties": {
                    "start_date": {
                        "title": "Start Date",
                        "type": "string",
                        "example": "2021-08-05"
                    },
                    "end_date": {
                        "title": "End Date",
                        "type": "string",
                        "example": "2021-08-06"
                    }
                }
            },
            "SearchRecommendSchema": {
                "title": "SearchRecommendSchema",
                "required": [
                    "user_id",
                    "type",
                    "storage",
                    "details"
                ],
                "type": "object",
                "properties": {
                    "user_id": {
                        "title": "User Id",
                        "minLength": 1,
                        "type": "string",
                        "example": "a0cc6beb-2909-459b-be55-62196af78ce4"
                    },
                    "member_id": {
                        "title": "Member Id",
                        "type": "string",
                        "example": "df3456tg-2909-459b-be55-62196afedf85"
                    },
                    "type": {
                        "$ref": "#/components/schemas/GPTSearchType"
                    },
                    "storage": {
                        "$ref": "#/components/schemas/StorageType"
                    },
                    "search_size": {
                        "title": "Search Size",
                        "type": "integer",
                        "default": 1000,
                        "example": 1000
                    },
                    "start": {
                        "title": "Start",
                        "type": "integer",
                        "default": 0,
                        "example": 0
                    },
                    "size": {
                        "title": "Size",
                        "type": "integer",
                        "default": 10,
                        "example": 10
                    },
                    "language": {
                        "title": "Language",
                        "type": "string",
                        "example": "en"
                    },
                    "is_keyword_enabled": {
                        "title": "Is Keyword Enabled",
                        "type": "boolean",
                        "default": false,
                        "example": false
                    },
                    "details": {
                        "title": "Details",
                        "type": "boolean",
                        "example": true
                    }
                }
            },
            "ServerError": {
                "title": "ServerError",
                "required": [
                    "detail"
                ],
                "type": "object",
                "properties": {
                    "detail": {
                        "title": "Detail",
                        "type": "object",
                        "example": {
                            "response": "Server Error",
                            "error": "error details"
                        }
                    }
                }
            },
            "Status": {
                "title": "Status",
                "enum": [
                    "claimable",
                    "pending",
                    "success",
                    "cancelled",
                    "failed"
                ],
                "type": "string",
                "description": "An enumeration."
            },
            "StorageType": {
                "title": "StorageType",
                "enum": [
                    "memory",
                    "database"
                ],
                "type": "string",
                "description": "An enumeration."
            },
            "Success": {
                "title": "Success",
                "required": [
                    "detail"
                ],
                "type": "object",
                "properties": {
                    "detail": {
                        "title": "Detail",
                        "type": "object",
                        "example": {
                            "response": "Success"
                        }
                    }
                }
            },
            "TaskType": {
                "title": "TaskType",
                "enum": [
                    "item_train",
                    "image_train",
                    "rank_train",
                    "insight_process"
                ],
                "type": "string",
                "description": "An enumeration."
            },
            "TooManyRequests": {
                "title": "TooManyRequests",
                "required": [
                    "detail"
                ],
                "type": "object",
                "properties": {
                    "detail": {
                        "title": "Detail",
                        "type": "object",
                        "example": {
                            "response": "Too many requests",
                            "error": "error details"
                        }
                    }
                }
            },
            "Unauthorized": {
                "title": "Unauthorized",
                "required": [
                    "detail"
                ],
                "type": "object",
                "properties": {
                    "detail": {
                        "title": "Detail",
                        "type": "object",
                        "example": {
                            "response": "Unauthorized",
                            "error": "error details"
                        }
                    }
                }
            },
            "UrlType": {
                "title": "UrlType",
                "enum": [
                    "STR",
                    "LIST_STR",
                    "LIST_DICT",
                    "DICT"
                ],
                "type": "string",
                "description": "An enumeration."
            },
            "UserInfo": {
                "title": "UserInfo",
                "type": "object",
                "properties": {
                    "address": {
                        "title": "Address",
                        "minLength": 1,
                        "type": "string"
                    },
                    "gender": {
                        "title": "Gender",
                        "type": "integer",
                        "example": "integer --> 1 for male or 2 for female or 3 for others"
                    },
                    "age": {
                        "title": "Age",
                        "type": "integer",
                        "example": 25
                    },
                    "user_type": {
                        "title": "User Type",
                        "type": "array",
                        "items": {
                            "type": "object"
                        },
                        "example": [
                            {
                                "key_name1": "value1_value2",
                                "separator": "_"
                            },
                            {
                                "key_name2": "value3"
                            }
                        ]
                    }
                }
            },
            "UserMap": {
                "title": "UserMap",
                "required": [
                    "user_id"
                ],
                "type": "object",
                "properties": {
                    "user_id": {
                        "title": "User Id",
                        "minLength": 1,
                        "type": "string",
                        "example": "customer_id"
                    },
                    "member_id": {
                        "title": "Member Id",
                        "minLength": 1,
                        "type": "string",
                        "example": "member_id"
                    },
                    "address": {
                        "title": "Address",
                        "minLength": 1,
                        "type": "string",
                        "example": "residence"
                    },
                    "gender": {
                        "title": "Gender",
                        "minLength": 1,
                        "type": "string",
                        "example": "gender"
                    },
                    "age": {
                        "title": "Age",
                        "minLength": 1,
                        "type": "string",
                        "example": "age"
                    },
                    "user_type": {
                        "title": "User Type",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserType"
                        },
                        "example": [
                            {
                                "type_name": "column_name1",
                                "separator": "_"
                            },
                            {
                                "type_name": "column_name2"
                            }
                        ]
                    }
                }
            },
            "UserSchema": {
                "title": "UserSchema",
                "required": [
                    "user_id",
                    "user_info"
                ],
                "type": "object",
                "properties": {
                    "user_id": {
                        "title": "User Id",
                        "minLength": 1,
                        "type": "string",
                        "example": "a0cc6beb-2909-459b-be55-62196af78ce4"
                    },
                    "member_id": {
                        "title": "Member Id",
                        "type": "string",
                        "example": "df3456tg-2909-459b-be55-62196afedf85"
                    },
                    "user_info": {
                        "$ref": "#/components/schemas/UserInfo"
                    }
                }
            },
            "UserType": {
                "title": "UserType",
                "required": [
                    "type_name"
                ],
                "type": "object",
                "properties": {
                    "type_name": {
                        "title": "Type Name",
                        "type": "string"
                    },
                    "separator": {
                        "title": "Separator",
                        "type": "string",
                        "example": "_"
                    }
                }
            },
            "ValidationError": {
                "title": "ValidationError",
                "required": [
                    "loc",
                    "msg",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "loc": {
                        "title": "Location",
                        "type": "array",
                        "items": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "integer"
                                }
                            ]
                        }
                    },
                    "msg": {
                        "title": "Message",
                        "type": "string"
                    },
                    "type": {
                        "title": "Error Type",
                        "type": "string"
                    }
                }
            }
        }
    },
    "servers": [
        {
            "url": "https://api.recommender.gigalogy.com",
            "description": "Production"
        }
    ]
}